#! /usr/bin/env python3
# Part of Dots-Minecraft project https://github.com/gbaman/dots-minecraft
#
# See LICENSE file for copyright and license details
# Written by Andrew Mulholland
# Written for Python 2.7

import sys, os, sys
import RPi.GPIO as GPIO
import time
from copy import deepcopy
import threading
from select import select
from mcpi import minecraft
import random

try:
    mc = minecraft.Minecraft.create()
except:
    print("Unable to connect to a Minecraft game? Is Minecraft running?")
    sys.exit(1)

try:   #For Python 2 and Python 3 support.
    input = raw_input
except NameError:
    pass

#Change below to True if you want to try out the program without a Dots board.
noBoard = False
enableRocketEasterEgg = True  # Actived when all bar the wings of the plane are drawn.

AIRPLANE = [[-3, 1, 2, [1, 0], 'Right Wing'], [-2, 1, 2, [1, 0], 'Right Wing'], [-2, 1, 3, [1, 0], 'Right Wing'],
         [-1, 1, -4, [1, 0], 'Right Tailplane'], [-1, 1, 2, [1, 0], 'Right Wing'], [-1, 1, 3, [1, 0], 'Right Wing'],
         [-1, 1, 4, [1, 0], 'Right Wing'], [0, 1, -4, [1, 0], 'Right Tailplane'], [0, 1, 2, [1, 0], 'Right Wing'],
         [0, 1, 3, [1, 0], 'Right Wing'], [0, 1, 4, [1, 0], 'Right Wing'], [1, 0, -3, [35, 15], 'Right Tailplane'],
         [1, 1, -4, [1, 0], 'Right Tailplane'], [1, 1, -3, [1, 0], 'Right Tailplane'],
         [1, 1, 2, [1, 0], 'Right Wing'], [1, 1, 3, [1, 0], 'Right Wing'], [1, 1, 4, [1, 0], 'Right Wing'],
         [2, 1, -4, [1, 0], 'Tail'], [2, 1, -3, [1, 0], 'Rear Cabin'], [2, 1, -2, [1, 0], 'Rear Cabin'],
         [2, 1, -1, [1, 0], 'Mid Cabin'], [2, 1, 0, [1, 0], 'Mid Cabin'], [2, 1, 1, [1, 0], 'Mid Cabin'],
         [2, 1, 2, [1, 0], 'Wing Cabin'], [2, 1, 3, [1, 0], 'Wing Cabin'], [2, 1, 4, [1, 0], 'Wing Cabin'],
         [2, 1, 5, [1, 0], 'Forward Cabin'], [2, 1, 6, [1, 0], 'Forward Cabin'], [2, 1, 7, [1, 0], 'Forward Cabin'],
         [2, 1, 8, [1, 0], 'Cockpit'], [2, 2, -4, [1, 0], 'Tail'], [2, 2, -3, [1, 0], 'Rear Cabin'],
         [2, 2, -2, [20, 0], 'Rear Cabin'], [2, 2, -1, [1, 0], 'Mid Cabin'], [2, 2, 0, [20, 0], 'Mid Cabin'],
         [2, 2, 1, [1, 0], 'Mid Cabin'], [2, 2, 2, [20, 0], 'Wing Cabin'], [2, 2, 3, [1, 0], 'Wing Cabin'],
         [2, 2, 4, [20, 0], 'Wing Cabin'], [2, 2, 5, [1, 0], 'Forward Cabin'], [2, 2, 6, [20, 0], 'Forward Cabin'],
         [2, 2, 7, [1, 0], 'Forward Cabin'], [2, 2, 8, [20, 0], 'Cockpit'], [3, 0, 8, [35, 15], 'Cockpit'],
         [3, 1, -4, [1, 0], 'Tail'], [3, 1, -3, [1, 0], 'Rear Cabin'], [3, 1, -2, [1, 0], 'Rear Cabin'],
         [3, 1, -1, [1, 0], 'Mid Cabin'], [3, 1, 0, [1, 0], 'Mid Cabin'], [3, 1, 1, [1, 0], 'Mid Cabin'],
         [3, 1, 2, [1, 0], 'Wing Cabin'], [3, 1, 3, [1, 0], 'Wing Cabin'], [3, 1, 4, [1, 0], 'Wing Cabin'],
         [3, 1, 5, [1, 0], 'Forward Cabin'], [3, 1, 6, [1, 0], 'Forward Cabin'], [3, 1, 7, [1, 0], 'Forward Cabin'],
         [3, 1, 8, [1, 0], 'Cockpit'], [3, 1, 9, [1, 0], 'Cockpit'], [3, 2, -4, [1, 0], 'Tail'],
         [3, 2, 9, [20, 0], 'Cockpit'], [3, 3, -4, [1, 0], 'Tail'], [3, 3, -3, [1, 0], 'Rear Cabin'],
         [3, 3, -2, [1, 0], 'Rear Cabin'], [3, 3, -1, [1, 0], 'Mid Cabin'], [3, 3, 0, [1, 0], 'Mid Cabin'],
         [3, 3, 1, [1, 0], 'Mid Cabin'], [3, 3, 2, [1, 0], 'Wing Cabin'], [3, 3, 3, [1, 0], 'Wing Cabin'],
         [3, 3, 4, [1, 0], 'Wing Cabin'], [3, 3, 5, [1, 0], 'Forward Cabin'], [3, 3, 6, [1, 0], 'Forward Cabin'],
         [3, 3, 7, [1, 0], 'Forward Cabin'], [3, 3, 8, [20, 0], 'Cockpit'], [3, 4, -4, [1, 0], 'Tail'],
         [4, 1, -4, [1, 0], 'Tail'], [4, 1, -3, [1, 0], 'Rear Cabin'], [4, 1, -2, [1, 0], 'Rear Cabin'],
         [4, 1, -1, [1, 0], 'Mid Cabin'], [4, 1, 0, [1, 0], 'Mid Cabin'], [4, 1, 1, [1, 0], 'Mid Cabin'],
         [4, 1, 2, [1, 0], 'Wing Cabin'], [4, 1, 3, [1, 0], 'Wing Cabin'], [4, 1, 4, [1, 0], 'Wing Cabin'],
         [4, 1, 5, [1, 0], 'Forward Cabin'], [4, 1, 6, [1, 0], 'Forward Cabin'], [4, 1, 7, [1, 0], 'Forward Cabin'],
         [4, 1, 8, [1, 0], 'Cockpit'], [4, 2, -4, [1, 0], 'Tail'], [4, 2, -3, [1, 0], 'Rear Cabin'],
         [4, 2, -2, [20, 0], 'Rear Cabin'], [4, 2, -1, [1, 0], 'Mid Cabin'], [4, 2, 0, [20, 0], 'Mid Cabin'],
         [4, 2, 1, [1, 0], 'Mid Cabin'], [4, 2, 2, [20, 0], 'Wing Cabin'], [4, 2, 3, [1, 0], 'Wing Cabin'],
         [4, 2, 4, [20, 0], 'Wing Cabin'], [4, 2, 5, [1, 0], 'Forward Cabin'], [4, 2, 6, [20, 0], 'Forward Cabin'],
         [4, 2, 7, [1, 0], 'Forward Cabin'], [4, 2, 8, [20, 0], 'Cockpit'], [5, 0, -3, [35, 15], 'Left Tailplane'],
         [5, 1, -4, [1, 0], 'Left Tailplane'], [5, 1, -3, [1, 0], 'Left Tailplane'], [5, 1, 2, [1, 0], 'Left Wing'],
         [5, 1, 3, [1, 0], 'Left Wing'], [5, 1, 4, [1, 0], 'Left Wing'], [6, 1, -4, [1, 0], 'Left Tailplane'],
         [6, 1, 2, [1, 0], 'Left Wing'], [6, 1, 3, [1, 0], 'Left Wing'], [6, 1, 4, [1, 0], 'Left Wing'],
         [7, 1, -4, [1, 0], 'Left Tailplane'], [7, 1, 2, [1, 0], 'Left Wing'], [7, 1, 3, [1, 0], 'Left Wing'],
         [7, 1, 4, [1, 0], 'Left Wing'], [8, 1, 2, [1, 0], 'Left Wing'], [8, 1, 3, [1, 0], 'Left Wing'],
         [9, 1, 2, [1, 0], 'Left Wing']]

#Failed sign
FAILED = [[4, 1, 15, [1, 0]], [4, 1, 16, [1, 0]], [4, 1, 17, [1, 0]], [4, 1, 18, [1, 0]], [4, 1, 19, [1, 0]],
          [4, 1, 20, [1, 0]], [4, 1, 21, [1, 0]], [4, 1, 22, [1, 0]], [4, 1, 23, [1, 0]], [4, 1, 24, [1, 0]],
          [4, 1, 25, [1, 0]], [4, 1, 26, [1, 0]], [4, 1, 27, [1, 0]], [4, 1, 28, [1, 0]], [4, 1, 29, [1, 0]],
          [4, 1, 30, [1, 0]], [4, 1, 31, [1, 0]], [4, 1, 32, [1, 0]], [4, 1, 33, [1, 0]], [4, 1, 34, [1, 0]],
          [4, 1, 35, [1, 0]], [4, 1, 36, [1, 0]], [4, 1, 37, [1, 0]], [4, 1, 38, [1, 0]], [4, 1, 39, [1, 0]],
          [4, 2, 15, [1, 0]], [4, 2, 16, [35, 14]], [4, 2, 19, [35, 14]], [4, 2, 23, [35, 14]], [4, 2, 25, [35, 14]],
          [4, 2, 27, [35, 14]], [4, 2, 28, [35, 14]], [4, 2, 29, [35, 14]], [4, 2, 31, [35, 14]], [4, 2, 32, [35, 14]],
          [4, 2, 33, [35, 14]], [4, 2, 35, [35, 14]], [4, 2, 36, [35, 14]], [4, 2, 37, [35, 14]], [4, 2, 39, [1, 0]],
          [4, 3, 15, [1, 0]], [4, 3, 16, [35, 14]], [4, 3, 19, [35, 14]], [4, 3, 20, [35, 14]], [4, 3, 21, [35, 14]],
          [4, 3, 22, [35, 14]], [4, 3, 23, [35, 14]], [4, 3, 25, [35, 14]], [4, 3, 27, [35, 14]], [4, 3, 31, [35, 14]],
          [4, 3, 35, [35, 14]], [4, 3, 38, [35, 14]], [4, 3, 39, [1, 0]], [4, 4, 15, [1, 0]], [4, 4, 16, [35, 14]],
          [4, 4, 17, [35, 14]], [4, 4, 20, [35, 14]], [4, 4, 22, [35, 14]], [4, 4, 25, [35, 14]], [4, 4, 27, [35, 14]],
          [4, 4, 31, [35, 14]], [4, 4, 32, [35, 14]], [4, 4, 33, [35, 14]], [4, 4, 35, [35, 14]], [4, 4, 38, [35, 14]],
          [4, 4, 39, [1, 0]], [4, 5, 15, [1, 0]], [4, 5, 16, [35, 14]], [4, 5, 20, [35, 14]], [4, 5, 22, [35, 14]],
          [4, 5, 25, [35, 14]], [4, 5, 27, [35, 14]], [4, 5, 31, [35, 14]], [4, 5, 35, [35, 14]], [4, 5, 38, [35, 14]],
          [4, 5, 39, [1, 0]], [4, 6, 15, [1, 0]], [4, 6, 16, [35, 14]], [4, 6, 17, [35, 14]], [4, 6, 18, [35, 14]],
          [4, 6, 21, [35, 14]], [4, 6, 25, [35, 14]], [4, 6, 27, [35, 14]], [4, 6, 31, [35, 14]], [4, 6, 32, [35, 14]],
          [4, 6, 33, [35, 14]], [4, 6, 35, [35, 14]], [4, 6, 36, [35, 14]], [4, 6, 37, [35, 14]], [4, 6, 39, [1, 0]],
          [4, 7, 15, [1, 0]], [4, 7, 16, [1, 0]], [4, 7, 17, [1, 0]], [4, 7, 18, [1, 0]], [4, 7, 19, [1, 0]],
          [4, 7, 20, [1, 0]], [4, 7, 21, [1, 0]], [4, 7, 22, [1, 0]], [4, 7, 23, [1, 0]], [4, 7, 24, [1, 0]],
          [4, 7, 25, [1, 0]], [4, 7, 26, [1, 0]], [4, 7, 27, [1, 0]], [4, 7, 28, [1, 0]], [4, 7, 29, [1, 0]],
          [4, 7, 30, [1, 0]], [4, 7, 31, [1, 0]], [4, 7, 32, [1, 0]], [4, 7, 33, [1, 0]], [4, 7, 34, [1, 0]],
          [4, 7, 35, [1, 0]], [4, 7, 36, [1, 0]], [4, 7, 37, [1, 0]], [4, 7, 38, [1, 0]], [4, 7, 39, [1, 0]]]

#Success sign
SUCCESS = [[4, 1, 46, [35, 5]], [4, 2, 46, [35, 5]], [4, 3, 46, [35, 5]], [4, 4, 46, [35, 5]], [4, 5, 46, [35, 5]],
           [4, 6, 46, [35, 5]], [4, 7, 46, [35, 5]], [4, 1, 45, [35, 5]], [4, 3, 45, [1, 0]], [4, 4, 45, [1, 0]],
           [4, 6, 45, [1, 0]], [4, 7, 45, [35, 5]], [4, 1, 44, [35, 5]], [4, 2, 44, [1, 0]], [4, 4, 44, [1, 0]],
           [4, 6, 44, [1, 0]], [4, 7, 44, [35, 5]], [4, 1, 43, [35, 5]], [4, 2, 43, [1, 0]], [4, 4, 43, [1, 0]],
           [4, 6, 43, [1, 0]], [4, 7, 43, [35, 5]], [4, 1, 42, [35, 5]], [4, 2, 42, [1, 0]], [4, 4, 42, [1, 0]],
           [4, 5, 42, [1, 0]], [4, 7, 42, [35, 5]], [4, 1, 41, [35, 5]], [4, 7, 41, [35, 5]], [4, 1, 40, [35, 5]],
           [4, 3, 40, [1, 0]], [4, 4, 40, [1, 0]], [4, 6, 40, [1, 0]], [4, 7, 40, [35, 5]], [4, 1, 39, [35, 5]],
           [4, 2, 39, [1, 0]], [4, 4, 39, [1, 0]], [4, 6, 39, [1, 0]], [4, 7, 39, [35, 5]], [4, 1, 38, [35, 5]],
           [4, 2, 38, [1, 0]], [4, 4, 38, [1, 0]], [4, 6, 38, [1, 0]], [4, 7, 38, [35, 5]], [4, 1, 37, [35, 5]],
           [4, 2, 37, [1, 0]], [4, 4, 37, [1, 0]], [4, 5, 37, [1, 0]], [4, 7, 37, [35, 5]], [4, 1, 36, [35, 5]],
           [4, 7, 36, [35, 5]], [4, 1, 35, [35, 5]], [4, 2, 35, [1, 0]], [4, 6, 35, [1, 0]], [4, 7, 35, [35, 5]],
           [4, 1, 34, [35, 5]], [4, 2, 34, [1, 0]], [4, 4, 34, [1, 0]], [4, 6, 34, [1, 0]], [4, 7, 34, [35, 5]],
           [4, 1, 33, [35, 5]], [4, 2, 33, [1, 0]], [4, 4, 33, [1, 0]], [4, 6, 33, [1, 0]], [4, 7, 33, [35, 5]],
           [4, 1, 32, [35, 5]], [4, 2, 32, [1, 0]], [4, 3, 32, [1, 0]], [4, 4, 32, [1, 0]], [4, 5, 32, [1, 0]],
           [4, 6, 32, [1, 0]], [4, 7, 32, [35, 5]], [4, 1, 31, [35, 5]], [4, 7, 31, [35, 5]], [4, 1, 30, [35, 5]],
           [4, 2, 30, [1, 0]], [4, 6, 30, [1, 0]], [4, 7, 30, [35, 5]], [4, 1, 29, [35, 5]], [4, 2, 29, [1, 0]],
           [4, 6, 29, [1, 0]], [4, 7, 29, [35, 5]], [4, 1, 28, [35, 5]], [4, 2, 28, [1, 0]], [4, 6, 28, [1, 0]],
           [4, 7, 28, [35, 5]], [4, 1, 27, [35, 5]], [4, 3, 27, [1, 0]], [4, 4, 27, [1, 0]], [4, 5, 27, [1, 0]],
           [4, 7, 27, [35, 5]], [4, 1, 26, [35, 5]], [4, 7, 26, [35, 5]], [4, 1, 25, [35, 5]], [4, 2, 25, [1, 0]],
           [4, 6, 25, [1, 0]], [4, 7, 25, [35, 5]], [4, 1, 24, [35, 5]], [4, 2, 24, [1, 0]], [4, 6, 24, [1, 0]],
           [4, 7, 24, [35, 5]], [4, 1, 23, [35, 5]], [4, 2, 23, [1, 0]], [4, 6, 23, [1, 0]], [4, 7, 23, [35, 5]],
           [4, 1, 22, [35, 5]], [4, 3, 22, [1, 0]], [4, 4, 22, [1, 0]], [4, 5, 22, [1, 0]], [4, 7, 22, [35, 5]],
           [4, 1, 21, [35, 5]], [4, 7, 21, [35, 5]], [4, 1, 20, [35, 5]], [4, 2, 20, [1, 0]], [4, 3, 20, [1, 0]],
           [4, 4, 20, [1, 0]], [4, 5, 20, [1, 0]], [4, 6, 20, [1, 0]], [4, 7, 20, [35, 5]], [4, 1, 19, [35, 5]],
           [4, 2, 19, [1, 0]], [4, 7, 19, [35, 5]], [4, 1, 18, [35, 5]], [4, 2, 18, [1, 0]], [4, 7, 18, [35, 5]],
           [4, 1, 17, [35, 5]], [4, 3, 17, [1, 0]], [4, 4, 17, [1, 0]], [4, 5, 17, [1, 0]], [4, 6, 17, [1, 0]],
           [4, 7, 17, [35, 5]], [4, 1, 16, [35, 5]], [4, 7, 16, [35, 5]], [4, 1, 15, [35, 5]], [4, 3, 15, [1, 0]],
           [4, 4, 15, [1, 0]], [4, 6, 15, [1, 0]], [4, 7, 15, [35, 5]], [4, 1, 14, [35, 5]], [4, 2, 14, [1, 0]],
           [4, 4, 14, [1, 0]], [4, 6, 14, [1, 0]], [4, 7, 14, [35, 5]], [4, 1, 13, [35, 5]], [4, 2, 13, [1, 0]],
           [4, 4, 13, [1, 0]], [4, 6, 13, [1, 0]], [4, 7, 13, [35, 5]], [4, 1, 12, [35, 5]], [4, 2, 12, [1, 0]],
           [4, 4, 12, [1, 0]], [4, 5, 12, [1, 0]], [4, 7, 12, [35, 5]], [4, 1, 11, [35, 5]], [4, 2, 11, [35, 5]],
           [4, 3, 11, [35, 5]], [4, 4, 11, [35, 5]], [4, 5, 11, [35, 5]], [4, 6, 11, [35, 5]], [4, 7, 11, [35, 5]]]

#Normal cloud
CLOUD = [[0, 25, 0, [1, 0]], [1, 25, 0, [1, 0]], [2, 25, 0, [1, 0]], [3, 25, 0, [1, 0]], [2, 24, 1, [1, 0]],
         [-2, 25, 1, [1, 0]], [-1, 25, 1, [1, 0]], [0, 25, 1, [1, 0]], [1, 25, 1, [1, 0]], [2, 25, 1, [1, 0]],
         [3, 25, 1, [1, 0]], [4, 25, 1, [1, 0]], [5, 25, 1, [1, 0]], [1, 26, 1, [1, 0]], [2, 26, 1, [1, 0]],
         [0, 24, 2, [1, 0]], [1, 24, 2, [1, 0]], [2, 24, 2, [1, 0]], [3, 24, 2, [1, 0]], [4, 24, 2, [1, 0]],
         [-5, 25, 2, [1, 0]], [-4, 25, 2, [1, 0]], [-3, 25, 2, [1, 0]], [-2, 25, 2, [1, 0]], [-1, 25, 2, [1, 0]],
         [0, 25, 2, [1, 0]], [1, 25, 2, [1, 0]], [2, 25, 2, [1, 0]], [3, 25, 2, [1, 0]], [4, 25, 2, [1, 0]],
         [5, 25, 2, [1, 0]], [6, 25, 2, [1, 0]], [-1, 26, 2, [1, 0]], [0, 26, 2, [1, 0]], [1, 26, 2, [1, 0]],
         [2, 26, 2, [1, 0]], [3, 26, 2, [1, 0]], [4, 26, 2, [1, 0]], [-4, 24, 3, [1, 0]], [-3, 24, 3, [1, 0]],
         [-2, 24, 3, [1, 0]], [-1, 24, 3, [1, 0]], [0, 24, 3, [1, 0]], [1, 24, 3, [1, 0]], [2, 24, 3, [1, 0]],
         [3, 24, 3, [1, 0]], [4, 24, 3, [1, 0]], [5, 24, 3, [1, 0]], [-6, 25, 3, [1, 0]], [-5, 25, 3, [1, 0]],
         [-4, 25, 3, [1, 0]], [-3, 25, 3, [1, 0]], [-2, 25, 3, [1, 0]], [-1, 25, 3, [1, 0]], [0, 25, 3, [1, 0]],
         [1, 25, 3, [1, 0]], [2, 25, 3, [1, 0]], [3, 25, 3, [1, 0]], [4, 25, 3, [1, 0]], [5, 25, 3, [1, 0]],
         [6, 25, 3, [1, 0]], [-4, 26, 3, [1, 0]], [-3, 26, 3, [1, 0]], [-2, 26, 3, [1, 0]], [-1, 26, 3, [1, 0]],
         [0, 26, 3, [1, 0]], [1, 26, 3, [1, 0]], [2, 26, 3, [1, 0]], [3, 26, 3, [1, 0]], [4, 26, 3, [1, 0]],
         [5, 26, 3, [1, 0]], [-5, 24, 4, [1, 0]], [-4, 24, 4, [1, 0]], [-3, 24, 4, [1, 0]], [-2, 24, 4, [1, 0]],
         [-1, 24, 4, [1, 0]], [0, 24, 4, [1, 0]], [1, 24, 4, [1, 0]], [2, 24, 4, [1, 0]], [3, 24, 4, [1, 0]],
         [4, 24, 4, [1, 0]], [5, 24, 4, [1, 0]], [-6, 25, 4, [1, 0]], [-5, 25, 4, [1, 0]], [-4, 25, 4, [1, 0]],
         [-3, 25, 4, [1, 0]], [-2, 25, 4, [1, 0]], [-1, 25, 4, [1, 0]], [0, 25, 4, [1, 0]], [1, 25, 4, [1, 0]],
         [2, 25, 4, [1, 0]], [3, 25, 4, [1, 0]], [4, 25, 4, [1, 0]], [5, 25, 4, [1, 0]], [6, 25, 4, [1, 0]],
         [-5, 26, 4, [1, 0]], [-4, 26, 4, [1, 0]], [-3, 26, 4, [1, 0]], [-2, 26, 4, [1, 0]], [-1, 26, 4, [1, 0]],
         [0, 26, 4, [1, 0]], [1, 26, 4, [1, 0]], [2, 26, 4, [1, 0]], [3, 26, 4, [1, 0]], [4, 26, 4, [1, 0]],
         [5, 26, 4, [1, 0]], [-5, 24, 5, [1, 0]], [-4, 24, 5, [1, 0]], [-3, 24, 5, [1, 0]], [-2, 24, 5, [1, 0]],
         [-1, 24, 5, [1, 0]], [0, 24, 5, [1, 0]], [1, 24, 5, [1, 0]], [2, 24, 5, [1, 0]], [3, 24, 5, [1, 0]],
         [4, 24, 5, [1, 0]], [5, 24, 5, [1, 0]], [6, 24, 5, [1, 0]], [-6, 25, 5, [1, 0]], [-5, 25, 5, [1, 0]],
         [-4, 25, 5, [1, 0]], [-3, 25, 5, [1, 0]], [-2, 25, 5, [1, 0]], [-1, 25, 5, [1, 0]], [0, 25, 5, [1, 0]],
         [1, 25, 5, [1, 0]], [2, 25, 5, [1, 0]], [3, 25, 5, [1, 0]], [4, 25, 5, [1, 0]], [5, 25, 5, [1, 0]],
         [6, 25, 5, [1, 0]], [-5, 26, 5, [1, 0]], [-4, 26, 5, [1, 0]], [-3, 26, 5, [1, 0]], [-2, 26, 5, [1, 0]],
         [-1, 26, 5, [1, 0]], [0, 26, 5, [1, 0]], [1, 26, 5, [1, 0]], [2, 26, 5, [1, 0]], [3, 26, 5, [1, 0]],
         [4, 26, 5, [1, 0]], [5, 26, 5, [1, 0]], [6, 26, 5, [1, 0]], [-5, 24, 6, [1, 0]], [-4, 24, 6, [1, 0]],
         [-3, 24, 6, [1, 0]], [-2, 24, 6, [1, 0]], [-1, 24, 6, [1, 0]], [0, 24, 6, [1, 0]], [1, 24, 6, [1, 0]],
         [2, 24, 6, [1, 0]], [3, 24, 6, [1, 0]], [4, 24, 6, [1, 0]], [5, 24, 6, [1, 0]], [-6, 25, 6, [1, 0]],
         [-5, 25, 6, [1, 0]], [-4, 25, 6, [1, 0]], [-3, 25, 6, [1, 0]], [-2, 25, 6, [1, 0]], [-1, 25, 6, [1, 0]],
         [0, 25, 6, [1, 0]], [1, 25, 6, [1, 0]], [2, 25, 6, [1, 0]], [3, 25, 6, [1, 0]], [4, 25, 6, [1, 0]],
         [5, 25, 6, [1, 0]], [6, 25, 6, [1, 0]], [-5, 26, 6, [1, 0]], [-4, 26, 6, [1, 0]], [-3, 26, 6, [1, 0]],
         [-2, 26, 6, [1, 0]], [-1, 26, 6, [1, 0]], [0, 26, 6, [1, 0]], [1, 26, 6, [1, 0]], [2, 26, 6, [1, 0]],
         [3, 26, 6, [1, 0]], [4, 26, 6, [1, 0]], [5, 26, 6, [1, 0]], [-4, 24, 7, [1, 0]], [-3, 24, 7, [1, 0]],
         [-2, 24, 7, [1, 0]], [-1, 24, 7, [1, 0]], [0, 24, 7, [1, 0]], [1, 24, 7, [1, 0]], [2, 24, 7, [1, 0]],
         [3, 24, 7, [1, 0]], [4, 24, 7, [1, 0]], [5, 24, 7, [1, 0]], [-6, 25, 7, [1, 0]], [-5, 25, 7, [1, 0]],
         [-4, 25, 7, [1, 0]], [-3, 25, 7, [1, 0]], [-2, 25, 7, [1, 0]], [-1, 25, 7, [1, 0]], [0, 25, 7, [1, 0]],
         [1, 25, 7, [1, 0]], [2, 25, 7, [1, 0]], [3, 25, 7, [1, 0]], [4, 25, 7, [1, 0]], [5, 25, 7, [1, 0]],
         [6, 25, 7, [1, 0]], [-4, 26, 7, [1, 0]], [-3, 26, 7, [1, 0]], [-2, 26, 7, [1, 0]], [-1, 26, 7, [1, 0]],
         [0, 26, 7, [1, 0]], [1, 26, 7, [1, 0]], [2, 26, 7, [1, 0]], [3, 26, 7, [1, 0]], [4, 26, 7, [1, 0]],
         [5, 26, 7, [1, 0]], [-1, 24, 8, [1, 0]], [0, 24, 8, [1, 0]], [1, 24, 8, [1, 0]], [2, 24, 8, [1, 0]],
         [3, 24, 8, [1, 0]], [4, 24, 8, [1, 0]], [-5, 25, 8, [1, 0]], [-4, 25, 8, [1, 0]], [-3, 25, 8, [1, 0]],
         [-2, 25, 8, [1, 0]], [-1, 25, 8, [1, 0]], [0, 25, 8, [1, 0]], [1, 25, 8, [1, 0]], [2, 25, 8, [1, 0]],
         [3, 25, 8, [1, 0]], [4, 25, 8, [1, 0]], [5, 25, 8, [1, 0]], [6, 25, 8, [1, 0]], [-1, 26, 8, [1, 0]],
         [0, 26, 8, [1, 0]], [1, 26, 8, [1, 0]], [2, 26, 8, [1, 0]], [3, 26, 8, [1, 0]], [4, 26, 8, [1, 0]],
         [1, 24, 9, [1, 0]], [2, 24, 9, [1, 0]], [3, 24, 9, [1, 0]], [-2, 25, 9, [1, 0]], [-1, 25, 9, [1, 0]],
         [0, 25, 9, [1, 0]], [1, 25, 9, [1, 0]], [2, 25, 9, [1, 0]], [3, 25, 9, [1, 0]], [4, 25, 9, [1, 0]],
         [5, 25, 9, [1, 0]], [1, 26, 9, [1, 0]], [2, 26, 9, [1, 0]], [3, 26, 9, [1, 0]], [4, 26, 9, [1, 0]]]

#Rotated cloud
CLOUDROTATE = [[0, 25, 0, [1, 0]], [0, 25, 1, [1, 0]], [0, 25, 2, [1, 0]], [0, 25, 3, [1, 0]], [-1, 24, 2, [1, 0]],
               [-1, 25, -2, [1, 0]], [-1, 25, -1, [1, 0]], [-1, 25, 0, [1, 0]], [-1, 25, 1, [1, 0]],
               [-1, 25, 2, [1, 0]], [-1, 25, 3, [1, 0]], [-1, 25, 4, [1, 0]], [-1, 25, 5, [1, 0]], [-1, 26, 1, [1, 0]],
               [-1, 26, 2, [1, 0]], [-2, 24, 0, [1, 0]], [-2, 24, 1, [1, 0]], [-2, 24, 2, [1, 0]], [-2, 24, 3, [1, 0]],
               [-2, 24, 4, [1, 0]], [-2, 25, -5, [1, 0]], [-2, 25, -4, [1, 0]], [-2, 25, -3, [1, 0]],
               [-2, 25, -2, [1, 0]], [-2, 25, -1, [1, 0]], [-2, 25, 0, [1, 0]], [-2, 25, 1, [1, 0]],
               [-2, 25, 2, [1, 0]], [-2, 25, 3, [1, 0]], [-2, 25, 4, [1, 0]], [-2, 25, 5, [1, 0]], [-2, 25, 6, [1, 0]],
               [-2, 26, -1, [1, 0]], [-2, 26, 0, [1, 0]], [-2, 26, 1, [1, 0]], [-2, 26, 2, [1, 0]], [-2, 26, 3, [1, 0]],
               [-2, 26, 4, [1, 0]], [-3, 24, -4, [1, 0]], [-3, 24, -3, [1, 0]], [-3, 24, -2, [1, 0]],
               [-3, 24, -1, [1, 0]], [-3, 24, 0, [1, 0]], [-3, 24, 1, [1, 0]], [-3, 24, 2, [1, 0]], [-3, 24, 3, [1, 0]],
               [-3, 24, 4, [1, 0]], [-3, 24, 5, [1, 0]], [-3, 25, -6, [1, 0]], [-3, 25, -5, [1, 0]],
               [-3, 25, -4, [1, 0]], [-3, 25, -3, [1, 0]], [-3, 25, -2, [1, 0]], [-3, 25, -1, [1, 0]],
               [-3, 25, 0, [1, 0]], [-3, 25, 1, [1, 0]], [-3, 25, 2, [1, 0]], [-3, 25, 3, [1, 0]], [-3, 25, 4, [1, 0]],
               [-3, 25, 5, [1, 0]], [-3, 25, 6, [1, 0]], [-3, 26, -4, [1, 0]], [-3, 26, -3, [1, 0]],
               [-3, 26, -2, [1, 0]], [-3, 26, -1, [1, 0]], [-3, 26, 0, [1, 0]], [-3, 26, 1, [1, 0]],
               [-3, 26, 2, [1, 0]], [-3, 26, 3, [1, 0]], [-3, 26, 4, [1, 0]], [-3, 26, 5, [1, 0]], [-4, 24, -5, [1, 0]],
               [-4, 24, -4, [1, 0]], [-4, 24, -3, [1, 0]], [-4, 24, -2, [1, 0]], [-4, 24, -1, [1, 0]],
               [-4, 24, 0, [1, 0]], [-4, 24, 1, [1, 0]], [-4, 24, 2, [1, 0]], [-4, 24, 3, [1, 0]], [-4, 24, 4, [1, 0]],
               [-4, 24, 5, [1, 0]], [-4, 25, -6, [1, 0]], [-4, 25, -5, [1, 0]], [-4, 25, -4, [1, 0]],
               [-4, 25, -3, [1, 0]], [-4, 25, -2, [1, 0]], [-4, 25, -1, [1, 0]], [-4, 25, 0, [1, 0]],
               [-4, 25, 1, [1, 0]], [-4, 25, 2, [1, 0]], [-4, 25, 3, [1, 0]], [-4, 25, 4, [1, 0]], [-4, 25, 5, [1, 0]],
               [-4, 25, 6, [1, 0]], [-4, 26, -5, [1, 0]], [-4, 26, -4, [1, 0]], [-4, 26, -3, [1, 0]],
               [-4, 26, -2, [1, 0]], [-4, 26, -1, [1, 0]], [-4, 26, 0, [1, 0]], [-4, 26, 1, [1, 0]],
               [-4, 26, 2, [1, 0]], [-4, 26, 3, [1, 0]], [-4, 26, 4, [1, 0]], [-4, 26, 5, [1, 0]], [-5, 24, -5, [1, 0]],
               [-5, 24, -4, [1, 0]], [-5, 24, -3, [1, 0]], [-5, 24, -2, [1, 0]], [-5, 24, -1, [1, 0]],
               [-5, 24, 0, [1, 0]], [-5, 24, 1, [1, 0]], [-5, 24, 2, [1, 0]], [-5, 24, 3, [1, 0]], [-5, 24, 4, [1, 0]],
               [-5, 24, 5, [1, 0]], [-5, 24, 6, [1, 0]], [-5, 25, -6, [1, 0]], [-5, 25, -5, [1, 0]],
               [-5, 25, -4, [1, 0]], [-5, 25, -3, [1, 0]], [-5, 25, -2, [1, 0]], [-5, 25, -1, [1, 0]],
               [-5, 25, 0, [1, 0]], [-5, 25, 1, [1, 0]], [-5, 25, 2, [1, 0]], [-5, 25, 3, [1, 0]], [-5, 25, 4, [1, 0]],
               [-5, 25, 5, [1, 0]], [-5, 25, 6, [1, 0]], [-5, 26, -5, [1, 0]], [-5, 26, -4, [1, 0]],
               [-5, 26, -3, [1, 0]], [-5, 26, -2, [1, 0]], [-5, 26, -1, [1, 0]], [-5, 26, 0, [1, 0]],
               [-5, 26, 1, [1, 0]], [-5, 26, 2, [1, 0]], [-5, 26, 3, [1, 0]], [-5, 26, 4, [1, 0]], [-5, 26, 5, [1, 0]],
               [-5, 26, 6, [1, 0]], [-6, 24, -5, [1, 0]], [-6, 24, -4, [1, 0]], [-6, 24, -3, [1, 0]],
               [-6, 24, -2, [1, 0]], [-6, 24, -1, [1, 0]], [-6, 24, 0, [1, 0]], [-6, 24, 1, [1, 0]],
               [-6, 24, 2, [1, 0]], [-6, 24, 3, [1, 0]], [-6, 24, 4, [1, 0]], [-6, 24, 5, [1, 0]], [-6, 25, -6, [1, 0]],
               [-6, 25, -5, [1, 0]], [-6, 25, -4, [1, 0]], [-6, 25, -3, [1, 0]], [-6, 25, -2, [1, 0]],
               [-6, 25, -1, [1, 0]], [-6, 25, 0, [1, 0]], [-6, 25, 1, [1, 0]], [-6, 25, 2, [1, 0]], [-6, 25, 3, [1, 0]],
               [-6, 25, 4, [1, 0]], [-6, 25, 5, [1, 0]], [-6, 25, 6, [1, 0]], [-6, 26, -5, [1, 0]],
               [-6, 26, -4, [1, 0]], [-6, 26, -3, [1, 0]], [-6, 26, -2, [1, 0]], [-6, 26, -1, [1, 0]],
               [-6, 26, 0, [1, 0]], [-6, 26, 1, [1, 0]], [-6, 26, 2, [1, 0]], [-6, 26, 3, [1, 0]], [-6, 26, 4, [1, 0]],
               [-6, 26, 5, [1, 0]], [-7, 24, -4, [1, 0]], [-7, 24, -3, [1, 0]], [-7, 24, -2, [1, 0]],
               [-7, 24, -1, [1, 0]], [-7, 24, 0, [1, 0]], [-7, 24, 1, [1, 0]], [-7, 24, 2, [1, 0]], [-7, 24, 3, [1, 0]],
               [-7, 24, 4, [1, 0]], [-7, 24, 5, [1, 0]], [-7, 25, -6, [1, 0]], [-7, 25, -5, [1, 0]],
               [-7, 25, -4, [1, 0]], [-7, 25, -3, [1, 0]], [-7, 25, -2, [1, 0]], [-7, 25, -1, [1, 0]],
               [-7, 25, 0, [1, 0]], [-7, 25, 1, [1, 0]], [-7, 25, 2, [1, 0]], [-7, 25, 3, [1, 0]], [-7, 25, 4, [1, 0]],
               [-7, 25, 5, [1, 0]], [-7, 25, 6, [1, 0]], [-7, 26, -4, [1, 0]], [-7, 26, -3, [1, 0]],
               [-7, 26, -2, [1, 0]], [-7, 26, -1, [1, 0]], [-7, 26, 0, [1, 0]], [-7, 26, 1, [1, 0]],
               [-7, 26, 2, [1, 0]], [-7, 26, 3, [1, 0]], [-7, 26, 4, [1, 0]], [-7, 26, 5, [1, 0]], [-8, 24, -1, [1, 0]],
               [-8, 24, 0, [1, 0]], [-8, 24, 1, [1, 0]], [-8, 24, 2, [1, 0]], [-8, 24, 3, [1, 0]], [-8, 24, 4, [1, 0]],
               [-8, 25, -5, [1, 0]], [-8, 25, -4, [1, 0]], [-8, 25, -3, [1, 0]], [-8, 25, -2, [1, 0]],
               [-8, 25, -1, [1, 0]], [-8, 25, 0, [1, 0]], [-8, 25, 1, [1, 0]], [-8, 25, 2, [1, 0]], [-8, 25, 3, [1, 0]],
               [-8, 25, 4, [1, 0]], [-8, 25, 5, [1, 0]], [-8, 25, 6, [1, 0]], [-8, 26, -1, [1, 0]], [-8, 26, 0, [1, 0]],
               [-8, 26, 1, [1, 0]], [-8, 26, 2, [1, 0]], [-8, 26, 3, [1, 0]], [-8, 26, 4, [1, 0]], [-9, 24, 1, [1, 0]],
               [-9, 24, 2, [1, 0]], [-9, 24, 3, [1, 0]], [-9, 25, -2, [1, 0]], [-9, 25, -1, [1, 0]],
               [-9, 25, 0, [1, 0]], [-9, 25, 1, [1, 0]], [-9, 25, 2, [1, 0]], [-9, 25, 3, [1, 0]], [-9, 25, 4, [1, 0]],
               [-9, 25, 5, [1, 0]], [-9, 26, 1, [1, 0]], [-9, 26, 2, [1, 0]], [-9, 26, 3, [1, 0]], [-9, 26, 4, [1, 0]]]

ROCKET = [[24, 0, -13, [35, 1]], [25, 0, -13, [35, 1]], [28, 0, -13, [35, 1]], [29, 0, -13, [35, 1]], [24, 1, -13, [35, 7]], [25, 1, -13, [35, 7]], [28, 1, -13, [35, 7]], [29, 1, -13, [35, 7]], [24, 2, -13, [42, 0]], [25, 2, -13, [42, 0]], [28, 2, -13, [42, 0]], [29, 2, -13, [42, 0]], [24, 0, -12, [35, 1]], [25, 0, -12, [35, 1]], [28, 0, -12, [35, 1]], [29, 0, -12, [35, 1]], [24, 1, -12, [35, 7]], [25, 1, -12, [35, 7]], [28, 1, -12, [35, 7]], [29, 1, -12, [35, 7]], [24, 2, -12, [42, 0]], [25, 2, -12, [42, 0]], [28, 2, -12, [42, 0]], [29, 2, -12, [42, 0]], [25, 3, -12, [42, 0]], [26, 3, -12, [42, 0]], [27, 3, -12, [42, 0]], [28, 3, -12, [42, 0]], [26, 4, -12, [42, 0]], [27, 4, -12, [42, 0]], [26, 5, -12, [42, 0]], [27, 5, -12, [42, 0]], [26, 6, -12, [42, 0]], [27, 6, -12, [42, 0]], [26, 7, -12, [42, 0]], [27, 7, -12, [42, 0]], [25, 3, -11, [42, 0]], [26, 3, -11, [42, 0]], [27, 3, -11, [42, 0]], [28, 3, -11, [42, 0]], [25, 4, -11, [42, 0]], [28, 4, -11, [42, 0]], [25, 5, -11, [42, 0]], [28, 5, -11, [42, 0]], [25, 6, -11, [42, 0]], [28, 6, -11, [42, 0]], [25, 7, -11, [42, 0]], [28, 7, -11, [42, 0]], [26, 8, -11, [42, 0]], [27, 8, -11, [42, 0]], [26, 9, -11, [35, 1]], [27, 9, -11, [35, 1]], [26, 10, -11, [42, 0]], [27, 10, -11, [42, 0]], [26, 11, -11, [35, 7]], [27, 11, -11, [35, 7]], [26, 12, -11, [35, 7]], [27, 12, -11, [35, 7]], [26, 13, -11, [42, 0]], [27, 13, -11, [42, 0]], [26, 14, -11, [42, 0]], [27, 14, -11, [42, 0]], [26, 15, -11, [42, 0]], [27, 15, -11, [42, 0]], [25, 3, -10, [42, 0]], [26, 3, -10, [42, 0]], [27, 3, -10, [42, 0]], [28, 3, -10, [42, 0]], [25, 4, -10, [42, 0]], [28, 4, -10, [42, 0]], [25, 5, -10, [42, 0]], [28, 5, -10, [42, 0]], [25, 6, -10, [42, 0]], [28, 6, -10, [42, 0]], [25, 7, -10, [42, 0]], [28, 7, -10, [42, 0]], [26, 8, -10, [42, 0]], [27, 8, -10, [42, 0]], [26, 9, -10, [35, 1]], [27, 9, -10, [35, 1]], [26, 10, -10, [42, 0]], [27, 10, -10, [42, 0]], [26, 11, -10, [35, 7]], [27, 11, -10, [35, 7]], [26, 12, -10, [35, 7]], [27, 12, -10, [35, 7]], [26, 13, -10, [42, 0]], [27, 13, -10, [42, 0]], [26, 14, -10, [42, 0]], [27, 14, -10, [42, 0]], [26, 15, -10, [42, 0]], [27, 15, -10, [42, 0]], [24, 0, -9, [35, 1]], [25, 0, -9, [35, 1]], [28, 0, -9, [35, 1]], [29, 0, -9, [35, 1]], [24, 1, -9, [35, 7]], [25, 1, -9, [35, 7]], [28, 1, -9, [35, 7]], [29, 1, -9, [35, 7]], [24, 2, -9, [42, 0]], [25, 2, -9, [42, 0]], [28, 2, -9, [42, 0]], [29, 2, -9, [42, 0]], [25, 3, -9, [42, 0]], [26, 3, -9, [42, 0]], [27, 3, -9, [42, 0]], [28, 3, -9, [42, 0]], [26, 4, -9, [42, 0]], [27, 4, -9, [42, 0]], [26, 5, -9, [42, 0]], [27, 5, -9, [42, 0]], [26, 6, -9, [42, 0]], [27, 6, -9, [42, 0]], [26, 7, -9, [42, 0]], [27, 7, -9, [42, 0]], [24, 0, -8, [35, 1]], [25, 0, -8, [35, 1]], [28, 0, -8, [35, 1]], [29, 0, -8, [35, 1]], [24, 1, -8, [35, 7]], [25, 1, -8, [35, 7]], [28, 1, -8, [35, 7]], [29, 1, -8, [35, 7]], [24, 2, -8, [42, 0]], [25, 2, -8, [42, 0]], [28, 2, -8, [42, 0]], [29, 2, -8, [42, 0]]]


#Single lightning part, is then repeated to create a full lightning bolt
miniLightning = [[0, 0, 0, [41, 0]], [0, 1, 1, [41, 0]], [0, 2, 2, [41, 0]], [0, 3, 3, [41, 0]], [0, 4, 3, [41, 0]],
                 [0, 4, 2, [41, 0]], [0, 4, 1, [41, 0]]]

#Parachuting babbage the bear.
babbage = [[0, 26, 0, [35, 10]], [1, 26, 0, [35, 10]], [2, 26, 0, [35, 10]], [3, 26, 0, [35, 10]], [4, 26, 0, [35, 10]], [0, 26, 1, [35, 10]], [1, 26, 1, [35, 10]], [2, 26, 1, [35, 10]], [3, 26, 1, [35, 10]], [4, 26, 1, [35, 10]], [1, 20, 2, [35, 12]], [3, 20, 2, [35, 12]], [2, 21, 2, [35, 12]], [0, 22, 2, [85, 0]], [1, 22, 2, [35, 12]], [2, 22, 2, [35, 12]], [3, 22, 2, [35, 12]], [4, 22, 2, [85, 0]], [0, 23, 2, [85, 0]], [2, 23, 2, [35, 12]], [4, 23, 2, [85, 0]], [0, 24, 2, [85, 0]], [4, 24, 2, [85, 0]], [0, 25, 2, [85, 0]], [4, 25, 2, [85, 0]], [0, 26, 2, [35, 10]], [1, 26, 2, [35, 10]], [2, 26, 2, [35, 10]], [3, 26, 2, [35, 10]], [4, 26, 2, [35, 10]], [2, 27, 2, [35, 10]], [0, 26, 3, [35, 10]], [1, 26, 3, [35, 10]], [2, 26, 3, [35, 10]], [3, 26, 3, [35, 10]], [4, 26, 3, [35, 10]], [0, 26, 4, [35, 10]], [1, 26, 4, [35, 10]], [2, 26, 4, [35, 10]], [3, 26, 4, [35, 10]], [4, 26, 4, [35, 10]]]


NUM_PINS = 28
PLANEPAUSE = 0.3
SIGNCOLOUR = [35, 5]
flightScore = 0
planePartStatus = {}
otherPartStatus = {}
PINS = list(set(list(range(NUM_PINS))) - set([2, 3]))
SelectedColours = []
rocketBottom = [0,0,0]

PlanePartMap = [                #["Part name", [GPIO pins assigned to that part], Number of GPIO pins needed to trigger]
    ["Cockpit", [21, ], 1],
    ["Forward Cabin", [26, 16], 2],
    ["Left Wing", [22, 23, 9], 2],
    ["Wing Cabin", [12, 6, 7, 8], 3],
    ["Right Wing", [1, 11, 5], 2],
    ["Mid Cabin", [24, 25], 2],
    ["Rear Cabin", [18, 17], 2],
    ["Left Tailplane", [4, 15], 1],  # Should be 2 and 3 but issues with grounding
    ["Tail", [14, ], 1],
    ["Right Tailplane", [4, 15], 1]
]

OtherPartMap = [                #["Part name", [GPIO pins assigned to that part], Number of GPIO pins needed to trigger]
    ["Cloud", [13, ], 1],
    ["Bear", [20, ], 1],
    ["Red", [27, ], 1],
    ["Orange", [19, ], 1],
    ["Blue", [0, ], 1],
    ["Green", [10, ], 1]

]
#SelectedColour = [35, 5]



#---------------------------------------Classes--------------------------------------------




class testThreading(threading.Thread):
    """
    Experimental class for multithreading the block placing socket requests.
    The class is not used in the end.
    """
    def __init__(self, x, y, z, block, value):
        self.x = x
        self.y = y
        self.z = z
        self.block = block
        self.value = value

        super(testThreading, self).__init__()

    def run(self):
        mc.setBlock(self.x, self.y, self.z, self.block, self.value)

class Babbage(threading.Thread):
    """
    Class for Babbage the falling bear which runs in a seperate thread.
    Only runs if the bear is selected on the dots board.
    """
    def __init__(self, babbage, x, y, z, block, value):
        self.x = x
        self.y = y
        self.z = z
        self.block = block
        self.value = value
        self.babbage = babbage

        super(Babbage, self).__init__()

    def run(self):
        self.dropBabbage()

    def dropBabbage(self):
        babbage = offset(self.babbage, self.x, self.y, self.z)
        oldCoords = babbage[:]
        coords = babbage[:]
        breakBlocks(oldCoords)
        placeBlocks(coords)
        for x in range(0, 25):
            oldCoords = deepcopy(coords)

            placeBlocks(coords)  # Standard single thread
            # placeBlocksThreading(coords)   #Multiple threads

            for i in range(0, len(coords)):
                coords[i][1] = coords[i][1] -1
            time.sleep(PLANEPAUSE)
            toBreak = [x for x in oldCoords if x not in coords]

            coordsNoData = []
            for i in range(0, len(coords)):
                coordsNoData.append(coords[i][:3])

            oldCoordsNoData = []
            for i in range(0, len(toBreak)):
                oldCoordsNoData.append(toBreak[i][:3])

            toBreak = [x for x in oldCoordsNoData if x not in coordsNoData]

            breakBlocks(toBreak)
        breakBlocks(coords)


class Lightning(threading.Thread):
    """
    Lightning striking class. Only runs if lightning is selected.
    """
    def __init__(self, x, y, z, block, value):
        self.x = x
        self.y = y
        self.z = z
        self.block = block
        self.value = value

        super(Lightning, self).__init__()

    def run(self):
        for i in range(0, 4):
            self.StrikeLightning(random.randint(-5, 5), 0, random.randint(0, 35))
            time.sleep(0.8)

    def StrikeLightning(self, x, y, z):
        """
        Starts by generating a full sized lightning bolt, then goes through the list of blocks placing each block
        and removing the block 7 blocks behind.
        """
        totalLight = []
        for a in range(0, 5):
            totalLight = totalLight + offset(miniLightning, 0, a * 5, 0)

        lightning = offset(totalLight, x, y, z)
        lightning.reverse()
        for i in range(0, len(lightning)):
            mc.setBlock(lightning[i][0], lightning[i][1], lightning[i][2], lightning[i][3][0], lightning[i][3][1])
            if i > 6:
                mc.setBlock(lightning[i - 7][0], lightning[i - 7][1], lightning[i - 7][2], 0, 0)
            time.sleep(0.05)
        lastBit = lightning[len(lightning) - 7: len(lightning)]
        for i in range(0, len(lastBit)):
            mc.setBlock(lastBit[i][0], lastBit[i][1], lastBit[i][2], 0, 0)
            time.sleep(0.01)


class rocketFire(threading.Thread):
    def __init__(self, offx, offy, offz):
        global rocketBottom
        super(rocketFire, self).__init__()
        self.offx = offx
        self.offy = offy
        self.offz = offz
        self.x = rocketBottom[0] + offx
        self.y = rocketBottom[1] + offy
        self.z = rocketBottom[2] + offz
    def run(self):
        self.placeFire(self.x, self.y, self.z)

    def placeFire(self, x, y, z):
        global rocketBottom
        #fireblocks = [(35, 1), (35, 14)]
        fireblocks = [ (35, 14)]
        #fireblocks = [(11, 0)]
        while rocketBottom[0] != 1000:
            x = rocketBottom[0] + self.offx
            y = rocketBottom[1] + self.offy
            z = rocketBottom[2] + self.offz
            #rb1 = (random.randint(x-1, x+2), random.randint(y-1, y), random.randint(z-1, z+2))
            #rb2 = (random.randint(x-1, x+2), random.randint(y-1, y), random.randint(z-1, z+2))
            #rb3 = (random.randint(x-1, x+2), random.randint(y-1, y), random.randint(z-1, z+2))

            rb1 = (random.randint(x, x+1), random.randint(y-1, y), random.randint(z, z+1))
            rb2 = (random.randint(x, x+1), random.randint(y-1, y), random.randint(z, z+1))
            rb3 = (random.randint(x, x+1), random.randint(y-1, y), random.randint(z, z+1))

            rc1 = random.choice(fireblocks)
            rc2 = random.choice(fireblocks)
            rc3 = random.choice(fireblocks)
            mc.setBlock(rb1[0], rb1[1], rb1[2], rc1[0], rc1[1])
            mc.setBlock(rb2[0], rb2[1], rb2[2], rc2[0], rc2[1])
            mc.setBlock(rb3[0], rb3[1], rb3[2], rc3[0], rc3[1])
            #print("Placing fire! " + str(rb1))
            time.sleep(0.3)
            mc.setBlock(rb1[0], rb1[1], rb1[2], 0)
            mc.setBlock(rb2[0], rb2[1], rb2[2], 0)
            mc.setBlock(rb3[0], rb3[1], rb3[2], 0)



#---------------------------------------Functions--------------------------------------------




def gpioSetup(pins):
    """
    Sets up all the GPIO pins as input with pull up resistor mode off.
    This is very important not to have any pin set as pull up as will mess with the ground plane.
    """
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)

    for pin in pins:
        GPIO.setup(pin, GPIO.IN, GPIO.PUD_OFF)


def pinIsActive(pin):
    """
    Checks if supplied pin is covered in ink. Remember, this is the BCM pin, not the number on the dot to dot!
    Does this by enabling pull up resistor, check the pin, disable pull up resistor and return true if the state == 0.
    """
    if noBoard == True:
        return fakePinsMid(pin)   #Uncomment this line to use without a real dots board attached
    GPIO.setup(pin, GPIO.IN, GPIO.PUD_UP)
    state = GPIO.input(pin)
    GPIO.setup(pin, GPIO.IN, GPIO.PUD_OFF)
    return state == 0


def fakePinsOff(pin, fullList=False):
    pins = {
        0: False,
        1: False,
        2: False,
        3: False,
        4: False,
        5: False,
        6: False,
        7: False,
        8: False,
        9: False,
        10: False,
        11: False,
        12: False,
        13: False,
        14: False,
        15: False,
        16: False,
        17: False,
        18: False,
        19: False,
        20: False,
        21: False,
        22: False,  #
        23: False,  #
        24: False,  #
        25: False,
        26: False,
        27: False
    }

    if fullList:
        return pins

    return pins[pin]


def fakePinsMid(pin, fullList=False):
    pins = {
        0: True,
        1: True,
        2: True,
        3: True,
        4: True,
        5: False,
        6: True,
        7: True,
        8: True,
        9: True,
        10: True,
        11: False,
        12: True,
        13: True,
        14: True,
        15: True,
        16: True,
        17: True,
        18: True,
        19: True,
        20: True,
        21: True,
        22: False,  #
        23: False,  #
        24: False,  #
        25: True,
        26: True,
        27: True
    }

    if fullList:
        return pins

    return pins[pin]


def fakePinsOn(pin, fullList=False):
    pins = {
        0: True,
        1: True,
        2: True,
        3: True,
        4: True,
        5: True,
        6: True,
        7: True,
        8: True,
        9: True,
        10: True,
        11: True,
        12: True,
        13: True,
        14: True,
        15: True,
        16: True,
        17: True,
        18: True,
        19: True,
        20: True,
        21: True,
        22: True,  #
        23: True,  #
        24: True,  #
        25: True,
        26: True,
        27: True
    }

    if fullList:
        return pins

    return pins[pin]


def readInput(caption, default, timeout=5):
    """
    Borrowed from http://stackoverflow.com/questions/3471461/raw-input-and-timeout
    Reads the input of a user, after the timeout it stops blocking and continues on in the program.
    """
    timeout = 10
    rlist, _, _ = select([sys.stdin], [], [], timeout)
    if rlist:
        s = sys.stdin.readline()
    else:
        s = None
    return s


def runSimulation():
    global flightScore, otherPartStatus
    # stuff = [[1, 1, 2, [1, 0]], [2, 1, 0, [1, 0]],  [2, 1, 1, [1, 0]] , [2, 1, 2, [1, 0]] , [2, 1, 3, [1, 0]], [2, 1, 4, [1, 0]], [3, 1, 2, [1, 0]], [4, 1, 2, [1, 0]]]
    # stuff = [[-3, 0, -6, [35, 0]], [-3, 1, 2, [35, 0]], [-2, 1, 2, [35, 0]], [-2, 1, 3, [35, 0]], [-1, 1, -4, [35, 0]], [-1, 1, 2, [35, 0]], [-1, 1, 3, [35, 0]], [-1, 1, 4, [35, 0]], [0, 1, -4, [35, 0]], [0, 1, 2, [35, 0]], [0, 1, 3, [35, 0]], [0, 1, 4, [35, 0]], [1, 0, -3, [35, 15]], [1, 1, -4, [35, 0]], [1, 1, -3, [35, 0]], [1, 1, 2, [35, 0]], [1, 1, 3, [35, 0]], [1, 1, 4, [35, 0]], [2, 1, -4, [35, 0]], [2, 1, -3, [35, 0]], [2, 1, -2, [35, 0]], [2, 1, -1, [35, 0]], [2, 1, 0, [35, 0]], [2, 1, 1, [35, 0]], [2, 1, 2, [35, 0]], [2, 1, 3, [35, 0]], [2, 1, 4, [35, 0]], [2, 1, 5, [35, 0]], [2, 1, 6, [35, 0]], [2, 1, 7, [35, 0]], [2, 1, 8, [35, 0]], [2, 2, -4, [35, 0]], [2, 2, -3, [35, 0]], [2, 2, -2, [20, 0]], [2, 2, -1, [35, 0]], [2, 2, 0, [20, 0]], [2, 2, 1, [35, 0]], [2, 2, 2, [20, 0]], [2, 2, 3, [35, 0]], [2, 2, 4, [20, 0]], [2, 2, 5, [35, 0]], [2, 2, 6, [20, 0]], [2, 2, 7, [35, 0]], [2, 2, 8, [20, 0]], [3, 0, 8, [35, 15]], [3, 1, -4, [35, 0]], [3, 1, -3, [35, 0]], [3, 1, -2, [35, 0]], [3, 1, -1, [35, 0]], [3, 1, 0, [35, 0]], [3, 1, 1, [35, 0]], [3, 1, 2, [35, 0]], [3, 1, 3, [35, 0]], [3, 1, 4, [35, 0]], [3, 1, 5, [35, 0]], [3, 1, 6, [35, 0]], [3, 1, 7, [35, 0]], [3, 1, 8, [35, 0]], [3, 1, 9, [35, 0]], [3, 2, -4, [35, 0]], [3, 2, 9, [20, 0]], [3, 3, -4, [35, 0]], [3, 3, -3, [35, 0]], [3, 3, -2, [35, 0]], [3, 3, -1, [35, 0]], [3, 3, 0, [35, 0]], [3, 3, 1, [35, 0]], [3, 3, 2, [35, 0]], [3, 3, 3, [35, 0]], [3, 3, 4, [35, 0]], [3, 3, 5, [35, 0]], [3, 3, 6, [35, 0]], [3, 3, 7, [35, 0]], [3, 3, 8, [20, 0]], [3, 4, -4, [35, 0]], [4, 1, -4, [35, 0]], [4, 1, -3, [35, 0]], [4, 1, -2, [35, 0]], [4, 1, -1, [35, 0]], [4, 1, 0, [35, 0]], [4, 1, 1, [35, 0]], [4, 1, 2, [35, 0]], [4, 1, 3, [35, 0]], [4, 1, 4, [35, 0]], [4, 1, 5, [35, 0]], [4, 1, 6, [35, 0]], [4, 1, 7, [35, 0]], [4, 1, 8, [35, 0]], [4, 2, -4, [35, 0]], [4, 2, -3, [35, 0]], [4, 2, -2, [20, 0]], [4, 2, -1, [35, 0]], [4, 2, 0, [20, 0]], [4, 2, 1, [35, 0]], [4, 2, 2, [20, 0]], [4, 2, 3, [35, 0]], [4, 2, 4, [20, 0]], [4, 2, 5, [35, 0]], [4, 2, 6, [20, 0]], [4, 2, 7, [35, 0]], [4, 2, 8, [20, 0]], [5, 0, -3, [35, 15]], [5, 1, -4, [35, 0]], [5, 1, -3, [35, 0]], [5, 1, 2, [35, 0]], [5, 1, 3, [35, 0]], [5, 1, 4, [35, 0]], [6, 1, -4, [35, 0]], [6, 1, 2, [35, 0]], [6, 1, 3, [35, 0]], [6, 1, 4, [35, 0]], [7, 1, -4, [35, 0]], [7, 1, 2, [35, 0]], [7, 1, 3, [35, 0]], [7, 1, 4, [35, 0]], [8, 1, 2, [35, 0]], [8, 1, 3, [35, 0]], [9, 1, 2, [35, 0]], [11, 0, 10, [45, 0]], [11, 1, 10, [45, 0]], [11, 2, 10, [45, 0]], [11, 3, 10, [45, 0]], [11, 4, 10, [45, 0]], [11, 5, 10, [45, 0]]]
    # stuff = [[-3, 1, 2, [35, 0]], [-2, 1, 2, [35, 0]], [-2, 1, 3, [35, 0]], [-1, 1, -4, [35, 0]], [-1, 1, 2, [35, 0]], [-1, 1, 3, [35, 0]], [-1, 1, 4, [35, 0]], [0, 1, -4, [35, 0]], [0, 1, 2, [35, 0]], [0, 1, 3, [35, 0]], [0, 1, 4, [35, 0]], [1, 0, -3, [35, 15]], [1, 1, -4, [35, 0]], [1, 1, -3, [35, 0]], [1, 1, 2, [35, 0]], [1, 1, 3, [35, 0]], [1, 1, 4, [35, 0]], [2, 1, -4, [35, 0]], [2, 1, -3, [35, 0]], [2, 1, -2, [35, 0]], [2, 1, -1, [35, 0]], [2, 1, 0, [35, 0]], [2, 1, 1, [35, 0]], [2, 1, 2, [35, 0]], [2, 1, 3, [35, 0]], [2, 1, 4, [35, 0]], [2, 1, 5, [35, 0]], [2, 1, 6, [35, 0]], [2, 1, 7, [35, 0]], [2, 1, 8, [35, 0]], [2, 2, -4, [35, 0]], [2, 2, -3, [35, 0]], [2, 2, -2, [20, 0]], [2, 2, -1, [35, 0]], [2, 2, 0, [20, 0]], [2, 2, 1, [35, 0]], [2, 2, 2, [20, 0]], [2, 2, 3, [35, 0]], [2, 2, 4, [20, 0]], [2, 2, 5, [35, 0]], [2, 2, 6, [20, 0]], [2, 2, 7, [35, 0]], [2, 2, 8, [20, 0]], [3, 0, 8, [35, 15]], [3, 1, -4, [35, 0]], [3, 1, -3, [35, 0]], [3, 1, -2, [35, 0]], [3, 1, -1, [35, 0]], [3, 1, 0, [35, 0]], [3, 1, 1, [35, 0]], [3, 1, 2, [35, 0]], [3, 1, 3, [35, 0]], [3, 1, 4, [35, 0]], [3, 1, 5, [35, 0]], [3, 1, 6, [35, 0]], [3, 1, 7, [35, 0]], [3, 1, 8, [35, 0]], [3, 1, 9, [35, 0]], [3, 2, -4, [35, 0]], [3, 2, 9, [20, 0]], [3, 3, -4, [35, 0]], [3, 3, -3, [35, 0]], [3, 3, -2, [35, 0]], [3, 3, -1, [35, 0]], [3, 3, 0, [35, 0]], [3, 3, 1, [35, 0]], [3, 3, 2, [35, 0]], [3, 3, 3, [35, 0]], [3, 3, 4, [35, 0]], [3, 3, 5, [35, 0]], [3, 3, 6, [35, 0]], [3, 3, 7, [35, 0]], [3, 3, 8, [20, 0]], [3, 4, -4, [35, 0]], [4, 1, -4, [35, 0]], [4, 1, -3, [35, 0]], [4, 1, -2, [35, 0]], [4, 1, -1, [35, 0]], [4, 1, 0, [35, 0]], [4, 1, 1, [35, 0]], [4, 1, 2, [35, 0]], [4, 1, 3, [35, 0]], [4, 1, 4, [35, 0]], [4, 1, 5, [35, 0]], [4, 1, 6, [35, 0]], [4, 1, 7, [35, 0]], [4, 1, 8, [35, 0]], [4, 2, -4, [35, 0]], [4, 2, -3, [35, 0]], [4, 2, -2, [20, 0]], [4, 2, -1, [35, 0]], [4, 2, 0, [20, 0]], [4, 2, 1, [35, 0]], [4, 2, 2, [20, 0]], [4, 2, 3, [35, 0]], [4, 2, 4, [20, 0]], [4, 2, 5, [35, 0]], [4, 2, 6, [20, 0]], [4, 2, 7, [35, 0]], [4, 2, 8, [20, 0]], [5, 0, -3, [35, 15]], [5, 1, -4, [35, 0]], [5, 1, -3, [35, 0]], [5, 1, 2, [35, 0]], [5, 1, 3, [35, 0]], [5, 1, 4, [35, 0]], [6, 1, -4, [35, 0]], [6, 1, 2, [35, 0]], [6, 1, 3, [35, 0]], [6, 1, 4, [35, 0]], [7, 1, -4, [35, 0]], [7, 1, 2, [35, 0]], [7, 1, 3, [35, 0]], [7, 1, 4, [35, 0]], [8, 1, 2, [35, 0]], [8, 1, 3, [35, 0]], [9, 1, 2, [35, 0]]]

    # North facing plane
    # stuff = [[-22, 0, -2, [35, 15]], [-22, 0, 2, [35, 15]], [-22, 1, -2, [1, 0]], [-22, 1, -1, [1, 0]], [-22, 1, 0, [1, 0]], [-22, 1, 1, [1, 0]], [-22, 1, 2, [1, 0]], [-22, 2, -1, [1, 0]], [-22, 2, 1, [1, 0]], [-22, 3, 0, [1, 0]], [-21, 1, -1, [1, 0]], [-21, 1, 0, [1, 0]], [-21, 1, 1, [1, 0]], [-21, 2, -1, [20, 0]], [-21, 2, 1, [20, 0]], [-21, 3, 0, [1, 0]], [-20, 1, -1, [1, 0]], [-20, 1, 0, [1, 0]], [-20, 1, 1, [1, 0]], [-20, 2, -1, [1, 0]], [-20, 2, 1, [1, 0]], [-20, 3, 0, [1, 0]], [-19, 1, -1, [1, 0]], [-19, 1, 0, [1, 0]], [-19, 1, 1, [1, 0]], [-19, 2, -1, [20, 0]], [-19, 2, 1, [20, 0]], [-19, 3, 0, [1, 0]], [-18, 1, -1, [1, 0]], [-18, 1, 0, [1, 0]], [-18, 1, 1, [1, 0]], [-18, 2, -1, [1, 0]], [-18, 2, 1, [1, 0]], [-18, 3, 0, [1, 0]], [-17, 1, -6, [1, 0]], [-17, 1, -5, [1, 0]], [-17, 1, -4, [1, 0]], [-17, 1, -3, [1, 0]], [-17, 1, -2, [1, 0]], [-17, 1, -1, [1, 0]], [-17, 1, 0, [1, 0]], [-17, 1, 1, [1, 0]], [-17, 1, 2, [1, 0]], [-17, 1, 3, [1, 0]], [-17, 1, 4, [1, 0]], [-17, 1, 5, [1, 0]], [-17, 1, 6, [1, 0]], [-17, 2, -1, [20, 0]], [-17, 2, 1, [20, 0]], [-17, 3, 0, [1, 0]], [-16, 1, -5, [1, 0]], [-16, 1, -4, [1, 0]], [-16, 1, -3, [1, 0]], [-16, 1, -2, [1, 0]], [-16, 1, -1, [1, 0]], [-16, 1, 0, [1, 0]], [-16, 1, 1, [1, 0]], [-16, 1, 2, [1, 0]], [-16, 1, 3, [1, 0]], [-16, 1, 4, [1, 0]], [-16, 1, 5, [1, 0]], [-16, 2, -1, [1, 0]], [-16, 2, 1, [1, 0]], [-16, 3, 0, [1, 0]], [-15, 1, -4, [1, 0]], [-15, 1, -3, [1, 0]], [-15, 1, -2, [1, 0]], [-15, 1, -1, [1, 0]], [-15, 1, 0, [1, 0]], [-15, 1, 1, [1, 0]], [-15, 1, 2, [1, 0]], [-15, 1, 3, [1, 0]], [-15, 1, 4, [1, 0]], [-15, 2, -1, [20, 0]], [-15, 2, 1, [20, 0]], [-15, 3, 0, [1, 0]], [-14, 1, -1, [1, 0]], [-14, 1, 0, [1, 0]], [-14, 1, 1, [1, 0]], [-14, 2, -1, [1, 0]], [-14, 2, 1, [1, 0]], [-14, 3, 0, [1, 0]], [-13, 1, -1, [1, 0]], [-13, 1, 0, [1, 0]], [-13, 1, 1, [1, 0]], [-13, 2, -1, [20, 0]], [-13, 2, 1, [20, 0]], [-13, 3, 0, [1, 0]], [-12, 1, -1, [1, 0]], [-12, 1, 0, [1, 0]], [-12, 1, 1, [1, 0]], [-12, 2, -1, [1, 0]], [-12, 2, 1, [1, 0]], [-12, 3, 0, [1, 0]], [-11, 0, 0, [35, 15]], [-11, 1, -1, [1, 0]], [-11, 1, 0, [1, 0]], [-11, 1, 1, [1, 0]], [-11, 2, -1, [20, 0]], [-11, 2, 1, [20, 0]], [-11, 3, 0, [20, 0]], [-10, 1, 0, [1, 0]], [-10, 2, 0, [20, 0]]]

    # West facing plane
    # stuff = [[-3, 1, 2, [1, 0]], [-2, 1, 2, [1, 0]], [-2, 1, 3, [1, 0]], [-1, 1, -4, [1, 0]], [-1, 1, 2, [1, 0]], [-1, 1, 3, [1, 0]], [-1, 1, 4, [1, 0]], [0, 1, -4, [1, 0]], [0, 1, 2, [1, 0]], [0, 1, 3, [1, 0]], [0, 1, 4, [1, 0]], [1, 0, -3, [1, 15]], [1, 1, -4, [1, 0]], [1, 1, -3, [1, 0]], [1, 1, 2, [1, 0]], [1, 1, 3, [1, 0]], [1, 1, 4, [1, 0]], [2, 1, -4, [1, 0]], [2, 1, -3, [1, 0]], [2, 1, -2, [1, 0]], [2, 1, -1, [1, 0]], [2, 1, 0, [1, 0]], [2, 1, 1, [1, 0]], [2, 1, 2, [1, 0]], [2, 1, 3, [1, 0]], [2, 1, 4, [1, 0]], [2, 1, 5, [1, 0]], [2, 1, 6, [1, 0]], [2, 1, 7, [1, 0]], [2, 1, 8, [1, 0]], [2, 2, -4, [1, 0]], [2, 2, -3, [1, 0]], [2, 2, -2, [20, 0]], [2, 2, -1, [1, 0]], [2, 2, 0, [20, 0]], [2, 2, 1, [1, 0]], [2, 2, 2, [20, 0]], [2, 2, 3, [1, 0]], [2, 2, 4, [20, 0]], [2, 2, 5, [1, 0]], [2, 2, 6, [20, 0]], [2, 2, 7, [1, 0]], [2, 2, 8, [20, 0]], [3, 0, 8, [1, 15]], [3, 1, -4, [1, 0]], [3, 1, -3, [1, 0]], [3, 1, -2, [1, 0]], [3, 1, -1, [1, 0]], [3, 1, 0, [1, 0]], [3, 1, 1, [1, 0]], [3, 1, 2, [1, 0]], [3, 1, 3, [1, 0]], [3, 1, 4, [1, 0]], [3, 1, 5, [1, 0]], [3, 1, 6, [1, 0]], [3, 1, 7, [1, 0]], [3, 1, 8, [1, 0]], [3, 1, 9, [1, 0]], [3, 2, -4, [1, 0]], [3, 2, 9, [20, 0]], [3, 3, -4, [1, 0]], [3, 3, -3, [1, 0]], [3, 3, -2, [1, 0]], [3, 3, -1, [1, 0]], [3, 3, 0, [1, 0]], [3, 3, 1, [1, 0]], [3, 3, 2, [1, 0]], [3, 3, 3, [1, 0]], [3, 3, 4, [1, 0]], [3, 3, 5, [1, 0]], [3, 3, 6, [1, 0]], [3, 3, 7, [1, 0]], [3, 3, 8, [20, 0]], [3, 4, -4, [1, 0]], [4, 1, -4, [1, 0]], [4, 1, -3, [1, 0]], [4, 1, -2, [1, 0]], [4, 1, -1, [1, 0]], [4, 1, 0, [1, 0]], [4, 1, 1, [1, 0]], [4, 1, 2, [1, 0]], [4, 1, 3, [1, 0]], [4, 1, 4, [1, 0]], [4, 1, 5, [1, 0]], [4, 1, 6, [1, 0]], [4, 1, 7, [1, 0]], [4, 1, 8, [1, 0]], [4, 2, -4, [1, 0]], [4, 2, -3, [1, 0]], [4, 2, -2, [20, 0]], [4, 2, -1, [1, 0]], [4, 2, 0, [20, 0]], [4, 2, 1, [1, 0]], [4, 2, 2, [20, 0]], [4, 2, 3, [1, 0]], [4, 2, 4, [20, 0]], [4, 2, 5, [1, 0]], [4, 2, 6, [20, 0]], [4, 2, 7, [1, 0]], [4, 2, 8, [20, 0]], [5, 0, -3, [1, 15]], [5, 1, -4, [1, 0]], [5, 1, -3, [1, 0]], [5, 1, 2, [1, 0]], [5, 1, 3, [1, 0]], [5, 1, 4, [1, 0]], [6, 1, -4, [1, 0]], [6, 1, 2, [1, 0]], [6, 1, 3, [1, 0]], [6, 1, 4, [1, 0]], [7, 1, -4, [1, 0]], [7, 1, 2, [1, 0]], [7, 1, 3, [1, 0]], [7, 1, 4, [1, 0]], [8, 1, 2, [1, 0]], [8, 1, 3, [1, 0]], [9, 1, 2, [1, 0]]]

    # West experiment
    # stuff = [[-3, 1, 2, [35, 0]], [-2, 1, 2, [35, 0]], [-2, 1, 3, [35, 0]], [-1, 1, -4, [35, 0]], [-1, 1, 2, [35, 0]], [-1, 1, 3, [35, 0]], [-1, 1, 4, [35, 0]], [0, 1, -4, [35, 0]], [0, 1, 2, [35, 0]], [0, 1, 3, [35, 0]], [0, 1, 4, [35, 0]], [1, 0, -3, [35, 15]], [1, 1, -4, [35, 0]], [1, 1, -3, [35, 0]], [1, 1, 2, [35, 0]], [1, 1, 3, [35, 0]], [1, 1, 4, [35, 0]], [2, 1, -4, [35, 0]], [2, 1, -3, [35, 0]], [2, 1, -2, [35, 0]], [2, 1, -1, [35, 0]], [2, 1, 0, [35, 0]], [2, 1, 1, [35, 0]], [2, 1, 2, [35, 0]], [2, 1, 3, [35, 0]], [2, 1, 4, [35, 0]], [2, 1, 5, [35, 0]], [2, 1, 6, [35, 0]], [2, 1, 7, [35, 0]], [2, 1, 8, [35, 0]], [2, 2, -4, [35, 0]], [2, 2, -3, [35, 0]], [2, 2, -2, [20, 0]], [2, 2, -1, [35, 0]], [2, 2, 0, [20, 0]], [2, 2, 1, [35, 0]], [2, 2, 2, [20, 0]], [2, 2, 3, [35, 0]], [2, 2, 4, [20, 0]], [2, 2, 5, [35, 0]], [2, 2, 6, [20, 0]], [2, 2, 7, [35, 0]], [2, 2, 8, [20, 0]], [3, 0, 8, [35, 15]], [3, 1, -4, [35, 0]], [3, 1, -3, [35, 0]], [3, 1, -2, [35, 0]], [3, 1, -1, [35, 0]], [3, 1, 0, [35, 0]], [3, 1, 1, [35, 0]], [3, 1, 2, [35, 0]], [3, 1, 3, [35, 0]], [3, 1, 4, [35, 0]], [3, 1, 5, [35, 0]], [3, 1, 6, [35, 0]], [3, 1, 7, [35, 0]], [3, 1, 8, [35, 0]], [3, 1, 9, [35, 0]], [3, 2, -4, [35, 0]], [3, 2, 9, [20, 0]], [3, 3, -4, [35, 0]], [3, 3, -3, [35, 0]], [3, 3, -2, [35, 0]], [3, 3, -1, [35, 0]], [3, 3, 0, [35, 0]], [3, 3, 1, [35, 0]], [3, 3, 2, [35, 0]], [3, 3, 3, [35, 0]], [3, 3, 4, [35, 0]], [3, 3, 5, [35, 0]], [3, 3, 6, [35, 0]], [3, 3, 7, [35, 0]], [3, 3, 8, [20, 0]], [3, 4, -4, [35, 0]], [4, 1, -4, [35, 0]], [4, 1, -3, [35, 0]], [4, 1, -2, [35, 0]], [4, 1, -1, [35, 0]], [4, 1, 0, [35, 0]], [4, 1, 1, [35, 0]], [4, 1, 2, [35, 0]], [4, 1, 3, [35, 0]], [4, 1, 4, [35, 0]], [4, 1, 5, [35, 0]], [4, 1, 6, [35, 0]], [4, 1, 7, [35, 0]], [4, 1, 8, [35, 0]], [4, 2, -4, [35, 0]], [4, 2, -3, [35, 0]], [4, 2, -2, [20, 0]], [4, 2, -1, [35, 0]], [4, 2, 0, [20, 0]], [4, 2, 1, [35, 0]], [4, 2, 2, [20, 0]], [4, 2, 3, [35, 0]], [4, 2, 4, [20, 0]], [4, 2, 5, [35, 0]], [4, 2, 6, [20, 0]], [4, 2, 7, [35, 0]], [4, 2, 8, [20, 0]], [5, 0, -3, [35, 15]], [5, 1, -4, [35, 0]], [5, 1, -3, [35, 0]], [5, 1, 2, [35, 0]], [5, 1, 3, [35, 0]], [5, 1, 4, [35, 0]], [6, 1, -4, [35, 0]], [6, 1, 2, [35, 0]], [6, 1, 3, [35, 0]], [6, 1, 4, [35, 0]], [7, 1, -4, [35, 0]], [7, 1, 2, [35, 0]], [7, 1, 3, [35, 0]], [7, 1, 4, [35, 0]], [8, 1, 2, [35, 0]], [8, 1, 3, [35, 0]], [9, 1, 2, [35, 0]]]

    # West wool
    WoolStuff = [[13, 1, 2, [35, 14]], [14, 1, 2, [35, 14]], [14, 1, 3, [35, 14]], [15, 1, -4, [35, 13]],
                 [15, 1, 2, [35, 14]], [15, 1, 3, [35, 14]], [15, 1, 4, [35, 14]], [16, 1, -4, [35, 13]],
                 [16, 1, 2, [35, 14]], [16, 1, 3, [35, 14]], [16, 1, 4, [35, 14]], [17, 0, -3, [35, 13]],
                 [17, 1, -4, [35, 13]], [17, 1, -3, [35, 13]], [17, 1, 2, [35, 14]], [17, 1, 3, [35, 14]],
                 [17, 1, 4, [35, 14]], [18, 1, -4, [35, 12]], [18, 1, -3, [35, 5]], [18, 1, -2, [35, 5]],
                 [18, 1, -1, [35, 3]], [18, 1, 0, [35, 3]], [18, 1, 1, [35, 3]], [18, 1, 2, [35, 15]],
                 [18, 1, 3, [35, 15]], [18, 1, 4, [35, 15]], [18, 1, 5, [35, 1]], [18, 1, 6, [35, 1]],
                 [18, 1, 7, [35, 1]], [18, 1, 8, [35, 2]], [18, 2, -4, [35, 12]], [18, 2, -3, [35, 5]],
                 [18, 2, -2, [35, 5]], [18, 2, -1, [35, 3]], [18, 2, 0, [35, 3]], [18, 2, 1, [35, 3]],
                 [18, 2, 2, [35, 15]], [18, 2, 3, [35, 15]], [18, 2, 4, [35, 15]], [18, 2, 5, [35, 1]],
                 [18, 2, 6, [35, 1]], [18, 2, 7, [35, 1]], [18, 2, 8, [35, 2]], [19, 0, 8, [35, 2]],
                 [19, 1, -4, [35, 12]], [19, 1, -3, [35, 5]], [19, 1, -2, [35, 5]], [19, 1, -1, [35, 3]],
                 [19, 1, 0, [35, 3]], [19, 1, 1, [35, 3]], [19, 1, 2, [35, 15]], [19, 1, 3, [35, 15]],
                 [19, 1, 4, [35, 15]], [19, 1, 5, [35, 1]], [19, 1, 6, [35, 1]], [19, 1, 7, [35, 1]],
                 [19, 1, 8, [35, 2]], [19, 1, 9, [35, 2]], [19, 2, -4, [35, 12]], [19, 2, 9, [35, 2]],
                 [19, 3, -4, [35, 12]], [19, 3, -3, [35, 5]], [19, 3, -2, [35, 5]], [19, 3, -1, [35, 3]],
                 [19, 3, 0, [35, 3]], [19, 3, 1, [35, 3]], [19, 3, 2, [35, 15]], [19, 3, 3, [35, 15]],
                 [19, 3, 4, [35, 15]], [19, 3, 5, [35, 1]], [19, 3, 6, [35, 1]], [19, 3, 7, [35, 1]],
                 [19, 3, 8, [35, 2]], [19, 4, -4, [35, 12]], [20, 1, -4, [35, 12]], [20, 1, -3, [35, 5]],
                 [20, 1, -2, [35, 5]], [20, 1, -1, [35, 3]], [20, 1, 0, [35, 3]], [20, 1, 1, [35, 3]],
                 [20, 1, 2, [35, 15]], [20, 1, 3, [35, 15]], [20, 1, 4, [35, 15]], [20, 1, 5, [35, 1]],
                 [20, 1, 6, [35, 1]], [20, 1, 7, [35, 1]], [20, 1, 8, [35, 2]], [20, 2, -4, [35, 12]],
                 [20, 2, -3, [35, 5]], [20, 2, -2, [35, 5]], [20, 2, -1, [35, 3]], [20, 2, 0, [35, 3]],
                 [20, 2, 1, [35, 3]], [20, 2, 2, [35, 15]], [20, 2, 3, [35, 15]], [20, 2, 4, [35, 15]],
                 [20, 2, 5, [35, 1]], [20, 2, 6, [35, 1]], [20, 2, 7, [35, 1]], [20, 2, 8, [35, 2]],
                 [21, 0, -3, [35, 6]], [21, 1, -4, [35, 6]], [21, 1, -3, [35, 6]], [21, 1, 2, [35, 4]],
                 [21, 1, 3, [35, 4]], [21, 1, 4, [35, 4]], [22, 1, -4, [35, 6]], [22, 1, 2, [35, 4]],
                 [22, 1, 3, [35, 4]], [22, 1, 4, [35, 4]], [23, 1, -4, [35, 6]], [23, 1, 2, [35, 4]],
                 [23, 1, 3, [35, 4]], [23, 1, 4, [35, 4]], [24, 1, 2, [35, 4]], [24, 1, 3, [35, 4]],
                 [25, 1, 2, [35, 4]]]

    # West withwool
    # stuff = [[-3, 1, 2, [35, 0], 'Right Wing'], [-2, 1, 2, [35, 0], 'Right Wing'], [-2, 1, 3, [35, 0], 'Right Wing'], [-1, 1, -4, [35, 0], 'Right Tailplane'], [-1, 1, 2, [35, 0], 'Right Wing'], [-1, 1, 3, [35, 0], 'Right Wing'], [-1, 1, 4, [35, 0], 'Right Wing'], [0, 1, -4, [35, 0], 'Right Tailplane'], [0, 1, 2, [35, 0], 'Right Wing'], [0, 1, 3, [35, 0], 'Right Wing'], [0, 1, 4, [35, 0], 'Right Wing'], [1, 0, -3, [35, 15], 'Right Tailplane'], [1, 1, -4, [35, 0], 'Right Tailplane'], [1, 1, -3, [35, 0], 'Right Tailplane'], [1, 1, 2, [35, 0], 'Right Wing'], [1, 1, 3, [35, 0], 'Right Wing'], [1, 1, 4, [35, 0], 'Right Wing'], [2, 1, -4, [35, 0], 'Tail'], [2, 1, -3, [35, 0], 'Rear Cabin'], [2, 1, -2, [35, 0], 'Rear Cabin'], [2, 1, -1, [35, 0], 'Mid Cabin'], [2, 1, 0, [35, 0], 'Mid Cabin'], [2, 1, 1, [35, 0], 'Mid Cabin'], [2, 1, 2, [35, 0], 'Wing Cabin'], [2, 1, 3, [35, 0], 'Wing Cabin'], [2, 1, 4, [35, 0], 'Wing Cabin'], [2, 1, 5, [35, 0], 'Forward Cabin'], [2, 1, 6, [35, 0], 'Forward Cabin'], [2, 1, 7, [35, 0], 'Forward Cabin'], [2, 1, 8, [35, 0], 'Cockpit'], [2, 2, -4, [35, 0], 'Tail'], [2, 2, -3, [35, 0], 'Rear Cabin'], [2, 2, -2, [20, 0], 'Rear Cabin'], [2, 2, -1, [35, 0], 'Mid Cabin'], [2, 2, 0, [20, 0], 'Mid Cabin'], [2, 2, 1, [35, 0], 'Mid Cabin'], [2, 2, 2, [20, 0], 'Wing Cabin'], [2, 2, 3, [35, 0], 'Wing Cabin'], [2, 2, 4, [20, 0], 'Wing Cabin'], [2, 2, 5, [35, 0], 'Forward Cabin'], [2, 2, 6, [20, 0], 'Forward Cabin'], [2, 2, 7, [35, 0], 'Forward Cabin'], [2, 2, 8, [20, 0], 'Cockpit'], [3, 0, 8, [35, 15], 'Cockpit'], [3, 1, -4, [35, 0], 'Tail'], [3, 1, -3, [35, 0], 'Rear Cabin'], [3, 1, -2, [35, 0], 'Rear Cabin'], [3, 1, -1, [35, 0], 'Mid Cabin'], [3, 1, 0, [35, 0], 'Mid Cabin'], [3, 1, 1, [35, 0], 'Mid Cabin'], [3, 1, 2, [35, 0], 'Wing Cabin'], [3, 1, 3, [35, 0], 'Wing Cabin'], [3, 1, 4, [35, 0], 'Wing Cabin'], [3, 1, 5, [35, 0], 'Forward Cabin'], [3, 1, 6, [35, 0], 'Forward Cabin'], [3, 1, 7, [35, 0], 'Forward Cabin'], [3, 1, 8, [35, 0], 'Cockpit'], [3, 1, 9, [35, 0], 'Cockpit'], [3, 2, -4, [35, 0], 'Tail'], [3, 2, 9, [20, 0], 'Cockpit'], [3, 3, -4, [35, 0], 'Tail'], [3, 3, -3, [35, 0], 'Rear Cabin'], [3, 3, -2, [35, 0], 'Rear Cabin'], [3, 3, -1, [35, 0], 'Mid Cabin'], [3, 3, 0, [35, 0], 'Mid Cabin'], [3, 3, 1, [35, 0], 'Mid Cabin'], [3, 3, 2, [35, 0], 'Wing Cabin'], [3, 3, 3, [35, 0], 'Wing Cabin'], [3, 3, 4, [35, 0], 'Wing Cabin'], [3, 3, 5, [35, 0], 'Forward Cabin'], [3, 3, 6, [35, 0], 'Forward Cabin'], [3, 3, 7, [35, 0], 'Forward Cabin'], [3, 3, 8, [20, 0], 'Cockpit'], [3, 4, -4, [35, 0], 'Tail'], [4, 1, -4, [35, 0], 'Tail'], [4, 1, -3, [35, 0], 'Rear Cabin'], [4, 1, -2, [35, 0], 'Rear Cabin'], [4, 1, -1, [35, 0], 'Mid Cabin'], [4, 1, 0, [35, 0], 'Mid Cabin'], [4, 1, 1, [35, 0], 'Mid Cabin'], [4, 1, 2, [35, 0], 'Wing Cabin'], [4, 1, 3, [35, 0], 'Wing Cabin'], [4, 1, 4, [35, 0], 'Wing Cabin'], [4, 1, 5, [35, 0], 'Forward Cabin'], [4, 1, 6, [35, 0], 'Forward Cabin'], [4, 1, 7, [35, 0], 'Forward Cabin'], [4, 1, 8, [35, 0], 'Cockpit'], [4, 2, -4, [35, 0], 'Tail'], [4, 2, -3, [35, 0], 'Rear Cabin'], [4, 2, -2, [20, 0], 'Rear Cabin'], [4, 2, -1, [35, 0], 'Mid Cabin'], [4, 2, 0, [20, 0], 'Mid Cabin'], [4, 2, 1, [35, 0], 'Mid Cabin'], [4, 2, 2, [20, 0], 'Wing Cabin'], [4, 2, 3, [35, 0], 'Wing Cabin'], [4, 2, 4, [20, 0], 'Wing Cabin'], [4, 2, 5, [35, 0], 'Forward Cabin'], [4, 2, 6, [20, 0], 'Forward Cabin'], [4, 2, 7, [35, 0], 'Forward Cabin'], [4, 2, 8, [20, 0], 'Cockpit'], [5, 0, -3, [35, 15], 'Left Tailplane'], [5, 1, -4, [35, 0], 'Left Tailplane'], [5, 1, -3, [35, 0], 'Left Tailplane'], [5, 1, 2, [35, 0], 'Left Wing'], [5, 1, 3, [35, 0], 'Left Wing'], [5, 1, 4, [35, 0], 'Left Wing'], [6, 1, -4, [35, 0], 'Left Tailplane'], [6, 1, 2, [35, 0], 'Left Wing'], [6, 1, 3, [35, 0], 'Left Wing'], [6, 1, 4, [35, 0], 'Left Wing'], [7, 1, -4, [35, 0], 'Left Tailplane'], [7, 1, 2, [35, 0], 'Left Wing'], [7, 1, 3, [35, 0], 'Left Wing'], [7, 1, 4, [35, 0], 'Left Wing'], [8, 1, 2, [35, 0], 'Left Wing'], [8, 1, 3, [35, 0], 'Left Wing'], [9, 1, 2, [35, 0], 'Left Wing']]
    stuff = [[-3, 1, 2, [1, 0], 'Right Wing'], [-2, 1, 2, [1, 0], 'Right Wing'], [-2, 1, 3, [1, 0], 'Right Wing'],
             [-1, 1, -4, [1, 0], 'Right Tailplane'], [-1, 1, 2, [1, 0], 'Right Wing'], [-1, 1, 3, [1, 0], 'Right Wing'],
             [-1, 1, 4, [1, 0], 'Right Wing'], [0, 1, -4, [1, 0], 'Right Tailplane'], [0, 1, 2, [1, 0], 'Right Wing'],
             [0, 1, 3, [1, 0], 'Right Wing'], [0, 1, 4, [1, 0], 'Right Wing'], [1, 0, -3, [35, 15], 'Right Tailplane'],
             [1, 1, -4, [1, 0], 'Right Tailplane'], [1, 1, -3, [1, 0], 'Right Tailplane'],
             [1, 1, 2, [1, 0], 'Right Wing'], [1, 1, 3, [1, 0], 'Right Wing'], [1, 1, 4, [1, 0], 'Right Wing'],
             [2, 1, -4, [1, 0], 'Tail'], [2, 1, -3, [1, 0], 'Rear Cabin'], [2, 1, -2, [1, 0], 'Rear Cabin'],
             [2, 1, -1, [1, 0], 'Mid Cabin'], [2, 1, 0, [1, 0], 'Mid Cabin'], [2, 1, 1, [1, 0], 'Mid Cabin'],
             [2, 1, 2, [1, 0], 'Wing Cabin'], [2, 1, 3, [1, 0], 'Wing Cabin'], [2, 1, 4, [1, 0], 'Wing Cabin'],
             [2, 1, 5, [1, 0], 'Forward Cabin'], [2, 1, 6, [1, 0], 'Forward Cabin'], [2, 1, 7, [1, 0], 'Forward Cabin'],
             [2, 1, 8, [1, 0], 'Cockpit'], [2, 2, -4, [1, 0], 'Tail'], [2, 2, -3, [1, 0], 'Rear Cabin'],
             [2, 2, -2, [20, 0], 'Rear Cabin'], [2, 2, -1, [1, 0], 'Mid Cabin'], [2, 2, 0, [20, 0], 'Mid Cabin'],
             [2, 2, 1, [1, 0], 'Mid Cabin'], [2, 2, 2, [20, 0], 'Wing Cabin'], [2, 2, 3, [1, 0], 'Wing Cabin'],
             [2, 2, 4, [20, 0], 'Wing Cabin'], [2, 2, 5, [1, 0], 'Forward Cabin'], [2, 2, 6, [20, 0], 'Forward Cabin'],
             [2, 2, 7, [1, 0], 'Forward Cabin'], [2, 2, 8, [20, 0], 'Cockpit'], [3, 0, 8, [35, 15], 'Cockpit'],
             [3, 1, -4, [1, 0], 'Tail'], [3, 1, -3, [1, 0], 'Rear Cabin'], [3, 1, -2, [1, 0], 'Rear Cabin'],
             [3, 1, -1, [1, 0], 'Mid Cabin'], [3, 1, 0, [1, 0], 'Mid Cabin'], [3, 1, 1, [1, 0], 'Mid Cabin'],
             [3, 1, 2, [1, 0], 'Wing Cabin'], [3, 1, 3, [1, 0], 'Wing Cabin'], [3, 1, 4, [1, 0], 'Wing Cabin'],
             [3, 1, 5, [1, 0], 'Forward Cabin'], [3, 1, 6, [1, 0], 'Forward Cabin'], [3, 1, 7, [1, 0], 'Forward Cabin'],
             [3, 1, 8, [1, 0], 'Cockpit'], [3, 1, 9, [1, 0], 'Cockpit'], [3, 2, -4, [1, 0], 'Tail'],
             [3, 2, 9, [20, 0], 'Cockpit'], [3, 3, -4, [1, 0], 'Tail'], [3, 3, -3, [1, 0], 'Rear Cabin'],
             [3, 3, -2, [1, 0], 'Rear Cabin'], [3, 3, -1, [1, 0], 'Mid Cabin'], [3, 3, 0, [1, 0], 'Mid Cabin'],
             [3, 3, 1, [1, 0], 'Mid Cabin'], [3, 3, 2, [1, 0], 'Wing Cabin'], [3, 3, 3, [1, 0], 'Wing Cabin'],
             [3, 3, 4, [1, 0], 'Wing Cabin'], [3, 3, 5, [1, 0], 'Forward Cabin'], [3, 3, 6, [1, 0], 'Forward Cabin'],
             [3, 3, 7, [1, 0], 'Forward Cabin'], [3, 3, 8, [20, 0], 'Cockpit'], [3, 4, -4, [1, 0], 'Tail'],
             [4, 1, -4, [1, 0], 'Tail'], [4, 1, -3, [1, 0], 'Rear Cabin'], [4, 1, -2, [1, 0], 'Rear Cabin'],
             [4, 1, -1, [1, 0], 'Mid Cabin'], [4, 1, 0, [1, 0], 'Mid Cabin'], [4, 1, 1, [1, 0], 'Mid Cabin'],
             [4, 1, 2, [1, 0], 'Wing Cabin'], [4, 1, 3, [1, 0], 'Wing Cabin'], [4, 1, 4, [1, 0], 'Wing Cabin'],
             [4, 1, 5, [1, 0], 'Forward Cabin'], [4, 1, 6, [1, 0], 'Forward Cabin'], [4, 1, 7, [1, 0], 'Forward Cabin'],
             [4, 1, 8, [1, 0], 'Cockpit'], [4, 2, -4, [1, 0], 'Tail'], [4, 2, -3, [1, 0], 'Rear Cabin'],
             [4, 2, -2, [20, 0], 'Rear Cabin'], [4, 2, -1, [1, 0], 'Mid Cabin'], [4, 2, 0, [20, 0], 'Mid Cabin'],
             [4, 2, 1, [1, 0], 'Mid Cabin'], [4, 2, 2, [20, 0], 'Wing Cabin'], [4, 2, 3, [1, 0], 'Wing Cabin'],
             [4, 2, 4, [20, 0], 'Wing Cabin'], [4, 2, 5, [1, 0], 'Forward Cabin'], [4, 2, 6, [20, 0], 'Forward Cabin'],
             [4, 2, 7, [1, 0], 'Forward Cabin'], [4, 2, 8, [20, 0], 'Cockpit'], [5, 0, -3, [35, 15], 'Left Tailplane'],
             [5, 1, -4, [1, 0], 'Left Tailplane'], [5, 1, -3, [1, 0], 'Left Tailplane'], [5, 1, 2, [1, 0], 'Left Wing'],
             [5, 1, 3, [1, 0], 'Left Wing'], [5, 1, 4, [1, 0], 'Left Wing'], [6, 1, -4, [1, 0], 'Left Tailplane'],
             [6, 1, 2, [1, 0], 'Left Wing'], [6, 1, 3, [1, 0], 'Left Wing'], [6, 1, 4, [1, 0], 'Left Wing'],
             [7, 1, -4, [1, 0], 'Left Tailplane'], [7, 1, 2, [1, 0], 'Left Wing'], [7, 1, 3, [1, 0], 'Left Wing'],
             [7, 1, 4, [1, 0], 'Left Wing'], [8, 1, 2, [1, 0], 'Left Wing'], [8, 1, 3, [1, 0], 'Left Wing'],
             [9, 1, 2, [1, 0], 'Left Wing']]
    resetWorld()
    #while True:
    #    mc.postToChat("Place your Dots Board on top of the Raspberry Pi and hit enter in the commandline (not Minecraft Pi).")
    #    mc.postToChat(" ")
    #    answer = readInput("", None)
    #    if answer is not None:
    #        break

    mc.setBlock(-27, 3, 2, 20)  #Create a glass platform for the player to stand on
    mc.player.setPos(-27, 4, 2) #Teleport the player to that platform
    waitBlock("Place your dots board on top of the Raspberry Pi and right click the gold block when you are ready.")

    updatedStuff = checkParts(AIRPLANE)
    checkColours()
    demoPlane = offset(updatedStuff, -20, 0, 0)
    if (len(demoPlane) == 93) and (enableRocketEasterEgg == True):
        mc.postToChat("Easter egg!")

        if OtherPartStatus["Cloud"]:
            addClouds(-10, 0, -10)
            #l = Lightning(0, 0, 0, 0, 0)
            #l.daemon = True
            #l.start()
        if OtherPartStatus["Bear"]:
            b = Babbage(babbage, 0, 0, -6, 0, 0)
            b.daemon = True
            b.start()

        runRocket()
        sys.exit(0)
    #mc.setBlock(-27, 3, 2, 20)  #Create a glass platform for the player to stand on
    #mc.player.setPos(-27, 4, 2) #Teleport the player to that platform
    #waitBlock()
    mc.camera.setNormal()
    if demoPlane == []:
        mc.postToChat("")
        mc.postToChat("Dots board not detected! Did you correctly attach it or forget to join the dots?")
        mc.postToChat(" ")
        runSimulation()
    else:

        placeBlocks(demoPlane)
        mc.postToChat(" ")
        #mc.postToChat("When you are ready to test your plane, hit enter in commandline (not Minecraft")
        #input()
        waitBlock("When you are ready to test your plane, right click the golden block again.")

        resetWorld()
        mc.player.setPos(-20, 8, 17)
        mc.setBlock(-20, 7, 17, 20)

        if OtherPartStatus["Cloud"]:
            addClouds()
            l = Lightning(0, 0, 0, 0, 0)
            l.daemon = True
            l.start()
        if OtherPartStatus["Bear"]:
            b = Babbage(babbage, 0, 0, -6, 0, 0)
            b.daemon = True
            b.start()

        if flightScore == 24:
            movePlane(updatedStuff, 20, 0)
        else:
            movePlane(updatedStuff, 20, 10)
        resetWorld()
        mc.player.setPos(-20, 8, 17)
        mc.setBlock(-20, 7, 17, 20)
        createSign()
        mc.player.setPos(-20, 8, 17)
        mc.setBlock(-20, 7, 17, 20)
def checkColours():
    global SelectedColours
    """
    Generate a list of colours which the plane picks at random when it is being created.
    If no colour is selected on the dots board, white is chosen.
    """
    SelectedColours = []

    if OtherPartStatus["Red"]:
        SelectedColours.append([35, 14],)
    if OtherPartStatus["Orange"]:
        SelectedColours.append([35, 1],)
    if OtherPartStatus["Blue"]:
        SelectedColours.append([35, 11],)
    if OtherPartStatus["Green"]:
        SelectedColours.append([35, 5],)

    if len(SelectedColours) == 0:
        SelectedColours.append([35, 0],)

    return SelectedColours

def waitBlock(message):
    done = False
    while done == False:
        mc.setBlock(-25, 5, 2, 41)
        mc.postToChat(message)
        for i in range(0, 16):
            for hitBlock in mc.events.pollBlockHits():
                if (mc.getBlock(hitBlock.pos.x, hitBlock.pos.y, hitBlock.pos.z)) == 41:
                    done = True
            if done:
                break
            time.sleep(0.5)


def addClouds(x = 0, y = 0, z = 0):
    """
    Adds the clouds. Only run when the cloud is selected on the dots board.
    """
    placeBlocks(offset(CLOUDROTATE, x+5, y+0, z+0), [1, 0])
    placeBlocks(offset(CLOUDROTATE, x+3, y+2, z+16), [1, 0])
    placeBlocks(offset(CLOUDROTATE, x+14, y+2, z+16), [1, 0])
    placeBlocks(offset(CLOUD, x+1, y+0, z+24), [1, 0])


def getPartsStatus():
    """
    Checks each pin PlanePartMap and generates a dictionary of each part of the plane if it should be displayed or not.
    Also checks each pin in OtherpartStatus (List on non plane plane parts including bear, cloud and colours) and does the same.
    """
    global OtherPartStatus
    PlanePartStatus = {}
    OtherPartStatus = {}
    for i in range(0, len(PlanePartMap)):
        activePins = 0
        for pin in range(0, len(PlanePartMap[i][1])):
            if pinIsActive(PlanePartMap[i][1][pin]):
                activePins = activePins + 1
        if activePins >= PlanePartMap[i][2]:
            PlanePartStatus[PlanePartMap[i][0]] = True
        else:
            PlanePartStatus[PlanePartMap[i][0]] = False
    for i in range(0, len(OtherPartMap)):
        if pinIsActive(OtherPartMap[i][1][0]) == True:
            OtherPartStatus[OtherPartMap[i][0]] = True
        else:
            OtherPartStatus[OtherPartMap[i][0]] = False
    return (PlanePartStatus, OtherPartStatus)


def checkParts(coordsList):
    """
    Builds the part status dictionaries for each plane part and other part (bear, cloud and colours)
    Then generates the list of blocks to be placed (newCoordsList).
    Also calls calculateFlightDistance() to generate the flight score.
    """
    global planePartStatus, otherPartStatus
    planePartStatus, OtherPartStatus = getPartsStatus()
    newCoordsList = []
    for i in range(0, len(coordsList)):
        if planePartStatus[coordsList[i][4]]:
            newCoordsList.append(coordsList[i])
    global flightScore
    flightScore = calculateFlightDistance(planePartStatus)
    return newCoordsList


def calculateFlightDistance(planePartStatus):
    """
    Calculates the "score" the user gets based on which parts of the plane are coloured in.
    If they are missing any part of the plane, 10 points deducted.
    """
    score = 0
    for i in planePartStatus:
        if planePartStatus[i] == True:
            score = score + 2
        else:
            score = score - 2
        if score < 0:
            score = 0

    if score != 20:
        score = score - 10
        if score < 0:
            score = 0
    else:
        score = score + 4
    return score


def changeByOne(coords):
    """
    Changes coordinates by 1 on the x axis (to move the plane forward 1)
    """
    for i in range(0, len(coords)):
        coords[i][0] = coords[i][0] + 1
    return coords


def offset(coordsOld, x, y, z):
    """
    Offset the coordinates of the list by the x, y and z values.
    """
    coords = deepcopy(coordsOld)
    for i in range(0, len(coords)):
        coords[i][0] = coords[i][0] + x
        coords[i][1] = coords[i][1] + y
        coords[i][2] = coords[i][2] + z
    return coords


def movePlane(stuff, distance, fall):
    """
    Main function controlling the movement of the plane.

    Places the first copy of the plane, then moves the plane forward 25 steps.
    The planeFall() function controls if the plane falls any each step forward (which it won't if you connect all the dots)
    When placing blocks, it only places the needed new blocks and when breaking blocks, it only breaks blocks no longer needed.
    """
    planeCoords = offset(stuff, 0, 11, 0)
    oldCoords = planeCoords[:]
    coords = planeCoords[:]
    breakBlocks(oldCoords)
    placeBlocks(coords)
    for x in range(0, 25):
        oldCoords = deepcopy(coords)

        placeBlocks(coords)  # Standard single thread
        # placeBlocksThreading(coords)   #Multiple threads


        coords = planeFall(x, coords, flightScore, 25)

        for i in range(0, len(coords)):
            coords[i][2] = coords[i][2] + 1
        time.sleep(PLANEPAUSE)
        toBreak = [x for x in oldCoords if x not in coords]

        coordsNoData = []
        for i in range(0, len(coords)):
            coordsNoData.append(coords[i][:3])

        oldCoordsNoData = []
        for i in range(0, len(toBreak)):
            oldCoordsNoData.append(toBreak[i][:3])

        toBreak = [x for x in oldCoordsNoData if x not in coordsNoData]

        breakBlocks(toBreak)
    breakBlocks(coords)




def moveRocket(stuff, distance, fall):
    global rocketBottom
    """
    Easter egg part of the program created to mark the launch of British Astronaut Tim Peake to the International
    Space Station on 15th December 2015.
    To activate, fill in the full plane, excluding the wings.
    """
    planeCoords = offset(stuff, 0, 11, 0)
    oldCoords = planeCoords[:]
    coords = planeCoords[:]
    breakBlocks(oldCoords)
    placeBlocks(coords)
    countdown()
    for x in range(0, 50):
        oldCoords = deepcopy(coords)
        rocketBottom = coords[0]
        print("Rocket bottom " + str(rocketBottom))

        placeBlocks(coords)  # Standard single thread
        # placeBlocksThreading(coords)   #Multiple threads


        coords = rocketLiftOff(x, coords, 0, 25)

        #for i in range(0, len(coords)):
        #    coords[i][2] = coords[i][2] + 1
        time.sleep(PLANEPAUSE)
        toBreak = [x for x in oldCoords if x not in coords]

        coordsNoData = []
        for i in range(0, len(coords)):
            coordsNoData.append(coords[i][:3])

        oldCoordsNoData = []
        for i in range(0, len(toBreak)):
            oldCoordsNoData.append(toBreak[i][:3])

        toBreak = [x for x in oldCoordsNoData if x not in coordsNoData]

        breakBlocks(toBreak)
    breakBlocks(coords)
    rocketBottom[0] = 1000



def planeFall(currentForward, coords, startDrop, distance):
    """
    Controls the height of the plane. currentForward is passed in from the movePlane() function as the number of
    blocks the plane has moved forward already. startDrop is calculated by calculateFlightDistance()
    """
    global SelectedColour
    if (currentForward < startDrop) == 0:
        for i in range(0, len(coords)):
            coords[i][1] = coords[i][1] - 1
    return coords

def rocketLiftOff(currentForward, coords, startDrop, distance):
    """
    Controls the height of the rocket by simply increasing it by one each time.
    """
    global SelectedColour
    if (currentForward < startDrop) == 0:
        for i in range(0, len(coords)):
            coords[i][1] = coords[i][1] +1
    return coords


def placeBlocks(stuff, overrideColour=None):
    """
    Places all the blocks in the list provided list. If the block provided is stone ([1,0]) then that will be replaced by the SelectedColour.
    """
    for i in range(0, len(stuff)):
        if stuff[i][3][0] == 1:
            if overrideColour == None:
                if len(SelectedColours) > 1:
                    SelectedColour = SelectedColours[random.randint(0, len(SelectedColours)-1)]
                else:
                    SelectedColour = SelectedColours[0]
                mc.setBlock(stuff[i][0], stuff[i][1], stuff[i][2], SelectedColour[0], SelectedColour[1])
            else:
                mc.setBlock(stuff[i][0], stuff[i][1], stuff[i][2], overrideColour[0], overrideColour[1])
        else:
            mc.setBlock(stuff[i][0], stuff[i][1], stuff[i][2], stuff[i][3][0], stuff[i][3][1])


def placeBlocksThreading(stuff):
    """
    Similar to placeBlocks(), but starts a new thread for each block place.
    Experimental and no longer used.
    """
    blockJobs = []
    for i in range(0, len(stuff)):
        if stuff[i][3][0] == 1:
            blockJobs.append(testThreading(stuff[i][0], stuff[i][1], stuff[i][2], SelectedColour[0], SelectedColour[1]))
            blockJobs[len(blockJobs) - 1].start()
        else:
            blockJobs.append(testThreading(stuff[i][0], stuff[i][1], stuff[i][2], stuff[i][3][0], stuff[i][3][1]))
            blockJobs[len(blockJobs) - 1].start()


def breakBlocks(stuff):
    """
    Set all blocks in the provided list to air (aka break them).
    """
    for i in range(0, len(stuff)):
        mc.setBlock(stuff[i][0], stuff[i][1], stuff[i][2], 0)


def createSign():
    """
    Place the correct sign behind everything. Currently supports the SUCCESS sign and the FAILED sign.
    Also informs the player of which bits they were missing.
    """
    global flightScore, planePartStatus
    if flightScore == 24:
        a = offset(SUCCESS, 8, 5, -7)
        placeBlocks(a, [35, 14])
    else:
        a = offset(FAILED, 8, 5, -7)
        placeBlocks(a, SIGNCOLOUR)
        mc.postToChat("Your plane crashed :(")
        missing = ""
        for x in planePartStatus:
            if planePartStatus[x] == False:
                missing = missing + ", " + x
        mc.postToChat("It was missing " + missing + ".")
    time.sleep(6)
    resetWorld()

def countdown():
    """
    Easter egg part of the program created to mark the launch of British Astronaut Tim Peake to the International
    Space Station on 15th December 2015.
    To activate, fill in the full plane, excluding the wings.
    """
    time.sleep(2)
    mc.postToChat("")
    mc.postToChat("5")
    mc.postToChat("")
    time.sleep(1)
    mc.postToChat("4")
    mc.postToChat("")
    time.sleep(1)
    mc.postToChat("3")
    mc.postToChat("")
    time.sleep(1)
    mc.postToChat("2")
    mc.postToChat("")
    time.sleep(1)
    mc.postToChat("1")
    mc.postToChat("")
    time.sleep(1)
    mc.postToChat("LIFTOFF!!")
    mc.postToChat("")

def runRocket():
    """
    Easter egg part of the program created to mark the launch of British Astronaut Tim Peake to the International
    Space Station on 15th December 2015.
    To activate, fill in the full plane, excluding the wings.
    """
    global flightScore
    rocket = offset(ROCKET, -30, -12, 5)
    rocketBottom = (10, 10, 10)
    a = rocketFire(0, -1, 0)
    a.daemon = True
    a.start()
    b = rocketFire(4, -1, 0)
    b.daemon = True
    b.start()
    c = rocketFire(4, -1, 4)
    c.daemon = True
    c.start()
    d = rocketFire(0, -1, 4)
    d.daemon = True
    d.start()
    moveRocket(rocket, 0, 0)
    resetWorld()
    flightScore = 24
    createSign()
    #time.sleep(10)



# Mapper system start ------------------------------------------------------------------------------------------------------------------------------------

def scanBlocks(x1, y1, z1, x2, y2, z2):
    """
    Scans the area between the 2 coordinate sets, converting it into a list. It is then printed to be used.
    """
    print("Scanning")
    scanList = []
    smallx = min(x1, x2)
    bigx = max(x1, x2)
    smally = min(y1, y2)
    bigy = max(y1, y2)
    smallz = min(z2, z2)
    bigz = max(z1, z2)
    for a in range(smallx, bigx):
        for b in range(smally, bigy):
            for c in range(smallz, bigz):
                new = [a, b, c, [mc.getBlockWithData(a, b, c)]]
                if new[3][0] != 0:
                    new2 = [new[0], new[1], new[2], [new[3][0].id, new[3][0].data]]
                    new2 = [new[2], new[1], new[0], [new[3][0].id, new[3][0].data]]
                    scanList.append(new2)
                    print(new2)
    return scanList


def mapRegions(woolCoords, coords):
    """
    Used to assign the required zone to each coordinate by reading wool colour from the world of the block.
    """
    print(woolCoords)
    #print("Coords length " + str(len(woolCoords)))
    for i in range(0, len(woolCoords)):
        coords[i].append(mapSingleRegion(woolCoords[i][3][1]))
    return coords


def mapSingleRegion(item):
    """
    Used to assign the required zone to each coordinate by reading wool colour from the world of the block.
    """
    if item == 2:
        return "Cockpit"
    elif item == 1:
        return "Forward Cabin"
    elif item == 4:
        return "Left Wing"
    elif item == 15:
        return "Wing Cabin"
    elif item == 14:
        return "Right Wing"
    elif item == 3:
        return "Mid Cabin"
    elif item == 5:
        return "Rear Cabin"
    elif item == 6:
        return "Left Tailplane"
    elif item == 12:
        return "Tail"
    elif item == 13:
        return "Right Tailplane"
    else:
        print("Error! With " + str(item))

def resetWorld():
    """
    Reset the build area back to a flat layer of ice and air above.
    """
    mc.setBlocks(45, -1, -25, -35, -1, 56, 79)  # Reset building area
    mc.setBlocks(45, 0, -25, -35, 50, 56, 0)


# Mapper system end ------------------------------------------------------------------------------------------------------------------------------------


def main():
    try:
        gpioSetup(PINS)
        while True:
            runSimulation()
            resetWorld()
    finally:
        GPIO.cleanup()



if __name__ == "__main__":
    main()

