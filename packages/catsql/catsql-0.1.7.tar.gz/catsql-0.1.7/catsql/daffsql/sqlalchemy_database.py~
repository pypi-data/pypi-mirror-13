from catsql.daffsql.sqlalchemy_helper import SqlAlchemyHelper

class SqlAlchemyDatabase(daff.SqlDatabase):

    def __init__(self,url):
        self.url = url
        self.Base = declarative_base()
        self.engine = create_engine(url)
        self.Base.metadata.reflect(self.engine)
        self.session = create_session(bind=self.engine)

    def getTable(self, name):
        result = self.Base.metadata.tables[name.toString()]
        return result

    # needed because pragmas do not support bound parameters
    def getQuotedColumnName(self,name):
        return name  # adequate for test, not real life

    # needed because pragmas do not support bound parameters
    def getQuotedTableName(self,name):
        return name.toString()  # adequate for test, not real life

    def getColumns(self,name):
        name = name.toString()
        tab = self.Base.metadata.tables[name]
        columns = []
        for name, col in tab.columns.items():
            column = daff.SqlColumn()
            column.setName(name)
            column.setPrimaryKey(col.primary_key)
            try:
                column.setType(str(col.type),'sqlalchemy')
            except CompileError:
                column.setType("",'sqlalchemy')
            columns.append(column)
        return columns

    def begin(self,query,args=[],order=[]):
        print("Not implemented " + query)
        return False

    def beginRow(self,tab,row,order=[]):
        print("Not implemented")
        return False

    def read(self):
        return False

    def get(self,index):
        return None

    def end(self):
        pass

    def rowid(self):
        return "rowid"

    def getHelper(self):
        return SqlAlchemyHelper()
    
    def getNameForAttachment(self):
        return None
