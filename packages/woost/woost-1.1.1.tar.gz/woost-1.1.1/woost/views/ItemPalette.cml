<?xml version="1.0" encoding="utf-8"?>
<?py
from cocktail.schema import SchemaClass
from cocktail.controllers import context
from woost import app
from woost.models import get_current_user, CreatePermission
?>

<ul
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates">

    <?py-class
    icon_size = 16
    types = None
    groups_order = None
    grouping_threshold = 8

    def should_include_type(self, content_type):
        return (
            content_type.visible
            and content_type.instantiable
            and self._user.has_permission(CreatePermission, target = content_type)
        )

    def __get_group_order(self, group):
        if group:
            try:
                return self.groups_order.index(group)
            except ValueError:
                pass
        return len(self.groups_order)
    ?>

    <py:ready>
        <?py
        if isinstance(self.types, SchemaClass):
            types = [self.types] + list(self.types.derived_schemas(recursive = True))
        else:
            types = self.types

        self._user = get_current_user()
        types = [content_type for content_type in types if self.should_include_type(content_type)]
        types.sort(key = lambda content_type: translations(content_type.name))
        self._groups_visible = (len(types) >= self.grouping_threshold)
        groups = {}

        for content_type in types:
            group = groups.get(content_type.type_group)

            if group is None:
                group = self.create_palette_group(content_type.type_group)
                groups[content_type.type_group] = group
                if not self.groups_order:
                    self.append(group)

            entry = self.create_palette_entry(content_type)
            group.group_entries.append(entry)

        if self.groups_order:
            for group_name in sorted(groups, key = self.__get_group_order):
                self.append(groups[group_name])
        ?>
    </py:ready>

    <li py:def="palette_group" py:args="group" py:type_group="${group}">
        <div py:local_id="group_label" py:visible="${self._groups_visible}">
            ${group and translations("woost.type_groups." + group) or ""}
        </div>
        <ul py:local_id="group_entries"/>
    </li>

    <li py:def="palette_entry" py:args="content_type">
        <a py:local_id="button" href="#">
            <img py:local_id="type_icon"  src="${app.icon_resolver.find_icon_url(content_type, self.icon_size)}"/>
            <span py:local_id="type_label">${translations(content_type.name)}</span>
        </a>
    </li>

</ul>

