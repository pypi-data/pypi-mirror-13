# ./lib/objects/marketplace.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:7cadbf1a2576894d6a5ef054c5bb21f139bf4ff8
# Generated 2016-01-25 17:52:19.766758 by PyXB version 1.2.4 using Python 2.7.8.final.0
# Namespace http://www.usharesoft.com/marketplace

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:ff17b686-c383-11e5-bab3-5254006a1d08')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.4'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.usharesoft.com/marketplace', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 282, 24)
    _Documentation = None
STD_ANON._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON, enum_prefix=None)
STD_ANON.APPROVED = STD_ANON._CF_enumeration.addEnumeration(unicode_value='APPROVED', tag='APPROVED')
STD_ANON.ASSIGNED = STD_ANON._CF_enumeration.addEnumeration(unicode_value='ASSIGNED', tag='ASSIGNED')
STD_ANON.NEW = STD_ANON._CF_enumeration.addEnumeration(unicode_value='NEW', tag='NEW')
STD_ANON.REJECTED = STD_ANON._CF_enumeration.addEnumeration(unicode_value='REJECTED', tag='REJECTED')
STD_ANON.SUBMITTED = STD_ANON._CF_enumeration.addEnumeration(unicode_value='SUBMITTED', tag='SUBMITTED')
STD_ANON._InitializeFacetMap(STD_ANON._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 425, 24)
    _Documentation = None
STD_ANON_._InitializeFacetMap()

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 440, 24)
    _Documentation = None
STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2.APPROVAL_NOTE = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='APPROVAL_NOTE', tag='APPROVAL_NOTE')
STD_ANON_2.QUESTION = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='QUESTION', tag='QUESTION')
STD_ANON_2.REPLY = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='REPLY', tag='REPLY')
STD_ANON_2.REVIEW = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='REVIEW', tag='REVIEW')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 542, 24)
    _Documentation = None
STD_ANON_3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_3, enum_prefix=None)
STD_ANON_3.BYOL = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='BYOL', tag='BYOL')
STD_ANON_3.FREE = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='FREE', tag='FREE')
STD_ANON_3.PERPETUAL = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='PERPETUAL', tag='PERPETUAL')
STD_ANON_3.SETUP = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='SETUP', tag='SETUP')
STD_ANON_3.SUBSCRIPTION = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='SUBSCRIPTION', tag='SUBSCRIPTION')
STD_ANON_3.SUPPORT = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='SUPPORT', tag='SUPPORT')
STD_ANON_3.TRAINING = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='TRAINING', tag='TRAINING')
STD_ANON_3.TRIAL = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='TRIAL', tag='TRIAL')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_enumeration)

# Atomic simple type: {http://www.usharesoft.com/marketplace}Currency
class Currency (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Currency')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 576, 4)
    _Documentation = None
Currency._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Currency, enum_prefix=None)
Currency.ARS = Currency._CF_enumeration.addEnumeration(unicode_value='ARS', tag='ARS')
Currency.AUD = Currency._CF_enumeration.addEnumeration(unicode_value='AUD', tag='AUD')
Currency.BRL = Currency._CF_enumeration.addEnumeration(unicode_value='BRL', tag='BRL')
Currency.CAD = Currency._CF_enumeration.addEnumeration(unicode_value='CAD', tag='CAD')
Currency.CHF = Currency._CF_enumeration.addEnumeration(unicode_value='CHF', tag='CHF')
Currency.CNY = Currency._CF_enumeration.addEnumeration(unicode_value='CNY', tag='CNY')
Currency.EUR = Currency._CF_enumeration.addEnumeration(unicode_value='EUR', tag='EUR')
Currency.GBP = Currency._CF_enumeration.addEnumeration(unicode_value='GBP', tag='GBP')
Currency.HKD = Currency._CF_enumeration.addEnumeration(unicode_value='HKD', tag='HKD')
Currency.INR = Currency._CF_enumeration.addEnumeration(unicode_value='INR', tag='INR')
Currency.JPY = Currency._CF_enumeration.addEnumeration(unicode_value='JPY', tag='JPY')
Currency.NZD = Currency._CF_enumeration.addEnumeration(unicode_value='NZD', tag='NZD')
Currency.USD = Currency._CF_enumeration.addEnumeration(unicode_value='USD', tag='USD')
Currency._InitializeFacetMap(Currency._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'Currency', Currency)

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 644, 24)
    _Documentation = None
STD_ANON_4._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_4, enum_prefix=None)
STD_ANON_4.BYOL = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='BYOL', tag='BYOL')
STD_ANON_4.FREE = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='FREE', tag='FREE')
STD_ANON_4.PERPETUAL = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='PERPETUAL', tag='PERPETUAL')
STD_ANON_4.SUBSCRIPTION = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='SUBSCRIPTION', tag='SUBSCRIPTION')
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_enumeration)

# Atomic simple type: {http://www.usharesoft.com/marketplace}Frequency
class Frequency (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Frequency')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 736, 4)
    _Documentation = None
Frequency._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Frequency, enum_prefix=None)
Frequency.ANNUALLY = Frequency._CF_enumeration.addEnumeration(unicode_value='ANNUALLY', tag='ANNUALLY')
Frequency.DAILY = Frequency._CF_enumeration.addEnumeration(unicode_value='DAILY', tag='DAILY')
Frequency.MONTHLY = Frequency._CF_enumeration.addEnumeration(unicode_value='MONTHLY', tag='MONTHLY')
Frequency.WEEKLY = Frequency._CF_enumeration.addEnumeration(unicode_value='WEEKLY', tag='WEEKLY')
Frequency._InitializeFacetMap(Frequency._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'Frequency', Frequency)

# Atomic simple type: {http://www.usharesoft.com/marketplace}Interval
class Interval (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Interval')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 783, 4)
    _Documentation = None
Interval._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Interval, enum_prefix=None)
Interval.DAYS = Interval._CF_enumeration.addEnumeration(unicode_value='DAYS', tag='DAYS')
Interval.MONTHS = Interval._CF_enumeration.addEnumeration(unicode_value='MONTHS', tag='MONTHS')
Interval.WEEKS = Interval._CF_enumeration.addEnumeration(unicode_value='WEEKS', tag='WEEKS')
Interval.YEARS = Interval._CF_enumeration.addEnumeration(unicode_value='YEARS', tag='YEARS')
Interval._InitializeFacetMap(Interval._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'Interval', Interval)

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 825, 24)
    _Documentation = None
STD_ANON_5._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_5, enum_prefix=None)
STD_ANON_5.VBOX = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='VBOX', tag='VBOX')
STD_ANON_5.VMWARE = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='VMWARE', tag='VMWARE')
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 833, 24)
    _Documentation = None
STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_6, enum_prefix=None)
STD_ANON_6.UBUNTU_14 = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='UBUNTU 14', tag='UBUNTU_14')
STD_ANON_6.WINDOWS_XP = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='WINDOWS XP', tag='WINDOWS_XP')
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 844, 24)
    _Documentation = None
STD_ANON_7._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_7, enum_prefix=None)
STD_ANON_7.CLOUD = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='CLOUD', tag='CLOUD')
STD_ANON_7.CONTAINER = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='CONTAINER', tag='CONTAINER')
STD_ANON_7.PHYSICAL = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='PHYSICAL', tag='PHYSICAL')
STD_ANON_7.VIRTUAL = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='VIRTUAL', tag='VIRTUAL')
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1240, 24)
    _Documentation = None
STD_ANON_8._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_8, enum_prefix=None)
STD_ANON_8.Approved = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Approved', tag='Approved')
STD_ANON_8.Assigned = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Assigned', tag='Assigned')
STD_ANON_8.New = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='New', tag='New')
STD_ANON_8.Rejected = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Rejected', tag='Rejected')
STD_ANON_8.Submitted = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='Submitted', tag='Submitted')
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1438, 24)
    _Documentation = None
STD_ANON_9._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_9, enum_prefix=None)
STD_ANON_9.URL = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='URL', tag='URL')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1525, 24)
    _Documentation = None
STD_ANON_10._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_10, enum_prefix=None)
STD_ANON_10.APPLIANCE = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='APPLIANCE', tag='APPLIANCE')
STD_ANON_10.BINARY = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='BINARY', tag='BINARY')
STD_ANON_10.SAAS = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='SAAS', tag='SAAS')
STD_ANON_10.SERVER = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='SERVER', tag='SERVER')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1593, 24)
    _Documentation = None
STD_ANON_11._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_11, enum_prefix=None)
STD_ANON_11.monthly = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='monthly', tag='monthly')
STD_ANON_11.none = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1604, 24)
    _Documentation = None
STD_ANON_12._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_12, enum_prefix=None)
STD_ANON_12.appliance = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='appliance', tag='appliance')
STD_ANON_12.diskusage = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='diskusage', tag='diskusage')
STD_ANON_12.generation = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='generation', tag='generation')
STD_ANON_12.scan = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='scan', tag='scan')
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_13 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1697, 24)
    _Documentation = None
STD_ANON_13._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_13, enum_prefix=None)
STD_ANON_13.added = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='added', tag='added')
STD_ANON_13.cancelled = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='cancelled', tag='cancelled')
STD_ANON_13.created = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='created', tag='created')
STD_ANON_13.deleted = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='deleted', tag='deleted')
STD_ANON_13.downloaded = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='downloaded', tag='downloaded')
STD_ANON_13.failed = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='failed', tag='failed')
STD_ANON_13.imported = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='imported', tag='imported')
STD_ANON_13.purchased = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='purchased', tag='purchased')
STD_ANON_13.shared = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='shared', tag='shared')
STD_ANON_13.success = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='success', tag='success')
STD_ANON_13.updated = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='updated', tag='updated')
STD_ANON_13.uploaded = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='uploaded', tag='uploaded')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_14 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 24)
    _Documentation = None
STD_ANON_14._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_14, enum_prefix=None)
STD_ANON_14.API_CALL = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='API_CALL', tag='API_CALL')
STD_ANON_14.CLOUD_ENGINE = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='CLOUD_ENGINE', tag='CLOUD_ENGINE')
STD_ANON_14.COMPUTER = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='COMPUTER', tag='COMPUTER')
STD_ANON_14.DEVICE = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='DEVICE', tag='DEVICE')
STD_ANON_14.GENERATION = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='GENERATION', tag='GENERATION')
STD_ANON_14.GIGABYTE = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='GIGABYTE', tag='GIGABYTE')
STD_ANON_14.HOST = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='HOST', tag='HOST')
STD_ANON_14.HOUR = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='HOUR', tag='HOUR')
STD_ANON_14.JVM = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='JVM', tag='JVM')
STD_ANON_14.MEGABYTE = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='MEGABYTE', tag='MEGABYTE')
STD_ANON_14.MIGRATION = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='MIGRATION', tag='MIGRATION')
STD_ANON_14.RAM = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='RAM', tag='RAM')
STD_ANON_14.REMOTE_ENGINE = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='REMOTE_ENGINE', tag='REMOTE_ENGINE')
STD_ANON_14.SERVER = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='SERVER', tag='SERVER')
STD_ANON_14.SOCKET = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='SOCKET', tag='SOCKET')
STD_ANON_14.STUDIO_USER = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='STUDIO_USER', tag='STUDIO_USER')
STD_ANON_14.SUPPORT_CALL = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='SUPPORT_CALL', tag='SUPPORT_CALL')
STD_ANON_14.TERABYTE = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='TERABYTE', tag='TERABYTE')
STD_ANON_14.USER = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='USER', tag='USER')
STD_ANON_14.WEB_USER = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='WEB_USER', tag='WEB_USER')
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_15 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2136, 24)
    _Documentation = None
STD_ANON_15._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_15, enum_prefix=None)
STD_ANON_15.corporate = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='corporate', tag='corporate')
STD_ANON_15.developer = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='developer', tag='developer')
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_16 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2198, 24)
    _Documentation = None
STD_ANON_16._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_16, enum_prefix=None)
STD_ANON_16.corporate = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='corporate', tag='corporate')
STD_ANON_16.developer = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='developer', tag='developer')
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_enumeration)

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 214, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element apiKeyPair uses Python identifier apiKeyPair
    __apiKeyPair = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'apiKeyPair'), 'apiKeyPair', '__httpwww_usharesoft_commarketplace_CTD_ANON_apiKeyPair', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 216, 32), )

    
    apiKeyPair = property(__apiKeyPair.value, __apiKeyPair.set, None, None)

    _ElementMap.update({
        __apiKeyPair.name() : __apiKeyPair
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 252, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element applianceTemplate uses Python identifier applianceTemplate
    __applianceTemplate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'applianceTemplate'), 'applianceTemplate', '__httpwww_usharesoft_commarketplace_CTD_ANON__applianceTemplate', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 254, 32), )

    
    applianceTemplate = property(__applianceTemplate.value, __applianceTemplate.set, None, None)

    _ElementMap.update({
        __applianceTemplate.name() : __applianceTemplate
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 271, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element note uses Python identifier note
    __note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'note'), 'note', '__httpwww_usharesoft_commarketplace_CTD_ANON_2_note', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 273, 32), )

    
    note = property(__note.value, __note.set, None, None)

    _ElementMap.update({
        __note.name() : __note
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 303, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element approval uses Python identifier approval
    __approval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'approval'), 'approval', '__httpwww_usharesoft_commarketplace_CTD_ANON_3_approval', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 305, 32), )

    
    approval = property(__approval.value, __approval.set, None, None)

    _ElementMap.update({
        __approval.name() : __approval
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 334, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element artifact uses Python identifier artifact
    __artifact = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'artifact'), 'artifact', '__httpwww_usharesoft_commarketplace_CTD_ANON_4_artifact', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 336, 32), )

    
    artifact = property(__artifact.value, __artifact.set, None, None)

    _ElementMap.update({
        __artifact.name() : __artifact
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 364, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element badge uses Python identifier badge
    __badge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'badge'), 'badge', '__httpwww_usharesoft_commarketplace_CTD_ANON_5_badge', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 366, 32), )

    
    badge = property(__badge.value, __badge.set, None, None)

    _ElementMap.update({
        __badge.name() : __badge
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 380, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element category uses Python identifier category
    __category = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'category'), 'category', '__httpwww_usharesoft_commarketplace_CTD_ANON_6_category', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 382, 32), )

    
    category = property(__category.value, __category.set, None, None)

    _ElementMap.update({
        __category.name() : __category
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 398, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element category uses Python identifier category
    __category = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'category'), 'category', '__httpwww_usharesoft_commarketplace_CTD_ANON_7_category', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 400, 32), )

    
    category = property(__category.value, __category.set, None, None)

    _ElementMap.update({
        __category.name() : __category
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 430, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element comment uses Python identifier comment
    __comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'comment'), 'comment', '__httpwww_usharesoft_commarketplace_CTD_ANON_8_comment', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 432, 32), )

    
    comment = property(__comment.value, __comment.set, None, None)

    _ElementMap.update({
        __comment.name() : __comment
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 461, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element comment uses Python identifier comment
    __comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'comment'), 'comment', '__httpwww_usharesoft_commarketplace_CTD_ANON_9_comment', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 463, 32), )

    
    comment = property(__comment.value, __comment.set, None, None)

    _ElementMap.update({
        __comment.name() : __comment
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 477, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element company uses Python identifier company
    __company = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'company'), 'company', '__httpwww_usharesoft_commarketplace_CTD_ANON_10_company', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 479, 32), )

    
    company = property(__company.value, __company.set, None, None)

    _ElementMap.update({
        __company.name() : __company
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 521, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element compatibleProduct uses Python identifier compatibleProduct
    __compatibleProduct = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'compatibleProduct'), 'compatibleProduct', '__httpwww_usharesoft_commarketplace_CTD_ANON_11_compatibleProduct', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 523, 32), )

    
    compatibleProduct = property(__compatibleProduct.value, __compatibleProduct.set, None, None)

    _ElementMap.update({
        __compatibleProduct.name() : __compatibleProduct
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 565, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__httpwww_usharesoft_commarketplace_CTD_ANON_12_cost', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 567, 32), )

    
    cost = property(__cost.value, __cost.set, None, None)

    _ElementMap.update({
        __cost.name() : __cost
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 608, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element downloadTicket uses Python identifier downloadTicket
    __downloadTicket = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'downloadTicket'), 'downloadTicket', '__httpwww_usharesoft_commarketplace_CTD_ANON_13_downloadTicket', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 610, 32), )

    
    downloadTicket = property(__downloadTicket.value, __downloadTicket.set, None, None)

    _ElementMap.update({
        __downloadTicket.name() : __downloadTicket
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 625, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cost'), 'cost', '__httpwww_usharesoft_commarketplace_CTD_ANON_14_cost', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 627, 32), )

    
    cost = property(__cost.value, __cost.set, None, None)

    _ElementMap.update({
        __cost.name() : __cost
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 633, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element include uses Python identifier include
    __include = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'include'), 'include', '__httpwww_usharesoft_commarketplace_CTD_ANON_15_include', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 635, 32), )

    
    include = property(__include.value, __include.set, None, None)

    _ElementMap.update({
        __include.name() : __include
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 654, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element unit uses Python identifier unit
    __unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'unit'), 'unit', '__httpwww_usharesoft_commarketplace_CTD_ANON_16_unit', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 656, 32), )

    
    unit = property(__unit.value, __unit.set, None, None)

    _ElementMap.update({
        __unit.name() : __unit
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_17 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 673, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element edition uses Python identifier edition
    __edition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'edition'), 'edition', '__httpwww_usharesoft_commarketplace_CTD_ANON_17_edition', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 675, 32), )

    
    edition = property(__edition.value, __edition.set, None, None)

    _ElementMap.update({
        __edition.name() : __edition
    })
    _AttributeMap.update({
        
    })



# Complex type {http://www.usharesoft.com/marketplace}Entitlement with content type ELEMENT_ONLY
class Entitlement (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.usharesoft.com/marketplace}Entitlement with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Entitlement')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 684, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpwww_usharesoft_commarketplace_Entitlement_description', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 686, 12), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_Entitlement_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 687, 12), )

    
    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        __description.name() : __description,
        __name.name() : __name
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Entitlement', Entitlement)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_18 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 696, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element entitlement uses Python identifier entitlement
    __entitlement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entitlement'), 'entitlement', '__httpwww_usharesoft_commarketplace_CTD_ANON_18_entitlement', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 698, 32), )

    
    entitlement = property(__entitlement.value, __entitlement.set, None, None)

    _ElementMap.update({
        __entitlement.name() : __entitlement
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 725, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element export uses Python identifier export
    __export = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'export'), 'export', '__httpwww_usharesoft_commarketplace_CTD_ANON_19_export', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 727, 32), )

    
    export = property(__export.value, __export.set, None, None)

    _ElementMap.update({
        __export.name() : __export
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 761, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element include uses Python identifier include
    __include = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'include'), 'include', '__httpwww_usharesoft_commarketplace_CTD_ANON_20_include', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 763, 32), )

    
    include = property(__include.value, __include.set, None, None)

    _ElementMap.update({
        __include.name() : __include
    })
    _AttributeMap.update({
        
    })



# Complex type {http://www.usharesoft.com/marketplace}LocalizedMessage with content type ELEMENT_ONLY
class LocalizedMessage (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.usharesoft.com/marketplace}LocalizedMessage with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LocalizedMessage')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 791, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'message'), 'message', '__httpwww_usharesoft_commarketplace_LocalizedMessage_message', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 793, 12), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element messageId uses Python identifier messageId
    __messageId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'messageId'), 'messageId', '__httpwww_usharesoft_commarketplace_LocalizedMessage_messageId', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 794, 12), )

    
    messageId = property(__messageId.value, __messageId.set, None, None)

    
    # Element parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parameters'), 'parameters', '__httpwww_usharesoft_commarketplace_LocalizedMessage_parameters', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 795, 12), )

    
    parameters = property(__parameters.value, __parameters.set, None, None)

    _ElementMap.update({
        __message.name() : __message,
        __messageId.name() : __messageId,
        __parameters.name() : __parameters
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'LocalizedMessage', LocalizedMessage)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 796, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parameter'), 'parameter', '__httpwww_usharesoft_commarketplace_CTD_ANON_21_parameter', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 798, 24), )

    
    parameter = property(__parameter.value, __parameter.set, None, None)

    _ElementMap.update({
        __parameter.name() : __parameter
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_22 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 864, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element machineImage uses Python identifier machineImage
    __machineImage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'machineImage'), 'machineImage', '__httpwww_usharesoft_commarketplace_CTD_ANON_22_machineImage', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 866, 32), )

    
    machineImage = property(__machineImage.value, __machineImage.set, None, None)

    _ElementMap.update({
        __machineImage.name() : __machineImage
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 881, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element category uses Python identifier category
    __category = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'category'), 'category', '__httpwww_usharesoft_commarketplace_CTD_ANON_23_category', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 883, 32), )

    
    category = property(__category.value, __category.set, None, None)

    _ElementMap.update({
        __category.name() : __category
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 897, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element resource uses Python identifier resource
    __resource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'resource'), 'resource', '__httpwww_usharesoft_commarketplace_CTD_ANON_24_resource', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 899, 32), )

    
    resource = property(__resource.value, __resource.set, None, None)

    _ElementMap.update({
        __resource.name() : __resource
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 904, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element screenshot uses Python identifier screenshot
    __screenshot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'screenshot'), 'screenshot', '__httpwww_usharesoft_commarketplace_CTD_ANON_25_screenshot', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 906, 32), )

    
    screenshot = property(__screenshot.value, __screenshot.set, None, None)

    _ElementMap.update({
        __screenshot.name() : __screenshot
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_26 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 925, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element marketingPlan uses Python identifier marketingPlan
    __marketingPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'marketingPlan'), 'marketingPlan', '__httpwww_usharesoft_commarketplace_CTD_ANON_26_marketingPlan', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 927, 32), )

    
    marketingPlan = property(__marketingPlan.value, __marketingPlan.set, None, None)

    _ElementMap.update({
        __marketingPlan.name() : __marketingPlan
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 961, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element marketplace uses Python identifier marketplace
    __marketplace = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'marketplace'), 'marketplace', '__httpwww_usharesoft_commarketplace_CTD_ANON_27_marketplace', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 963, 32), )

    
    marketplace = property(__marketplace.value, __marketplace.set, None, None)

    _ElementMap.update({
        __marketplace.name() : __marketplace
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_28 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1001, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'status'), 'status', '__httpwww_usharesoft_commarketplace_CTD_ANON_28_status', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1003, 32), )

    
    status = property(__status.value, __status.set, None, None)

    _ElementMap.update({
        __status.name() : __status
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1028, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element order uses Python identifier order
    __order = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order'), 'order', '__httpwww_usharesoft_commarketplace_CTD_ANON_29_order', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1030, 32), )

    
    order = property(__order.value, __order.set, None, None)

    _ElementMap.update({
        __order.name() : __order
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1053, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subscriptionProfile uses Python identifier subscriptionProfile
    __subscriptionProfile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subscriptionProfile'), 'subscriptionProfile', '__httpwww_usharesoft_commarketplace_CTD_ANON_30_subscriptionProfile', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1055, 32), )

    
    subscriptionProfile = property(__subscriptionProfile.value, __subscriptionProfile.set, None, None)

    _ElementMap.update({
        __subscriptionProfile.name() : __subscriptionProfile
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_31 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1073, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element org uses Python identifier org
    __org = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'org'), 'org', '__httpwww_usharesoft_commarketplace_CTD_ANON_31_org', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1075, 32), )

    
    org = property(__org.value, __org.set, None, None)

    _ElementMap.update({
        __org.name() : __org
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_32 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1116, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element edition uses Python identifier edition
    __edition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'edition'), 'edition', '__httpwww_usharesoft_commarketplace_CTD_ANON_32_edition', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1118, 32), )

    
    edition = property(__edition.value, __edition.set, None, None)

    _ElementMap.update({
        __edition.name() : __edition
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_33 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1129, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element resource uses Python identifier resource
    __resource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'resource'), 'resource', '__httpwww_usharesoft_commarketplace_CTD_ANON_33_resource', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1131, 32), )

    
    resource = property(__resource.value, __resource.set, None, None)

    _ElementMap.update({
        __resource.name() : __resource
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_34 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1147, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element pricingPlan uses Python identifier pricingPlan
    __pricingPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pricingPlan'), 'pricingPlan', '__httpwww_usharesoft_commarketplace_CTD_ANON_34_pricingPlan', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1149, 32), )

    
    pricingPlan = property(__pricingPlan.value, __pricingPlan.set, None, None)

    _ElementMap.update({
        __pricingPlan.name() : __pricingPlan
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_35 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1165, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element comment uses Python identifier comment
    __comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'comment'), 'comment', '__httpwww_usharesoft_commarketplace_CTD_ANON_35_comment', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1167, 32), )

    
    comment = property(__comment.value, __comment.set, None, None)

    _ElementMap.update({
        __comment.name() : __comment
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_36 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1173, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element item uses Python identifier item
    __item = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'item'), 'item', '__httpwww_usharesoft_commarketplace_CTD_ANON_36_item', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1175, 32), )

    
    item = property(__item.value, __item.set, None, None)

    _ElementMap.update({
        __item.name() : __item
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1201, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element artifact uses Python identifier artifact
    __artifact = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'artifact'), 'artifact', '__httpwww_usharesoft_commarketplace_CTD_ANON_37_artifact', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1203, 32), )

    
    artifact = property(__artifact.value, __artifact.set, None, None)

    _ElementMap.update({
        __artifact.name() : __artifact
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_38 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1209, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element badge uses Python identifier badge
    __badge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'badge'), 'badge', '__httpwww_usharesoft_commarketplace_CTD_ANON_38_badge', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1211, 32), )

    
    badge = property(__badge.value, __badge.set, None, None)

    _ElementMap.update({
        __badge.name() : __badge
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1218, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element compatibleProduct uses Python identifier compatibleProduct
    __compatibleProduct = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'compatibleProduct'), 'compatibleProduct', '__httpwww_usharesoft_commarketplace_CTD_ANON_39_compatibleProduct', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1220, 32), )

    
    compatibleProduct = property(__compatibleProduct.value, __compatibleProduct.set, None, None)

    _ElementMap.update({
        __compatibleProduct.name() : __compatibleProduct
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_40 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1267, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element badge uses Python identifier badge
    __badge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'badge'), 'badge', '__httpwww_usharesoft_commarketplace_CTD_ANON_40_badge', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1269, 32), )

    
    badge = property(__badge.value, __badge.set, None, None)

    _ElementMap.update({
        __badge.name() : __badge
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_41 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1276, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element compatibleProduct uses Python identifier compatibleProduct
    __compatibleProduct = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'compatibleProduct'), 'compatibleProduct', '__httpwww_usharesoft_commarketplace_CTD_ANON_41_compatibleProduct', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1278, 32), )

    
    compatibleProduct = property(__compatibleProduct.value, __compatibleProduct.set, None, None)

    _ElementMap.update({
        __compatibleProduct.name() : __compatibleProduct
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_42 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1286, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element edition uses Python identifier edition
    __edition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'edition'), 'edition', '__httpwww_usharesoft_commarketplace_CTD_ANON_42_edition', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1288, 32), )

    
    edition = property(__edition.value, __edition.set, None, None)

    _ElementMap.update({
        __edition.name() : __edition
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_43 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1298, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element marketingResource uses Python identifier marketingResource
    __marketingResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'marketingResource'), 'marketingResource', '__httpwww_usharesoft_commarketplace_CTD_ANON_43_marketingResource', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1300, 32), )

    
    marketingResource = property(__marketingResource.value, __marketingResource.set, None, None)

    _ElementMap.update({
        __marketingResource.name() : __marketingResource
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_44 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1309, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element otherRelease uses Python identifier otherRelease
    __otherRelease = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'otherRelease'), 'otherRelease', '__httpwww_usharesoft_commarketplace_CTD_ANON_44_otherRelease', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1311, 32), )

    
    otherRelease = property(__otherRelease.value, __otherRelease.set, None, None)

    _ElementMap.update({
        __otherRelease.name() : __otherRelease
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_45 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1319, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element pricingResource uses Python identifier pricingResource
    __pricingResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pricingResource'), 'pricingResource', '__httpwww_usharesoft_commarketplace_CTD_ANON_45_pricingResource', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1321, 32), )

    
    pricingResource = property(__pricingResource.value, __pricingResource.set, None, None)

    _ElementMap.update({
        __pricingResource.name() : __pricingResource
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_46 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1333, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element screenshot uses Python identifier screenshot
    __screenshot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'screenshot'), 'screenshot', '__httpwww_usharesoft_commarketplace_CTD_ANON_46_screenshot', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1335, 32), )

    
    screenshot = property(__screenshot.value, __screenshot.set, None, None)

    _ElementMap.update({
        __screenshot.name() : __screenshot
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_47 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1345, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element supportResource uses Python identifier supportResource
    __supportResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supportResource'), 'supportResource', '__httpwww_usharesoft_commarketplace_CTD_ANON_47_supportResource', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1347, 32), )

    
    supportResource = property(__supportResource.value, __supportResource.set, None, None)

    _ElementMap.update({
        __supportResource.name() : __supportResource
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_48 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1370, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element productItemDetails uses Python identifier productItemDetails
    __productItemDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productItemDetails'), 'productItemDetails', '__httpwww_usharesoft_commarketplace_CTD_ANON_48_productItemDetails', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1372, 32), )

    
    productItemDetails = property(__productItemDetails.value, __productItemDetails.set, None, None)

    _ElementMap.update({
        __productItemDetails.name() : __productItemDetails
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_49 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1387, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element productItem uses Python identifier productItem
    __productItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productItem'), 'productItem', '__httpwww_usharesoft_commarketplace_CTD_ANON_49_productItem', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1389, 32), )

    
    productItem = property(__productItem.value, __productItem.set, None, None)

    _ElementMap.update({
        __productItem.name() : __productItem
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_50 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1418, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element productItemSummary uses Python identifier productItemSummary
    __productItemSummary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productItemSummary'), 'productItemSummary', '__httpwww_usharesoft_commarketplace_CTD_ANON_50_productItemSummary', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1420, 32), )

    
    productItemSummary = property(__productItemSummary.value, __productItemSummary.set, None, None)

    _ElementMap.update({
        __productItemSummary.name() : __productItemSummary
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_51 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1456, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element product uses Python identifier product
    __product = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'product'), 'product', '__httpwww_usharesoft_commarketplace_CTD_ANON_51_product', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1458, 32), )

    
    product = property(__product.value, __product.set, None, None)

    _ElementMap.update({
        __product.name() : __product
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_52 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1472, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element badge uses Python identifier badge
    __badge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'badge'), 'badge', '__httpwww_usharesoft_commarketplace_CTD_ANON_52_badge', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1474, 32), )

    
    badge = property(__badge.value, __badge.set, None, None)

    _ElementMap.update({
        __badge.name() : __badge
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_53 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1508, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element productSummary uses Python identifier productSummary
    __productSummary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productSummary'), 'productSummary', '__httpwww_usharesoft_commarketplace_CTD_ANON_53_productSummary', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1510, 32), )

    
    productSummary = property(__productSummary.value, __productSummary.set, None, None)

    _ElementMap.update({
        __productSummary.name() : __productSummary
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_54 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1547, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element productType uses Python identifier productType
    __productType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productType'), 'productType', '__httpwww_usharesoft_commarketplace_CTD_ANON_54_productType', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1549, 32), )

    
    productType = property(__productType.value, __productType.set, None, None)

    _ElementMap.update({
        __productType.name() : __productType
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_55 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1577, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element purchase uses Python identifier purchase
    __purchase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'purchase'), 'purchase', '__httpwww_usharesoft_commarketplace_CTD_ANON_55_purchase', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1579, 32), )

    
    purchase = property(__purchase.value, __purchase.set, None, None)

    _ElementMap.update({
        __purchase.name() : __purchase
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_56 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1625, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element quota uses Python identifier quota
    __quota = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quota'), 'quota', '__httpwww_usharesoft_commarketplace_CTD_ANON_56_quota', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1627, 32), )

    
    quota = property(__quota.value, __quota.set, None, None)

    _ElementMap.update({
        __quota.name() : __quota
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_57 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1642, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element entitlement uses Python identifier entitlement
    __entitlement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entitlement'), 'entitlement', '__httpwww_usharesoft_commarketplace_CTD_ANON_57_entitlement', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1644, 32), )

    
    entitlement = property(__entitlement.value, __entitlement.set, None, None)

    _ElementMap.update({
        __entitlement.name() : __entitlement
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_58 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1659, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element role uses Python identifier role
    __role = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'role'), 'role', '__httpwww_usharesoft_commarketplace_CTD_ANON_58_role', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1661, 32), )

    
    role = property(__role.value, __role.set, None, None)

    _ElementMap.update({
        __role.name() : __role
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_59 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1744, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element statTicket uses Python identifier statTicket
    __statTicket = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'statTicket'), 'statTicket', '__httpwww_usharesoft_commarketplace_CTD_ANON_59_statTicket', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1746, 32), )

    
    statTicket = property(__statTicket.value, __statTicket.set, None, None)

    _ElementMap.update({
        __statTicket.name() : __statTicket
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_60 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1761, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element admin uses Python identifier admin
    __admin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'admin'), 'admin', '__httpwww_usharesoft_commarketplace_CTD_ANON_60_admin', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1763, 32), )

    
    admin = property(__admin.value, __admin.set, None, None)

    _ElementMap.update({
        __admin.name() : __admin
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_61 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1773, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element quota uses Python identifier quota
    __quota = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quota'), 'quota', '__httpwww_usharesoft_commarketplace_CTD_ANON_61_quota', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1775, 32), )

    
    quota = property(__quota.value, __quota.set, None, None)

    _ElementMap.update({
        __quota.name() : __quota
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_62 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1781, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element role uses Python identifier role
    __role = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'role'), 'role', '__httpwww_usharesoft_commarketplace_CTD_ANON_62_role', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1783, 32), )

    
    role = property(__role.value, __role.set, None, None)

    _ElementMap.update({
        __role.name() : __role
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_63 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1799, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element subscriptionProfile uses Python identifier subscriptionProfile
    __subscriptionProfile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subscriptionProfile'), 'subscriptionProfile', '__httpwww_usharesoft_commarketplace_CTD_ANON_63_subscriptionProfile', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1801, 32), )

    
    subscriptionProfile = property(__subscriptionProfile.value, __subscriptionProfile.set, None, None)

    _ElementMap.update({
        __subscriptionProfile.name() : __subscriptionProfile
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_64 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1822, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element resource uses Python identifier resource
    __resource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'resource'), 'resource', '__httpwww_usharesoft_commarketplace_CTD_ANON_64_resource', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1824, 32), )

    
    resource = property(__resource.value, __resource.set, None, None)

    _ElementMap.update({
        __resource.name() : __resource
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_65 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1842, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element supportPlan uses Python identifier supportPlan
    __supportPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supportPlan'), 'supportPlan', '__httpwww_usharesoft_commarketplace_CTD_ANON_65_supportPlan', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1844, 32), )

    
    supportPlan = property(__supportPlan.value, __supportPlan.set, None, None)

    _ElementMap.update({
        __supportPlan.name() : __supportPlan
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_66 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1875, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element uforgeCredAccount uses Python identifier uforgeCredAccount
    __uforgeCredAccount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uforgeCredAccount'), 'uforgeCredAccount', '__httpwww_usharesoft_commarketplace_CTD_ANON_66_uforgeCredAccount', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1877, 32), )

    
    uforgeCredAccount = property(__uforgeCredAccount.value, __uforgeCredAccount.set, None, None)

    _ElementMap.update({
        __uforgeCredAccount.name() : __uforgeCredAccount
    })
    _AttributeMap.update({
        
    })



# Complex type {http://www.usharesoft.com/marketplace}UForgeError with content type ELEMENT_ONLY
class UForgeError (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.usharesoft.com/marketplace}UForgeError with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UForgeError')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1887, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element localizedErrorMsg uses Python identifier localizedErrorMsg
    __localizedErrorMsg = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'localizedErrorMsg'), 'localizedErrorMsg', '__httpwww_usharesoft_commarketplace_UForgeError_localizedErrorMsg', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1889, 12), )

    
    localizedErrorMsg = property(__localizedErrorMsg.value, __localizedErrorMsg.set, None, None)

    
    # Element requestMethod uses Python identifier requestMethod
    __requestMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'requestMethod'), 'requestMethod', '__httpwww_usharesoft_commarketplace_UForgeError_requestMethod', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1890, 12), )

    
    requestMethod = property(__requestMethod.value, __requestMethod.set, None, None)

    
    # Element requestUri uses Python identifier requestUri
    __requestUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'requestUri'), 'requestUri', '__httpwww_usharesoft_commarketplace_UForgeError_requestUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1891, 12), )

    
    requestUri = property(__requestUri.value, __requestUri.set, None, None)

    
    # Element statusCode uses Python identifier statusCode
    __statusCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'statusCode'), 'statusCode', '__httpwww_usharesoft_commarketplace_UForgeError_statusCode', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1892, 12), )

    
    statusCode = property(__statusCode.value, __statusCode.set, None, None)

    
    # Element timestamp uses Python identifier timestamp
    __timestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'timestamp'), 'timestamp', '__httpwww_usharesoft_commarketplace_UForgeError_timestamp', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1893, 12), )

    
    timestamp = property(__timestamp.value, __timestamp.set, None, None)

    _ElementMap.update({
        __localizedErrorMsg.name() : __localizedErrorMsg,
        __requestMethod.name() : __requestMethod,
        __requestUri.name() : __requestUri,
        __statusCode.name() : __statusCode,
        __timestamp.name() : __timestamp
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'UForgeError', UForgeError)


# Complex type {http://www.usharesoft.com/marketplace}UForgeObject with content type ELEMENT_ONLY
class UForgeObject (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.usharesoft.com/marketplace}UForgeObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UForgeObject')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1897, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element created uses Python identifier created
    __created = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'created'), 'created', '__httpwww_usharesoft_commarketplace_UForgeObject_created', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12), )

    
    created = property(__created.value, __created.set, None, None)

    
    # Element dbId uses Python identifier dbId
    __dbId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dbId'), 'dbId', '__httpwww_usharesoft_commarketplace_UForgeObject_dbId', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12), )

    
    dbId = property(__dbId.value, __dbId.set, None, None)

    
    # Element digest uses Python identifier digest
    __digest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'digest'), 'digest', '__httpwww_usharesoft_commarketplace_UForgeObject_digest', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12), )

    
    digest = property(__digest.value, __digest.set, None, None)

    
    # Element lastModified uses Python identifier lastModified
    __lastModified = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'lastModified'), 'lastModified', '__httpwww_usharesoft_commarketplace_UForgeObject_lastModified', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12), )

    
    lastModified = property(__lastModified.value, __lastModified.set, None, None)

    _ElementMap.update({
        __created.name() : __created,
        __dbId.name() : __dbId,
        __digest.name() : __digest,
        __lastModified.name() : __lastModified
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'UForgeObject', UForgeObject)


# Complex type {http://www.usharesoft.com/marketplace}UForgeObjects with content type ELEMENT_ONLY
class UForgeObjects (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.usharesoft.com/marketplace}UForgeObjects with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UForgeObjects')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1906, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element total uses Python identifier total
    __total = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'total'), 'total', '__httpwww_usharesoft_commarketplace_UForgeObjects_total', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12), )

    
    total = property(__total.value, __total.set, None, None)

    _ElementMap.update({
        __total.name() : __total
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'UForgeObjects', UForgeObjects)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_67 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1969, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element unit uses Python identifier unit
    __unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'unit'), 'unit', '__httpwww_usharesoft_commarketplace_CTD_ANON_67_unit', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1971, 32), )

    
    unit = property(__unit.value, __unit.set, None, None)

    _ElementMap.update({
        __unit.name() : __unit
    })
    _AttributeMap.update({
        
    })



# Complex type {http://www.usharesoft.com/marketplace}UriList with content type ELEMENT_ONLY
class UriList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.usharesoft.com/marketplace}UriList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UriList')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1980, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_UriList_uri', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1982, 12), )

    
    uri = property(__uri.value, __uri.set, None, None)

    _ElementMap.update({
        __uri.name() : __uri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'UriList', UriList)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_68 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2021, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element role uses Python identifier role
    __role = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'role'), 'role', '__httpwww_usharesoft_commarketplace_CTD_ANON_68_role', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2023, 32), )

    
    role = property(__role.value, __role.set, None, None)

    _ElementMap.update({
        __role.name() : __role
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_69 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2029, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element uforgeCredAccount uses Python identifier uforgeCredAccount
    __uforgeCredAccount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uforgeCredAccount'), 'uforgeCredAccount', '__httpwww_usharesoft_commarketplace_CTD_ANON_69_uforgeCredAccount', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2031, 32), )

    
    uforgeCredAccount = property(__uforgeCredAccount.value, __uforgeCredAccount.set, None, None)

    _ElementMap.update({
        __uforgeCredAccount.name() : __uforgeCredAccount
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_70 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2036, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element exports uses Python identifier exports
    __exports = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'exports'), 'exports', '__httpwww_usharesoft_commarketplace_CTD_ANON_70_exports', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2038, 32), )

    
    exports = property(__exports.value, __exports.set, None, None)

    _ElementMap.update({
        __exports.name() : __exports
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_71 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2057, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element user uses Python identifier user
    __user = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'user'), 'user', '__httpwww_usharesoft_commarketplace_CTD_ANON_71_user', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2059, 32), )

    
    user = property(__user.value, __user.set, None, None)

    _ElementMap.update({
        __user.name() : __user
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_72 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2074, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element badge uses Python identifier badge
    __badge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'badge'), 'badge', '__httpwww_usharesoft_commarketplace_CTD_ANON_72_badge', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2076, 32), )

    
    badge = property(__badge.value, __badge.set, None, None)

    _ElementMap.update({
        __badge.name() : __badge
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_73 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2086, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element marketingPlan uses Python identifier marketingPlan
    __marketingPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'marketingPlan'), 'marketingPlan', '__httpwww_usharesoft_commarketplace_CTD_ANON_73_marketingPlan', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2088, 32), )

    
    marketingPlan = property(__marketingPlan.value, __marketingPlan.set, None, None)

    _ElementMap.update({
        __marketingPlan.name() : __marketingPlan
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_74 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2095, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element member uses Python identifier member
    __member = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'member'), 'member', '__httpwww_usharesoft_commarketplace_CTD_ANON_74_member', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2097, 32), )

    
    member = property(__member.value, __member.set, None, None)

    _ElementMap.update({
        __member.name() : __member
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_75 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2110, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element pricingPlan uses Python identifier pricingPlan
    __pricingPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pricingPlan'), 'pricingPlan', '__httpwww_usharesoft_commarketplace_CTD_ANON_75_pricingPlan', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2112, 32), )

    
    pricingPlan = property(__pricingPlan.value, __pricingPlan.set, None, None)

    _ElementMap.update({
        __pricingPlan.name() : __pricingPlan
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_76 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2118, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element product uses Python identifier product
    __product = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'product'), 'product', '__httpwww_usharesoft_commarketplace_CTD_ANON_76_product', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2120, 32), )

    
    product = property(__product.value, __product.set, None, None)

    _ElementMap.update({
        __product.name() : __product
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_77 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2127, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element supportPlan uses Python identifier supportPlan
    __supportPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supportPlan'), 'supportPlan', '__httpwww_usharesoft_commarketplace_CTD_ANON_77_supportPlan', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2129, 32), )

    
    supportPlan = property(__supportPlan.value, __supportPlan.set, None, None)

    _ElementMap.update({
        __supportPlan.name() : __supportPlan
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_78 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2170, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element vendorMember uses Python identifier vendorMember
    __vendorMember = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vendorMember'), 'vendorMember', '__httpwww_usharesoft_commarketplace_CTD_ANON_78_vendorMember', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2172, 32), )

    
    vendorMember = property(__vendorMember.value, __vendorMember.set, None, None)

    _ElementMap.update({
        __vendorMember.name() : __vendorMember
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_79 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2206, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element badge uses Python identifier badge
    __badge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'badge'), 'badge', '__httpwww_usharesoft_commarketplace_CTD_ANON_79_badge', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2208, 32), )

    
    badge = property(__badge.value, __badge.set, None, None)

    _ElementMap.update({
        __badge.name() : __badge
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_80 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2222, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vendor'), 'vendor', '__httpwww_usharesoft_commarketplace_CTD_ANON_80_vendor', True, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2224, 32), )

    
    vendor = property(__vendor.value, __vendor.set, None, None)

    _ElementMap.update({
        __vendor.name() : __vendor
    })
    _AttributeMap.update({
        
    })



# Complex type {http://www.usharesoft.com/marketplace}Address with content type ELEMENT_ONLY
class Address (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Address with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Address')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 183, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element country uses Python identifier country
    __country = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'country'), 'country', '__httpwww_usharesoft_commarketplace_Address_country', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 187, 20), )

    
    country = property(__country.value, __country.set, None, None)

    
    # Element region_state uses Python identifier region_state
    __region_state = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'region_state'), 'region_state', '__httpwww_usharesoft_commarketplace_Address_region_state', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 188, 20), )

    
    region_state = property(__region_state.value, __region_state.set, None, None)

    
    # Element street uses Python identifier street
    __street = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'street'), 'street', '__httpwww_usharesoft_commarketplace_Address_street', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 189, 20), )

    
    street = property(__street.value, __street.set, None, None)

    
    # Element town uses Python identifier town
    __town = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'town'), 'town', '__httpwww_usharesoft_commarketplace_Address_town', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 190, 20), )

    
    town = property(__town.value, __town.set, None, None)

    
    # Element zipcode uses Python identifier zipcode
    __zipcode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'zipcode'), 'zipcode', '__httpwww_usharesoft_commarketplace_Address_zipcode', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 191, 20), )

    
    zipcode = property(__zipcode.value, __zipcode.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __country.name() : __country,
        __region_state.name() : __region_state,
        __street.name() : __street,
        __town.name() : __town,
        __zipcode.name() : __zipcode
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Address', Address)


# Complex type {http://www.usharesoft.com/marketplace}APIKeyPair with content type ELEMENT_ONLY
class APIKeyPair (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}APIKeyPair with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'APIKeyPair')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 197, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element publicKey uses Python identifier publicKey
    __publicKey = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'publicKey'), 'publicKey', '__httpwww_usharesoft_commarketplace_APIKeyPair_publicKey', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 201, 20), )

    
    publicKey = property(__publicKey.value, __publicKey.set, None, None)

    
    # Element secretKey uses Python identifier secretKey
    __secretKey = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'secretKey'), 'secretKey', '__httpwww_usharesoft_commarketplace_APIKeyPair_secretKey', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 202, 20), )

    
    secretKey = property(__secretKey.value, __secretKey.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_APIKeyPair_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 203, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __publicKey.name() : __publicKey,
        __secretKey.name() : __secretKey,
        __uri.name() : __uri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'APIKeyPair', APIKeyPair)


# Complex type {http://www.usharesoft.com/marketplace}APIKeyPairs with content type ELEMENT_ONLY
class APIKeyPairs (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}APIKeyPairs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'APIKeyPairs')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 209, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element apiKeyPairs uses Python identifier apiKeyPairs
    __apiKeyPairs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'apiKeyPairs'), 'apiKeyPairs', '__httpwww_usharesoft_commarketplace_APIKeyPairs_apiKeyPairs', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 213, 20), )

    
    apiKeyPairs = property(__apiKeyPairs.value, __apiKeyPairs.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __apiKeyPairs.name() : __apiKeyPairs
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'APIKeyPairs', APIKeyPairs)


# Complex type {http://www.usharesoft.com/marketplace}ApplianceTemplates with content type ELEMENT_ONLY
class ApplianceTemplates (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}ApplianceTemplates with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ApplianceTemplates')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 247, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element applianceTemplates uses Python identifier applianceTemplates
    __applianceTemplates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'applianceTemplates'), 'applianceTemplates', '__httpwww_usharesoft_commarketplace_ApplianceTemplates_applianceTemplates', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 251, 20), )

    
    applianceTemplates = property(__applianceTemplates.value, __applianceTemplates.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __applianceTemplates.name() : __applianceTemplates
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ApplianceTemplates', ApplianceTemplates)


# Complex type {http://www.usharesoft.com/marketplace}Approval with content type ELEMENT_ONLY
class Approval (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Approval with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Approval')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 263, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element assignee uses Python identifier assignee
    __assignee = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'assignee'), 'assignee', '__httpwww_usharesoft_commarketplace_Approval_assignee', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 267, 20), )

    
    assignee = property(__assignee.value, __assignee.set, None, None)

    
    # Element endDate uses Python identifier endDate
    __endDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'endDate'), 'endDate', '__httpwww_usharesoft_commarketplace_Approval_endDate', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 268, 20), )

    
    endDate = property(__endDate.value, __endDate.set, None, None)

    
    # Element estimatedTime uses Python identifier estimatedTime
    __estimatedTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'estimatedTime'), 'estimatedTime', '__httpwww_usharesoft_commarketplace_Approval_estimatedTime', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 269, 20), )

    
    estimatedTime = property(__estimatedTime.value, __estimatedTime.set, None, None)

    
    # Element notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'notes'), 'notes', '__httpwww_usharesoft_commarketplace_Approval_notes', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 270, 20), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element notesUri uses Python identifier notesUri
    __notesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'notesUri'), 'notesUri', '__httpwww_usharesoft_commarketplace_Approval_notesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 277, 20), )

    
    notesUri = property(__notesUri.value, __notesUri.set, None, None)

    
    # Element percentageDone uses Python identifier percentageDone
    __percentageDone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'percentageDone'), 'percentageDone', '__httpwww_usharesoft_commarketplace_Approval_percentageDone', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 278, 20), )

    
    percentageDone = property(__percentageDone.value, __percentageDone.set, None, None)

    
    # Element productItem uses Python identifier productItem
    __productItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productItem'), 'productItem', '__httpwww_usharesoft_commarketplace_Approval_productItem', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 279, 20), )

    
    productItem = property(__productItem.value, __productItem.set, None, None)

    
    # Element startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'startDate'), 'startDate', '__httpwww_usharesoft_commarketplace_Approval_startDate', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 280, 20), )

    
    startDate = property(__startDate.value, __startDate.set, None, None)

    
    # Element status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'status'), 'status', '__httpwww_usharesoft_commarketplace_Approval_status', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 281, 20), )

    
    status = property(__status.value, __status.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_Approval_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 292, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __assignee.name() : __assignee,
        __endDate.name() : __endDate,
        __estimatedTime.name() : __estimatedTime,
        __notes.name() : __notes,
        __notesUri.name() : __notesUri,
        __percentageDone.name() : __percentageDone,
        __productItem.name() : __productItem,
        __startDate.name() : __startDate,
        __status.name() : __status,
        __uri.name() : __uri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Approval', Approval)


# Complex type {http://www.usharesoft.com/marketplace}Approvals with content type ELEMENT_ONLY
class Approvals (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Approvals with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Approvals')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 298, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element approvals uses Python identifier approvals
    __approvals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'approvals'), 'approvals', '__httpwww_usharesoft_commarketplace_Approvals_approvals', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 302, 20), )

    
    approvals = property(__approvals.value, __approvals.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __approvals.name() : __approvals
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Approvals', Approvals)


# Complex type {http://www.usharesoft.com/marketplace}Artifacts with content type ELEMENT_ONLY
class Artifacts (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Artifacts with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Artifacts')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 329, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element artifacts uses Python identifier artifacts
    __artifacts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'artifacts'), 'artifacts', '__httpwww_usharesoft_commarketplace_Artifacts_artifacts', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 333, 20), )

    
    artifacts = property(__artifacts.value, __artifacts.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __artifacts.name() : __artifacts
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Artifacts', Artifacts)


# Complex type {http://www.usharesoft.com/marketplace}Badge with content type ELEMENT_ONLY
class Badge (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Badge with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Badge')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 345, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element disabled uses Python identifier disabled
    __disabled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'disabled'), 'disabled', '__httpwww_usharesoft_commarketplace_Badge_disabled', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 349, 20), )

    
    disabled = property(__disabled.value, __disabled.set, None, None)

    
    # Element icon uses Python identifier icon
    __icon = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'icon'), 'icon', '__httpwww_usharesoft_commarketplace_Badge_icon', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 350, 20), )

    
    icon = property(__icon.value, __icon.set, None, None)

    
    # Element label uses Python identifier label
    __label = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'label'), 'label', '__httpwww_usharesoft_commarketplace_Badge_label', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 351, 20), )

    
    label = property(__label.value, __label.set, None, None)

    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'title'), 'title', '__httpwww_usharesoft_commarketplace_Badge_title', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 352, 20), )

    
    title = property(__title.value, __title.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_Badge_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 353, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __disabled.name() : __disabled,
        __icon.name() : __icon,
        __label.name() : __label,
        __title.name() : __title,
        __uri.name() : __uri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Badge', Badge)


# Complex type {http://www.usharesoft.com/marketplace}Badges with content type ELEMENT_ONLY
class Badges (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Badges with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Badges')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 359, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element badges uses Python identifier badges
    __badges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'badges'), 'badges', '__httpwww_usharesoft_commarketplace_Badges_badges', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 363, 20), )

    
    badges = property(__badges.value, __badges.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __badges.name() : __badges
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Badges', Badges)


# Complex type {http://www.usharesoft.com/marketplace}Categories with content type ELEMENT_ONLY
class Categories (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Categories with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Categories')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 375, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element categories uses Python identifier categories
    __categories = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'categories'), 'categories', '__httpwww_usharesoft_commarketplace_Categories_categories', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 379, 20), )

    
    categories = property(__categories.value, __categories.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __categories.name() : __categories
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Categories', Categories)


# Complex type {http://www.usharesoft.com/marketplace}Category with content type ELEMENT_ONLY
class Category (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Category with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Category')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 391, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_Category_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 395, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element orgUri uses Python identifier orgUri
    __orgUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'orgUri'), 'orgUri', '__httpwww_usharesoft_commarketplace_Category_orgUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 396, 20), )

    
    orgUri = property(__orgUri.value, __orgUri.set, None, None)

    
    # Element subCategories uses Python identifier subCategories
    __subCategories = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subCategories'), 'subCategories', '__httpwww_usharesoft_commarketplace_Category_subCategories', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 397, 20), )

    
    subCategories = property(__subCategories.value, __subCategories.set, None, None)

    
    # Element subCategoryUri uses Python identifier subCategoryUri
    __subCategoryUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subCategoryUri'), 'subCategoryUri', '__httpwww_usharesoft_commarketplace_Category_subCategoryUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 404, 20), )

    
    subCategoryUri = property(__subCategoryUri.value, __subCategoryUri.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_Category_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 405, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __name.name() : __name,
        __orgUri.name() : __orgUri,
        __subCategories.name() : __subCategories,
        __subCategoryUri.name() : __subCategoryUri,
        __uri.name() : __uri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Category', Category)


# Complex type {http://www.usharesoft.com/marketplace}Comment with content type ELEMENT_ONLY
class Comment (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Comment with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Comment')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 411, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element abused uses Python identifier abused
    __abused = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'abused'), 'abused', '__httpwww_usharesoft_commarketplace_Comment_abused', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 415, 20), )

    
    abused = property(__abused.value, __abused.set, None, None)

    
    # Element abuseUri uses Python identifier abuseUri
    __abuseUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'abuseUri'), 'abuseUri', '__httpwww_usharesoft_commarketplace_Comment_abuseUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 416, 20), )

    
    abuseUri = property(__abuseUri.value, __abuseUri.set, None, None)

    
    # Element likesUri uses Python identifier likesUri
    __likesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'likesUri'), 'likesUri', '__httpwww_usharesoft_commarketplace_Comment_likesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 417, 20), )

    
    likesUri = property(__likesUri.value, __likesUri.set, None, None)

    
    # Element loginName uses Python identifier loginName
    __loginName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'loginName'), 'loginName', '__httpwww_usharesoft_commarketplace_Comment_loginName', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 418, 20), )

    
    loginName = property(__loginName.value, __loginName.set, None, None)

    
    # Element message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'message'), 'message', '__httpwww_usharesoft_commarketplace_Comment_message', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 419, 20), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element nbAbused uses Python identifier nbAbused
    __nbAbused = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbAbused'), 'nbAbused', '__httpwww_usharesoft_commarketplace_Comment_nbAbused', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 420, 20), )

    
    nbAbused = property(__nbAbused.value, __nbAbused.set, None, None)

    
    # Element nbDislike uses Python identifier nbDislike
    __nbDislike = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbDislike'), 'nbDislike', '__httpwww_usharesoft_commarketplace_Comment_nbDislike', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 421, 20), )

    
    nbDislike = property(__nbDislike.value, __nbDislike.set, None, None)

    
    # Element nbLike uses Python identifier nbLike
    __nbLike = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbLike'), 'nbLike', '__httpwww_usharesoft_commarketplace_Comment_nbLike', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 422, 20), )

    
    nbLike = property(__nbLike.value, __nbLike.set, None, None)

    
    # Element photo uses Python identifier photo
    __photo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'photo'), 'photo', '__httpwww_usharesoft_commarketplace_Comment_photo', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 423, 20), )

    
    photo = property(__photo.value, __photo.set, None, None)

    
    # Element rating uses Python identifier rating
    __rating = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'rating'), 'rating', '__httpwww_usharesoft_commarketplace_Comment_rating', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 424, 20), )

    
    rating = property(__rating.value, __rating.set, None, None)

    
    # Element replies uses Python identifier replies
    __replies = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'replies'), 'replies', '__httpwww_usharesoft_commarketplace_Comment_replies', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 429, 20), )

    
    replies = property(__replies.value, __replies.set, None, None)

    
    # Element replyUri uses Python identifier replyUri
    __replyUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'replyUri'), 'replyUri', '__httpwww_usharesoft_commarketplace_Comment_replyUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 436, 20), )

    
    replyUri = property(__replyUri.value, __replyUri.set, None, None)

    
    # Element tags uses Python identifier tags
    __tags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'tags'), 'tags', '__httpwww_usharesoft_commarketplace_Comment_tags', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 437, 20), )

    
    tags = property(__tags.value, __tags.set, None, None)

    
    # Element timestamp uses Python identifier timestamp
    __timestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'timestamp'), 'timestamp', '__httpwww_usharesoft_commarketplace_Comment_timestamp', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 438, 20), )

    
    timestamp = property(__timestamp.value, __timestamp.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpwww_usharesoft_commarketplace_Comment_type', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 439, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element reference uses Python identifier reference
    __reference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'reference'), 'reference', '__httpwww_usharesoft_commarketplace_Comment_reference', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 449, 20), )

    
    reference = property(__reference.value, __reference.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_Comment_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 450, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __abused.name() : __abused,
        __abuseUri.name() : __abuseUri,
        __likesUri.name() : __likesUri,
        __loginName.name() : __loginName,
        __message.name() : __message,
        __nbAbused.name() : __nbAbused,
        __nbDislike.name() : __nbDislike,
        __nbLike.name() : __nbLike,
        __photo.name() : __photo,
        __rating.name() : __rating,
        __replies.name() : __replies,
        __replyUri.name() : __replyUri,
        __tags.name() : __tags,
        __timestamp.name() : __timestamp,
        __type.name() : __type,
        __reference.name() : __reference,
        __uri.name() : __uri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Comment', Comment)


# Complex type {http://www.usharesoft.com/marketplace}Comments with content type ELEMENT_ONLY
class Comments (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Comments with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Comments')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 456, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element comments uses Python identifier comments
    __comments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'comments'), 'comments', '__httpwww_usharesoft_commarketplace_Comments_comments', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 460, 20), )

    
    comments = property(__comments.value, __comments.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __comments.name() : __comments
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Comments', Comments)


# Complex type {http://www.usharesoft.com/marketplace}Companies with content type ELEMENT_ONLY
class Companies (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Companies with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Companies')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 472, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element companies uses Python identifier companies
    __companies = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'companies'), 'companies', '__httpwww_usharesoft_commarketplace_Companies_companies', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 476, 20), )

    
    companies = property(__companies.value, __companies.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __companies.name() : __companies
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Companies', Companies)


# Complex type {http://www.usharesoft.com/marketplace}Company with content type ELEMENT_ONLY
class Company (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Company with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Company')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 488, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element address uses Python identifier address
    __address = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'address'), 'address', '__httpwww_usharesoft_commarketplace_Company_address', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 492, 20), )

    
    address = property(__address.value, __address.set, None, None)

    
    # Element logo uses Python identifier logo
    __logo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'logo'), 'logo', '__httpwww_usharesoft_commarketplace_Company_logo', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 493, 20), )

    
    logo = property(__logo.value, __logo.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_Company_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 494, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element parentUri uses Python identifier parentUri
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parentUri'), 'parentUri', '__httpwww_usharesoft_commarketplace_Company_parentUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 495, 20), )

    
    parentUri = property(__parentUri.value, __parentUri.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_Company_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 496, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element website uses Python identifier website
    __website = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'website'), 'website', '__httpwww_usharesoft_commarketplace_Company_website', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 497, 20), )

    
    website = property(__website.value, __website.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __address.name() : __address,
        __logo.name() : __logo,
        __name.name() : __name,
        __parentUri.name() : __parentUri,
        __uri.name() : __uri,
        __website.name() : __website
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Company', Company)


# Complex type {http://www.usharesoft.com/marketplace}CompatibleProduct with content type ELEMENT_ONLY
class CompatibleProduct (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}CompatibleProduct with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CompatibleProduct')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 503, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_CompatibleProduct_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 507, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element productItemsUri uses Python identifier productItemsUri
    __productItemsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productItemsUri'), 'productItemsUri', '__httpwww_usharesoft_commarketplace_CompatibleProduct_productItemsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 508, 20), )

    
    productItemsUri = property(__productItemsUri.value, __productItemsUri.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_CompatibleProduct_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 509, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpwww_usharesoft_commarketplace_CompatibleProduct_version', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 510, 20), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __name.name() : __name,
        __productItemsUri.name() : __productItemsUri,
        __uri.name() : __uri,
        __version.name() : __version
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CompatibleProduct', CompatibleProduct)


# Complex type {http://www.usharesoft.com/marketplace}CompatibleProducts with content type ELEMENT_ONLY
class CompatibleProducts (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}CompatibleProducts with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CompatibleProducts')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 516, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element compatibleProducts uses Python identifier compatibleProducts
    __compatibleProducts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'compatibleProducts'), 'compatibleProducts', '__httpwww_usharesoft_commarketplace_CompatibleProducts_compatibleProducts', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 520, 20), )

    
    compatibleProducts = property(__compatibleProducts.value, __compatibleProducts.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __compatibleProducts.name() : __compatibleProducts
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CompatibleProducts', CompatibleProducts)


# Complex type {http://www.usharesoft.com/marketplace}Cost with content type ELEMENT_ONLY
class Cost (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Cost with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Cost')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 533, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element currency uses Python identifier currency
    __currency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'currency'), 'currency', '__httpwww_usharesoft_commarketplace_Cost_currency', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 537, 20), )

    
    currency = property(__currency.value, __currency.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpwww_usharesoft_commarketplace_Cost_description', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 538, 20), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element frequency uses Python identifier frequency
    __frequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'frequency'), 'frequency', '__httpwww_usharesoft_commarketplace_Cost_frequency', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 539, 20), )

    
    frequency = property(__frequency.value, __frequency.set, None, None)

    
    # Element price uses Python identifier price
    __price = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'price'), 'price', '__httpwww_usharesoft_commarketplace_Cost_price', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 540, 20), )

    
    price = property(__price.value, __price.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpwww_usharesoft_commarketplace_Cost_type', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 541, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __currency.name() : __currency,
        __description.name() : __description,
        __frequency.name() : __frequency,
        __price.name() : __price,
        __type.name() : __type
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Cost', Cost)


# Complex type {http://www.usharesoft.com/marketplace}Costs with content type ELEMENT_ONLY
class Costs (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Costs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Costs')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 560, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element costs uses Python identifier costs
    __costs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'costs'), 'costs', '__httpwww_usharesoft_commarketplace_Costs_costs', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 564, 20), )

    
    costs = property(__costs.value, __costs.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __costs.name() : __costs
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Costs', Costs)


# Complex type {http://www.usharesoft.com/marketplace}DownloadTicket with content type ELEMENT_ONLY
class DownloadTicket (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}DownloadTicket with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DownloadTicket')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 593, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element downloadUri uses Python identifier downloadUri
    __downloadUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'downloadUri'), 'downloadUri', '__httpwww_usharesoft_commarketplace_DownloadTicket_downloadUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 597, 20), )

    
    downloadUri = property(__downloadUri.value, __downloadUri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __downloadUri.name() : __downloadUri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DownloadTicket', DownloadTicket)


# Complex type {http://www.usharesoft.com/marketplace}DownloadTickets with content type ELEMENT_ONLY
class DownloadTickets (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}DownloadTickets with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DownloadTickets')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 603, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element downloadTickets uses Python identifier downloadTickets
    __downloadTickets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'downloadTickets'), 'downloadTickets', '__httpwww_usharesoft_commarketplace_DownloadTickets_downloadTickets', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 607, 20), )

    
    downloadTickets = property(__downloadTickets.value, __downloadTickets.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __downloadTickets.name() : __downloadTickets
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DownloadTickets', DownloadTickets)


# Complex type {http://www.usharesoft.com/marketplace}Edition with content type ELEMENT_ONLY
class Edition (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Edition with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Edition')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 620, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element costs uses Python identifier costs
    __costs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'costs'), 'costs', '__httpwww_usharesoft_commarketplace_Edition_costs', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 624, 20), )

    
    costs = property(__costs.value, __costs.set, None, None)

    
    # Element idealFor uses Python identifier idealFor
    __idealFor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'idealFor'), 'idealFor', '__httpwww_usharesoft_commarketplace_Edition_idealFor', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 631, 20), )

    
    idealFor = property(__idealFor.value, __idealFor.set, None, None)

    
    # Element includes uses Python identifier includes
    __includes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'includes'), 'includes', '__httpwww_usharesoft_commarketplace_Edition_includes', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 632, 20), )

    
    includes = property(__includes.value, __includes.set, None, None)

    
    # Element minEngagement uses Python identifier minEngagement
    __minEngagement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'minEngagement'), 'minEngagement', '__httpwww_usharesoft_commarketplace_Edition_minEngagement', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 639, 20), )

    
    minEngagement = property(__minEngagement.value, __minEngagement.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_Edition_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 640, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element sku uses Python identifier sku
    __sku = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sku'), 'sku', '__httpwww_usharesoft_commarketplace_Edition_sku', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 641, 20), )

    
    sku = property(__sku.value, __sku.set, None, None)

    
    # Element trial uses Python identifier trial
    __trial = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'trial'), 'trial', '__httpwww_usharesoft_commarketplace_Edition_trial', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 642, 20), )

    
    trial = property(__trial.value, __trial.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpwww_usharesoft_commarketplace_Edition_type', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 643, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element units uses Python identifier units
    __units = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'units'), 'units', '__httpwww_usharesoft_commarketplace_Edition_units', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 653, 20), )

    
    units = property(__units.value, __units.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_Edition_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 660, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element purchased uses Python identifier purchased
    __purchased = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'purchased'), 'purchased', '__httpwww_usharesoft_commarketplace_Edition_purchased', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 661, 20), )

    
    purchased = property(__purchased.value, __purchased.set, None, None)

    
    # Element purchasedUri uses Python identifier purchasedUri
    __purchasedUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'purchasedUri'), 'purchasedUri', '__httpwww_usharesoft_commarketplace_Edition_purchasedUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 662, 20), )

    
    purchasedUri = property(__purchasedUri.value, __purchasedUri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __costs.name() : __costs,
        __idealFor.name() : __idealFor,
        __includes.name() : __includes,
        __minEngagement.name() : __minEngagement,
        __name.name() : __name,
        __sku.name() : __sku,
        __trial.name() : __trial,
        __type.name() : __type,
        __units.name() : __units,
        __uri.name() : __uri,
        __purchased.name() : __purchased,
        __purchasedUri.name() : __purchasedUri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Edition', Edition)


# Complex type {http://www.usharesoft.com/marketplace}Editions with content type ELEMENT_ONLY
class Editions (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Editions with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Editions')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 668, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element editions uses Python identifier editions
    __editions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'editions'), 'editions', '__httpwww_usharesoft_commarketplace_Editions_editions', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 672, 20), )

    
    editions = property(__editions.value, __editions.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __editions.name() : __editions
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Editions', Editions)


# Complex type {http://www.usharesoft.com/marketplace}Entitlements with content type ELEMENT_ONLY
class Entitlements (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Entitlements with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Entitlements')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 691, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element entitlements uses Python identifier entitlements
    __entitlements = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entitlements'), 'entitlements', '__httpwww_usharesoft_commarketplace_Entitlements_entitlements', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 695, 20), )

    
    entitlements = property(__entitlements.value, __entitlements.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __entitlements.name() : __entitlements
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Entitlements', Entitlements)


# Complex type {http://www.usharesoft.com/marketplace}Export with content type ELEMENT_ONLY
class Export (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Export with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Export')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 707, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_Export_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 711, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element applianceTemplate uses Python identifier applianceTemplate
    __applianceTemplate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'applianceTemplate'), 'applianceTemplate', '__httpwww_usharesoft_commarketplace_Export_applianceTemplate', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 712, 20), )

    
    applianceTemplate = property(__applianceTemplate.value, __applianceTemplate.set, None, None)

    
    # Element accountUri uses Python identifier accountUri
    __accountUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'accountUri'), 'accountUri', '__httpwww_usharesoft_commarketplace_Export_accountUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 713, 20), )

    
    accountUri = property(__accountUri.value, __accountUri.set, None, None)

    
    # Element status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'status'), 'status', '__httpwww_usharesoft_commarketplace_Export_status', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 714, 20), )

    
    status = property(__status.value, __status.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __uri.name() : __uri,
        __applianceTemplate.name() : __applianceTemplate,
        __accountUri.name() : __accountUri,
        __status.name() : __status
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Export', Export)


# Complex type {http://www.usharesoft.com/marketplace}Exports with content type ELEMENT_ONLY
class Exports_ (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Exports with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Exports')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 720, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element exports uses Python identifier exports
    __exports = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'exports'), 'exports', '__httpwww_usharesoft_commarketplace_Exports__exports', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 724, 20), )

    
    exports = property(__exports.value, __exports.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __exports.name() : __exports
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Exports', Exports_)


# Complex type {http://www.usharesoft.com/marketplace}Include with content type ELEMENT_ONLY
class Include (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Include with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Include')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 745, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpwww_usharesoft_commarketplace_Include_description', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 749, 20), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element tooltip uses Python identifier tooltip
    __tooltip = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'tooltip'), 'tooltip', '__httpwww_usharesoft_commarketplace_Include_tooltip', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 750, 20), )

    
    tooltip = property(__tooltip.value, __tooltip.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __description.name() : __description,
        __tooltip.name() : __tooltip
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Include', Include)


# Complex type {http://www.usharesoft.com/marketplace}Includes with content type ELEMENT_ONLY
class Includes (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Includes with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Includes')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 756, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element includes uses Python identifier includes
    __includes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'includes'), 'includes', '__httpwww_usharesoft_commarketplace_Includes_includes', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 760, 20), )

    
    includes = property(__includes.value, __includes.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __includes.name() : __includes
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Includes', Includes)


# Complex type {http://www.usharesoft.com/marketplace}InstallSettings with content type ELEMENT_ONLY
class InstallSettings (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}InstallSettings with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InstallSettings')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 772, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element adminPassword uses Python identifier adminPassword
    __adminPassword = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'adminPassword'), 'adminPassword', '__httpwww_usharesoft_commarketplace_InstallSettings_adminPassword', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 776, 20), )

    
    adminPassword = property(__adminPassword.value, __adminPassword.set, None, None)

    
    # Element timezone uses Python identifier timezone
    __timezone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'timezone'), 'timezone', '__httpwww_usharesoft_commarketplace_InstallSettings_timezone', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 777, 20), )

    
    timezone = property(__timezone.value, __timezone.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __adminPassword.name() : __adminPassword,
        __timezone.name() : __timezone
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'InstallSettings', InstallSettings)


# Complex type {http://www.usharesoft.com/marketplace}MachineImages with content type ELEMENT_ONLY
class MachineImages (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}MachineImages with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MachineImages')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 859, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element machineImages uses Python identifier machineImages
    __machineImages = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'machineImages'), 'machineImages', '__httpwww_usharesoft_commarketplace_MachineImages_machineImages', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 863, 20), )

    
    machineImages = property(__machineImages.value, __machineImages.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __machineImages.name() : __machineImages
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MachineImages', MachineImages)


# Complex type {http://www.usharesoft.com/marketplace}MarketingPlan with content type ELEMENT_ONLY
class MarketingPlan (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}MarketingPlan with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MarketingPlan')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 876, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element categories uses Python identifier categories
    __categories = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'categories'), 'categories', '__httpwww_usharesoft_commarketplace_MarketingPlan_categories', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 880, 20), )

    
    categories = property(__categories.value, __categories.set, None, None)

    
    # Element category uses Python identifier category
    __category = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'category'), 'category', '__httpwww_usharesoft_commarketplace_MarketingPlan_category', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 887, 20), )

    
    category = property(__category.value, __category.set, None, None)

    
    # Element clonesUri uses Python identifier clonesUri
    __clonesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'clonesUri'), 'clonesUri', '__httpwww_usharesoft_commarketplace_MarketingPlan_clonesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 888, 20), )

    
    clonesUri = property(__clonesUri.value, __clonesUri.set, None, None)

    
    # Element details uses Python identifier details
    __details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'details'), 'details', '__httpwww_usharesoft_commarketplace_MarketingPlan_details', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 889, 20), )

    
    details = property(__details.value, __details.set, None, None)

    
    # Element logo uses Python identifier logo
    __logo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'logo'), 'logo', '__httpwww_usharesoft_commarketplace_MarketingPlan_logo', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 890, 20), )

    
    logo = property(__logo.value, __logo.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_MarketingPlan_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 891, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element nbReferences uses Python identifier nbReferences
    __nbReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbReferences'), 'nbReferences', '__httpwww_usharesoft_commarketplace_MarketingPlan_nbReferences', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 892, 20), )

    
    nbReferences = property(__nbReferences.value, __nbReferences.set, None, None)

    
    # Element overview uses Python identifier overview
    __overview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'overview'), 'overview', '__httpwww_usharesoft_commarketplace_MarketingPlan_overview', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 893, 20), )

    
    overview = property(__overview.value, __overview.set, None, None)

    
    # Element parentUri uses Python identifier parentUri
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parentUri'), 'parentUri', '__httpwww_usharesoft_commarketplace_MarketingPlan_parentUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 894, 20), )

    
    parentUri = property(__parentUri.value, __parentUri.set, None, None)

    
    # Element productItemsUri uses Python identifier productItemsUri
    __productItemsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productItemsUri'), 'productItemsUri', '__httpwww_usharesoft_commarketplace_MarketingPlan_productItemsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 895, 20), )

    
    productItemsUri = property(__productItemsUri.value, __productItemsUri.set, None, None)

    
    # Element resources uses Python identifier resources
    __resources = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'resources'), 'resources', '__httpwww_usharesoft_commarketplace_MarketingPlan_resources', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 896, 20), )

    
    resources = property(__resources.value, __resources.set, None, None)

    
    # Element screenshots uses Python identifier screenshots
    __screenshots = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'screenshots'), 'screenshots', '__httpwww_usharesoft_commarketplace_MarketingPlan_screenshots', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 903, 20), )

    
    screenshots = property(__screenshots.value, __screenshots.set, None, None)

    
    # Element screenShotsUri uses Python identifier screenShotsUri
    __screenShotsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'screenShotsUri'), 'screenShotsUri', '__httpwww_usharesoft_commarketplace_MarketingPlan_screenShotsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 910, 20), )

    
    screenShotsUri = property(__screenShotsUri.value, __screenShotsUri.set, None, None)

    
    # Element tagLine uses Python identifier tagLine
    __tagLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'tagLine'), 'tagLine', '__httpwww_usharesoft_commarketplace_MarketingPlan_tagLine', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 911, 20), )

    
    tagLine = property(__tagLine.value, __tagLine.set, None, None)

    
    # Element tags uses Python identifier tags
    __tags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'tags'), 'tags', '__httpwww_usharesoft_commarketplace_MarketingPlan_tags', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 912, 20), )

    
    tags = property(__tags.value, __tags.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_MarketingPlan_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 913, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element vendorUri uses Python identifier vendorUri
    __vendorUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vendorUri'), 'vendorUri', '__httpwww_usharesoft_commarketplace_MarketingPlan_vendorUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 914, 20), )

    
    vendorUri = property(__vendorUri.value, __vendorUri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __categories.name() : __categories,
        __category.name() : __category,
        __clonesUri.name() : __clonesUri,
        __details.name() : __details,
        __logo.name() : __logo,
        __name.name() : __name,
        __nbReferences.name() : __nbReferences,
        __overview.name() : __overview,
        __parentUri.name() : __parentUri,
        __productItemsUri.name() : __productItemsUri,
        __resources.name() : __resources,
        __screenshots.name() : __screenshots,
        __screenShotsUri.name() : __screenShotsUri,
        __tagLine.name() : __tagLine,
        __tags.name() : __tags,
        __uri.name() : __uri,
        __vendorUri.name() : __vendorUri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MarketingPlan', MarketingPlan)


# Complex type {http://www.usharesoft.com/marketplace}MarketingPlans with content type ELEMENT_ONLY
class MarketingPlans (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}MarketingPlans with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MarketingPlans')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 920, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element marketingPlans uses Python identifier marketingPlans
    __marketingPlans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'marketingPlans'), 'marketingPlans', '__httpwww_usharesoft_commarketplace_MarketingPlans_marketingPlans', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 924, 20), )

    
    marketingPlans = property(__marketingPlans.value, __marketingPlans.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __marketingPlans.name() : __marketingPlans
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MarketingPlans', MarketingPlans)


# Complex type {http://www.usharesoft.com/marketplace}Marketplace with content type ELEMENT_ONLY
class Marketplace (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Marketplace with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Marketplace')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 937, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element approvalsUri uses Python identifier approvalsUri
    __approvalsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'approvalsUri'), 'approvalsUri', '__httpwww_usharesoft_commarketplace_Marketplace_approvalsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 941, 20), )

    
    approvalsUri = property(__approvalsUri.value, __approvalsUri.set, None, None)

    
    # Element badgesUri uses Python identifier badgesUri
    __badgesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'badgesUri'), 'badgesUri', '__httpwww_usharesoft_commarketplace_Marketplace_badgesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 942, 20), )

    
    badgesUri = property(__badgesUri.value, __badgesUri.set, None, None)

    
    # Element compatibleProductsUri uses Python identifier compatibleProductsUri
    __compatibleProductsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'compatibleProductsUri'), 'compatibleProductsUri', '__httpwww_usharesoft_commarketplace_Marketplace_compatibleProductsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 943, 20), )

    
    compatibleProductsUri = property(__compatibleProductsUri.value, __compatibleProductsUri.set, None, None)

    
    # Element managersUri uses Python identifier managersUri
    __managersUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'managersUri'), 'managersUri', '__httpwww_usharesoft_commarketplace_Marketplace_managersUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 944, 20), )

    
    managersUri = property(__managersUri.value, __managersUri.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_Marketplace_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 945, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element productsUri uses Python identifier productsUri
    __productsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productsUri'), 'productsUri', '__httpwww_usharesoft_commarketplace_Marketplace_productsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 946, 20), )

    
    productsUri = property(__productsUri.value, __productsUri.set, None, None)

    
    # Element productTypesUri uses Python identifier productTypesUri
    __productTypesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productTypesUri'), 'productTypesUri', '__httpwww_usharesoft_commarketplace_Marketplace_productTypesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 947, 20), )

    
    productTypesUri = property(__productTypesUri.value, __productTypesUri.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_Marketplace_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 948, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element vendorsUri uses Python identifier vendorsUri
    __vendorsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vendorsUri'), 'vendorsUri', '__httpwww_usharesoft_commarketplace_Marketplace_vendorsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 949, 20), )

    
    vendorsUri = property(__vendorsUri.value, __vendorsUri.set, None, None)

    
    # Element commentsUri uses Python identifier commentsUri
    __commentsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'commentsUri'), 'commentsUri', '__httpwww_usharesoft_commarketplace_Marketplace_commentsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 950, 20), )

    
    commentsUri = property(__commentsUri.value, __commentsUri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __approvalsUri.name() : __approvalsUri,
        __badgesUri.name() : __badgesUri,
        __compatibleProductsUri.name() : __compatibleProductsUri,
        __managersUri.name() : __managersUri,
        __name.name() : __name,
        __productsUri.name() : __productsUri,
        __productTypesUri.name() : __productTypesUri,
        __uri.name() : __uri,
        __vendorsUri.name() : __vendorsUri,
        __commentsUri.name() : __commentsUri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Marketplace', Marketplace)


# Complex type {http://www.usharesoft.com/marketplace}Marketplaces with content type ELEMENT_ONLY
class Marketplaces (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Marketplaces with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Marketplaces')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 956, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element marketplaces uses Python identifier marketplaces
    __marketplaces = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'marketplaces'), 'marketplaces', '__httpwww_usharesoft_commarketplace_Marketplaces_marketplaces', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 960, 20), )

    
    marketplaces = property(__marketplaces.value, __marketplaces.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __marketplaces.name() : __marketplaces
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Marketplaces', Marketplaces)


# Complex type {http://www.usharesoft.com/marketplace}OpStatus with content type ELEMENT_ONLY
class OpStatus (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}OpStatus with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OpStatus')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 972, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element bytesLoaded uses Python identifier bytesLoaded
    __bytesLoaded = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'bytesLoaded'), 'bytesLoaded', '__httpwww_usharesoft_commarketplace_OpStatus_bytesLoaded', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 976, 20), )

    
    bytesLoaded = property(__bytesLoaded.value, __bytesLoaded.set, None, None)

    
    # Element bytesTotal uses Python identifier bytesTotal
    __bytesTotal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'bytesTotal'), 'bytesTotal', '__httpwww_usharesoft_commarketplace_OpStatus_bytesTotal', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 977, 20), )

    
    bytesTotal = property(__bytesTotal.value, __bytesTotal.set, None, None)

    
    # Element cancelled uses Python identifier cancelled
    __cancelled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cancelled'), 'cancelled', '__httpwww_usharesoft_commarketplace_OpStatus_cancelled', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 978, 20), )

    
    cancelled = property(__cancelled.value, __cancelled.set, None, None)

    
    # Element complete uses Python identifier complete
    __complete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'complete'), 'complete', '__httpwww_usharesoft_commarketplace_OpStatus_complete', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 979, 20), )

    
    complete = property(__complete.value, __complete.set, None, None)

    
    # Element detailedError uses Python identifier detailedError
    __detailedError = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detailedError'), 'detailedError', '__httpwww_usharesoft_commarketplace_OpStatus_detailedError', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 980, 20), )

    
    detailedError = property(__detailedError.value, __detailedError.set, None, None)

    
    # Element detailedErrorMsg uses Python identifier detailedErrorMsg
    __detailedErrorMsg = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detailedErrorMsg'), 'detailedErrorMsg', '__httpwww_usharesoft_commarketplace_OpStatus_detailedErrorMsg', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 981, 20), )

    
    detailedErrorMsg = property(__detailedErrorMsg.value, __detailedErrorMsg.set, None, None)

    
    # Element error uses Python identifier error
    __error = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'error'), 'error', '__httpwww_usharesoft_commarketplace_OpStatus_error', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 982, 20), )

    
    error = property(__error.value, __error.set, None, None)

    
    # Element errorMessage uses Python identifier errorMessage
    __errorMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'errorMessage'), 'errorMessage', '__httpwww_usharesoft_commarketplace_OpStatus_errorMessage', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 983, 20), )

    
    errorMessage = property(__errorMessage.value, __errorMessage.set, None, None)

    
    # Element eta uses Python identifier eta
    __eta = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'eta'), 'eta', '__httpwww_usharesoft_commarketplace_OpStatus_eta', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 984, 20), )

    
    eta = property(__eta.value, __eta.set, None, None)

    
    # Element message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'message'), 'message', '__httpwww_usharesoft_commarketplace_OpStatus_message', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 985, 20), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element parentUri uses Python identifier parentUri
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parentUri'), 'parentUri', '__httpwww_usharesoft_commarketplace_OpStatus_parentUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 986, 20), )

    
    parentUri = property(__parentUri.value, __parentUri.set, None, None)

    
    # Element percentage uses Python identifier percentage
    __percentage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'percentage'), 'percentage', '__httpwww_usharesoft_commarketplace_OpStatus_percentage', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 987, 20), )

    
    percentage = property(__percentage.value, __percentage.set, None, None)

    
    # Element published uses Python identifier published
    __published = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'published'), 'published', '__httpwww_usharesoft_commarketplace_OpStatus_published', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 988, 20), )

    
    published = property(__published.value, __published.set, None, None)

    
    # Element totalTime uses Python identifier totalTime
    __totalTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'totalTime'), 'totalTime', '__httpwww_usharesoft_commarketplace_OpStatus_totalTime', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 989, 20), )

    
    totalTime = property(__totalTime.value, __totalTime.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_OpStatus_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 990, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __bytesLoaded.name() : __bytesLoaded,
        __bytesTotal.name() : __bytesTotal,
        __cancelled.name() : __cancelled,
        __complete.name() : __complete,
        __detailedError.name() : __detailedError,
        __detailedErrorMsg.name() : __detailedErrorMsg,
        __error.name() : __error,
        __errorMessage.name() : __errorMessage,
        __eta.name() : __eta,
        __message.name() : __message,
        __parentUri.name() : __parentUri,
        __percentage.name() : __percentage,
        __published.name() : __published,
        __totalTime.name() : __totalTime,
        __uri.name() : __uri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'OpStatus', OpStatus)


# Complex type {http://www.usharesoft.com/marketplace}OpStatuses with content type ELEMENT_ONLY
class OpStatuses (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}OpStatuses with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OpStatuses')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 996, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element statuses uses Python identifier statuses
    __statuses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'statuses'), 'statuses', '__httpwww_usharesoft_commarketplace_OpStatuses_statuses', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1000, 20), )

    
    statuses = property(__statuses.value, __statuses.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __statuses.name() : __statuses
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'OpStatuses', OpStatuses)


# Complex type {http://www.usharesoft.com/marketplace}Order with content type ELEMENT_ONLY
class Order (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Order with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Order')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1012, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element edition uses Python identifier edition
    __edition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'edition'), 'edition', '__httpwww_usharesoft_commarketplace_Order_edition', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1016, 20), )

    
    edition = property(__edition.value, __edition.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_Order_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1017, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __edition.name() : __edition,
        __uri.name() : __uri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Order', Order)


# Complex type {http://www.usharesoft.com/marketplace}Orders with content type ELEMENT_ONLY
class Orders (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Orders with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Orders')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1023, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element orders uses Python identifier orders
    __orders = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'orders'), 'orders', '__httpwww_usharesoft_commarketplace_Orders_orders', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1027, 20), )

    
    orders = property(__orders.value, __orders.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __orders.name() : __orders
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Orders', Orders)


# Complex type {http://www.usharesoft.com/marketplace}Org with content type ELEMENT_ONLY
class Org (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Org with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Org')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1039, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element activateNewUsers uses Python identifier activateNewUsers
    __activateNewUsers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'activateNewUsers'), 'activateNewUsers', '__httpwww_usharesoft_commarketplace_Org_activateNewUsers', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1043, 20), )

    
    activateNewUsers = property(__activateNewUsers.value, __activateNewUsers.set, None, None)

    
    # Element admin uses Python identifier admin
    __admin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'admin'), 'admin', '__httpwww_usharesoft_commarketplace_Org_admin', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1044, 20), )

    
    admin = property(__admin.value, __admin.set, None, None)

    
    # Element categoriesUri uses Python identifier categoriesUri
    __categoriesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'categoriesUri'), 'categoriesUri', '__httpwww_usharesoft_commarketplace_Org_categoriesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1045, 20), )

    
    categoriesUri = property(__categoriesUri.value, __categoriesUri.set, None, None)

    
    # Element companiesUri uses Python identifier companiesUri
    __companiesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'companiesUri'), 'companiesUri', '__httpwww_usharesoft_commarketplace_Org_companiesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1046, 20), )

    
    companiesUri = property(__companiesUri.value, __companiesUri.set, None, None)

    
    # Element company uses Python identifier company
    __company = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'company'), 'company', '__httpwww_usharesoft_commarketplace_Org_company', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1047, 20), )

    
    company = property(__company.value, __company.set, None, None)

    
    # Element defaultOrg uses Python identifier defaultOrg
    __defaultOrg = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'defaultOrg'), 'defaultOrg', '__httpwww_usharesoft_commarketplace_Org_defaultOrg', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1048, 20), )

    
    defaultOrg = property(__defaultOrg.value, __defaultOrg.set, None, None)

    
    # Element membersUri uses Python identifier membersUri
    __membersUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'membersUri'), 'membersUri', '__httpwww_usharesoft_commarketplace_Org_membersUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1049, 20), )

    
    membersUri = property(__membersUri.value, __membersUri.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_Org_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1050, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element rolesUri uses Python identifier rolesUri
    __rolesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'rolesUri'), 'rolesUri', '__httpwww_usharesoft_commarketplace_Org_rolesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1051, 20), )

    
    rolesUri = property(__rolesUri.value, __rolesUri.set, None, None)

    
    # Element subscriptionProfiles uses Python identifier subscriptionProfiles
    __subscriptionProfiles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subscriptionProfiles'), 'subscriptionProfiles', '__httpwww_usharesoft_commarketplace_Org_subscriptionProfiles', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1052, 20), )

    
    subscriptionProfiles = property(__subscriptionProfiles.value, __subscriptionProfiles.set, None, None)

    
    # Element subscriptionProfilesUri uses Python identifier subscriptionProfilesUri
    __subscriptionProfilesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subscriptionProfilesUri'), 'subscriptionProfilesUri', '__httpwww_usharesoft_commarketplace_Org_subscriptionProfilesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1060, 20), )

    
    subscriptionProfilesUri = property(__subscriptionProfilesUri.value, __subscriptionProfilesUri.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_Org_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1061, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element vendorsUri uses Python identifier vendorsUri
    __vendorsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vendorsUri'), 'vendorsUri', '__httpwww_usharesoft_commarketplace_Org_vendorsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1062, 20), )

    
    vendorsUri = property(__vendorsUri.value, __vendorsUri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __activateNewUsers.name() : __activateNewUsers,
        __admin.name() : __admin,
        __categoriesUri.name() : __categoriesUri,
        __companiesUri.name() : __companiesUri,
        __company.name() : __company,
        __defaultOrg.name() : __defaultOrg,
        __membersUri.name() : __membersUri,
        __name.name() : __name,
        __rolesUri.name() : __rolesUri,
        __subscriptionProfiles.name() : __subscriptionProfiles,
        __subscriptionProfilesUri.name() : __subscriptionProfilesUri,
        __uri.name() : __uri,
        __vendorsUri.name() : __vendorsUri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Org', Org)


# Complex type {http://www.usharesoft.com/marketplace}Orgs with content type ELEMENT_ONLY
class Orgs (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Orgs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Orgs')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1068, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element orgs uses Python identifier orgs
    __orgs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'orgs'), 'orgs', '__httpwww_usharesoft_commarketplace_Orgs_orgs', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1072, 20), )

    
    orgs = property(__orgs.value, __orgs.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __orgs.name() : __orgs
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Orgs', Orgs)


# Complex type {http://www.usharesoft.com/marketplace}OSSettings with content type ELEMENT_ONLY
class OSSettings (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}OSSettings with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OSSettings')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1084, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_OSSettings_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1088, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element applianceUri uses Python identifier applianceUri
    __applianceUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'applianceUri'), 'applianceUri', '__httpwww_usharesoft_commarketplace_OSSettings_applianceUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1089, 20), )

    
    applianceUri = property(__applianceUri.value, __applianceUri.set, None, None)

    
    # Element arch uses Python identifier arch
    __arch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'arch'), 'arch', '__httpwww_usharesoft_commarketplace_OSSettings_arch', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1091, 20), )

    
    arch = property(__arch.value, __arch.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_OSSettings_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1092, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpwww_usharesoft_commarketplace_OSSettings_version', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1093, 20), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __uri.name() : __uri,
        __applianceUri.name() : __applianceUri,
        __arch.name() : __arch,
        __name.name() : __name,
        __version.name() : __version
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'OSSettings', OSSettings)


# Complex type {http://www.usharesoft.com/marketplace}Period with content type ELEMENT_ONLY
class Period (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Period with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Period')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1099, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element interval uses Python identifier interval
    __interval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'interval'), 'interval', '__httpwww_usharesoft_commarketplace_Period_interval', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1103, 20), )

    
    interval = property(__interval.value, __interval.set, None, None)

    
    # Element nb uses Python identifier nb
    __nb = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nb'), 'nb', '__httpwww_usharesoft_commarketplace_Period_nb', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1104, 20), )

    
    nb = property(__nb.value, __nb.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __interval.name() : __interval,
        __nb.name() : __nb
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Period', Period)


# Complex type {http://www.usharesoft.com/marketplace}PricingPlan with content type ELEMENT_ONLY
class PricingPlan (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}PricingPlan with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PricingPlan')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1110, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element clonesUri uses Python identifier clonesUri
    __clonesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'clonesUri'), 'clonesUri', '__httpwww_usharesoft_commarketplace_PricingPlan_clonesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1114, 20), )

    
    clonesUri = property(__clonesUri.value, __clonesUri.set, None, None)

    
    # Element editions uses Python identifier editions
    __editions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'editions'), 'editions', '__httpwww_usharesoft_commarketplace_PricingPlan_editions', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1115, 20), )

    
    editions = property(__editions.value, __editions.set, None, None)

    
    # Element editionsUri uses Python identifier editionsUri
    __editionsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'editionsUri'), 'editionsUri', '__httpwww_usharesoft_commarketplace_PricingPlan_editionsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1122, 20), )

    
    editionsUri = property(__editionsUri.value, __editionsUri.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_PricingPlan_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1123, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element nbReferences uses Python identifier nbReferences
    __nbReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbReferences'), 'nbReferences', '__httpwww_usharesoft_commarketplace_PricingPlan_nbReferences', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1124, 20), )

    
    nbReferences = property(__nbReferences.value, __nbReferences.set, None, None)

    
    # Element notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'notes'), 'notes', '__httpwww_usharesoft_commarketplace_PricingPlan_notes', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1125, 20), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element parentUri uses Python identifier parentUri
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parentUri'), 'parentUri', '__httpwww_usharesoft_commarketplace_PricingPlan_parentUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1126, 20), )

    
    parentUri = property(__parentUri.value, __parentUri.set, None, None)

    
    # Element productItemsUri uses Python identifier productItemsUri
    __productItemsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productItemsUri'), 'productItemsUri', '__httpwww_usharesoft_commarketplace_PricingPlan_productItemsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1127, 20), )

    
    productItemsUri = property(__productItemsUri.value, __productItemsUri.set, None, None)

    
    # Element resources uses Python identifier resources
    __resources = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'resources'), 'resources', '__httpwww_usharesoft_commarketplace_PricingPlan_resources', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1128, 20), )

    
    resources = property(__resources.value, __resources.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_PricingPlan_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1135, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element vendorUri uses Python identifier vendorUri
    __vendorUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vendorUri'), 'vendorUri', '__httpwww_usharesoft_commarketplace_PricingPlan_vendorUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1136, 20), )

    
    vendorUri = property(__vendorUri.value, __vendorUri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __clonesUri.name() : __clonesUri,
        __editions.name() : __editions,
        __editionsUri.name() : __editionsUri,
        __name.name() : __name,
        __nbReferences.name() : __nbReferences,
        __notes.name() : __notes,
        __parentUri.name() : __parentUri,
        __productItemsUri.name() : __productItemsUri,
        __resources.name() : __resources,
        __uri.name() : __uri,
        __vendorUri.name() : __vendorUri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PricingPlan', PricingPlan)


# Complex type {http://www.usharesoft.com/marketplace}PricingPlans with content type ELEMENT_ONLY
class PricingPlans (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}PricingPlans with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PricingPlans')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1142, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element pricingPlans uses Python identifier pricingPlans
    __pricingPlans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pricingPlans'), 'pricingPlans', '__httpwww_usharesoft_commarketplace_PricingPlans_pricingPlans', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1146, 20), )

    
    pricingPlans = property(__pricingPlans.value, __pricingPlans.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __pricingPlans.name() : __pricingPlans
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PricingPlans', PricingPlans)


# Complex type {http://www.usharesoft.com/marketplace}Product with content type ELEMENT_ONLY
class Product (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Product with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Product')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1158, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element active uses Python identifier active
    __active = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'active'), 'active', '__httpwww_usharesoft_commarketplace_Product_active', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1162, 20), )

    
    active = property(__active.value, __active.set, None, None)

    
    # Element allowComments uses Python identifier allowComments
    __allowComments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'allowComments'), 'allowComments', '__httpwww_usharesoft_commarketplace_Product_allowComments', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1163, 20), )

    
    allowComments = property(__allowComments.value, __allowComments.set, None, None)

    
    # Element comments uses Python identifier comments
    __comments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'comments'), 'comments', '__httpwww_usharesoft_commarketplace_Product_comments', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1164, 20), )

    
    comments = property(__comments.value, __comments.set, None, None)

    
    # Element commentsUri uses Python identifier commentsUri
    __commentsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'commentsUri'), 'commentsUri', '__httpwww_usharesoft_commarketplace_Product_commentsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1171, 20), )

    
    commentsUri = property(__commentsUri.value, __commentsUri.set, None, None)

    
    # Element items uses Python identifier items
    __items = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'items'), 'items', '__httpwww_usharesoft_commarketplace_Product_items', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1172, 20), )

    
    items = property(__items.value, __items.set, None, None)

    
    # Element itemsUri uses Python identifier itemsUri
    __itemsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'itemsUri'), 'itemsUri', '__httpwww_usharesoft_commarketplace_Product_itemsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1179, 20), )

    
    itemsUri = property(__itemsUri.value, __itemsUri.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_Product_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1180, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element nbItems uses Python identifier nbItems
    __nbItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbItems'), 'nbItems', '__httpwww_usharesoft_commarketplace_Product_nbItems', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1181, 20), )

    
    nbItems = property(__nbItems.value, __nbItems.set, None, None)

    
    # Element nbPendingApprovals uses Python identifier nbPendingApprovals
    __nbPendingApprovals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbPendingApprovals'), 'nbPendingApprovals', '__httpwww_usharesoft_commarketplace_Product_nbPendingApprovals', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1182, 20), )

    
    nbPendingApprovals = property(__nbPendingApprovals.value, __nbPendingApprovals.set, None, None)

    
    # Element nbPrivateItems uses Python identifier nbPrivateItems
    __nbPrivateItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbPrivateItems'), 'nbPrivateItems', '__httpwww_usharesoft_commarketplace_Product_nbPrivateItems', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1183, 20), )

    
    nbPrivateItems = property(__nbPrivateItems.value, __nbPrivateItems.set, None, None)

    
    # Element nbPublicItems uses Python identifier nbPublicItems
    __nbPublicItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbPublicItems'), 'nbPublicItems', '__httpwww_usharesoft_commarketplace_Product_nbPublicItems', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1184, 20), )

    
    nbPublicItems = property(__nbPublicItems.value, __nbPublicItems.set, None, None)

    
    # Element nbPurchases uses Python identifier nbPurchases
    __nbPurchases = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbPurchases'), 'nbPurchases', '__httpwww_usharesoft_commarketplace_Product_nbPurchases', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1185, 20), )

    
    nbPurchases = property(__nbPurchases.value, __nbPurchases.set, None, None)

    
    # Element notificationsUri uses Python identifier notificationsUri
    __notificationsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'notificationsUri'), 'notificationsUri', '__httpwww_usharesoft_commarketplace_Product_notificationsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1186, 20), )

    
    notificationsUri = property(__notificationsUri.value, __notificationsUri.set, None, None)

    
    # Element parentUri uses Python identifier parentUri
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parentUri'), 'parentUri', '__httpwww_usharesoft_commarketplace_Product_parentUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1187, 20), )

    
    parentUri = property(__parentUri.value, __parentUri.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_Product_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1188, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __active.name() : __active,
        __allowComments.name() : __allowComments,
        __comments.name() : __comments,
        __commentsUri.name() : __commentsUri,
        __items.name() : __items,
        __itemsUri.name() : __itemsUri,
        __name.name() : __name,
        __nbItems.name() : __nbItems,
        __nbPendingApprovals.name() : __nbPendingApprovals,
        __nbPrivateItems.name() : __nbPrivateItems,
        __nbPublicItems.name() : __nbPublicItems,
        __nbPurchases.name() : __nbPurchases,
        __notificationsUri.name() : __notificationsUri,
        __parentUri.name() : __parentUri,
        __uri.name() : __uri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Product', Product)


# Complex type {http://www.usharesoft.com/marketplace}ProductItem with content type ELEMENT_ONLY
class ProductItem (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}ProductItem with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductItem')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1194, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element active uses Python identifier active
    __active = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'active'), 'active', '__httpwww_usharesoft_commarketplace_ProductItem_active', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1198, 20), )

    
    active = property(__active.value, __active.set, None, None)

    
    # Element approvalUri uses Python identifier approvalUri
    __approvalUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'approvalUri'), 'approvalUri', '__httpwww_usharesoft_commarketplace_ProductItem_approvalUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1199, 20), )

    
    approvalUri = property(__approvalUri.value, __approvalUri.set, None, None)

    
    # Element artifacts uses Python identifier artifacts
    __artifacts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'artifacts'), 'artifacts', '__httpwww_usharesoft_commarketplace_ProductItem_artifacts', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1200, 20), )

    
    artifacts = property(__artifacts.value, __artifacts.set, None, None)

    
    # Element artifactsUri uses Python identifier artifactsUri
    __artifactsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'artifactsUri'), 'artifactsUri', '__httpwww_usharesoft_commarketplace_ProductItem_artifactsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1207, 20), )

    
    artifactsUri = property(__artifactsUri.value, __artifactsUri.set, None, None)

    
    # Element badges uses Python identifier badges
    __badges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'badges'), 'badges', '__httpwww_usharesoft_commarketplace_ProductItem_badges', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1208, 20), )

    
    badges = property(__badges.value, __badges.set, None, None)

    
    # Element commentsUri uses Python identifier commentsUri
    __commentsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'commentsUri'), 'commentsUri', '__httpwww_usharesoft_commarketplace_ProductItem_commentsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1215, 20), )

    
    commentsUri = property(__commentsUri.value, __commentsUri.set, None, None)

    
    # Element compatibilityList uses Python identifier compatibilityList
    __compatibilityList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'compatibilityList'), 'compatibilityList', '__httpwww_usharesoft_commarketplace_ProductItem_compatibilityList', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1216, 20), )

    
    compatibilityList = property(__compatibilityList.value, __compatibilityList.set, None, None)

    
    # Element compatibleProducts uses Python identifier compatibleProducts
    __compatibleProducts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'compatibleProducts'), 'compatibleProducts', '__httpwww_usharesoft_commarketplace_ProductItem_compatibleProducts', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1217, 20), )

    
    compatibleProducts = property(__compatibleProducts.value, __compatibleProducts.set, None, None)

    
    # Element featured uses Python identifier featured
    __featured = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'featured'), 'featured', '__httpwww_usharesoft_commarketplace_ProductItem_featured', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1225, 20), )

    
    featured = property(__featured.value, __featured.set, None, None)

    
    # Element installationInstructions uses Python identifier installationInstructions
    __installationInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'installationInstructions'), 'installationInstructions', '__httpwww_usharesoft_commarketplace_ProductItem_installationInstructions', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1226, 20), )

    
    installationInstructions = property(__installationInstructions.value, __installationInstructions.set, None, None)

    
    # Element marketingPlan uses Python identifier marketingPlan
    __marketingPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'marketingPlan'), 'marketingPlan', '__httpwww_usharesoft_commarketplace_ProductItem_marketingPlan', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1227, 20), )

    
    marketingPlan = property(__marketingPlan.value, __marketingPlan.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_ProductItem_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1228, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element nbPurchases uses Python identifier nbPurchases
    __nbPurchases = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbPurchases'), 'nbPurchases', '__httpwww_usharesoft_commarketplace_ProductItem_nbPurchases', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1229, 20), )

    
    nbPurchases = property(__nbPurchases.value, __nbPurchases.set, None, None)

    
    # Element nbVotes uses Python identifier nbVotes
    __nbVotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbVotes'), 'nbVotes', '__httpwww_usharesoft_commarketplace_ProductItem_nbVotes', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1230, 20), )

    
    nbVotes = property(__nbVotes.value, __nbVotes.set, None, None)

    
    # Element parentUri uses Python identifier parentUri
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parentUri'), 'parentUri', '__httpwww_usharesoft_commarketplace_ProductItem_parentUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1231, 20), )

    
    parentUri = property(__parentUri.value, __parentUri.set, None, None)

    
    # Element partNumber uses Python identifier partNumber
    __partNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'partNumber'), 'partNumber', '__httpwww_usharesoft_commarketplace_ProductItem_partNumber', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1232, 20), )

    
    partNumber = property(__partNumber.value, __partNumber.set, None, None)

    
    # Element pricingPlan uses Python identifier pricingPlan
    __pricingPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pricingPlan'), 'pricingPlan', '__httpwww_usharesoft_commarketplace_ProductItem_pricingPlan', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1233, 20), )

    
    pricingPlan = property(__pricingPlan.value, __pricingPlan.set, None, None)

    
    # Element purchasesUri uses Python identifier purchasesUri
    __purchasesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'purchasesUri'), 'purchasesUri', '__httpwww_usharesoft_commarketplace_ProductItem_purchasesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1234, 20), )

    
    purchasesUri = property(__purchasesUri.value, __purchasesUri.set, None, None)

    
    # Element rating uses Python identifier rating
    __rating = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'rating'), 'rating', '__httpwww_usharesoft_commarketplace_ProductItem_rating', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1235, 20), )

    
    rating = property(__rating.value, __rating.set, None, None)

    
    # Element releaseDate uses Python identifier releaseDate
    __releaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'releaseDate'), 'releaseDate', '__httpwww_usharesoft_commarketplace_ProductItem_releaseDate', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1236, 20), )

    
    releaseDate = property(__releaseDate.value, __releaseDate.set, None, None)

    
    # Element releaseNotes uses Python identifier releaseNotes
    __releaseNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'releaseNotes'), 'releaseNotes', '__httpwww_usharesoft_commarketplace_ProductItem_releaseNotes', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1237, 20), )

    
    releaseNotes = property(__releaseNotes.value, __releaseNotes.set, None, None)

    
    # Element staffPick uses Python identifier staffPick
    __staffPick = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'staffPick'), 'staffPick', '__httpwww_usharesoft_commarketplace_ProductItem_staffPick', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1238, 20), )

    
    staffPick = property(__staffPick.value, __staffPick.set, None, None)

    
    # Element status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'status'), 'status', '__httpwww_usharesoft_commarketplace_ProductItem_status', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1239, 20), )

    
    status = property(__status.value, __status.set, None, None)

    
    # Element supportPlan uses Python identifier supportPlan
    __supportPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supportPlan'), 'supportPlan', '__httpwww_usharesoft_commarketplace_ProductItem_supportPlan', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1250, 20), )

    
    supportPlan = property(__supportPlan.value, __supportPlan.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpwww_usharesoft_commarketplace_ProductItem_type', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1251, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_ProductItem_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1252, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element vendorName uses Python identifier vendorName
    __vendorName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vendorName'), 'vendorName', '__httpwww_usharesoft_commarketplace_ProductItem_vendorName', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1253, 20), )

    
    vendorName = property(__vendorName.value, __vendorName.set, None, None)

    
    # Element vendorUri uses Python identifier vendorUri
    __vendorUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vendorUri'), 'vendorUri', '__httpwww_usharesoft_commarketplace_ProductItem_vendorUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1254, 20), )

    
    vendorUri = property(__vendorUri.value, __vendorUri.set, None, None)

    
    # Element version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpwww_usharesoft_commarketplace_ProductItem_version', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1255, 20), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __active.name() : __active,
        __approvalUri.name() : __approvalUri,
        __artifacts.name() : __artifacts,
        __artifactsUri.name() : __artifactsUri,
        __badges.name() : __badges,
        __commentsUri.name() : __commentsUri,
        __compatibilityList.name() : __compatibilityList,
        __compatibleProducts.name() : __compatibleProducts,
        __featured.name() : __featured,
        __installationInstructions.name() : __installationInstructions,
        __marketingPlan.name() : __marketingPlan,
        __name.name() : __name,
        __nbPurchases.name() : __nbPurchases,
        __nbVotes.name() : __nbVotes,
        __parentUri.name() : __parentUri,
        __partNumber.name() : __partNumber,
        __pricingPlan.name() : __pricingPlan,
        __purchasesUri.name() : __purchasesUri,
        __rating.name() : __rating,
        __releaseDate.name() : __releaseDate,
        __releaseNotes.name() : __releaseNotes,
        __staffPick.name() : __staffPick,
        __status.name() : __status,
        __supportPlan.name() : __supportPlan,
        __type.name() : __type,
        __uri.name() : __uri,
        __vendorName.name() : __vendorName,
        __vendorUri.name() : __vendorUri,
        __version.name() : __version
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ProductItem', ProductItem)


# Complex type {http://www.usharesoft.com/marketplace}ProductItemDetails with content type ELEMENT_ONLY
class ProductItemDetails (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}ProductItemDetails with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductItemDetails')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1261, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element artifactsUri uses Python identifier artifactsUri
    __artifactsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'artifactsUri'), 'artifactsUri', '__httpwww_usharesoft_commarketplace_ProductItemDetails_artifactsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1265, 20), )

    
    artifactsUri = property(__artifactsUri.value, __artifactsUri.set, None, None)

    
    # Element badges uses Python identifier badges
    __badges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'badges'), 'badges', '__httpwww_usharesoft_commarketplace_ProductItemDetails_badges', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1266, 20), )

    
    badges = property(__badges.value, __badges.set, None, None)

    
    # Element category uses Python identifier category
    __category = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'category'), 'category', '__httpwww_usharesoft_commarketplace_ProductItemDetails_category', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1273, 20), )

    
    category = property(__category.value, __category.set, None, None)

    
    # Element commentsUri uses Python identifier commentsUri
    __commentsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'commentsUri'), 'commentsUri', '__httpwww_usharesoft_commarketplace_ProductItemDetails_commentsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1274, 20), )

    
    commentsUri = property(__commentsUri.value, __commentsUri.set, None, None)

    
    # Element compatibleProducts uses Python identifier compatibleProducts
    __compatibleProducts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'compatibleProducts'), 'compatibleProducts', '__httpwww_usharesoft_commarketplace_ProductItemDetails_compatibleProducts', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1275, 20), )

    
    compatibleProducts = property(__compatibleProducts.value, __compatibleProducts.set, None, None)

    
    # Element details uses Python identifier details
    __details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'details'), 'details', '__httpwww_usharesoft_commarketplace_ProductItemDetails_details', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1283, 20), )

    
    details = property(__details.value, __details.set, None, None)

    
    # Element disclaimer uses Python identifier disclaimer
    __disclaimer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'disclaimer'), 'disclaimer', '__httpwww_usharesoft_commarketplace_ProductItemDetails_disclaimer', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1284, 20), )

    
    disclaimer = property(__disclaimer.value, __disclaimer.set, None, None)

    
    # Element editions uses Python identifier editions
    __editions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'editions'), 'editions', '__httpwww_usharesoft_commarketplace_ProductItemDetails_editions', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1285, 20), )

    
    editions = property(__editions.value, __editions.set, None, None)

    
    # Element favorite uses Python identifier favorite
    __favorite = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'favorite'), 'favorite', '__httpwww_usharesoft_commarketplace_ProductItemDetails_favorite', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1292, 20), )

    
    favorite = property(__favorite.value, __favorite.set, None, None)

    
    # Element favoritesUri uses Python identifier favoritesUri
    __favoritesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'favoritesUri'), 'favoritesUri', '__httpwww_usharesoft_commarketplace_ProductItemDetails_favoritesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1293, 20), )

    
    favoritesUri = property(__favoritesUri.value, __favoritesUri.set, None, None)

    
    # Element featured uses Python identifier featured
    __featured = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'featured'), 'featured', '__httpwww_usharesoft_commarketplace_ProductItemDetails_featured', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1294, 20), )

    
    featured = property(__featured.value, __featured.set, None, None)

    
    # Element installationInstructions uses Python identifier installationInstructions
    __installationInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'installationInstructions'), 'installationInstructions', '__httpwww_usharesoft_commarketplace_ProductItemDetails_installationInstructions', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1295, 20), )

    
    installationInstructions = property(__installationInstructions.value, __installationInstructions.set, None, None)

    
    # Element logo uses Python identifier logo
    __logo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'logo'), 'logo', '__httpwww_usharesoft_commarketplace_ProductItemDetails_logo', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1296, 20), )

    
    logo = property(__logo.value, __logo.set, None, None)

    
    # Element marketingResources uses Python identifier marketingResources
    __marketingResources = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'marketingResources'), 'marketingResources', '__httpwww_usharesoft_commarketplace_ProductItemDetails_marketingResources', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1297, 20), )

    
    marketingResources = property(__marketingResources.value, __marketingResources.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_ProductItemDetails_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1305, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element nbPurchases uses Python identifier nbPurchases
    __nbPurchases = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbPurchases'), 'nbPurchases', '__httpwww_usharesoft_commarketplace_ProductItemDetails_nbPurchases', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1306, 20), )

    
    nbPurchases = property(__nbPurchases.value, __nbPurchases.set, None, None)

    
    # Element nbVotes uses Python identifier nbVotes
    __nbVotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbVotes'), 'nbVotes', '__httpwww_usharesoft_commarketplace_ProductItemDetails_nbVotes', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1307, 20), )

    
    nbVotes = property(__nbVotes.value, __nbVotes.set, None, None)

    
    # Element otherReleases uses Python identifier otherReleases
    __otherReleases = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'otherReleases'), 'otherReleases', '__httpwww_usharesoft_commarketplace_ProductItemDetails_otherReleases', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1308, 20), )

    
    otherReleases = property(__otherReleases.value, __otherReleases.set, None, None)

    
    # Element overview uses Python identifier overview
    __overview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'overview'), 'overview', '__httpwww_usharesoft_commarketplace_ProductItemDetails_overview', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1316, 20), )

    
    overview = property(__overview.value, __overview.set, None, None)

    
    # Element partNumber uses Python identifier partNumber
    __partNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'partNumber'), 'partNumber', '__httpwww_usharesoft_commarketplace_ProductItemDetails_partNumber', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1317, 20), )

    
    partNumber = property(__partNumber.value, __partNumber.set, None, None)

    
    # Element pricingResources uses Python identifier pricingResources
    __pricingResources = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pricingResources'), 'pricingResources', '__httpwww_usharesoft_commarketplace_ProductItemDetails_pricingResources', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1318, 20), )

    
    pricingResources = property(__pricingResources.value, __pricingResources.set, None, None)

    
    # Element productUri uses Python identifier productUri
    __productUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productUri'), 'productUri', '__httpwww_usharesoft_commarketplace_ProductItemDetails_productUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1326, 20), )

    
    productUri = property(__productUri.value, __productUri.set, None, None)

    
    # Element purchased uses Python identifier purchased
    __purchased = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'purchased'), 'purchased', '__httpwww_usharesoft_commarketplace_ProductItemDetails_purchased', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1327, 20), )

    
    purchased = property(__purchased.value, __purchased.set, None, None)

    
    # Element purchasesUri uses Python identifier purchasesUri
    __purchasesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'purchasesUri'), 'purchasesUri', '__httpwww_usharesoft_commarketplace_ProductItemDetails_purchasesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1328, 20), )

    
    purchasesUri = property(__purchasesUri.value, __purchasesUri.set, None, None)

    
    # Element rating uses Python identifier rating
    __rating = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'rating'), 'rating', '__httpwww_usharesoft_commarketplace_ProductItemDetails_rating', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1329, 20), )

    
    rating = property(__rating.value, __rating.set, None, None)

    
    # Element releaseDate uses Python identifier releaseDate
    __releaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'releaseDate'), 'releaseDate', '__httpwww_usharesoft_commarketplace_ProductItemDetails_releaseDate', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1330, 20), )

    
    releaseDate = property(__releaseDate.value, __releaseDate.set, None, None)

    
    # Element releaseNotes uses Python identifier releaseNotes
    __releaseNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'releaseNotes'), 'releaseNotes', '__httpwww_usharesoft_commarketplace_ProductItemDetails_releaseNotes', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1331, 20), )

    
    releaseNotes = property(__releaseNotes.value, __releaseNotes.set, None, None)

    
    # Element screenshots uses Python identifier screenshots
    __screenshots = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'screenshots'), 'screenshots', '__httpwww_usharesoft_commarketplace_ProductItemDetails_screenshots', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1332, 20), )

    
    screenshots = property(__screenshots.value, __screenshots.set, None, None)

    
    # Element staffPick uses Python identifier staffPick
    __staffPick = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'staffPick'), 'staffPick', '__httpwww_usharesoft_commarketplace_ProductItemDetails_staffPick', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1339, 20), )

    
    staffPick = property(__staffPick.value, __staffPick.set, None, None)

    
    # Element supportDetails uses Python identifier supportDetails
    __supportDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supportDetails'), 'supportDetails', '__httpwww_usharesoft_commarketplace_ProductItemDetails_supportDetails', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1340, 20), )

    
    supportDetails = property(__supportDetails.value, __supportDetails.set, None, None)

    
    # Element supportEmail uses Python identifier supportEmail
    __supportEmail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supportEmail'), 'supportEmail', '__httpwww_usharesoft_commarketplace_ProductItemDetails_supportEmail', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1341, 20), )

    
    supportEmail = property(__supportEmail.value, __supportEmail.set, None, None)

    
    # Element supportEula uses Python identifier supportEula
    __supportEula = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supportEula'), 'supportEula', '__httpwww_usharesoft_commarketplace_ProductItemDetails_supportEula', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1342, 20), )

    
    supportEula = property(__supportEula.value, __supportEula.set, None, None)

    
    # Element supportPhone uses Python identifier supportPhone
    __supportPhone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supportPhone'), 'supportPhone', '__httpwww_usharesoft_commarketplace_ProductItemDetails_supportPhone', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1343, 20), )

    
    supportPhone = property(__supportPhone.value, __supportPhone.set, None, None)

    
    # Element supportResources uses Python identifier supportResources
    __supportResources = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supportResources'), 'supportResources', '__httpwww_usharesoft_commarketplace_ProductItemDetails_supportResources', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1344, 20), )

    
    supportResources = property(__supportResources.value, __supportResources.set, None, None)

    
    # Element supportUrl uses Python identifier supportUrl
    __supportUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supportUrl'), 'supportUrl', '__httpwww_usharesoft_commarketplace_ProductItemDetails_supportUrl', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1352, 20), )

    
    supportUrl = property(__supportUrl.value, __supportUrl.set, None, None)

    
    # Element tagLine uses Python identifier tagLine
    __tagLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'tagLine'), 'tagLine', '__httpwww_usharesoft_commarketplace_ProductItemDetails_tagLine', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1353, 20), )

    
    tagLine = property(__tagLine.value, __tagLine.set, None, None)

    
    # Element tags uses Python identifier tags
    __tags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'tags'), 'tags', '__httpwww_usharesoft_commarketplace_ProductItemDetails_tags', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1354, 20), )

    
    tags = property(__tags.value, __tags.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpwww_usharesoft_commarketplace_ProductItemDetails_type', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1355, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_ProductItemDetails_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1356, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element vendorName uses Python identifier vendorName
    __vendorName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vendorName'), 'vendorName', '__httpwww_usharesoft_commarketplace_ProductItemDetails_vendorName', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1357, 20), )

    
    vendorName = property(__vendorName.value, __vendorName.set, None, None)

    
    # Element vendorUri uses Python identifier vendorUri
    __vendorUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vendorUri'), 'vendorUri', '__httpwww_usharesoft_commarketplace_ProductItemDetails_vendorUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1358, 20), )

    
    vendorUri = property(__vendorUri.value, __vendorUri.set, None, None)

    
    # Element version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpwww_usharesoft_commarketplace_ProductItemDetails_version', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1359, 20), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __artifactsUri.name() : __artifactsUri,
        __badges.name() : __badges,
        __category.name() : __category,
        __commentsUri.name() : __commentsUri,
        __compatibleProducts.name() : __compatibleProducts,
        __details.name() : __details,
        __disclaimer.name() : __disclaimer,
        __editions.name() : __editions,
        __favorite.name() : __favorite,
        __favoritesUri.name() : __favoritesUri,
        __featured.name() : __featured,
        __installationInstructions.name() : __installationInstructions,
        __logo.name() : __logo,
        __marketingResources.name() : __marketingResources,
        __name.name() : __name,
        __nbPurchases.name() : __nbPurchases,
        __nbVotes.name() : __nbVotes,
        __otherReleases.name() : __otherReleases,
        __overview.name() : __overview,
        __partNumber.name() : __partNumber,
        __pricingResources.name() : __pricingResources,
        __productUri.name() : __productUri,
        __purchased.name() : __purchased,
        __purchasesUri.name() : __purchasesUri,
        __rating.name() : __rating,
        __releaseDate.name() : __releaseDate,
        __releaseNotes.name() : __releaseNotes,
        __screenshots.name() : __screenshots,
        __staffPick.name() : __staffPick,
        __supportDetails.name() : __supportDetails,
        __supportEmail.name() : __supportEmail,
        __supportEula.name() : __supportEula,
        __supportPhone.name() : __supportPhone,
        __supportResources.name() : __supportResources,
        __supportUrl.name() : __supportUrl,
        __tagLine.name() : __tagLine,
        __tags.name() : __tags,
        __type.name() : __type,
        __uri.name() : __uri,
        __vendorName.name() : __vendorName,
        __vendorUri.name() : __vendorUri,
        __version.name() : __version
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ProductItemDetails', ProductItemDetails)


# Complex type {http://www.usharesoft.com/marketplace}ProductItemDetailsList with content type ELEMENT_ONLY
class ProductItemDetailsList (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}ProductItemDetailsList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductItemDetailsList')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1365, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element productItemDetailsList uses Python identifier productItemDetailsList
    __productItemDetailsList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productItemDetailsList'), 'productItemDetailsList', '__httpwww_usharesoft_commarketplace_ProductItemDetailsList_productItemDetailsList', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1369, 20), )

    
    productItemDetailsList = property(__productItemDetailsList.value, __productItemDetailsList.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __productItemDetailsList.name() : __productItemDetailsList
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ProductItemDetailsList', ProductItemDetailsList)


# Complex type {http://www.usharesoft.com/marketplace}ProductItems with content type ELEMENT_ONLY
class ProductItems (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}ProductItems with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductItems')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1382, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element productItems uses Python identifier productItems
    __productItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productItems'), 'productItems', '__httpwww_usharesoft_commarketplace_ProductItems_productItems', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1386, 20), )

    
    productItems = property(__productItems.value, __productItems.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __productItems.name() : __productItems
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ProductItems', ProductItems)


# Complex type {http://www.usharesoft.com/marketplace}ProductItemSummary with content type ELEMENT_ONLY
class ProductItemSummary (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}ProductItemSummary with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductItemSummary')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1398, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element productId uses Python identifier productId
    __productId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productId'), 'productId', '__httpwww_usharesoft_commarketplace_ProductItemSummary_productId', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1402, 20), )

    
    productId = property(__productId.value, __productId.set, None, None)

    
    # Element releaseDate uses Python identifier releaseDate
    __releaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'releaseDate'), 'releaseDate', '__httpwww_usharesoft_commarketplace_ProductItemSummary_releaseDate', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1403, 20), )

    
    releaseDate = property(__releaseDate.value, __releaseDate.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpwww_usharesoft_commarketplace_ProductItemSummary_type', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1404, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_ProductItemSummary_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1405, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_ProductItemSummary_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1406, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpwww_usharesoft_commarketplace_ProductItemSummary_version', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1407, 20), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __productId.name() : __productId,
        __releaseDate.name() : __releaseDate,
        __type.name() : __type,
        __uri.name() : __uri,
        __name.name() : __name,
        __version.name() : __version
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ProductItemSummary', ProductItemSummary)


# Complex type {http://www.usharesoft.com/marketplace}ProductItemSummaryList with content type ELEMENT_ONLY
class ProductItemSummaryList (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}ProductItemSummaryList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductItemSummaryList')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1413, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element productItemSummaryList uses Python identifier productItemSummaryList
    __productItemSummaryList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productItemSummaryList'), 'productItemSummaryList', '__httpwww_usharesoft_commarketplace_ProductItemSummaryList_productItemSummaryList', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1417, 20), )

    
    productItemSummaryList = property(__productItemSummaryList.value, __productItemSummaryList.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __productItemSummaryList.name() : __productItemSummaryList
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ProductItemSummaryList', ProductItemSummaryList)


# Complex type {http://www.usharesoft.com/marketplace}ProductResource with content type ELEMENT_ONLY
class ProductResource (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}ProductResource with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductResource')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1430, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpwww_usharesoft_commarketplace_ProductResource_description', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1434, 20), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element label uses Python identifier label
    __label = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'label'), 'label', '__httpwww_usharesoft_commarketplace_ProductResource_label', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1435, 20), )

    
    label = property(__label.value, __label.set, None, None)

    
    # Element parentUri uses Python identifier parentUri
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parentUri'), 'parentUri', '__httpwww_usharesoft_commarketplace_ProductResource_parentUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1436, 20), )

    
    parentUri = property(__parentUri.value, __parentUri.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpwww_usharesoft_commarketplace_ProductResource_type', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1437, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_ProductResource_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1444, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element url uses Python identifier url
    __url = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'url'), 'url', '__httpwww_usharesoft_commarketplace_ProductResource_url', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1445, 20), )

    
    url = property(__url.value, __url.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __description.name() : __description,
        __label.name() : __label,
        __parentUri.name() : __parentUri,
        __type.name() : __type,
        __uri.name() : __uri,
        __url.name() : __url
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ProductResource', ProductResource)


# Complex type {http://www.usharesoft.com/marketplace}Products with content type ELEMENT_ONLY
class Products (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Products with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Products')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1451, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element products uses Python identifier products
    __products = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'products'), 'products', '__httpwww_usharesoft_commarketplace_Products_products', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1455, 20), )

    
    products = property(__products.value, __products.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __products.name() : __products
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Products', Products)


# Complex type {http://www.usharesoft.com/marketplace}ProductSummary with content type ELEMENT_ONLY
class ProductSummary (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}ProductSummary with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductSummary')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1467, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element badges uses Python identifier badges
    __badges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'badges'), 'badges', '__httpwww_usharesoft_commarketplace_ProductSummary_badges', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1471, 20), )

    
    badges = property(__badges.value, __badges.set, None, None)

    
    # Element category uses Python identifier category
    __category = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'category'), 'category', '__httpwww_usharesoft_commarketplace_ProductSummary_category', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1478, 20), )

    
    category = property(__category.value, __category.set, None, None)

    
    # Element details uses Python identifier details
    __details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'details'), 'details', '__httpwww_usharesoft_commarketplace_ProductSummary_details', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1479, 20), )

    
    details = property(__details.value, __details.set, None, None)

    
    # Element favoritesUri uses Python identifier favoritesUri
    __favoritesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'favoritesUri'), 'favoritesUri', '__httpwww_usharesoft_commarketplace_ProductSummary_favoritesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1480, 20), )

    
    favoritesUri = property(__favoritesUri.value, __favoritesUri.set, None, None)

    
    # Element itemsUri uses Python identifier itemsUri
    __itemsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'itemsUri'), 'itemsUri', '__httpwww_usharesoft_commarketplace_ProductSummary_itemsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1481, 20), )

    
    itemsUri = property(__itemsUri.value, __itemsUri.set, None, None)

    
    # Element latestItemUri uses Python identifier latestItemUri
    __latestItemUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'latestItemUri'), 'latestItemUri', '__httpwww_usharesoft_commarketplace_ProductSummary_latestItemUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1482, 20), )

    
    latestItemUri = property(__latestItemUri.value, __latestItemUri.set, None, None)

    
    # Element logo uses Python identifier logo
    __logo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'logo'), 'logo', '__httpwww_usharesoft_commarketplace_ProductSummary_logo', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1483, 20), )

    
    logo = property(__logo.value, __logo.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_ProductSummary_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1484, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element nbPurchases uses Python identifier nbPurchases
    __nbPurchases = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbPurchases'), 'nbPurchases', '__httpwww_usharesoft_commarketplace_ProductSummary_nbPurchases', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1485, 20), )

    
    nbPurchases = property(__nbPurchases.value, __nbPurchases.set, None, None)

    
    # Element nbVotes uses Python identifier nbVotes
    __nbVotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbVotes'), 'nbVotes', '__httpwww_usharesoft_commarketplace_ProductSummary_nbVotes', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1486, 20), )

    
    nbVotes = property(__nbVotes.value, __nbVotes.set, None, None)

    
    # Element productId uses Python identifier productId
    __productId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productId'), 'productId', '__httpwww_usharesoft_commarketplace_ProductSummary_productId', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1487, 20), )

    
    productId = property(__productId.value, __productId.set, None, None)

    
    # Element productUri uses Python identifier productUri
    __productUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productUri'), 'productUri', '__httpwww_usharesoft_commarketplace_ProductSummary_productUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1488, 20), )

    
    productUri = property(__productUri.value, __productUri.set, None, None)

    
    # Element purchasesUri uses Python identifier purchasesUri
    __purchasesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'purchasesUri'), 'purchasesUri', '__httpwww_usharesoft_commarketplace_ProductSummary_purchasesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1489, 20), )

    
    purchasesUri = property(__purchasesUri.value, __purchasesUri.set, None, None)

    
    # Element rating uses Python identifier rating
    __rating = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'rating'), 'rating', '__httpwww_usharesoft_commarketplace_ProductSummary_rating', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1490, 20), )

    
    rating = property(__rating.value, __rating.set, None, None)

    
    # Element releaseDate uses Python identifier releaseDate
    __releaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'releaseDate'), 'releaseDate', '__httpwww_usharesoft_commarketplace_ProductSummary_releaseDate', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1491, 20), )

    
    releaseDate = property(__releaseDate.value, __releaseDate.set, None, None)

    
    # Element startingCost uses Python identifier startingCost
    __startingCost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'startingCost'), 'startingCost', '__httpwww_usharesoft_commarketplace_ProductSummary_startingCost', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1492, 20), )

    
    startingCost = property(__startingCost.value, __startingCost.set, None, None)

    
    # Element tagLine uses Python identifier tagLine
    __tagLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'tagLine'), 'tagLine', '__httpwww_usharesoft_commarketplace_ProductSummary_tagLine', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1493, 20), )

    
    tagLine = property(__tagLine.value, __tagLine.set, None, None)

    
    # Element tags uses Python identifier tags
    __tags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'tags'), 'tags', '__httpwww_usharesoft_commarketplace_ProductSummary_tags', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1494, 20), )

    
    tags = property(__tags.value, __tags.set, None, None)

    
    # Element vendorName uses Python identifier vendorName
    __vendorName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vendorName'), 'vendorName', '__httpwww_usharesoft_commarketplace_ProductSummary_vendorName', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1495, 20), )

    
    vendorName = property(__vendorName.value, __vendorName.set, None, None)

    
    # Element version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpwww_usharesoft_commarketplace_ProductSummary_version', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1496, 20), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element popularity uses Python identifier popularity
    __popularity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'popularity'), 'popularity', '__httpwww_usharesoft_commarketplace_ProductSummary_popularity', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1497, 20), )

    
    popularity = property(__popularity.value, __popularity.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __badges.name() : __badges,
        __category.name() : __category,
        __details.name() : __details,
        __favoritesUri.name() : __favoritesUri,
        __itemsUri.name() : __itemsUri,
        __latestItemUri.name() : __latestItemUri,
        __logo.name() : __logo,
        __name.name() : __name,
        __nbPurchases.name() : __nbPurchases,
        __nbVotes.name() : __nbVotes,
        __productId.name() : __productId,
        __productUri.name() : __productUri,
        __purchasesUri.name() : __purchasesUri,
        __rating.name() : __rating,
        __releaseDate.name() : __releaseDate,
        __startingCost.name() : __startingCost,
        __tagLine.name() : __tagLine,
        __tags.name() : __tags,
        __vendorName.name() : __vendorName,
        __version.name() : __version,
        __popularity.name() : __popularity
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ProductSummary', ProductSummary)


# Complex type {http://www.usharesoft.com/marketplace}ProductSummaryList with content type ELEMENT_ONLY
class ProductSummaryList (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}ProductSummaryList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductSummaryList')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1503, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element productSummaryList uses Python identifier productSummaryList
    __productSummaryList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productSummaryList'), 'productSummaryList', '__httpwww_usharesoft_commarketplace_ProductSummaryList_productSummaryList', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1507, 20), )

    
    productSummaryList = property(__productSummaryList.value, __productSummaryList.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __productSummaryList.name() : __productSummaryList
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ProductSummaryList', ProductSummaryList)


# Complex type {http://www.usharesoft.com/marketplace}ProductType with content type ELEMENT_ONLY
class ProductType (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}ProductType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductType')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1520, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element primitive uses Python identifier primitive
    __primitive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'primitive'), 'primitive', '__httpwww_usharesoft_commarketplace_ProductType_primitive', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1524, 20), )

    
    primitive = property(__primitive.value, __primitive.set, None, None)

    
    # Element productItemsUri uses Python identifier productItemsUri
    __productItemsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productItemsUri'), 'productItemsUri', '__httpwww_usharesoft_commarketplace_ProductType_productItemsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1534, 20), )

    
    productItemsUri = property(__productItemsUri.value, __productItemsUri.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpwww_usharesoft_commarketplace_ProductType_type', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1535, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_ProductType_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1536, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __primitive.name() : __primitive,
        __productItemsUri.name() : __productItemsUri,
        __type.name() : __type,
        __uri.name() : __uri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ProductType', ProductType)


# Complex type {http://www.usharesoft.com/marketplace}ProductTypes with content type ELEMENT_ONLY
class ProductTypes (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}ProductTypes with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductTypes')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1542, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element productTypes uses Python identifier productTypes
    __productTypes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productTypes'), 'productTypes', '__httpwww_usharesoft_commarketplace_ProductTypes_productTypes', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1546, 20), )

    
    productTypes = property(__productTypes.value, __productTypes.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __productTypes.name() : __productTypes
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ProductTypes', ProductTypes)


# Complex type {http://www.usharesoft.com/marketplace}Purchase with content type ELEMENT_ONLY
class Purchase (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Purchase with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Purchase')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1558, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element item uses Python identifier item
    __item = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'item'), 'item', '__httpwww_usharesoft_commarketplace_Purchase_item', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1562, 20), )

    
    item = property(__item.value, __item.set, None, None)

    
    # Element order uses Python identifier order
    __order = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'order'), 'order', '__httpwww_usharesoft_commarketplace_Purchase_order', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1563, 20), )

    
    order = property(__order.value, __order.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_Purchase_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1564, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element billingStatus uses Python identifier billingStatus
    __billingStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'billingStatus'), 'billingStatus', '__httpwww_usharesoft_commarketplace_Purchase_billingStatus', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1565, 20), )

    
    billingStatus = property(__billingStatus.value, __billingStatus.set, None, None)

    
    # Element billingURL uses Python identifier billingURL
    __billingURL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'billingURL'), 'billingURL', '__httpwww_usharesoft_commarketplace_Purchase_billingURL', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1566, 20), )

    
    billingURL = property(__billingURL.value, __billingURL.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __item.name() : __item,
        __order.name() : __order,
        __uri.name() : __uri,
        __billingStatus.name() : __billingStatus,
        __billingURL.name() : __billingURL
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Purchase', Purchase)


# Complex type {http://www.usharesoft.com/marketplace}Purchases with content type ELEMENT_ONLY
class Purchases (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Purchases with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Purchases')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1572, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element purchases uses Python identifier purchases
    __purchases = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'purchases'), 'purchases', '__httpwww_usharesoft_commarketplace_Purchases_purchases', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1576, 20), )

    
    purchases = property(__purchases.value, __purchases.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __purchases.name() : __purchases
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Purchases', Purchases)


# Complex type {http://www.usharesoft.com/marketplace}Quota with content type ELEMENT_ONLY
class Quota (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Quota with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Quota')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1588, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element frequency uses Python identifier frequency
    __frequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'frequency'), 'frequency', '__httpwww_usharesoft_commarketplace_Quota_frequency', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1592, 20), )

    
    frequency = property(__frequency.value, __frequency.set, None, None)

    
    # Element limit uses Python identifier limit
    __limit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'limit'), 'limit', '__httpwww_usharesoft_commarketplace_Quota_limit', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1600, 20), )

    
    limit = property(__limit.value, __limit.set, None, None)

    
    # Element nb uses Python identifier nb
    __nb = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nb'), 'nb', '__httpwww_usharesoft_commarketplace_Quota_nb', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1601, 20), )

    
    nb = property(__nb.value, __nb.set, None, None)

    
    # Element renewalDate uses Python identifier renewalDate
    __renewalDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'renewalDate'), 'renewalDate', '__httpwww_usharesoft_commarketplace_Quota_renewalDate', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1602, 20), )

    
    renewalDate = property(__renewalDate.value, __renewalDate.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpwww_usharesoft_commarketplace_Quota_type', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1603, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element typeId uses Python identifier typeId
    __typeId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'typeId'), 'typeId', '__httpwww_usharesoft_commarketplace_Quota_typeId', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1613, 20), )

    
    typeId = property(__typeId.value, __typeId.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_Quota_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1614, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __frequency.name() : __frequency,
        __limit.name() : __limit,
        __nb.name() : __nb,
        __renewalDate.name() : __renewalDate,
        __type.name() : __type,
        __typeId.name() : __typeId,
        __uri.name() : __uri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Quota', Quota)


# Complex type {http://www.usharesoft.com/marketplace}Quotas with content type ELEMENT_ONLY
class Quotas (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Quotas with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Quotas')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1620, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element quotas uses Python identifier quotas
    __quotas = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quotas'), 'quotas', '__httpwww_usharesoft_commarketplace_Quotas_quotas', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1624, 20), )

    
    quotas = property(__quotas.value, __quotas.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __quotas.name() : __quotas
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Quotas', Quotas)


# Complex type {http://www.usharesoft.com/marketplace}Role with content type ELEMENT_ONLY
class Role (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Role with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Role')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1636, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpwww_usharesoft_commarketplace_Role_description', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1640, 20), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element entitlements uses Python identifier entitlements
    __entitlements = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'entitlements'), 'entitlements', '__httpwww_usharesoft_commarketplace_Role_entitlements', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1641, 20), )

    
    entitlements = property(__entitlements.value, __entitlements.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_Role_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1648, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __description.name() : __description,
        __entitlements.name() : __entitlements,
        __name.name() : __name
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Role', Role)


# Complex type {http://www.usharesoft.com/marketplace}Roles with content type ELEMENT_ONLY
class Roles (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Roles with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Roles')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1654, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element roles uses Python identifier roles
    __roles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'roles'), 'roles', '__httpwww_usharesoft_commarketplace_Roles_roles', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1658, 20), )

    
    roles = property(__roles.value, __roles.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __roles.name() : __roles
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Roles', Roles)


# Complex type {http://www.usharesoft.com/marketplace}ServiceStatus with content type ELEMENT_ONLY
class ServiceStatus (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}ServiceStatus with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ServiceStatus')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1680, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element alive uses Python identifier alive
    __alive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'alive'), 'alive', '__httpwww_usharesoft_commarketplace_ServiceStatus_alive', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1684, 20), )

    
    alive = property(__alive.value, __alive.set, None, None)

    
    # Element serviceLoad uses Python identifier serviceLoad
    __serviceLoad = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serviceLoad'), 'serviceLoad', '__httpwww_usharesoft_commarketplace_ServiceStatus_serviceLoad', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1685, 20), )

    
    serviceLoad = property(__serviceLoad.value, __serviceLoad.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __alive.name() : __alive,
        __serviceLoad.name() : __serviceLoad
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ServiceStatus', ServiceStatus)


# Complex type {http://www.usharesoft.com/marketplace}StatTicket with content type ELEMENT_ONLY
class StatTicket (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}StatTicket with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StatTicket')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1691, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element actionId uses Python identifier actionId
    __actionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'actionId'), 'actionId', '__httpwww_usharesoft_commarketplace_StatTicket_actionId', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1695, 20), )

    
    actionId = property(__actionId.value, __actionId.set, None, None)

    
    # Element actionName uses Python identifier actionName
    __actionName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'actionName'), 'actionName', '__httpwww_usharesoft_commarketplace_StatTicket_actionName', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1696, 20), )

    
    actionName = property(__actionName.value, __actionName.set, None, None)

    
    # Element currency uses Python identifier currency
    __currency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'currency'), 'currency', '__httpwww_usharesoft_commarketplace_StatTicket_currency', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1714, 20), )

    
    currency = property(__currency.value, __currency.set, None, None)

    
    # Element date uses Python identifier date
    __date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'date'), 'date', '__httpwww_usharesoft_commarketplace_StatTicket_date', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1715, 20), )

    
    date = property(__date.value, __date.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpwww_usharesoft_commarketplace_StatTicket_description', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1716, 20), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element diskSize uses Python identifier diskSize
    __diskSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'diskSize'), 'diskSize', '__httpwww_usharesoft_commarketplace_StatTicket_diskSize', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1717, 20), )

    
    diskSize = property(__diskSize.value, __diskSize.set, None, None)

    
    # Element distributionId uses Python identifier distributionId
    __distributionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'distributionId'), 'distributionId', '__httpwww_usharesoft_commarketplace_StatTicket_distributionId', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1718, 20), )

    
    distributionId = property(__distributionId.value, __distributionId.set, None, None)

    
    # Element distributionName uses Python identifier distributionName
    __distributionName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'distributionName'), 'distributionName', '__httpwww_usharesoft_commarketplace_StatTicket_distributionName', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1719, 20), )

    
    distributionName = property(__distributionName.value, __distributionName.set, None, None)

    
    # Element formatId uses Python identifier formatId
    __formatId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'formatId'), 'formatId', '__httpwww_usharesoft_commarketplace_StatTicket_formatId', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1720, 20), )

    
    formatId = property(__formatId.value, __formatId.set, None, None)

    
    # Element formatName uses Python identifier formatName
    __formatName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'formatName'), 'formatName', '__httpwww_usharesoft_commarketplace_StatTicket_formatName', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1721, 20), )

    
    formatName = property(__formatName.value, __formatName.set, None, None)

    
    # Element fromObjectId uses Python identifier fromObjectId
    __fromObjectId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fromObjectId'), 'fromObjectId', '__httpwww_usharesoft_commarketplace_StatTicket_fromObjectId', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1722, 20), )

    
    fromObjectId = property(__fromObjectId.value, __fromObjectId.set, None, None)

    
    # Element fromObjectName uses Python identifier fromObjectName
    __fromObjectName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fromObjectName'), 'fromObjectName', '__httpwww_usharesoft_commarketplace_StatTicket_fromObjectName', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1723, 20), )

    
    fromObjectName = property(__fromObjectName.value, __fromObjectName.set, None, None)

    
    # Element fromObjectType uses Python identifier fromObjectType
    __fromObjectType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'fromObjectType'), 'fromObjectType', '__httpwww_usharesoft_commarketplace_StatTicket_fromObjectType', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1724, 20), )

    
    fromObjectType = property(__fromObjectType.value, __fromObjectType.set, None, None)

    
    # Element objectId uses Python identifier objectId
    __objectId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'objectId'), 'objectId', '__httpwww_usharesoft_commarketplace_StatTicket_objectId', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1725, 20), )

    
    objectId = property(__objectId.value, __objectId.set, None, None)

    
    # Element objectName uses Python identifier objectName
    __objectName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'objectName'), 'objectName', '__httpwww_usharesoft_commarketplace_StatTicket_objectName', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1726, 20), )

    
    objectName = property(__objectName.value, __objectName.set, None, None)

    
    # Element objectStatus uses Python identifier objectStatus
    __objectStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'objectStatus'), 'objectStatus', '__httpwww_usharesoft_commarketplace_StatTicket_objectStatus', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1727, 20), )

    
    objectStatus = property(__objectStatus.value, __objectStatus.set, None, None)

    
    # Element objectType uses Python identifier objectType
    __objectType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'objectType'), 'objectType', '__httpwww_usharesoft_commarketplace_StatTicket_objectType', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1728, 20), )

    
    objectType = property(__objectType.value, __objectType.set, None, None)

    
    # Element orgId uses Python identifier orgId
    __orgId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'orgId'), 'orgId', '__httpwww_usharesoft_commarketplace_StatTicket_orgId', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1729, 20), )

    
    orgId = property(__orgId.value, __orgId.set, None, None)

    
    # Element price uses Python identifier price
    __price = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'price'), 'price', '__httpwww_usharesoft_commarketplace_StatTicket_price', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1730, 20), )

    
    price = property(__price.value, __price.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_StatTicket_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1731, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element userId uses Python identifier userId
    __userId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'userId'), 'userId', '__httpwww_usharesoft_commarketplace_StatTicket_userId', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1732, 20), )

    
    userId = property(__userId.value, __userId.set, None, None)

    
    # Element userLoginName uses Python identifier userLoginName
    __userLoginName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'userLoginName'), 'userLoginName', '__httpwww_usharesoft_commarketplace_StatTicket_userLoginName', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1733, 20), )

    
    userLoginName = property(__userLoginName.value, __userLoginName.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __actionId.name() : __actionId,
        __actionName.name() : __actionName,
        __currency.name() : __currency,
        __date.name() : __date,
        __description.name() : __description,
        __diskSize.name() : __diskSize,
        __distributionId.name() : __distributionId,
        __distributionName.name() : __distributionName,
        __formatId.name() : __formatId,
        __formatName.name() : __formatName,
        __fromObjectId.name() : __fromObjectId,
        __fromObjectName.name() : __fromObjectName,
        __fromObjectType.name() : __fromObjectType,
        __objectId.name() : __objectId,
        __objectName.name() : __objectName,
        __objectStatus.name() : __objectStatus,
        __objectType.name() : __objectType,
        __orgId.name() : __orgId,
        __price.name() : __price,
        __uri.name() : __uri,
        __userId.name() : __userId,
        __userLoginName.name() : __userLoginName
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'StatTicket', StatTicket)


# Complex type {http://www.usharesoft.com/marketplace}StatTickets with content type ELEMENT_ONLY
class StatTickets (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}StatTickets with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StatTickets')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1739, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element statTickets uses Python identifier statTickets
    __statTickets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'statTickets'), 'statTickets', '__httpwww_usharesoft_commarketplace_StatTickets_statTickets', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1743, 20), )

    
    statTickets = property(__statTickets.value, __statTickets.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __statTickets.name() : __statTickets
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'StatTickets', StatTickets)


# Complex type {http://www.usharesoft.com/marketplace}SubscriptionProfile with content type ELEMENT_ONLY
class SubscriptionProfile (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}SubscriptionProfile with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SubscriptionProfile')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1755, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element active uses Python identifier active
    __active = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'active'), 'active', '__httpwww_usharesoft_commarketplace_SubscriptionProfile_active', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1759, 20), )

    
    active = property(__active.value, __active.set, None, None)

    
    # Element admins uses Python identifier admins
    __admins = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'admins'), 'admins', '__httpwww_usharesoft_commarketplace_SubscriptionProfile_admins', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1760, 20), )

    
    admins = property(__admins.value, __admins.set, None, None)

    
    # Element adminsUri uses Python identifier adminsUri
    __adminsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'adminsUri'), 'adminsUri', '__httpwww_usharesoft_commarketplace_SubscriptionProfile_adminsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1767, 20), )

    
    adminsUri = property(__adminsUri.value, __adminsUri.set, None, None)

    
    # Element code uses Python identifier code
    __code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'code'), 'code', '__httpwww_usharesoft_commarketplace_SubscriptionProfile_code', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1768, 20), )

    
    code = property(__code.value, __code.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpwww_usharesoft_commarketplace_SubscriptionProfile_description', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1769, 20), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_SubscriptionProfile_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1770, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element orgUri uses Python identifier orgUri
    __orgUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'orgUri'), 'orgUri', '__httpwww_usharesoft_commarketplace_SubscriptionProfile_orgUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1771, 20), )

    
    orgUri = property(__orgUri.value, __orgUri.set, None, None)

    
    # Element quotas uses Python identifier quotas
    __quotas = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quotas'), 'quotas', '__httpwww_usharesoft_commarketplace_SubscriptionProfile_quotas', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1772, 20), )

    
    quotas = property(__quotas.value, __quotas.set, None, None)

    
    # Element quotasUri uses Python identifier quotasUri
    __quotasUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quotasUri'), 'quotasUri', '__httpwww_usharesoft_commarketplace_SubscriptionProfile_quotasUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1779, 20), )

    
    quotasUri = property(__quotasUri.value, __quotasUri.set, None, None)

    
    # Element roles uses Python identifier roles
    __roles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'roles'), 'roles', '__httpwww_usharesoft_commarketplace_SubscriptionProfile_roles', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1780, 20), )

    
    roles = property(__roles.value, __roles.set, None, None)

    
    # Element rolesUri uses Python identifier rolesUri
    __rolesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'rolesUri'), 'rolesUri', '__httpwww_usharesoft_commarketplace_SubscriptionProfile_rolesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1787, 20), )

    
    rolesUri = property(__rolesUri.value, __rolesUri.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_SubscriptionProfile_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1788, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __active.name() : __active,
        __admins.name() : __admins,
        __adminsUri.name() : __adminsUri,
        __code.name() : __code,
        __description.name() : __description,
        __name.name() : __name,
        __orgUri.name() : __orgUri,
        __quotas.name() : __quotas,
        __quotasUri.name() : __quotasUri,
        __roles.name() : __roles,
        __rolesUri.name() : __rolesUri,
        __uri.name() : __uri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SubscriptionProfile', SubscriptionProfile)


# Complex type {http://www.usharesoft.com/marketplace}SubscriptionProfiles with content type ELEMENT_ONLY
class SubscriptionProfiles (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}SubscriptionProfiles with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SubscriptionProfiles')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1794, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element subscriptionProfiles uses Python identifier subscriptionProfiles
    __subscriptionProfiles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'subscriptionProfiles'), 'subscriptionProfiles', '__httpwww_usharesoft_commarketplace_SubscriptionProfiles_subscriptionProfiles', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1798, 20), )

    
    subscriptionProfiles = property(__subscriptionProfiles.value, __subscriptionProfiles.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __subscriptionProfiles.name() : __subscriptionProfiles
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SubscriptionProfiles', SubscriptionProfiles)


# Complex type {http://www.usharesoft.com/marketplace}SupportPlan with content type ELEMENT_ONLY
class SupportPlan (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}SupportPlan with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SupportPlan')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1811, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element email uses Python identifier email
    __email = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'email'), 'email', '__httpwww_usharesoft_commarketplace_SupportPlan_email', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1815, 20), )

    
    email = property(__email.value, __email.set, None, None)

    
    # Element eula uses Python identifier eula
    __eula = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'eula'), 'eula', '__httpwww_usharesoft_commarketplace_SupportPlan_eula', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1816, 20), )

    
    eula = property(__eula.value, __eula.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_SupportPlan_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1817, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element nbReferences uses Python identifier nbReferences
    __nbReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbReferences'), 'nbReferences', '__httpwww_usharesoft_commarketplace_SupportPlan_nbReferences', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1818, 20), )

    
    nbReferences = property(__nbReferences.value, __nbReferences.set, None, None)

    
    # Element phone uses Python identifier phone
    __phone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'phone'), 'phone', '__httpwww_usharesoft_commarketplace_SupportPlan_phone', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1819, 20), )

    
    phone = property(__phone.value, __phone.set, None, None)

    
    # Element productItemsUri uses Python identifier productItemsUri
    __productItemsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productItemsUri'), 'productItemsUri', '__httpwww_usharesoft_commarketplace_SupportPlan_productItemsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1820, 20), )

    
    productItemsUri = property(__productItemsUri.value, __productItemsUri.set, None, None)

    
    # Element resources uses Python identifier resources
    __resources = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'resources'), 'resources', '__httpwww_usharesoft_commarketplace_SupportPlan_resources', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1821, 20), )

    
    resources = property(__resources.value, __resources.set, None, None)

    
    # Element supportDetails uses Python identifier supportDetails
    __supportDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supportDetails'), 'supportDetails', '__httpwww_usharesoft_commarketplace_SupportPlan_supportDetails', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1828, 20), )

    
    supportDetails = property(__supportDetails.value, __supportDetails.set, None, None)

    
    # Element supportUrl uses Python identifier supportUrl
    __supportUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supportUrl'), 'supportUrl', '__httpwww_usharesoft_commarketplace_SupportPlan_supportUrl', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1829, 20), )

    
    supportUrl = property(__supportUrl.value, __supportUrl.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_SupportPlan_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1830, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element vendorUri uses Python identifier vendorUri
    __vendorUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vendorUri'), 'vendorUri', '__httpwww_usharesoft_commarketplace_SupportPlan_vendorUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1831, 20), )

    
    vendorUri = property(__vendorUri.value, __vendorUri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __email.name() : __email,
        __eula.name() : __eula,
        __name.name() : __name,
        __nbReferences.name() : __nbReferences,
        __phone.name() : __phone,
        __productItemsUri.name() : __productItemsUri,
        __resources.name() : __resources,
        __supportDetails.name() : __supportDetails,
        __supportUrl.name() : __supportUrl,
        __uri.name() : __uri,
        __vendorUri.name() : __vendorUri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SupportPlan', SupportPlan)


# Complex type {http://www.usharesoft.com/marketplace}SupportPlans with content type ELEMENT_ONLY
class SupportPlans (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}SupportPlans with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SupportPlans')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1837, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element supportPlans uses Python identifier supportPlans
    __supportPlans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supportPlans'), 'supportPlans', '__httpwww_usharesoft_commarketplace_SupportPlans_supportPlans', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1841, 20), )

    
    supportPlans = property(__supportPlans.value, __supportPlans.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __supportPlans.name() : __supportPlans
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SupportPlans', SupportPlans)


# Complex type {http://www.usharesoft.com/marketplace}UforgeCredAccount with content type ELEMENT_ONLY
class UforgeCredAccount (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}UforgeCredAccount with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UforgeCredAccount')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1853, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_UforgeCredAccount_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1857, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element login uses Python identifier login
    __login = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'login'), 'login', '__httpwww_usharesoft_commarketplace_UforgeCredAccount_login', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1858, 20), )

    
    login = property(__login.value, __login.set, None, None)

    
    # Element parentUri uses Python identifier parentUri
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parentUri'), 'parentUri', '__httpwww_usharesoft_commarketplace_UforgeCredAccount_parentUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1859, 20), )

    
    parentUri = property(__parentUri.value, __parentUri.set, None, None)

    
    # Element password uses Python identifier password
    __password = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'password'), 'password', '__httpwww_usharesoft_commarketplace_UforgeCredAccount_password', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1860, 20), )

    
    password = property(__password.value, __password.set, None, None)

    
    # Element serverUrl uses Python identifier serverUrl
    __serverUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serverUrl'), 'serverUrl', '__httpwww_usharesoft_commarketplace_UforgeCredAccount_serverUrl', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1861, 20), )

    
    serverUrl = property(__serverUrl.value, __serverUrl.set, None, None)

    
    # Element appliancesUri uses Python identifier appliancesUri
    __appliancesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'appliancesUri'), 'appliancesUri', '__httpwww_usharesoft_commarketplace_UforgeCredAccount_appliancesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1862, 20), )

    
    appliancesUri = property(__appliancesUri.value, __appliancesUri.set, None, None)

    
    # Element machineImagesUri uses Python identifier machineImagesUri
    __machineImagesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'machineImagesUri'), 'machineImagesUri', '__httpwww_usharesoft_commarketplace_UforgeCredAccount_machineImagesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1863, 20), )

    
    machineImagesUri = property(__machineImagesUri.value, __machineImagesUri.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_UforgeCredAccount_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1864, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    _ElementMap.update({
        __name.name() : __name,
        __login.name() : __login,
        __parentUri.name() : __parentUri,
        __password.name() : __password,
        __serverUrl.name() : __serverUrl,
        __appliancesUri.name() : __appliancesUri,
        __machineImagesUri.name() : __machineImagesUri,
        __uri.name() : __uri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'UforgeCredAccount', UforgeCredAccount)


# Complex type {http://www.usharesoft.com/marketplace}UforgeCredAccounts with content type ELEMENT_ONLY
class UforgeCredAccounts (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}UforgeCredAccounts with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UforgeCredAccounts')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1870, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element uforgeCredAccounts uses Python identifier uforgeCredAccounts
    __uforgeCredAccounts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uforgeCredAccounts'), 'uforgeCredAccounts', '__httpwww_usharesoft_commarketplace_UforgeCredAccounts_uforgeCredAccounts', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1874, 20), )

    
    uforgeCredAccounts = property(__uforgeCredAccounts.value, __uforgeCredAccounts.set, None, None)

    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    _ElementMap.update({
        __uforgeCredAccounts.name() : __uforgeCredAccounts
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'UforgeCredAccounts', UforgeCredAccounts)


# Complex type {http://www.usharesoft.com/marketplace}UForgeUploadObject with content type ELEMENT_ONLY
class UForgeUploadObject (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}UForgeUploadObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UForgeUploadObject')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1912, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element md5sum uses Python identifier md5sum
    __md5sum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'md5sum'), 'md5sum', '__httpwww_usharesoft_commarketplace_UForgeUploadObject_md5sum', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1916, 20), )

    
    md5sum = property(__md5sum.value, __md5sum.set, None, None)

    
    # Element mimeType uses Python identifier mimeType
    __mimeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'mimeType'), 'mimeType', '__httpwww_usharesoft_commarketplace_UForgeUploadObject_mimeType', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1917, 20), )

    
    mimeType = property(__mimeType.value, __mimeType.set, None, None)

    
    # Element sha256sum uses Python identifier sha256sum
    __sha256sum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sha256sum'), 'sha256sum', '__httpwww_usharesoft_commarketplace_UForgeUploadObject_sha256sum', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1918, 20), )

    
    sha256sum = property(__sha256sum.value, __sha256sum.set, None, None)

    
    # Element size uses Python identifier size
    __size = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'size'), 'size', '__httpwww_usharesoft_commarketplace_UForgeUploadObject_size', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1919, 20), )

    
    size = property(__size.value, __size.set, None, None)

    
    # Element status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'status'), 'status', '__httpwww_usharesoft_commarketplace_UForgeUploadObject_status', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1920, 20), )

    
    status = property(__status.value, __status.set, None, None)

    
    # Element uploaded uses Python identifier uploaded
    __uploaded = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uploaded'), 'uploaded', '__httpwww_usharesoft_commarketplace_UForgeUploadObject_uploaded', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1921, 20), )

    
    uploaded = property(__uploaded.value, __uploaded.set, None, None)

    
    # Element uploadedTime uses Python identifier uploadedTime
    __uploadedTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uploadedTime'), 'uploadedTime', '__httpwww_usharesoft_commarketplace_UForgeUploadObject_uploadedTime', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1922, 20), )

    
    uploadedTime = property(__uploadedTime.value, __uploadedTime.set, None, None)

    _ElementMap.update({
        __md5sum.name() : __md5sum,
        __mimeType.name() : __mimeType,
        __sha256sum.name() : __sha256sum,
        __size.name() : __size,
        __status.name() : __status,
        __uploaded.name() : __uploaded,
        __uploadedTime.name() : __uploadedTime
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'UForgeUploadObject', UForgeUploadObject)


# Complex type {http://www.usharesoft.com/marketplace}Unit with content type ELEMENT_ONLY
class Unit (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Unit with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Unit')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1928, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element nb uses Python identifier nb
    __nb = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nb'), 'nb', '__httpwww_usharesoft_commarketplace_Unit_nb', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1932, 20), )

    
    nb = property(__nb.value, __nb.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpwww_usharesoft_commarketplace_Unit_type', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1933, 20), )

    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __nb.name() : __nb,
        __type.name() : __type
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Unit', Unit)


# Complex type {http://www.usharesoft.com/marketplace}Units with content type ELEMENT_ONLY
class Units (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Units with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Units')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1964, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    
    # Element units uses Python identifier units
    __units = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'units'), 'units', '__httpwww_usharesoft_commarketplace_Units_units', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1968, 20), )

    
    units = property(__units.value, __units.set, None, None)

    _ElementMap.update({
        __units.name() : __units
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Units', Units)


# Complex type {http://www.usharesoft.com/marketplace}User with content type ELEMENT_ONLY
class User (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}User with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'User')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1986, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element active uses Python identifier active
    __active = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'active'), 'active', '__httpwww_usharesoft_commarketplace_User_active', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1990, 20), )

    
    active = property(__active.value, __active.set, None, None)

    
    # Element address uses Python identifier address
    __address = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'address'), 'address', '__httpwww_usharesoft_commarketplace_User_address', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1991, 20), )

    
    address = property(__address.value, __address.set, None, None)

    
    # Element admin uses Python identifier admin
    __admin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'admin'), 'admin', '__httpwww_usharesoft_commarketplace_User_admin', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1992, 20), )

    
    admin = property(__admin.value, __admin.set, None, None)

    
    # Element adminOrgsUri uses Python identifier adminOrgsUri
    __adminOrgsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'adminOrgsUri'), 'adminOrgsUri', '__httpwww_usharesoft_commarketplace_User_adminOrgsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1993, 20), )

    
    adminOrgsUri = property(__adminOrgsUri.value, __adminOrgsUri.set, None, None)

    
    # Element adminOrgUris uses Python identifier adminOrgUris
    __adminOrgUris = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'adminOrgUris'), 'adminOrgUris', '__httpwww_usharesoft_commarketplace_User_adminOrgUris', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1994, 20), )

    
    adminOrgUris = property(__adminOrgUris.value, __adminOrgUris.set, None, None)

    
    # Element apiKeysQuota uses Python identifier apiKeysQuota
    __apiKeysQuota = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'apiKeysQuota'), 'apiKeysQuota', '__httpwww_usharesoft_commarketplace_User_apiKeysQuota', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1995, 20), )

    
    apiKeysQuota = property(__apiKeysQuota.value, __apiKeysQuota.set, None, None)

    
    # Element baseApiKeysUri uses Python identifier baseApiKeysUri
    __baseApiKeysUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'baseApiKeysUri'), 'baseApiKeysUri', '__httpwww_usharesoft_commarketplace_User_baseApiKeysUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1996, 20), )

    
    baseApiKeysUri = property(__baseApiKeysUri.value, __baseApiKeysUri.set, None, None)

    
    # Element baseOrgsUri uses Python identifier baseOrgsUri
    __baseOrgsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'baseOrgsUri'), 'baseOrgsUri', '__httpwww_usharesoft_commarketplace_User_baseOrgsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1997, 20), )

    
    baseOrgsUri = property(__baseOrgsUri.value, __baseOrgsUri.set, None, None)

    
    # Element baseRolesUri uses Python identifier baseRolesUri
    __baseRolesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'baseRolesUri'), 'baseRolesUri', '__httpwww_usharesoft_commarketplace_User_baseRolesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1998, 20), )

    
    baseRolesUri = property(__baseRolesUri.value, __baseRolesUri.set, None, None)

    
    # Element company uses Python identifier company
    __company = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'company'), 'company', '__httpwww_usharesoft_commarketplace_User_company', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1999, 20), )

    
    company = property(__company.value, __company.set, None, None)

    
    # Element creationCode uses Python identifier creationCode
    __creationCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'creationCode'), 'creationCode', '__httpwww_usharesoft_commarketplace_User_creationCode', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2000, 20), )

    
    creationCode = property(__creationCode.value, __creationCode.set, None, None)

    
    # Element dob uses Python identifier dob
    __dob = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dob'), 'dob', '__httpwww_usharesoft_commarketplace_User_dob', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2001, 20), )

    
    dob = property(__dob.value, __dob.set, None, None)

    
    # Element email uses Python identifier email
    __email = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'email'), 'email', '__httpwww_usharesoft_commarketplace_User_email', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2002, 20), )

    
    email = property(__email.value, __email.set, None, None)

    
    # Element exportsUri uses Python identifier exportsUri
    __exportsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'exportsUri'), 'exportsUri', '__httpwww_usharesoft_commarketplace_User_exportsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2003, 20), )

    
    exportsUri = property(__exportsUri.value, __exportsUri.set, None, None)

    
    # Element firstName uses Python identifier firstName
    __firstName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'firstName'), 'firstName', '__httpwww_usharesoft_commarketplace_User_firstName', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2004, 20), )

    
    firstName = property(__firstName.value, __firstName.set, None, None)

    
    # Element gender uses Python identifier gender
    __gender = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'gender'), 'gender', '__httpwww_usharesoft_commarketplace_User_gender', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2005, 20), )

    
    gender = property(__gender.value, __gender.set, None, None)

    
    # Element homePhone uses Python identifier homePhone
    __homePhone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'homePhone'), 'homePhone', '__httpwww_usharesoft_commarketplace_User_homePhone', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2006, 20), )

    
    homePhone = property(__homePhone.value, __homePhone.set, None, None)

    
    # Element jobTitle uses Python identifier jobTitle
    __jobTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'jobTitle'), 'jobTitle', '__httpwww_usharesoft_commarketplace_User_jobTitle', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2007, 20), )

    
    jobTitle = property(__jobTitle.value, __jobTitle.set, None, None)

    
    # Element joined uses Python identifier joined
    __joined = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'joined'), 'joined', '__httpwww_usharesoft_commarketplace_User_joined', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2008, 20), )

    
    joined = property(__joined.value, __joined.set, None, None)

    
    # Element lang uses Python identifier lang
    __lang = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'lang'), 'lang', '__httpwww_usharesoft_commarketplace_User_lang', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2009, 20), )

    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Element loginName uses Python identifier loginName
    __loginName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'loginName'), 'loginName', '__httpwww_usharesoft_commarketplace_User_loginName', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2010, 20), )

    
    loginName = property(__loginName.value, __loginName.set, None, None)

    
    # Element mobilePhone uses Python identifier mobilePhone
    __mobilePhone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'mobilePhone'), 'mobilePhone', '__httpwww_usharesoft_commarketplace_User_mobilePhone', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2011, 20), )

    
    mobilePhone = property(__mobilePhone.value, __mobilePhone.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_User_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2012, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element officePhone uses Python identifier officePhone
    __officePhone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'officePhone'), 'officePhone', '__httpwww_usharesoft_commarketplace_User_officePhone', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2013, 20), )

    
    officePhone = property(__officePhone.value, __officePhone.set, None, None)

    
    # Element orgUris uses Python identifier orgUris
    __orgUris = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'orgUris'), 'orgUris', '__httpwww_usharesoft_commarketplace_User_orgUris', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2014, 20), )

    
    orgUris = property(__orgUris.value, __orgUris.set, None, None)

    
    # Element password uses Python identifier password
    __password = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'password'), 'password', '__httpwww_usharesoft_commarketplace_User_password', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2015, 20), )

    
    password = property(__password.value, __password.set, None, None)

    
    # Element photo uses Python identifier photo
    __photo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'photo'), 'photo', '__httpwww_usharesoft_commarketplace_User_photo', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2016, 20), )

    
    photo = property(__photo.value, __photo.set, None, None)

    
    # Element promoCode uses Python identifier promoCode
    __promoCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'promoCode'), 'promoCode', '__httpwww_usharesoft_commarketplace_User_promoCode', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2017, 20), )

    
    promoCode = property(__promoCode.value, __promoCode.set, None, None)

    
    # Element purchasesUri uses Python identifier purchasesUri
    __purchasesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'purchasesUri'), 'purchasesUri', '__httpwww_usharesoft_commarketplace_User_purchasesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2018, 20), )

    
    purchasesUri = property(__purchasesUri.value, __purchasesUri.set, None, None)

    
    # Element quotasUri uses Python identifier quotasUri
    __quotasUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quotasUri'), 'quotasUri', '__httpwww_usharesoft_commarketplace_User_quotasUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2019, 20), )

    
    quotasUri = property(__quotasUri.value, __quotasUri.set, None, None)

    
    # Element roles uses Python identifier roles
    __roles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'roles'), 'roles', '__httpwww_usharesoft_commarketplace_User_roles', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2020, 20), )

    
    roles = property(__roles.value, __roles.set, None, None)

    
    # Element surname uses Python identifier surname
    __surname = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'surname'), 'surname', '__httpwww_usharesoft_commarketplace_User_surname', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2027, 20), )

    
    surname = property(__surname.value, __surname.set, None, None)

    
    # Element uforgeCredAccounts uses Python identifier uforgeCredAccounts
    __uforgeCredAccounts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uforgeCredAccounts'), 'uforgeCredAccounts', '__httpwww_usharesoft_commarketplace_User_uforgeCredAccounts', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2028, 20), )

    
    uforgeCredAccounts = property(__uforgeCredAccounts.value, __uforgeCredAccounts.set, None, None)

    
    # Element exports uses Python identifier exports
    __exports = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'exports'), 'exports', '__httpwww_usharesoft_commarketplace_User_exports', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2035, 20), )

    
    exports = property(__exports.value, __exports.set, None, None)

    
    # Element uforgeCredAccountsUri uses Python identifier uforgeCredAccountsUri
    __uforgeCredAccountsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uforgeCredAccountsUri'), 'uforgeCredAccountsUri', '__httpwww_usharesoft_commarketplace_User_uforgeCredAccountsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2042, 20), )

    
    uforgeCredAccountsUri = property(__uforgeCredAccountsUri.value, __uforgeCredAccountsUri.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_User_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2043, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element usageUri uses Python identifier usageUri
    __usageUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'usageUri'), 'usageUri', '__httpwww_usharesoft_commarketplace_User_usageUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2044, 20), )

    
    usageUri = property(__usageUri.value, __usageUri.set, None, None)

    
    # Element vendorsUri uses Python identifier vendorsUri
    __vendorsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vendorsUri'), 'vendorsUri', '__httpwww_usharesoft_commarketplace_User_vendorsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2045, 20), )

    
    vendorsUri = property(__vendorsUri.value, __vendorsUri.set, None, None)

    
    # Element website uses Python identifier website
    __website = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'website'), 'website', '__httpwww_usharesoft_commarketplace_User_website', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2046, 20), )

    
    website = property(__website.value, __website.set, None, None)

    _ElementMap.update({
        __active.name() : __active,
        __address.name() : __address,
        __admin.name() : __admin,
        __adminOrgsUri.name() : __adminOrgsUri,
        __adminOrgUris.name() : __adminOrgUris,
        __apiKeysQuota.name() : __apiKeysQuota,
        __baseApiKeysUri.name() : __baseApiKeysUri,
        __baseOrgsUri.name() : __baseOrgsUri,
        __baseRolesUri.name() : __baseRolesUri,
        __company.name() : __company,
        __creationCode.name() : __creationCode,
        __dob.name() : __dob,
        __email.name() : __email,
        __exportsUri.name() : __exportsUri,
        __firstName.name() : __firstName,
        __gender.name() : __gender,
        __homePhone.name() : __homePhone,
        __jobTitle.name() : __jobTitle,
        __joined.name() : __joined,
        __lang.name() : __lang,
        __loginName.name() : __loginName,
        __mobilePhone.name() : __mobilePhone,
        __name.name() : __name,
        __officePhone.name() : __officePhone,
        __orgUris.name() : __orgUris,
        __password.name() : __password,
        __photo.name() : __photo,
        __promoCode.name() : __promoCode,
        __purchasesUri.name() : __purchasesUri,
        __quotasUri.name() : __quotasUri,
        __roles.name() : __roles,
        __surname.name() : __surname,
        __uforgeCredAccounts.name() : __uforgeCredAccounts,
        __exports.name() : __exports,
        __uforgeCredAccountsUri.name() : __uforgeCredAccountsUri,
        __uri.name() : __uri,
        __usageUri.name() : __usageUri,
        __vendorsUri.name() : __vendorsUri,
        __website.name() : __website
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'User', User)


# Complex type {http://www.usharesoft.com/marketplace}Users with content type ELEMENT_ONLY
class Users (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Users with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Users')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2052, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    
    # Element users uses Python identifier users
    __users = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'users'), 'users', '__httpwww_usharesoft_commarketplace_Users_users', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2056, 20), )

    
    users = property(__users.value, __users.set, None, None)

    _ElementMap.update({
        __users.name() : __users
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Users', Users)


# Complex type {http://www.usharesoft.com/marketplace}Vendor with content type ELEMENT_ONLY
class Vendor (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Vendor with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Vendor')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2067, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element address uses Python identifier address
    __address = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'address'), 'address', '__httpwww_usharesoft_commarketplace_Vendor_address', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2071, 20), )

    
    address = property(__address.value, __address.set, None, None)

    
    # Element approvalsUri uses Python identifier approvalsUri
    __approvalsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'approvalsUri'), 'approvalsUri', '__httpwww_usharesoft_commarketplace_Vendor_approvalsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2072, 20), )

    
    approvalsUri = property(__approvalsUri.value, __approvalsUri.set, None, None)

    
    # Element badges uses Python identifier badges
    __badges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'badges'), 'badges', '__httpwww_usharesoft_commarketplace_Vendor_badges', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2073, 20), )

    
    badges = property(__badges.value, __badges.set, None, None)

    
    # Element creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'creator'), 'creator', '__httpwww_usharesoft_commarketplace_Vendor_creator', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2080, 20), )

    
    creator = property(__creator.value, __creator.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpwww_usharesoft_commarketplace_Vendor_description', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2081, 20), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element email uses Python identifier email
    __email = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'email'), 'email', '__httpwww_usharesoft_commarketplace_Vendor_email', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2082, 20), )

    
    email = property(__email.value, __email.set, None, None)

    
    # Element inactive uses Python identifier inactive
    __inactive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'inactive'), 'inactive', '__httpwww_usharesoft_commarketplace_Vendor_inactive', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2083, 20), )

    
    inactive = property(__inactive.value, __inactive.set, None, None)

    
    # Element logo uses Python identifier logo
    __logo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'logo'), 'logo', '__httpwww_usharesoft_commarketplace_Vendor_logo', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2084, 20), )

    
    logo = property(__logo.value, __logo.set, None, None)

    
    # Element marketingPlans uses Python identifier marketingPlans
    __marketingPlans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'marketingPlans'), 'marketingPlans', '__httpwww_usharesoft_commarketplace_Vendor_marketingPlans', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2085, 20), )

    
    marketingPlans = property(__marketingPlans.value, __marketingPlans.set, None, None)

    
    # Element marketingPlansUri uses Python identifier marketingPlansUri
    __marketingPlansUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'marketingPlansUri'), 'marketingPlansUri', '__httpwww_usharesoft_commarketplace_Vendor_marketingPlansUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2093, 20), )

    
    marketingPlansUri = property(__marketingPlansUri.value, __marketingPlansUri.set, None, None)

    
    # Element members uses Python identifier members
    __members = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'members'), 'members', '__httpwww_usharesoft_commarketplace_Vendor_members', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2094, 20), )

    
    members = property(__members.value, __members.set, None, None)

    
    # Element membersUri uses Python identifier membersUri
    __membersUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'membersUri'), 'membersUri', '__httpwww_usharesoft_commarketplace_Vendor_membersUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2101, 20), )

    
    membersUri = property(__membersUri.value, __membersUri.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_Vendor_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2102, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element nbMembers uses Python identifier nbMembers
    __nbMembers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbMembers'), 'nbMembers', '__httpwww_usharesoft_commarketplace_Vendor_nbMembers', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2103, 20), )

    
    nbMembers = property(__nbMembers.value, __nbMembers.set, None, None)

    
    # Element nbProductItems uses Python identifier nbProductItems
    __nbProductItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbProductItems'), 'nbProductItems', '__httpwww_usharesoft_commarketplace_Vendor_nbProductItems', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2104, 20), )

    
    nbProductItems = property(__nbProductItems.value, __nbProductItems.set, None, None)

    
    # Element nbProducts uses Python identifier nbProducts
    __nbProducts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbProducts'), 'nbProducts', '__httpwww_usharesoft_commarketplace_Vendor_nbProducts', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2105, 20), )

    
    nbProducts = property(__nbProducts.value, __nbProducts.set, None, None)

    
    # Element notificationEmail uses Python identifier notificationEmail
    __notificationEmail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'notificationEmail'), 'notificationEmail', '__httpwww_usharesoft_commarketplace_Vendor_notificationEmail', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2106, 20), )

    
    notificationEmail = property(__notificationEmail.value, __notificationEmail.set, None, None)

    
    # Element orgUri uses Python identifier orgUri
    __orgUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'orgUri'), 'orgUri', '__httpwww_usharesoft_commarketplace_Vendor_orgUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2107, 20), )

    
    orgUri = property(__orgUri.value, __orgUri.set, None, None)

    
    # Element phone uses Python identifier phone
    __phone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'phone'), 'phone', '__httpwww_usharesoft_commarketplace_Vendor_phone', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2108, 20), )

    
    phone = property(__phone.value, __phone.set, None, None)

    
    # Element pricingPlans uses Python identifier pricingPlans
    __pricingPlans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pricingPlans'), 'pricingPlans', '__httpwww_usharesoft_commarketplace_Vendor_pricingPlans', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2109, 20), )

    
    pricingPlans = property(__pricingPlans.value, __pricingPlans.set, None, None)

    
    # Element pricingPlansUri uses Python identifier pricingPlansUri
    __pricingPlansUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pricingPlansUri'), 'pricingPlansUri', '__httpwww_usharesoft_commarketplace_Vendor_pricingPlansUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2116, 20), )

    
    pricingPlansUri = property(__pricingPlansUri.value, __pricingPlansUri.set, None, None)

    
    # Element products uses Python identifier products
    __products = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'products'), 'products', '__httpwww_usharesoft_commarketplace_Vendor_products', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2117, 20), )

    
    products = property(__products.value, __products.set, None, None)

    
    # Element productsUri uses Python identifier productsUri
    __productsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'productsUri'), 'productsUri', '__httpwww_usharesoft_commarketplace_Vendor_productsUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2124, 20), )

    
    productsUri = property(__productsUri.value, __productsUri.set, None, None)

    
    # Element purchasesUri uses Python identifier purchasesUri
    __purchasesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'purchasesUri'), 'purchasesUri', '__httpwww_usharesoft_commarketplace_Vendor_purchasesUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2125, 20), )

    
    purchasesUri = property(__purchasesUri.value, __purchasesUri.set, None, None)

    
    # Element supportPlans uses Python identifier supportPlans
    __supportPlans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supportPlans'), 'supportPlans', '__httpwww_usharesoft_commarketplace_Vendor_supportPlans', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2126, 20), )

    
    supportPlans = property(__supportPlans.value, __supportPlans.set, None, None)

    
    # Element supportPlansUri uses Python identifier supportPlansUri
    __supportPlansUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supportPlansUri'), 'supportPlansUri', '__httpwww_usharesoft_commarketplace_Vendor_supportPlansUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2133, 20), )

    
    supportPlansUri = property(__supportPlansUri.value, __supportPlansUri.set, None, None)

    
    # Element twitterName uses Python identifier twitterName
    __twitterName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'twitterName'), 'twitterName', '__httpwww_usharesoft_commarketplace_Vendor_twitterName', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2134, 20), )

    
    twitterName = property(__twitterName.value, __twitterName.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpwww_usharesoft_commarketplace_Vendor_type', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2135, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_Vendor_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2143, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element billingMappingUri uses Python identifier billingMappingUri
    __billingMappingUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'billingMappingUri'), 'billingMappingUri', '__httpwww_usharesoft_commarketplace_Vendor_billingMappingUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2144, 20), )

    
    billingMappingUri = property(__billingMappingUri.value, __billingMappingUri.set, None, None)

    
    # Element billingRenewTokenUri uses Python identifier billingRenewTokenUri
    __billingRenewTokenUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'billingRenewTokenUri'), 'billingRenewTokenUri', '__httpwww_usharesoft_commarketplace_Vendor_billingRenewTokenUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2145, 20), )

    
    billingRenewTokenUri = property(__billingRenewTokenUri.value, __billingRenewTokenUri.set, None, None)

    
    # Element website uses Python identifier website
    __website = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'website'), 'website', '__httpwww_usharesoft_commarketplace_Vendor_website', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2146, 20), )

    
    website = property(__website.value, __website.set, None, None)

    _ElementMap.update({
        __address.name() : __address,
        __approvalsUri.name() : __approvalsUri,
        __badges.name() : __badges,
        __creator.name() : __creator,
        __description.name() : __description,
        __email.name() : __email,
        __inactive.name() : __inactive,
        __logo.name() : __logo,
        __marketingPlans.name() : __marketingPlans,
        __marketingPlansUri.name() : __marketingPlansUri,
        __members.name() : __members,
        __membersUri.name() : __membersUri,
        __name.name() : __name,
        __nbMembers.name() : __nbMembers,
        __nbProductItems.name() : __nbProductItems,
        __nbProducts.name() : __nbProducts,
        __notificationEmail.name() : __notificationEmail,
        __orgUri.name() : __orgUri,
        __phone.name() : __phone,
        __pricingPlans.name() : __pricingPlans,
        __pricingPlansUri.name() : __pricingPlansUri,
        __products.name() : __products,
        __productsUri.name() : __productsUri,
        __purchasesUri.name() : __purchasesUri,
        __supportPlans.name() : __supportPlans,
        __supportPlansUri.name() : __supportPlansUri,
        __twitterName.name() : __twitterName,
        __type.name() : __type,
        __uri.name() : __uri,
        __billingMappingUri.name() : __billingMappingUri,
        __billingRenewTokenUri.name() : __billingRenewTokenUri,
        __website.name() : __website
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Vendor', Vendor)


# Complex type {http://www.usharesoft.com/marketplace}VendorMember with content type ELEMENT_ONLY
class VendorMember (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}VendorMember with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VendorMember')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2152, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element role uses Python identifier role
    __role = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'role'), 'role', '__httpwww_usharesoft_commarketplace_VendorMember_role', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2156, 20), )

    
    role = property(__role.value, __role.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_VendorMember_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2157, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element user uses Python identifier user
    __user = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'user'), 'user', '__httpwww_usharesoft_commarketplace_VendorMember_user', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2158, 20), )

    
    user = property(__user.value, __user.set, None, None)

    
    # Element vendorUri uses Python identifier vendorUri
    __vendorUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vendorUri'), 'vendorUri', '__httpwww_usharesoft_commarketplace_VendorMember_vendorUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2159, 20), )

    
    vendorUri = property(__vendorUri.value, __vendorUri.set, None, None)

    _ElementMap.update({
        __role.name() : __role,
        __uri.name() : __uri,
        __user.name() : __user,
        __vendorUri.name() : __vendorUri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VendorMember', VendorMember)


# Complex type {http://www.usharesoft.com/marketplace}VendorMembers with content type ELEMENT_ONLY
class VendorMembers (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}VendorMembers with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VendorMembers')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2165, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    
    # Element vendorMembers uses Python identifier vendorMembers
    __vendorMembers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vendorMembers'), 'vendorMembers', '__httpwww_usharesoft_commarketplace_VendorMembers_vendorMembers', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2169, 20), )

    
    vendorMembers = property(__vendorMembers.value, __vendorMembers.set, None, None)

    _ElementMap.update({
        __vendorMembers.name() : __vendorMembers
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VendorMembers', VendorMembers)


# Complex type {http://www.usharesoft.com/marketplace}VendorSummary with content type ELEMENT_ONLY
class VendorSummary (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}VendorSummary with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VendorSummary')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2182, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_VendorSummary_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2186, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpwww_usharesoft_commarketplace_VendorSummary_description', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2187, 20), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element email uses Python identifier email
    __email = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'email'), 'email', '__httpwww_usharesoft_commarketplace_VendorSummary_email', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2188, 20), )

    
    email = property(__email.value, __email.set, None, None)

    
    # Element website uses Python identifier website
    __website = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'website'), 'website', '__httpwww_usharesoft_commarketplace_VendorSummary_website', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2189, 20), )

    
    website = property(__website.value, __website.set, None, None)

    
    # Element phone uses Python identifier phone
    __phone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'phone'), 'phone', '__httpwww_usharesoft_commarketplace_VendorSummary_phone', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2190, 20), )

    
    phone = property(__phone.value, __phone.set, None, None)

    
    # Element address uses Python identifier address
    __address = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'address'), 'address', '__httpwww_usharesoft_commarketplace_VendorSummary_address', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2191, 20), )

    
    address = property(__address.value, __address.set, None, None)

    
    # Element logo uses Python identifier logo
    __logo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'logo'), 'logo', '__httpwww_usharesoft_commarketplace_VendorSummary_logo', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2192, 20), )

    
    logo = property(__logo.value, __logo.set, None, None)

    
    # Element nbProductItems uses Python identifier nbProductItems
    __nbProductItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbProductItems'), 'nbProductItems', '__httpwww_usharesoft_commarketplace_VendorSummary_nbProductItems', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2193, 20), )

    
    nbProductItems = property(__nbProductItems.value, __nbProductItems.set, None, None)

    
    # Element nbProducts uses Python identifier nbProducts
    __nbProducts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nbProducts'), 'nbProducts', '__httpwww_usharesoft_commarketplace_VendorSummary_nbProducts', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2194, 20), )

    
    nbProducts = property(__nbProducts.value, __nbProducts.set, None, None)

    
    # Element twitterName uses Python identifier twitterName
    __twitterName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'twitterName'), 'twitterName', '__httpwww_usharesoft_commarketplace_VendorSummary_twitterName', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2195, 20), )

    
    twitterName = property(__twitterName.value, __twitterName.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_VendorSummary_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2196, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpwww_usharesoft_commarketplace_VendorSummary_type', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2197, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element badges uses Python identifier badges
    __badges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'badges'), 'badges', '__httpwww_usharesoft_commarketplace_VendorSummary_badges', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2205, 20), )

    
    badges = property(__badges.value, __badges.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __description.name() : __description,
        __email.name() : __email,
        __website.name() : __website,
        __phone.name() : __phone,
        __address.name() : __address,
        __logo.name() : __logo,
        __nbProductItems.name() : __nbProductItems,
        __nbProducts.name() : __nbProducts,
        __twitterName.name() : __twitterName,
        __uri.name() : __uri,
        __type.name() : __type,
        __badges.name() : __badges
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VendorSummary', VendorSummary)


# Complex type {http://www.usharesoft.com/marketplace}Vendors with content type ELEMENT_ONLY
class Vendors (UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Vendors with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Vendors')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2217, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    # Base type is UForgeObjects
    
    # Element total (total) inherited from {http://www.usharesoft.com/marketplace}UForgeObjects
    
    # Element vendors uses Python identifier vendors
    __vendors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'vendors'), 'vendors', '__httpwww_usharesoft_commarketplace_Vendors_vendors', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2221, 20), )

    
    vendors = property(__vendors.value, __vendors.set, None, None)

    _ElementMap.update({
        __vendors.name() : __vendors
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Vendors', Vendors)


# Complex type {http://www.usharesoft.com/marketplace}VendorMappingItem with content type ELEMENT_ONLY
class VendorMappingItem (UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}VendorMappingItem with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VendorMappingItem')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2233, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    # Base type is UForgeObject
    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element uforgeId uses Python identifier uforgeId
    __uforgeId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uforgeId'), 'uforgeId', '__httpwww_usharesoft_commarketplace_VendorMappingItem_uforgeId', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2237, 20), )

    
    uforgeId = property(__uforgeId.value, __uforgeId.set, None, None)

    
    # Element billingId uses Python identifier billingId
    __billingId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'billingId'), 'billingId', '__httpwww_usharesoft_commarketplace_VendorMappingItem_billingId', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2238, 20), )

    
    billingId = property(__billingId.value, __billingId.set, None, None)

    
    # Element data uses Python identifier data
    __data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'data'), 'data', '__httpwww_usharesoft_commarketplace_VendorMappingItem_data', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2239, 20), )

    
    data = property(__data.value, __data.set, None, None)

    
    # Element latestDigest uses Python identifier latestDigest
    __latestDigest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'latestDigest'), 'latestDigest', '__httpwww_usharesoft_commarketplace_VendorMappingItem_latestDigest', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2240, 20), )

    
    latestDigest = property(__latestDigest.value, __latestDigest.set, None, None)

    _ElementMap.update({
        __uforgeId.name() : __uforgeId,
        __billingId.name() : __billingId,
        __data.name() : __data,
        __latestDigest.name() : __latestDigest
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VendorMappingItem', VendorMappingItem)


# Complex type {http://www.usharesoft.com/marketplace}Artifact with content type ELEMENT_ONLY
class Artifact (UForgeUploadObject):
    """Complex type {http://www.usharesoft.com/marketplace}Artifact with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Artifact')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 314, 4)
    _ElementMap = UForgeUploadObject._ElementMap.copy()
    _AttributeMap = UForgeUploadObject._AttributeMap.copy()
    # Base type is UForgeUploadObject
    
    # Element binaryUri uses Python identifier binaryUri
    __binaryUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'binaryUri'), 'binaryUri', '__httpwww_usharesoft_commarketplace_Artifact_binaryUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 318, 20), )

    
    binaryUri = property(__binaryUri.value, __binaryUri.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpwww_usharesoft_commarketplace_Artifact_description', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 319, 20), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element downloadUri uses Python identifier downloadUri
    __downloadUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'downloadUri'), 'downloadUri', '__httpwww_usharesoft_commarketplace_Artifact_downloadUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 320, 20), )

    
    downloadUri = property(__downloadUri.value, __downloadUri.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_Artifact_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 321, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element remoteLocation uses Python identifier remoteLocation
    __remoteLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'remoteLocation'), 'remoteLocation', '__httpwww_usharesoft_commarketplace_Artifact_remoteLocation', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 322, 20), )

    
    remoteLocation = property(__remoteLocation.value, __remoteLocation.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_Artifact_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 323, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element md5sum (md5sum) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element mimeType (mimeType) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element sha256sum (sha256sum) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element size (size) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element status (status) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element uploaded (uploaded) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element uploadedTime (uploadedTime) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    _ElementMap.update({
        __binaryUri.name() : __binaryUri,
        __description.name() : __description,
        __downloadUri.name() : __downloadUri,
        __name.name() : __name,
        __remoteLocation.name() : __remoteLocation,
        __uri.name() : __uri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Artifact', Artifact)


# Complex type {http://www.usharesoft.com/marketplace}Logo with content type ELEMENT_ONLY
class Logo (UForgeUploadObject):
    """Complex type {http://www.usharesoft.com/marketplace}Logo with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Logo')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 805, 4)
    _ElementMap = UForgeUploadObject._ElementMap.copy()
    _AttributeMap = UForgeUploadObject._AttributeMap.copy()
    # Base type is UForgeUploadObject
    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpwww_usharesoft_commarketplace_Logo_description', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 809, 20), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_usharesoft_commarketplace_Logo_name', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 810, 20), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element parentUri uses Python identifier parentUri
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'parentUri'), 'parentUri', '__httpwww_usharesoft_commarketplace_Logo_parentUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 811, 20), )

    
    parentUri = property(__parentUri.value, __parentUri.set, None, None)

    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'title'), 'title', '__httpwww_usharesoft_commarketplace_Logo_title', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 812, 20), )

    
    title = property(__title.value, __title.set, None, None)

    
    # Element uri uses Python identifier uri
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uri'), 'uri', '__httpwww_usharesoft_commarketplace_Logo_uri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 813, 20), )

    
    uri = property(__uri.value, __uri.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element md5sum (md5sum) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element mimeType (mimeType) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element sha256sum (sha256sum) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element size (size) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element status (status) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element uploaded (uploaded) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element uploadedTime (uploadedTime) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    _ElementMap.update({
        __description.name() : __description,
        __name.name() : __name,
        __parentUri.name() : __parentUri,
        __title.name() : __title,
        __uri.name() : __uri
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Logo', Logo)


# Complex type {http://www.usharesoft.com/marketplace}ApplianceTemplate with content type ELEMENT_ONLY
class ApplianceTemplate (Artifact):
    """Complex type {http://www.usharesoft.com/marketplace}ApplianceTemplate with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ApplianceTemplate')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 225, 4)
    _ElementMap = Artifact._ElementMap.copy()
    _AttributeMap = Artifact._AttributeMap.copy()
    # Base type is Artifact
    
    # Element version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httpwww_usharesoft_commarketplace_ApplianceTemplate_version', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 229, 20), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element passwordSet uses Python identifier passwordSet
    __passwordSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'passwordSet'), 'passwordSet', '__httpwww_usharesoft_commarketplace_ApplianceTemplate_passwordSet', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 231, 20), )

    
    passwordSet = property(__passwordSet.value, __passwordSet.set, None, None)

    
    # Element bootscriptsAdded uses Python identifier bootscriptsAdded
    __bootscriptsAdded = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'bootscriptsAdded'), 'bootscriptsAdded', '__httpwww_usharesoft_commarketplace_ApplianceTemplate_bootscriptsAdded', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 232, 20), )

    
    bootscriptsAdded = property(__bootscriptsAdded.value, __bootscriptsAdded.set, None, None)

    
    # Element softwareAdded uses Python identifier softwareAdded
    __softwareAdded = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'softwareAdded'), 'softwareAdded', '__httpwww_usharesoft_commarketplace_ApplianceTemplate_softwareAdded', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 233, 20), )

    
    softwareAdded = property(__softwareAdded.value, __softwareAdded.set, None, None)

    
    # Element exportUri uses Python identifier exportUri
    __exportUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'exportUri'), 'exportUri', '__httpwww_usharesoft_commarketplace_ApplianceTemplate_exportUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 235, 20), )

    
    exportUri = property(__exportUri.value, __exportUri.set, None, None)

    
    # Element applianceUri uses Python identifier applianceUri
    __applianceUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'applianceUri'), 'applianceUri', '__httpwww_usharesoft_commarketplace_ApplianceTemplate_applianceUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 236, 20), )

    
    applianceUri = property(__applianceUri.value, __applianceUri.set, None, None)

    
    # Element serverUrl uses Python identifier serverUrl
    __serverUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serverUrl'), 'serverUrl', '__httpwww_usharesoft_commarketplace_ApplianceTemplate_serverUrl', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 237, 20), )

    
    serverUrl = property(__serverUrl.value, __serverUrl.set, None, None)

    
    # Element accountUri uses Python identifier accountUri
    __accountUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'accountUri'), 'accountUri', '__httpwww_usharesoft_commarketplace_ApplianceTemplate_accountUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 238, 20), )

    
    accountUri = property(__accountUri.value, __accountUri.set, None, None)

    
    # Element osSettings uses Python identifier osSettings
    __osSettings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'osSettings'), 'osSettings', '__httpwww_usharesoft_commarketplace_ApplianceTemplate_osSettings', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 240, 20), )

    
    osSettings = property(__osSettings.value, __osSettings.set, None, None)

    
    # Element installSettings uses Python identifier installSettings
    __installSettings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'installSettings'), 'installSettings', '__httpwww_usharesoft_commarketplace_ApplianceTemplate_installSettings', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 241, 20), )

    
    installSettings = property(__installSettings.value, __installSettings.set, None, None)

    
    # Element binaryUri (binaryUri) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element description (description) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element downloadUri (downloadUri) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element name (name) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element remoteLocation (remoteLocation) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element uri (uri) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element md5sum (md5sum) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element mimeType (mimeType) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element sha256sum (sha256sum) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element size (size) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element status (status) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element uploaded (uploaded) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element uploadedTime (uploadedTime) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    _ElementMap.update({
        __version.name() : __version,
        __passwordSet.name() : __passwordSet,
        __bootscriptsAdded.name() : __bootscriptsAdded,
        __softwareAdded.name() : __softwareAdded,
        __exportUri.name() : __exportUri,
        __applianceUri.name() : __applianceUri,
        __serverUrl.name() : __serverUrl,
        __accountUri.name() : __accountUri,
        __osSettings.name() : __osSettings,
        __installSettings.name() : __installSettings
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ApplianceTemplate', ApplianceTemplate)


# Complex type {http://www.usharesoft.com/marketplace}MachineImage with content type ELEMENT_ONLY
class MachineImage (Artifact):
    """Complex type {http://www.usharesoft.com/marketplace}MachineImage with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MachineImage')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 819, 4)
    _ElementMap = Artifact._ElementMap.copy()
    _AttributeMap = Artifact._AttributeMap.copy()
    # Base type is Artifact
    
    # Element binaryUri (binaryUri) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element description (description) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element downloadUri (downloadUri) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element name (name) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element remoteLocation (remoteLocation) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element uri (uri) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element machineImageUri uses Python identifier machineImageUri
    __machineImageUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'machineImageUri'), 'machineImageUri', '__httpwww_usharesoft_commarketplace_MachineImage_machineImageUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 823, 20), )

    
    machineImageUri = property(__machineImageUri.value, __machineImageUri.set, None, None)

    
    # Element format uses Python identifier format
    __format = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'format'), 'format', '__httpwww_usharesoft_commarketplace_MachineImage_format', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 824, 20), )

    
    format = property(__format.value, __format.set, None, None)

    
    # Element osType uses Python identifier osType
    __osType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'osType'), 'osType', '__httpwww_usharesoft_commarketplace_MachineImage_osType', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 832, 20), )

    
    osType = property(__osType.value, __osType.set, None, None)

    
    # Element recommendation uses Python identifier recommendation
    __recommendation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'recommendation'), 'recommendation', '__httpwww_usharesoft_commarketplace_MachineImage_recommendation', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 840, 20), )

    
    recommendation = property(__recommendation.value, __recommendation.set, None, None)

    
    # Element serverUrl uses Python identifier serverUrl
    __serverUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serverUrl'), 'serverUrl', '__httpwww_usharesoft_commarketplace_MachineImage_serverUrl', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 841, 20), )

    
    serverUrl = property(__serverUrl.value, __serverUrl.set, None, None)

    
    # Element accountUri uses Python identifier accountUri
    __accountUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'accountUri'), 'accountUri', '__httpwww_usharesoft_commarketplace_MachineImage_accountUri', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 842, 20), )

    
    accountUri = property(__accountUri.value, __accountUri.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpwww_usharesoft_commarketplace_MachineImage_type', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 843, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element revision uses Python identifier revision
    __revision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'revision'), 'revision', '__httpwww_usharesoft_commarketplace_MachineImage_revision', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 853, 20), )

    
    revision = property(__revision.value, __revision.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element md5sum (md5sum) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element mimeType (mimeType) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element sha256sum (sha256sum) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element size (size) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element status (status) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element uploaded (uploaded) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element uploadedTime (uploadedTime) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    _ElementMap.update({
        __machineImageUri.name() : __machineImageUri,
        __format.name() : __format,
        __osType.name() : __osType,
        __recommendation.name() : __recommendation,
        __serverUrl.name() : __serverUrl,
        __accountUri.name() : __accountUri,
        __type.name() : __type,
        __revision.name() : __revision
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MachineImage', MachineImage)


# Complex type {http://www.usharesoft.com/marketplace}SaaS with content type ELEMENT_ONLY
class SaaS (Artifact):
    """Complex type {http://www.usharesoft.com/marketplace}SaaS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SaaS')
    _XSDLocation = pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1670, 4)
    _ElementMap = Artifact._ElementMap.copy()
    _AttributeMap = Artifact._AttributeMap.copy()
    # Base type is Artifact
    
    # Element binaryUri (binaryUri) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element description (description) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element downloadUri (downloadUri) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element name (name) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element remoteLocation (remoteLocation) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element uri (uri) inherited from {http://www.usharesoft.com/marketplace}Artifact
    
    # Element serviceUrl uses Python identifier serviceUrl
    __serviceUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'serviceUrl'), 'serviceUrl', '__httpwww_usharesoft_commarketplace_SaaS_serviceUrl', False, pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1674, 20), )

    
    serviceUrl = property(__serviceUrl.value, __serviceUrl.set, None, None)

    
    # Element created (created) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element dbId (dbId) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element digest (digest) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element lastModified (lastModified) inherited from {http://www.usharesoft.com/marketplace}UForgeObject
    
    # Element md5sum (md5sum) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element mimeType (mimeType) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element sha256sum (sha256sum) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element size (size) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element status (status) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element uploaded (uploaded) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    
    # Element uploadedTime (uploadedTime) inherited from {http://www.usharesoft.com/marketplace}UForgeUploadObject
    _ElementMap.update({
        __serviceUrl.name() : __serviceUrl
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SaaS', SaaS)


entitlement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'entitlement'), Entitlement, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 57, 4))
Namespace.addCategoryObject('elementBinding', entitlement.name().localName(), entitlement)

uforgeError = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'uforgeError'), UForgeError, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 161, 4))
Namespace.addCategoryObject('elementBinding', uforgeError.name().localName(), uforgeError)

address = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'address'), Address, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 7, 4))
Namespace.addCategoryObject('elementBinding', address.name().localName(), address)

apiKeyPair = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'apiKeyPair'), APIKeyPair, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 9, 4))
Namespace.addCategoryObject('elementBinding', apiKeyPair.name().localName(), apiKeyPair)

apiKeyPairs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'apiKeyPairs'), APIKeyPairs, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 11, 4))
Namespace.addCategoryObject('elementBinding', apiKeyPairs.name().localName(), apiKeyPairs)

applianceTemplates = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applianceTemplates'), ApplianceTemplates, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 15, 4))
Namespace.addCategoryObject('elementBinding', applianceTemplates.name().localName(), applianceTemplates)

approval = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'approval'), Approval, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 17, 4))
Namespace.addCategoryObject('elementBinding', approval.name().localName(), approval)

approvals = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'approvals'), Approvals, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 19, 4))
Namespace.addCategoryObject('elementBinding', approvals.name().localName(), approvals)

artifacts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'artifacts'), Artifacts, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 23, 4))
Namespace.addCategoryObject('elementBinding', artifacts.name().localName(), artifacts)

badge = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'badge'), Badge, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 25, 4))
Namespace.addCategoryObject('elementBinding', badge.name().localName(), badge)

badges = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'badges'), Badges, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 27, 4))
Namespace.addCategoryObject('elementBinding', badges.name().localName(), badges)

categories = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'categories'), Categories, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 29, 4))
Namespace.addCategoryObject('elementBinding', categories.name().localName(), categories)

category = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'category'), Category, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 31, 4))
Namespace.addCategoryObject('elementBinding', category.name().localName(), category)

comment = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'comment'), Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 33, 4))
Namespace.addCategoryObject('elementBinding', comment.name().localName(), comment)

comments = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'comments'), Comments, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 35, 4))
Namespace.addCategoryObject('elementBinding', comments.name().localName(), comments)

companies = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'companies'), Companies, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 37, 4))
Namespace.addCategoryObject('elementBinding', companies.name().localName(), companies)

company = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'company'), Company, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 39, 4))
Namespace.addCategoryObject('elementBinding', company.name().localName(), company)

compatibleProduct = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'compatibleProduct'), CompatibleProduct, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 41, 4))
Namespace.addCategoryObject('elementBinding', compatibleProduct.name().localName(), compatibleProduct)

compatibleProducts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'compatibleProducts'), CompatibleProducts, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 43, 4))
Namespace.addCategoryObject('elementBinding', compatibleProducts.name().localName(), compatibleProducts)

cost = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cost'), Cost, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 45, 4))
Namespace.addCategoryObject('elementBinding', cost.name().localName(), cost)

costs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'costs'), Costs, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 47, 4))
Namespace.addCategoryObject('elementBinding', costs.name().localName(), costs)

downloadTicket = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'downloadTicket'), DownloadTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 49, 4))
Namespace.addCategoryObject('elementBinding', downloadTicket.name().localName(), downloadTicket)

downloadTickets = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'downloadTickets'), DownloadTickets, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 51, 4))
Namespace.addCategoryObject('elementBinding', downloadTickets.name().localName(), downloadTickets)

edition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'edition'), Edition, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 53, 4))
Namespace.addCategoryObject('elementBinding', edition.name().localName(), edition)

editions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'editions'), Editions, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 55, 4))
Namespace.addCategoryObject('elementBinding', editions.name().localName(), editions)

entitlements = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'entitlements'), Entitlements, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 59, 4))
Namespace.addCategoryObject('elementBinding', entitlements.name().localName(), entitlements)

export = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'export'), Export, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 61, 4))
Namespace.addCategoryObject('elementBinding', export.name().localName(), export)

Exports = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Exports'), Exports_, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 63, 4))
Namespace.addCategoryObject('elementBinding', Exports.name().localName(), Exports)

include = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'include'), Include, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 65, 4))
Namespace.addCategoryObject('elementBinding', include.name().localName(), include)

includes = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'includes'), Includes, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 67, 4))
Namespace.addCategoryObject('elementBinding', includes.name().localName(), includes)

installSettings = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'installSettings'), InstallSettings, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 69, 4))
Namespace.addCategoryObject('elementBinding', installSettings.name().localName(), installSettings)

machineImages = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'machineImages'), MachineImages, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 75, 4))
Namespace.addCategoryObject('elementBinding', machineImages.name().localName(), machineImages)

marketingPlan = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'marketingPlan'), MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 77, 4))
Namespace.addCategoryObject('elementBinding', marketingPlan.name().localName(), marketingPlan)

marketingPlans = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'marketingPlans'), MarketingPlans, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 79, 4))
Namespace.addCategoryObject('elementBinding', marketingPlans.name().localName(), marketingPlans)

marketplace = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'marketplace'), Marketplace, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 81, 4))
Namespace.addCategoryObject('elementBinding', marketplace.name().localName(), marketplace)

marketplaces = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'marketplaces'), Marketplaces, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 83, 4))
Namespace.addCategoryObject('elementBinding', marketplaces.name().localName(), marketplaces)

order = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'order'), Order, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 85, 4))
Namespace.addCategoryObject('elementBinding', order.name().localName(), order)

orders = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orders'), Orders, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 87, 4))
Namespace.addCategoryObject('elementBinding', orders.name().localName(), orders)

org = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'org'), Org, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 89, 4))
Namespace.addCategoryObject('elementBinding', org.name().localName(), org)

orgs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orgs'), Orgs, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 91, 4))
Namespace.addCategoryObject('elementBinding', orgs.name().localName(), orgs)

osSettings = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'osSettings'), OSSettings, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 93, 4))
Namespace.addCategoryObject('elementBinding', osSettings.name().localName(), osSettings)

period = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'period'), Period, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 95, 4))
Namespace.addCategoryObject('elementBinding', period.name().localName(), period)

pricingPlan = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pricingPlan'), PricingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 97, 4))
Namespace.addCategoryObject('elementBinding', pricingPlan.name().localName(), pricingPlan)

pricingPlans = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pricingPlans'), PricingPlans, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 99, 4))
Namespace.addCategoryObject('elementBinding', pricingPlans.name().localName(), pricingPlans)

product = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'product'), Product, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 101, 4))
Namespace.addCategoryObject('elementBinding', product.name().localName(), product)

productItem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'productItem'), ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 103, 4))
Namespace.addCategoryObject('elementBinding', productItem.name().localName(), productItem)

productItemDetails = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'productItemDetails'), ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 105, 4))
Namespace.addCategoryObject('elementBinding', productItemDetails.name().localName(), productItemDetails)

productItemDetailsList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'productItemDetailsList'), ProductItemDetailsList, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 107, 4))
Namespace.addCategoryObject('elementBinding', productItemDetailsList.name().localName(), productItemDetailsList)

productItems = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'productItems'), ProductItems, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 109, 4))
Namespace.addCategoryObject('elementBinding', productItems.name().localName(), productItems)

productItemSummary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'productItemSummary'), ProductItemSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 111, 4))
Namespace.addCategoryObject('elementBinding', productItemSummary.name().localName(), productItemSummary)

productItemSummaryList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'productItemSummaryList'), ProductItemSummaryList, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 113, 4))
Namespace.addCategoryObject('elementBinding', productItemSummaryList.name().localName(), productItemSummaryList)

productResource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'productResource'), ProductResource, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 115, 4))
Namespace.addCategoryObject('elementBinding', productResource.name().localName(), productResource)

products = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'products'), Products, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 117, 4))
Namespace.addCategoryObject('elementBinding', products.name().localName(), products)

productSummary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'productSummary'), ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 119, 4))
Namespace.addCategoryObject('elementBinding', productSummary.name().localName(), productSummary)

productSummaryList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'productSummaryList'), ProductSummaryList, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 121, 4))
Namespace.addCategoryObject('elementBinding', productSummaryList.name().localName(), productSummaryList)

productType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'productType'), ProductType, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 123, 4))
Namespace.addCategoryObject('elementBinding', productType.name().localName(), productType)

productTypes = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'productTypes'), ProductTypes, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 125, 4))
Namespace.addCategoryObject('elementBinding', productTypes.name().localName(), productTypes)

purchase = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'purchase'), Purchase, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 127, 4))
Namespace.addCategoryObject('elementBinding', purchase.name().localName(), purchase)

purchases = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'purchases'), Purchases, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 129, 4))
Namespace.addCategoryObject('elementBinding', purchases.name().localName(), purchases)

quota = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'quota'), Quota, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 131, 4))
Namespace.addCategoryObject('elementBinding', quota.name().localName(), quota)

quotas = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'quotas'), Quotas, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 133, 4))
Namespace.addCategoryObject('elementBinding', quotas.name().localName(), quotas)

role = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'role'), Role, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 135, 4))
Namespace.addCategoryObject('elementBinding', role.name().localName(), role)

roles = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'roles'), Roles, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 137, 4))
Namespace.addCategoryObject('elementBinding', roles.name().localName(), roles)

serviceStatus = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceStatus'), ServiceStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 139, 4))
Namespace.addCategoryObject('elementBinding', serviceStatus.name().localName(), serviceStatus)

statTicket = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'statTicket'), StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 141, 4))
Namespace.addCategoryObject('elementBinding', statTicket.name().localName(), statTicket)

statTickets = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'statTickets'), StatTickets, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 143, 4))
Namespace.addCategoryObject('elementBinding', statTickets.name().localName(), statTickets)

status = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'status'), OpStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 145, 4))
Namespace.addCategoryObject('elementBinding', status.name().localName(), status)

statuses = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'statuses'), OpStatuses, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 147, 4))
Namespace.addCategoryObject('elementBinding', statuses.name().localName(), statuses)

subscriptionProfile = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subscriptionProfile'), SubscriptionProfile, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 149, 4))
Namespace.addCategoryObject('elementBinding', subscriptionProfile.name().localName(), subscriptionProfile)

subscriptionProfiles = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subscriptionProfiles'), SubscriptionProfiles, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 151, 4))
Namespace.addCategoryObject('elementBinding', subscriptionProfiles.name().localName(), subscriptionProfiles)

supportPlan = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'supportPlan'), SupportPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 153, 4))
Namespace.addCategoryObject('elementBinding', supportPlan.name().localName(), supportPlan)

supportPlans = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'supportPlans'), SupportPlans, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 155, 4))
Namespace.addCategoryObject('elementBinding', supportPlans.name().localName(), supportPlans)

uforgeCredAccount = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'uforgeCredAccount'), UforgeCredAccount, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 157, 4))
Namespace.addCategoryObject('elementBinding', uforgeCredAccount.name().localName(), uforgeCredAccount)

uforgeCredAccounts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'uforgeCredAccounts'), UforgeCredAccounts, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 159, 4))
Namespace.addCategoryObject('elementBinding', uforgeCredAccounts.name().localName(), uforgeCredAccounts)

unit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'unit'), Unit, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 163, 4))
Namespace.addCategoryObject('elementBinding', unit.name().localName(), unit)

units = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'units'), Units, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 165, 4))
Namespace.addCategoryObject('elementBinding', units.name().localName(), units)

user = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'user'), User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 167, 4))
Namespace.addCategoryObject('elementBinding', user.name().localName(), user)

users = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'users'), Users, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 169, 4))
Namespace.addCategoryObject('elementBinding', users.name().localName(), users)

vendor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendor'), Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 171, 4))
Namespace.addCategoryObject('elementBinding', vendor.name().localName(), vendor)

vendorMember = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorMember'), VendorMember, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 173, 4))
Namespace.addCategoryObject('elementBinding', vendorMember.name().localName(), vendorMember)

vendorMembers = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorMembers'), VendorMembers, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 175, 4))
Namespace.addCategoryObject('elementBinding', vendorMembers.name().localName(), vendorMembers)

vendorSummary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorSummary'), VendorSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 177, 4))
Namespace.addCategoryObject('elementBinding', vendorSummary.name().localName(), vendorSummary)

vendors = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendors'), Vendors, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 179, 4))
Namespace.addCategoryObject('elementBinding', vendors.name().localName(), vendors)

vendorMappingItem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorMappingItem'), VendorMappingItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 181, 4))
Namespace.addCategoryObject('elementBinding', vendorMappingItem.name().localName(), vendorMappingItem)

artifact = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'artifact'), Artifact, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 21, 4))
Namespace.addCategoryObject('elementBinding', artifact.name().localName(), artifact)

logo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'logo'), Logo, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 71, 4))
Namespace.addCategoryObject('elementBinding', logo.name().localName(), logo)

applianceTemplate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applianceTemplate'), ApplianceTemplate, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 13, 4))
Namespace.addCategoryObject('elementBinding', applianceTemplate.name().localName(), applianceTemplate)

machineImage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'machineImage'), MachineImage, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 73, 4))
Namespace.addCategoryObject('elementBinding', machineImage.name().localName(), machineImage)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'apiKeyPair'), APIKeyPair, scope=CTD_ANON, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 216, 32)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 216, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'apiKeyPair')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 216, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'applianceTemplate'), ApplianceTemplate, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 254, 32)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 254, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'applianceTemplate')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 254, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'note'), Comment, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 273, 32)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 273, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 273, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_2()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'approval'), Approval, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 305, 32)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 305, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, 'approval')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 305, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_3()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'artifact'), Artifact, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 336, 32)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 336, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, 'artifact')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 336, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_4()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'badge'), Badge, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 366, 32)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 366, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, 'badge')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 366, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_5()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'category'), Category, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 382, 32)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 382, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, 'category')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 382, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_6()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'category'), Category, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 400, 32)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 400, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, 'category')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 400, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_7()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'comment'), Comment, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 432, 32)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 432, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 432, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_8()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'comment'), Comment, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 463, 32)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 463, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 463, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_9()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'company'), Company, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 479, 32)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 479, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, 'company')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 479, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_10()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'compatibleProduct'), CompatibleProduct, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 523, 32)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 523, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, 'compatibleProduct')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 523, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_11()




CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), Cost, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 567, 32)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 567, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 567, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_12()




CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'downloadTicket'), DownloadTicket, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 610, 32)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 610, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, 'downloadTicket')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 610, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_13()




CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cost'), Cost, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 627, 32)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 627, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, 'cost')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 627, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_14._Automaton = _BuildAutomaton_14()




CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'include'), Include, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 635, 32)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 635, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, 'include')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 635, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_15()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'unit'), Unit, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 656, 32)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 656, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, 'unit')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 656, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_16()




CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'edition'), Edition, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 675, 32)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 675, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, 'edition')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 675, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_17._Automaton = _BuildAutomaton_17()




Entitlement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=Entitlement, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 686, 12)))

Entitlement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=Entitlement, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 687, 12)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 686, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 687, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Entitlement._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 686, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Entitlement._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 687, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Entitlement._Automaton = _BuildAutomaton_18()




CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entitlement'), Entitlement, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 698, 32)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 698, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, 'entitlement')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 698, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_18._Automaton = _BuildAutomaton_19()




CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'export'), Export, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 727, 32)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 727, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, 'export')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 727, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_20()




CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'include'), Include, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 763, 32)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 763, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, 'include')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 763, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_21()




LocalizedMessage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'message'), pyxb.binding.datatypes.string, scope=LocalizedMessage, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 793, 12)))

LocalizedMessage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'messageId'), pyxb.binding.datatypes.string, scope=LocalizedMessage, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 794, 12)))

LocalizedMessage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parameters'), CTD_ANON_21, scope=LocalizedMessage, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 795, 12)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 793, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 794, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 795, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LocalizedMessage._UseForTag(pyxb.namespace.ExpandedName(None, 'message')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 793, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LocalizedMessage._UseForTag(pyxb.namespace.ExpandedName(None, 'messageId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 794, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LocalizedMessage._UseForTag(pyxb.namespace.ExpandedName(None, 'parameters')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 795, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LocalizedMessage._Automaton = _BuildAutomaton_22()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parameter'), pyxb.binding.datatypes.string, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 798, 24)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 798, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, 'parameter')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 798, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_23()




CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'machineImage'), MachineImage, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 866, 32)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 866, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, 'machineImage')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 866, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_22._Automaton = _BuildAutomaton_24()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'category'), Category, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 883, 32)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 883, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, 'category')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 883, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_25()




CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'resource'), ProductResource, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 899, 32)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 899, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, 'resource')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 899, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_26()




CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'screenshot'), Logo, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 906, 32)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 906, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, 'screenshot')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 906, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_27()




CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'marketingPlan'), MarketingPlan, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 927, 32)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 927, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, 'marketingPlan')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 927, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_26._Automaton = _BuildAutomaton_28()




CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'marketplace'), Marketplace, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 963, 32)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 963, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, 'marketplace')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 963, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_29()




CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'status'), OpStatus, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1003, 32)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1003, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1003, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_28._Automaton = _BuildAutomaton_30()




CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order'), Order, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1030, 32)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1030, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, 'order')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1030, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_31()




CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subscriptionProfile'), SubscriptionProfile, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1055, 32)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1055, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, 'subscriptionProfile')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1055, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_32()




CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'org'), Org, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1075, 32)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1075, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, 'org')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1075, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_31._Automaton = _BuildAutomaton_33()




CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'edition'), Edition, scope=CTD_ANON_32, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1118, 32)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1118, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, 'edition')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1118, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_32._Automaton = _BuildAutomaton_34()




CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'resource'), ProductResource, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1131, 32)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1131, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, 'resource')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1131, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_33._Automaton = _BuildAutomaton_35()




CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pricingPlan'), PricingPlan, scope=CTD_ANON_34, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1149, 32)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1149, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, 'pricingPlan')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1149, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_34._Automaton = _BuildAutomaton_36()




CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'comment'), Comment, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1167, 32)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1167, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1167, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_35._Automaton = _BuildAutomaton_37()




CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'item'), ProductItem, scope=CTD_ANON_36, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1175, 32)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1175, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, 'item')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1175, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_36._Automaton = _BuildAutomaton_38()




CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'artifact'), Artifact, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1203, 32)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1203, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, 'artifact')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1203, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_39()




CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'badge'), Badge, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1211, 32)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1211, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, 'badge')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1211, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_38._Automaton = _BuildAutomaton_40()




CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'compatibleProduct'), CompatibleProduct, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1220, 32)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1220, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, 'compatibleProduct')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1220, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_41()




CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'badge'), Badge, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1269, 32)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1269, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, 'badge')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1269, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_40._Automaton = _BuildAutomaton_42()




CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'compatibleProduct'), CompatibleProduct, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1278, 32)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1278, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, 'compatibleProduct')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1278, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_41._Automaton = _BuildAutomaton_43()




CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'edition'), Edition, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1288, 32)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1288, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, 'edition')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1288, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_42._Automaton = _BuildAutomaton_44()




CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'marketingResource'), ProductResource, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1300, 32)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1300, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, 'marketingResource')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1300, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_43._Automaton = _BuildAutomaton_45()




CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'otherRelease'), ProductItemSummary, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1311, 32)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1311, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, 'otherRelease')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1311, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_44._Automaton = _BuildAutomaton_46()




CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pricingResource'), ProductResource, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1321, 32)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1321, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, 'pricingResource')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1321, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_45._Automaton = _BuildAutomaton_47()




CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'screenshot'), Logo, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1335, 32)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1335, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, 'screenshot')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1335, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_46._Automaton = _BuildAutomaton_48()




CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supportResource'), ProductResource, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1347, 32)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1347, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, 'supportResource')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1347, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_47._Automaton = _BuildAutomaton_49()




CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productItemDetails'), ProductItemDetails, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1372, 32)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1372, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, 'productItemDetails')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1372, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_48._Automaton = _BuildAutomaton_50()




CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productItem'), ProductItem, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1389, 32)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1389, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, 'productItem')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1389, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_49._Automaton = _BuildAutomaton_51()




CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productItemSummary'), ProductItemSummary, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1420, 32)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1420, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, 'productItemSummary')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1420, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_50._Automaton = _BuildAutomaton_52()




CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'product'), Product, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1458, 32)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1458, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, 'product')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1458, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_51._Automaton = _BuildAutomaton_53()




CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'badge'), Badge, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1474, 32)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1474, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, 'badge')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1474, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_52._Automaton = _BuildAutomaton_54()




CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productSummary'), ProductSummary, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1510, 32)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1510, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, 'productSummary')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1510, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_53._Automaton = _BuildAutomaton_55()




CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productType'), ProductType, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1549, 32)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1549, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, 'productType')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1549, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_54._Automaton = _BuildAutomaton_56()




CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'purchase'), Purchase, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1579, 32)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1579, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, 'purchase')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1579, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_55._Automaton = _BuildAutomaton_57()




CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quota'), Quota, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1627, 32)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1627, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, 'quota')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1627, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_56._Automaton = _BuildAutomaton_58()




CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entitlement'), Entitlement, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1644, 32)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1644, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, 'entitlement')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1644, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_57._Automaton = _BuildAutomaton_59()




CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'role'), Role, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1661, 32)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1661, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, 'role')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1661, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_58._Automaton = _BuildAutomaton_60()




CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'statTicket'), StatTicket, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1746, 32)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1746, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, 'statTicket')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1746, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_59._Automaton = _BuildAutomaton_61()




CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'admin'), User, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1763, 32)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1763, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, 'admin')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1763, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_60._Automaton = _BuildAutomaton_62()




CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quota'), Quota, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1775, 32)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1775, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, 'quota')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1775, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_61._Automaton = _BuildAutomaton_63()




CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'role'), Role, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1783, 32)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1783, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, 'role')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1783, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_62._Automaton = _BuildAutomaton_64()




CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subscriptionProfile'), SubscriptionProfile, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1801, 32)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1801, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, 'subscriptionProfile')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1801, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_63._Automaton = _BuildAutomaton_65()




CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'resource'), ProductResource, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1824, 32)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1824, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, 'resource')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1824, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_64._Automaton = _BuildAutomaton_66()




CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supportPlan'), SupportPlan, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1844, 32)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1844, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, 'supportPlan')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1844, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_65._Automaton = _BuildAutomaton_67()




CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uforgeCredAccount'), UforgeCredAccount, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1877, 32)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1877, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, 'uforgeCredAccount')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1877, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_66._Automaton = _BuildAutomaton_68()




UForgeError._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'localizedErrorMsg'), LocalizedMessage, scope=UForgeError, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1889, 12)))

UForgeError._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'requestMethod'), pyxb.binding.datatypes.string, scope=UForgeError, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1890, 12)))

UForgeError._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'requestUri'), pyxb.binding.datatypes.string, scope=UForgeError, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1891, 12)))

UForgeError._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'statusCode'), pyxb.binding.datatypes.int, scope=UForgeError, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1892, 12)))

UForgeError._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'timestamp'), pyxb.binding.datatypes.dateTime, scope=UForgeError, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1893, 12)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1889, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1890, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1891, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1892, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1893, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UForgeError._UseForTag(pyxb.namespace.ExpandedName(None, 'localizedErrorMsg')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1889, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UForgeError._UseForTag(pyxb.namespace.ExpandedName(None, 'requestMethod')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1890, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UForgeError._UseForTag(pyxb.namespace.ExpandedName(None, 'requestUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1891, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(UForgeError._UseForTag(pyxb.namespace.ExpandedName(None, 'statusCode')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1892, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(UForgeError._UseForTag(pyxb.namespace.ExpandedName(None, 'timestamp')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1893, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UForgeError._Automaton = _BuildAutomaton_69()




UForgeObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'created'), pyxb.binding.datatypes.dateTime, scope=UForgeObject, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12)))

UForgeObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dbId'), pyxb.binding.datatypes.long, scope=UForgeObject, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12)))

UForgeObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'digest'), pyxb.binding.datatypes.string, scope=UForgeObject, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12)))

UForgeObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'lastModified'), pyxb.binding.datatypes.dateTime, scope=UForgeObject, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UForgeObject._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UForgeObject._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UForgeObject._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(UForgeObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UForgeObject._Automaton = _BuildAutomaton_70()




UForgeObjects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'total'), pyxb.binding.datatypes.long, scope=UForgeObjects, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UForgeObjects._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UForgeObjects._Automaton = _BuildAutomaton_71()




CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'unit'), Unit, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1971, 32)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1971, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(None, 'unit')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1971, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_67._Automaton = _BuildAutomaton_72()




UriList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=UriList, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1982, 12)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1982, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UriList._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1982, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UriList._Automaton = _BuildAutomaton_73()




CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'role'), Role, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2023, 32)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2023, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(None, 'role')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2023, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_68._Automaton = _BuildAutomaton_74()




CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uforgeCredAccount'), UforgeCredAccount, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2031, 32)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2031, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(None, 'uforgeCredAccount')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2031, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_69._Automaton = _BuildAutomaton_75()




CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'exports'), Export, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2038, 32)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2038, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(None, 'exports')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2038, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_70._Automaton = _BuildAutomaton_76()




CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'user'), User, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2059, 32)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2059, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(None, 'user')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2059, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_71._Automaton = _BuildAutomaton_77()




CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'badge'), Badge, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2076, 32)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2076, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(None, 'badge')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2076, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_72._Automaton = _BuildAutomaton_78()




CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'marketingPlan'), MarketingPlan, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2088, 32)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2088, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(None, 'marketingPlan')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2088, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_73._Automaton = _BuildAutomaton_79()




CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'member'), VendorMember, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2097, 32)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2097, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, 'member')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2097, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_74._Automaton = _BuildAutomaton_80()




CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pricingPlan'), PricingPlan, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2112, 32)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2112, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(None, 'pricingPlan')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2112, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_75._Automaton = _BuildAutomaton_81()




CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'product'), Product, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2120, 32)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2120, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(None, 'product')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2120, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_76._Automaton = _BuildAutomaton_82()




CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supportPlan'), SupportPlan, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2129, 32)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2129, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(None, 'supportPlan')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2129, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_77._Automaton = _BuildAutomaton_83()




CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vendorMember'), VendorMember, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2172, 32)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2172, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(None, 'vendorMember')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2172, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_78._Automaton = _BuildAutomaton_84()




CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'badge'), Badge, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2208, 32)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2208, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(None, 'badge')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2208, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_79._Automaton = _BuildAutomaton_85()




CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vendor'), Vendor, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2224, 32)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2224, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(None, 'vendor')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2224, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_80._Automaton = _BuildAutomaton_86()




Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'country'), pyxb.binding.datatypes.string, scope=Address, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 187, 20)))

Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'region_state'), pyxb.binding.datatypes.string, scope=Address, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 188, 20)))

Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'street'), pyxb.binding.datatypes.string, scope=Address, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 189, 20)))

Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'town'), pyxb.binding.datatypes.string, scope=Address, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 190, 20)))

Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'zipcode'), pyxb.binding.datatypes.string, scope=Address, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 191, 20)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 187, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 188, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 189, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 190, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 191, 20))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'country')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 187, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'region_state')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 188, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'street')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 189, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'town')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 190, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'zipcode')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 191, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Address._Automaton = _BuildAutomaton_87()




APIKeyPair._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'publicKey'), pyxb.binding.datatypes.string, scope=APIKeyPair, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 201, 20)))

APIKeyPair._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'secretKey'), pyxb.binding.datatypes.string, scope=APIKeyPair, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 202, 20)))

APIKeyPair._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=APIKeyPair, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 203, 20)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 201, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 202, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 203, 20))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPair._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPair._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPair._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPair._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPair._UseForTag(pyxb.namespace.ExpandedName(None, 'publicKey')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 201, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPair._UseForTag(pyxb.namespace.ExpandedName(None, 'secretKey')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 202, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPair._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 203, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
APIKeyPair._Automaton = _BuildAutomaton_88()




APIKeyPairs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'apiKeyPairs'), CTD_ANON, scope=APIKeyPairs, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 213, 20)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 213, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPairs._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPairs._UseForTag(pyxb.namespace.ExpandedName(None, 'apiKeyPairs')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 213, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
APIKeyPairs._Automaton = _BuildAutomaton_89()




ApplianceTemplates._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'applianceTemplates'), CTD_ANON_, scope=ApplianceTemplates, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 251, 20)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 251, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplates._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplates._UseForTag(pyxb.namespace.ExpandedName(None, 'applianceTemplates')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 251, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ApplianceTemplates._Automaton = _BuildAutomaton_90()




Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'assignee'), pyxb.binding.datatypes.string, scope=Approval, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 267, 20)))

Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'endDate'), pyxb.binding.datatypes.dateTime, scope=Approval, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 268, 20)))

Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'estimatedTime'), pyxb.binding.datatypes.int, scope=Approval, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 269, 20)))

Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'notes'), CTD_ANON_2, scope=Approval, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 270, 20)))

Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'notesUri'), pyxb.binding.datatypes.anyURI, scope=Approval, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 277, 20)))

Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'percentageDone'), pyxb.binding.datatypes.int, scope=Approval, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 278, 20)))

Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productItem'), ProductItem, scope=Approval, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 279, 20)))

Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'startDate'), pyxb.binding.datatypes.dateTime, scope=Approval, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 280, 20)))

Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'status'), STD_ANON, scope=Approval, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 281, 20)))

Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=Approval, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 292, 20)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 267, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 268, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 269, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 270, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 277, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 278, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 279, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 280, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 281, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 292, 20))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, 'assignee')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 267, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, 'endDate')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 268, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, 'estimatedTime')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 269, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, 'notes')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 270, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, 'notesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 277, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, 'percentageDone')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 278, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, 'productItem')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 279, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, 'startDate')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 280, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 281, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 292, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Approval._Automaton = _BuildAutomaton_91()




Approvals._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'approvals'), CTD_ANON_3, scope=Approvals, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 302, 20)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 302, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Approvals._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Approvals._UseForTag(pyxb.namespace.ExpandedName(None, 'approvals')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 302, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Approvals._Automaton = _BuildAutomaton_92()




Artifacts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'artifacts'), CTD_ANON_4, scope=Artifacts, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 333, 20)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 333, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Artifacts._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Artifacts._UseForTag(pyxb.namespace.ExpandedName(None, 'artifacts')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 333, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Artifacts._Automaton = _BuildAutomaton_93()




Badge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'disabled'), pyxb.binding.datatypes.boolean, scope=Badge, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 349, 20)))

Badge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'icon'), Logo, scope=Badge, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 350, 20)))

Badge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'label'), pyxb.binding.datatypes.string, scope=Badge, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 351, 20)))

Badge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'title'), pyxb.binding.datatypes.string, scope=Badge, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 352, 20)))

Badge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=Badge, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 353, 20)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 349, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 350, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 351, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 352, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 353, 20))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, 'disabled')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 349, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, 'icon')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 350, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, 'label')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 351, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, 'title')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 352, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 353, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Badge._Automaton = _BuildAutomaton_94()




Badges._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'badges'), CTD_ANON_5, scope=Badges, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 363, 20)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 363, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Badges._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Badges._UseForTag(pyxb.namespace.ExpandedName(None, 'badges')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 363, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Badges._Automaton = _BuildAutomaton_95()




Categories._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'categories'), CTD_ANON_6, scope=Categories, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 379, 20)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 379, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Categories._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Categories._UseForTag(pyxb.namespace.ExpandedName(None, 'categories')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 379, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Categories._Automaton = _BuildAutomaton_96()




Category._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=Category, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 395, 20)))

Category._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'orgUri'), pyxb.binding.datatypes.anyURI, scope=Category, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 396, 20)))

Category._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subCategories'), CTD_ANON_7, scope=Category, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 397, 20)))

Category._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subCategoryUri'), pyxb.binding.datatypes.anyURI, scope=Category, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 404, 20)))

Category._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=Category, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 405, 20)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 395, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 396, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 397, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 404, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 405, 20))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 395, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, 'orgUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 396, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, 'subCategories')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 397, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, 'subCategoryUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 404, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 405, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Category._Automaton = _BuildAutomaton_97()




Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'abused'), pyxb.binding.datatypes.boolean, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 415, 20)))

Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'abuseUri'), pyxb.binding.datatypes.anyURI, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 416, 20)))

Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'likesUri'), pyxb.binding.datatypes.anyURI, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 417, 20)))

Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'loginName'), pyxb.binding.datatypes.string, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 418, 20)))

Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'message'), pyxb.binding.datatypes.string, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 419, 20)))

Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbAbused'), pyxb.binding.datatypes.int, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 420, 20)))

Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbDislike'), pyxb.binding.datatypes.int, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 421, 20)))

Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbLike'), pyxb.binding.datatypes.int, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 422, 20)))

Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'photo'), Logo, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 423, 20)))

Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'rating'), STD_ANON_, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 424, 20)))

Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'replies'), CTD_ANON_8, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 429, 20)))

Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'replyUri'), pyxb.binding.datatypes.anyURI, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 436, 20)))

Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'tags'), pyxb.binding.datatypes.string, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 437, 20)))

Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'timestamp'), pyxb.binding.datatypes.string, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 438, 20)))

Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), STD_ANON_2, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 439, 20)))

Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'reference'), ProductItemSummary, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 449, 20)))

Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=Comment, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 450, 20)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 415, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 416, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 417, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 418, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 419, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 420, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 421, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 422, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 423, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 424, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 429, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 436, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 437, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 438, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 439, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 449, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 450, 20))
    counters.add(cc_20)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'abused')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 415, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'abuseUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 416, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'likesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 417, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'loginName')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 418, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'message')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 419, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'nbAbused')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 420, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'nbDislike')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 421, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'nbLike')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 422, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'photo')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 423, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'rating')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 424, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'replies')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 429, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'replyUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 436, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'tags')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 437, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'timestamp')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 438, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 439, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'reference')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 449, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 450, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Comment._Automaton = _BuildAutomaton_98()




Comments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'comments'), CTD_ANON_9, scope=Comments, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 460, 20)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 460, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Comments._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Comments._UseForTag(pyxb.namespace.ExpandedName(None, 'comments')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 460, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Comments._Automaton = _BuildAutomaton_99()




Companies._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'companies'), CTD_ANON_10, scope=Companies, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 476, 20)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 476, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Companies._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Companies._UseForTag(pyxb.namespace.ExpandedName(None, 'companies')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 476, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Companies._Automaton = _BuildAutomaton_100()




Company._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'address'), Address, scope=Company, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 492, 20)))

Company._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'logo'), Logo, scope=Company, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 493, 20)))

Company._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=Company, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 494, 20)))

Company._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parentUri'), pyxb.binding.datatypes.anyURI, scope=Company, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 495, 20)))

Company._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=Company, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 496, 20)))

Company._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'website'), pyxb.binding.datatypes.anyURI, scope=Company, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 497, 20)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 492, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 493, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 494, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 495, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 496, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 497, 20))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, 'address')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 492, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, 'logo')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 493, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 494, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, 'parentUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 495, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 496, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, 'website')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 497, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Company._Automaton = _BuildAutomaton_101()




CompatibleProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=CompatibleProduct, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 507, 20)))

CompatibleProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productItemsUri'), pyxb.binding.datatypes.anyURI, scope=CompatibleProduct, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 508, 20)))

CompatibleProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=CompatibleProduct, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 509, 20)))

CompatibleProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'version'), pyxb.binding.datatypes.string, scope=CompatibleProduct, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 510, 20)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 507, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 508, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 509, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 510, 20))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 507, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'productItemsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 508, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 509, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'version')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 510, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CompatibleProduct._Automaton = _BuildAutomaton_102()




CompatibleProducts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'compatibleProducts'), CTD_ANON_11, scope=CompatibleProducts, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 520, 20)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 520, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProducts._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProducts._UseForTag(pyxb.namespace.ExpandedName(None, 'compatibleProducts')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 520, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CompatibleProducts._Automaton = _BuildAutomaton_103()




Cost._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'currency'), Currency, scope=Cost, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 537, 20)))

Cost._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=Cost, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 538, 20)))

Cost._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'frequency'), Frequency, scope=Cost, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 539, 20)))

Cost._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'price'), pyxb.binding.datatypes.float, scope=Cost, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 540, 20)))

Cost._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), STD_ANON_3, scope=Cost, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 541, 20)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 537, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 538, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 539, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 540, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 541, 20))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, 'currency')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 537, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 538, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, 'frequency')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 539, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, 'price')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 540, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 541, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Cost._Automaton = _BuildAutomaton_104()




Costs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'costs'), CTD_ANON_12, scope=Costs, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 564, 20)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 564, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Costs._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Costs._UseForTag(pyxb.namespace.ExpandedName(None, 'costs')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 564, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Costs._Automaton = _BuildAutomaton_105()




DownloadTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'downloadUri'), pyxb.binding.datatypes.anyURI, scope=DownloadTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 597, 20)))

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 597, 20))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DownloadTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DownloadTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DownloadTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DownloadTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DownloadTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'downloadUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 597, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DownloadTicket._Automaton = _BuildAutomaton_106()




DownloadTickets._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'downloadTickets'), CTD_ANON_13, scope=DownloadTickets, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 607, 20)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 607, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DownloadTickets._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DownloadTickets._UseForTag(pyxb.namespace.ExpandedName(None, 'downloadTickets')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 607, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DownloadTickets._Automaton = _BuildAutomaton_107()




Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'costs'), CTD_ANON_14, scope=Edition, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 624, 20)))

Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'idealFor'), pyxb.binding.datatypes.string, scope=Edition, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 631, 20)))

Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'includes'), CTD_ANON_15, scope=Edition, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 632, 20)))

Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'minEngagement'), pyxb.binding.datatypes.long, scope=Edition, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 639, 20)))

Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=Edition, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 640, 20)))

Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sku'), pyxb.binding.datatypes.string, scope=Edition, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 641, 20)))

Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'trial'), pyxb.binding.datatypes.long, scope=Edition, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 642, 20)))

Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), STD_ANON_4, scope=Edition, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 643, 20)))

Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'units'), CTD_ANON_16, scope=Edition, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 653, 20)))

Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=Edition, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 660, 20)))

Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'purchased'), pyxb.binding.datatypes.boolean, scope=Edition, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 661, 20)))

Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'purchasedUri'), pyxb.binding.datatypes.anyURI, scope=Edition, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 662, 20)))

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 624, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 631, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 632, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 639, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 640, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 641, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 642, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 643, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 653, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 660, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 661, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 662, 20))
    counters.add(cc_15)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, 'costs')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 624, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, 'idealFor')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 631, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, 'includes')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 632, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, 'minEngagement')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 639, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 640, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, 'sku')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 641, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, 'trial')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 642, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 643, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, 'units')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 653, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 660, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, 'purchased')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 661, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, 'purchasedUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 662, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Edition._Automaton = _BuildAutomaton_108()




Editions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'editions'), CTD_ANON_17, scope=Editions, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 672, 20)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 672, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Editions._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Editions._UseForTag(pyxb.namespace.ExpandedName(None, 'editions')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 672, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Editions._Automaton = _BuildAutomaton_109()




Entitlements._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entitlements'), CTD_ANON_18, scope=Entitlements, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 695, 20)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 695, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Entitlements._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Entitlements._UseForTag(pyxb.namespace.ExpandedName(None, 'entitlements')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 695, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Entitlements._Automaton = _BuildAutomaton_110()




Export._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=Export, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 711, 20)))

Export._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'applianceTemplate'), ApplianceTemplate, scope=Export, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 712, 20)))

Export._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'accountUri'), pyxb.binding.datatypes.anyURI, scope=Export, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 713, 20)))

Export._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'status'), OpStatus, scope=Export, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 714, 20)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 711, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 712, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 713, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 714, 20))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Export._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Export._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Export._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Export._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Export._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 711, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Export._UseForTag(pyxb.namespace.ExpandedName(None, 'applianceTemplate')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 712, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Export._UseForTag(pyxb.namespace.ExpandedName(None, 'accountUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 713, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Export._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 714, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Export._Automaton = _BuildAutomaton_111()




Exports_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'exports'), CTD_ANON_19, scope=Exports_, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 724, 20)))

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 724, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Exports_._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Exports_._UseForTag(pyxb.namespace.ExpandedName(None, 'exports')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 724, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Exports_._Automaton = _BuildAutomaton_112()




Include._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=Include, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 749, 20)))

Include._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'tooltip'), pyxb.binding.datatypes.string, scope=Include, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 750, 20)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 749, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 750, 20))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Include._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Include._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Include._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Include._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Include._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 749, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Include._UseForTag(pyxb.namespace.ExpandedName(None, 'tooltip')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 750, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Include._Automaton = _BuildAutomaton_113()




Includes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'includes'), CTD_ANON_20, scope=Includes, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 760, 20)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 760, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Includes._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Includes._UseForTag(pyxb.namespace.ExpandedName(None, 'includes')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 760, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Includes._Automaton = _BuildAutomaton_114()




InstallSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'adminPassword'), pyxb.binding.datatypes.string, scope=InstallSettings, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 776, 20)))

InstallSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'timezone'), pyxb.binding.datatypes.string, scope=InstallSettings, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 777, 20)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 776, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 777, 20))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(InstallSettings._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(InstallSettings._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(InstallSettings._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(InstallSettings._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(InstallSettings._UseForTag(pyxb.namespace.ExpandedName(None, 'adminPassword')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 776, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(InstallSettings._UseForTag(pyxb.namespace.ExpandedName(None, 'timezone')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 777, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
InstallSettings._Automaton = _BuildAutomaton_115()




MachineImages._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'machineImages'), CTD_ANON_22, scope=MachineImages, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 863, 20)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 863, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MachineImages._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MachineImages._UseForTag(pyxb.namespace.ExpandedName(None, 'machineImages')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 863, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MachineImages._Automaton = _BuildAutomaton_116()




MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'categories'), CTD_ANON_23, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 880, 20)))

MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'category'), Category, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 887, 20)))

MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'clonesUri'), pyxb.binding.datatypes.anyURI, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 888, 20)))

MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'details'), pyxb.binding.datatypes.string, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 889, 20)))

MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'logo'), Logo, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 890, 20)))

MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 891, 20)))

MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbReferences'), pyxb.binding.datatypes.long, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 892, 20)))

MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'overview'), pyxb.binding.datatypes.string, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 893, 20)))

MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parentUri'), pyxb.binding.datatypes.anyURI, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 894, 20)))

MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productItemsUri'), pyxb.binding.datatypes.anyURI, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 895, 20)))

MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'resources'), CTD_ANON_24, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 896, 20)))

MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'screenshots'), CTD_ANON_25, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 903, 20)))

MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'screenShotsUri'), pyxb.binding.datatypes.anyURI, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 910, 20)))

MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'tagLine'), pyxb.binding.datatypes.string, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 911, 20)))

MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'tags'), pyxb.binding.datatypes.string, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 912, 20)))

MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 913, 20)))

MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vendorUri'), pyxb.binding.datatypes.anyURI, scope=MarketingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 914, 20)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 880, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 887, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 888, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 889, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 890, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 891, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 892, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 893, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 894, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 895, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 896, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 903, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 910, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 911, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 912, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 913, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 914, 20))
    counters.add(cc_20)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'categories')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 880, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'category')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 887, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'clonesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 888, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'details')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 889, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'logo')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 890, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 891, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'nbReferences')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 892, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'overview')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 893, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'parentUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 894, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'productItemsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 895, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'resources')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 896, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'screenshots')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 903, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'screenShotsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 910, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'tagLine')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 911, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'tags')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 912, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 913, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'vendorUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 914, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MarketingPlan._Automaton = _BuildAutomaton_117()




MarketingPlans._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'marketingPlans'), CTD_ANON_26, scope=MarketingPlans, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 924, 20)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 924, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlans._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlans._UseForTag(pyxb.namespace.ExpandedName(None, 'marketingPlans')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 924, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MarketingPlans._Automaton = _BuildAutomaton_118()




Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'approvalsUri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 941, 20)))

Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'badgesUri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 942, 20)))

Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'compatibleProductsUri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 943, 20)))

Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'managersUri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 944, 20)))

Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=Marketplace, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 945, 20)))

Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productsUri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 946, 20)))

Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productTypesUri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 947, 20)))

Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 948, 20)))

Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vendorsUri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 949, 20)))

Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'commentsUri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 950, 20)))

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 941, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 942, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 943, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 944, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 945, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 946, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 947, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 948, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 949, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 950, 20))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, 'approvalsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 941, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, 'badgesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 942, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, 'compatibleProductsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 943, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, 'managersUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 944, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 945, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, 'productsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 946, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, 'productTypesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 947, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 948, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, 'vendorsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 949, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, 'commentsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 950, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Marketplace._Automaton = _BuildAutomaton_119()




Marketplaces._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'marketplaces'), CTD_ANON_27, scope=Marketplaces, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 960, 20)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 960, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Marketplaces._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Marketplaces._UseForTag(pyxb.namespace.ExpandedName(None, 'marketplaces')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 960, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Marketplaces._Automaton = _BuildAutomaton_120()




OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'bytesLoaded'), pyxb.binding.datatypes.long, scope=OpStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 976, 20)))

OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'bytesTotal'), pyxb.binding.datatypes.long, scope=OpStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 977, 20)))

OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cancelled'), pyxb.binding.datatypes.boolean, scope=OpStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 978, 20)))

OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'complete'), pyxb.binding.datatypes.boolean, scope=OpStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 979, 20)))

OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detailedError'), pyxb.binding.datatypes.boolean, scope=OpStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 980, 20)))

OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detailedErrorMsg'), pyxb.binding.datatypes.string, scope=OpStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 981, 20)))

OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'error'), pyxb.binding.datatypes.boolean, scope=OpStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 982, 20)))

OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'errorMessage'), pyxb.binding.datatypes.string, scope=OpStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 983, 20)))

OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'eta'), pyxb.binding.datatypes.dateTime, scope=OpStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 984, 20)))

OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'message'), pyxb.binding.datatypes.string, scope=OpStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 985, 20)))

OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parentUri'), pyxb.binding.datatypes.anyURI, scope=OpStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 986, 20)))

OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'percentage'), pyxb.binding.datatypes.int, scope=OpStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 987, 20)))

OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'published'), pyxb.binding.datatypes.boolean, scope=OpStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 988, 20)))

OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'totalTime'), pyxb.binding.datatypes.dateTime, scope=OpStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 989, 20)))

OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=OpStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 990, 20)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 976, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 977, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 978, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 979, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 980, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 981, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 982, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 983, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 984, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 985, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 986, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 987, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 988, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 989, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 990, 20))
    counters.add(cc_18)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'bytesLoaded')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 976, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'bytesTotal')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 977, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'cancelled')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 978, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'complete')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 979, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'detailedError')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 980, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'detailedErrorMsg')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 981, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 982, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'errorMessage')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 983, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'eta')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 984, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'message')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 985, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'parentUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 986, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'percentage')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 987, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'published')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 988, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'totalTime')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 989, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 990, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
OpStatus._Automaton = _BuildAutomaton_121()




OpStatuses._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'statuses'), CTD_ANON_28, scope=OpStatuses, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1000, 20)))

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1000, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OpStatuses._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(OpStatuses._UseForTag(pyxb.namespace.ExpandedName(None, 'statuses')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1000, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
OpStatuses._Automaton = _BuildAutomaton_122()




Order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'edition'), Edition, scope=Order, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1016, 20)))

Order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=Order, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1017, 20)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1016, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1017, 20))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Order._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Order._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Order._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Order._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Order._UseForTag(pyxb.namespace.ExpandedName(None, 'edition')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1016, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Order._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1017, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Order._Automaton = _BuildAutomaton_123()




Orders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'orders'), CTD_ANON_29, scope=Orders, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1027, 20)))

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1027, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Orders._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Orders._UseForTag(pyxb.namespace.ExpandedName(None, 'orders')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1027, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Orders._Automaton = _BuildAutomaton_124()




Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'activateNewUsers'), pyxb.binding.datatypes.boolean, scope=Org, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1043, 20)))

Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'admin'), pyxb.binding.datatypes.boolean, scope=Org, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1044, 20)))

Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'categoriesUri'), pyxb.binding.datatypes.anyURI, scope=Org, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1045, 20)))

Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'companiesUri'), pyxb.binding.datatypes.anyURI, scope=Org, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1046, 20)))

Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'company'), Company, scope=Org, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1047, 20)))

Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'defaultOrg'), pyxb.binding.datatypes.boolean, scope=Org, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1048, 20)))

Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'membersUri'), pyxb.binding.datatypes.anyURI, scope=Org, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1049, 20)))

Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=Org, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1050, 20)))

Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'rolesUri'), pyxb.binding.datatypes.anyURI, scope=Org, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1051, 20)))

Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subscriptionProfiles'), CTD_ANON_30, scope=Org, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1052, 20)))

Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subscriptionProfilesUri'), pyxb.binding.datatypes.anyURI, scope=Org, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1060, 20)))

Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=Org, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1061, 20)))

Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vendorsUri'), pyxb.binding.datatypes.anyURI, scope=Org, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1062, 20)))

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1043, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1044, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1045, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1046, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1047, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1048, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1049, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1050, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1051, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1052, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1060, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1061, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1062, 20))
    counters.add(cc_16)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'activateNewUsers')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1043, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'admin')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1044, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'categoriesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1045, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'companiesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1046, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'company')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1047, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'defaultOrg')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1048, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'membersUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1049, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1050, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'rolesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1051, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'subscriptionProfiles')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1052, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'subscriptionProfilesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1060, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1061, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, 'vendorsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1062, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Org._Automaton = _BuildAutomaton_125()




Orgs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'orgs'), CTD_ANON_31, scope=Orgs, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1072, 20)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1072, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Orgs._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Orgs._UseForTag(pyxb.namespace.ExpandedName(None, 'orgs')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1072, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Orgs._Automaton = _BuildAutomaton_126()




OSSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=OSSettings, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1088, 20)))

OSSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'applianceUri'), pyxb.binding.datatypes.anyURI, scope=OSSettings, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1089, 20)))

OSSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'arch'), pyxb.binding.datatypes.string, scope=OSSettings, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1091, 20)))

OSSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=OSSettings, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1092, 20)))

OSSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'version'), pyxb.binding.datatypes.string, scope=OSSettings, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1093, 20)))

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1088, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1089, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1091, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1092, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1093, 20))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1088, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, 'applianceUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1089, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, 'arch')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1091, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1092, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, 'version')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1093, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
OSSettings._Automaton = _BuildAutomaton_127()




Period._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'interval'), Interval, scope=Period, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1103, 20)))

Period._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nb'), pyxb.binding.datatypes.integer, scope=Period, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1104, 20)))

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1103, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1104, 20))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Period._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Period._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Period._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Period._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Period._UseForTag(pyxb.namespace.ExpandedName(None, 'interval')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1103, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Period._UseForTag(pyxb.namespace.ExpandedName(None, 'nb')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1104, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Period._Automaton = _BuildAutomaton_128()




PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'clonesUri'), pyxb.binding.datatypes.anyURI, scope=PricingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1114, 20)))

PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'editions'), CTD_ANON_32, scope=PricingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1115, 20)))

PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'editionsUri'), pyxb.binding.datatypes.anyURI, scope=PricingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1122, 20)))

PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=PricingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1123, 20)))

PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbReferences'), pyxb.binding.datatypes.long, scope=PricingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1124, 20)))

PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'notes'), pyxb.binding.datatypes.string, scope=PricingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1125, 20)))

PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parentUri'), pyxb.binding.datatypes.anyURI, scope=PricingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1126, 20)))

PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productItemsUri'), pyxb.binding.datatypes.anyURI, scope=PricingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1127, 20)))

PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'resources'), CTD_ANON_33, scope=PricingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1128, 20)))

PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=PricingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1135, 20)))

PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vendorUri'), pyxb.binding.datatypes.anyURI, scope=PricingPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1136, 20)))

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1114, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1115, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1122, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1123, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1124, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1125, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1126, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1127, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1128, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1135, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1136, 20))
    counters.add(cc_14)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'clonesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1114, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'editions')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1115, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'editionsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1122, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1123, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'nbReferences')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1124, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'notes')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1125, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'parentUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1126, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'productItemsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1127, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'resources')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1128, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1135, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'vendorUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1136, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PricingPlan._Automaton = _BuildAutomaton_129()




PricingPlans._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pricingPlans'), CTD_ANON_34, scope=PricingPlans, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1146, 20)))

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1146, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlans._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlans._UseForTag(pyxb.namespace.ExpandedName(None, 'pricingPlans')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1146, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PricingPlans._Automaton = _BuildAutomaton_130()




Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'active'), pyxb.binding.datatypes.boolean, scope=Product, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1162, 20)))

Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'allowComments'), pyxb.binding.datatypes.boolean, scope=Product, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1163, 20)))

Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'comments'), CTD_ANON_35, scope=Product, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1164, 20)))

Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'commentsUri'), pyxb.binding.datatypes.anyURI, scope=Product, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1171, 20)))

Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'items'), CTD_ANON_36, scope=Product, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1172, 20)))

Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'itemsUri'), pyxb.binding.datatypes.anyURI, scope=Product, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1179, 20)))

Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=Product, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1180, 20)))

Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbItems'), pyxb.binding.datatypes.int, scope=Product, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1181, 20)))

Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbPendingApprovals'), pyxb.binding.datatypes.long, scope=Product, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1182, 20)))

Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbPrivateItems'), pyxb.binding.datatypes.long, scope=Product, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1183, 20)))

Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbPublicItems'), pyxb.binding.datatypes.long, scope=Product, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1184, 20)))

Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbPurchases'), pyxb.binding.datatypes.long, scope=Product, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1185, 20)))

Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'notificationsUri'), pyxb.binding.datatypes.anyURI, scope=Product, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1186, 20)))

Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parentUri'), pyxb.binding.datatypes.anyURI, scope=Product, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1187, 20)))

Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=Product, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1188, 20)))

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1162, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1163, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1164, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1171, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1172, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1179, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1180, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1181, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1182, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1183, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1184, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1185, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1186, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1187, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1188, 20))
    counters.add(cc_18)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'active')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1162, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'allowComments')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1163, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'comments')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1164, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'commentsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1171, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'items')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1172, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'itemsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1179, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1180, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'nbItems')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1181, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'nbPendingApprovals')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1182, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'nbPrivateItems')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1183, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'nbPublicItems')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1184, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'nbPurchases')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1185, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'notificationsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1186, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'parentUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1187, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1188, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Product._Automaton = _BuildAutomaton_131()




ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'active'), pyxb.binding.datatypes.boolean, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1198, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'approvalUri'), pyxb.binding.datatypes.anyURI, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1199, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'artifacts'), CTD_ANON_37, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1200, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'artifactsUri'), pyxb.binding.datatypes.anyURI, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1207, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'badges'), CTD_ANON_38, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1208, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'commentsUri'), pyxb.binding.datatypes.anyURI, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1215, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'compatibilityList'), pyxb.binding.datatypes.string, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1216, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'compatibleProducts'), CTD_ANON_39, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1217, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'featured'), pyxb.binding.datatypes.boolean, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1225, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'installationInstructions'), pyxb.binding.datatypes.string, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1226, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'marketingPlan'), MarketingPlan, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1227, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1228, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbPurchases'), pyxb.binding.datatypes.long, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1229, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbVotes'), pyxb.binding.datatypes.long, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1230, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parentUri'), pyxb.binding.datatypes.anyURI, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1231, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'partNumber'), pyxb.binding.datatypes.string, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1232, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pricingPlan'), PricingPlan, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1233, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'purchasesUri'), pyxb.binding.datatypes.anyURI, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1234, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'rating'), pyxb.binding.datatypes.float, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1235, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'releaseDate'), pyxb.binding.datatypes.dateTime, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1236, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'releaseNotes'), pyxb.binding.datatypes.string, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1237, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'staffPick'), pyxb.binding.datatypes.boolean, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1238, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'status'), STD_ANON_8, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1239, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supportPlan'), SupportPlan, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1250, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), ProductType, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1251, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1252, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vendorName'), pyxb.binding.datatypes.string, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1253, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vendorUri'), pyxb.binding.datatypes.anyURI, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1254, 20)))

ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'version'), pyxb.binding.datatypes.string, scope=ProductItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1255, 20)))

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1198, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1199, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1200, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1207, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1208, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1215, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1216, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1217, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1225, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1226, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1227, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1228, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1229, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1230, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1231, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1232, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1233, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1234, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1235, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1236, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1237, 20))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1238, 20))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1239, 20))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1250, 20))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1251, 20))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1252, 20))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1253, 20))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1254, 20))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1255, 20))
    counters.add(cc_32)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'active')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1198, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'approvalUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1199, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'artifacts')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1200, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'artifactsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1207, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'badges')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1208, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'commentsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1215, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'compatibilityList')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1216, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'compatibleProducts')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1217, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'featured')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1225, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'installationInstructions')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1226, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'marketingPlan')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1227, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1228, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'nbPurchases')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1229, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'nbVotes')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1230, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'parentUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1231, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'partNumber')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1232, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'pricingPlan')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1233, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'purchasesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1234, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'rating')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1235, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'releaseDate')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1236, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'releaseNotes')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1237, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'staffPick')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1238, 20))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1239, 20))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'supportPlan')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1250, 20))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1251, 20))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1252, 20))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'vendorName')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1253, 20))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_31, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'vendorUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1254, 20))
    st_31 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_32, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, 'version')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1255, 20))
    st_32 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_27, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_27, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_28, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_28, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_29, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_29, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_30, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_30, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_31, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_31, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_32, True) ]))
    st_32._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductItem._Automaton = _BuildAutomaton_132()




ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'artifactsUri'), pyxb.binding.datatypes.anyURI, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1265, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'badges'), CTD_ANON_40, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1266, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'category'), Category, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1273, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'commentsUri'), pyxb.binding.datatypes.anyURI, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1274, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'compatibleProducts'), CTD_ANON_41, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1275, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'details'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1283, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'disclaimer'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1284, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'editions'), CTD_ANON_42, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1285, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'favorite'), pyxb.binding.datatypes.boolean, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1292, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'favoritesUri'), pyxb.binding.datatypes.anyURI, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1293, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'featured'), pyxb.binding.datatypes.boolean, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1294, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'installationInstructions'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1295, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'logo'), Logo, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1296, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'marketingResources'), CTD_ANON_43, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1297, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1305, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbPurchases'), pyxb.binding.datatypes.long, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1306, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbVotes'), pyxb.binding.datatypes.long, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1307, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'otherReleases'), CTD_ANON_44, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1308, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'overview'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1316, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'partNumber'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1317, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pricingResources'), CTD_ANON_45, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1318, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productUri'), pyxb.binding.datatypes.anyURI, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1326, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'purchased'), pyxb.binding.datatypes.boolean, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1327, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'purchasesUri'), pyxb.binding.datatypes.anyURI, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1328, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'rating'), pyxb.binding.datatypes.float, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1329, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'releaseDate'), pyxb.binding.datatypes.dateTime, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1330, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'releaseNotes'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1331, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'screenshots'), CTD_ANON_46, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1332, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'staffPick'), pyxb.binding.datatypes.boolean, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1339, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supportDetails'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1340, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supportEmail'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1341, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supportEula'), pyxb.binding.datatypes.anyURI, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1342, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supportPhone'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1343, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supportResources'), CTD_ANON_47, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1344, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supportUrl'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1352, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'tagLine'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1353, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'tags'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1354, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), ProductType, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1355, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1356, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vendorName'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1357, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vendorUri'), pyxb.binding.datatypes.anyURI, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1358, 20)))

ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'version'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1359, 20)))

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1265, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1266, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1273, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1274, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1275, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1283, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1284, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1285, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1292, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1293, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1294, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1295, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1296, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1297, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1305, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1306, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1307, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1308, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1316, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1317, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1318, 20))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1326, 20))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1327, 20))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1328, 20))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1329, 20))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1330, 20))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1331, 20))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1332, 20))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1339, 20))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1340, 20))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1341, 20))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1342, 20))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1343, 20))
    counters.add(cc_36)
    cc_37 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1344, 20))
    counters.add(cc_37)
    cc_38 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1352, 20))
    counters.add(cc_38)
    cc_39 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1353, 20))
    counters.add(cc_39)
    cc_40 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1354, 20))
    counters.add(cc_40)
    cc_41 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1355, 20))
    counters.add(cc_41)
    cc_42 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1356, 20))
    counters.add(cc_42)
    cc_43 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1357, 20))
    counters.add(cc_43)
    cc_44 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1358, 20))
    counters.add(cc_44)
    cc_45 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1359, 20))
    counters.add(cc_45)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'artifactsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1265, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'badges')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1266, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'category')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1273, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'commentsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1274, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'compatibleProducts')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1275, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'details')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1283, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'disclaimer')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1284, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'editions')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1285, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'favorite')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1292, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'favoritesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1293, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'featured')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1294, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'installationInstructions')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1295, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'logo')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1296, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'marketingResources')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1297, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1305, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'nbPurchases')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1306, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'nbVotes')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1307, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'otherReleases')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1308, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'overview')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1316, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'partNumber')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1317, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'pricingResources')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1318, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'productUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1326, 20))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'purchased')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1327, 20))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'purchasesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1328, 20))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'rating')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1329, 20))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'releaseDate')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1330, 20))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'releaseNotes')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1331, 20))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_31, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'screenshots')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1332, 20))
    st_31 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_32, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'staffPick')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1339, 20))
    st_32 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_33, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'supportDetails')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1340, 20))
    st_33 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_34, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'supportEmail')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1341, 20))
    st_34 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_35, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'supportEula')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1342, 20))
    st_35 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_36, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'supportPhone')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1343, 20))
    st_36 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_36)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_37, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'supportResources')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1344, 20))
    st_37 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_37)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_38, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'supportUrl')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1352, 20))
    st_38 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_38)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_39, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'tagLine')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1353, 20))
    st_39 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_39)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_40, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'tags')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1354, 20))
    st_40 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_40)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_41, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1355, 20))
    st_41 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_41)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_42, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1356, 20))
    st_42 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_42)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_43, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'vendorName')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1357, 20))
    st_43 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_43)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_44, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'vendorUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1358, 20))
    st_44 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_44)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_45, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'version')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1359, 20))
    st_45 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_45)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_27, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_27, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_28, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_28, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_29, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_29, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_30, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_30, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_31, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_31, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_32, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_32, False) ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_33, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_33, False) ]))
    st_33._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_34, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_34, False) ]))
    st_34._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_35, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_35, False) ]))
    st_35._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_36, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_36, False) ]))
    st_36._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_37, True) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_37, False) ]))
    st_37._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_38, True) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_38, False) ]))
    st_38._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_39, True) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_39, False) ]))
    st_39._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_40, True) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_40, False) ]))
    st_40._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_41, True) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_41, False) ]))
    st_41._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_42, True) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_42, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_42, False) ]))
    st_42._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_43, True) ]))
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_43, False) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_43, False) ]))
    st_43._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_44, [
        fac.UpdateInstruction(cc_44, True) ]))
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_44, False) ]))
    st_44._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_45, [
        fac.UpdateInstruction(cc_45, True) ]))
    st_45._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductItemDetails._Automaton = _BuildAutomaton_133()




ProductItemDetailsList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productItemDetailsList'), CTD_ANON_48, scope=ProductItemDetailsList, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1369, 20)))

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1369, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetailsList._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetailsList._UseForTag(pyxb.namespace.ExpandedName(None, 'productItemDetailsList')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1369, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductItemDetailsList._Automaton = _BuildAutomaton_134()




ProductItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productItems'), CTD_ANON_49, scope=ProductItems, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1386, 20)))

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1386, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductItems._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductItems._UseForTag(pyxb.namespace.ExpandedName(None, 'productItems')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1386, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductItems._Automaton = _BuildAutomaton_135()




ProductItemSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productId'), pyxb.binding.datatypes.long, scope=ProductItemSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1402, 20)))

ProductItemSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'releaseDate'), pyxb.binding.datatypes.dateTime, scope=ProductItemSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1403, 20)))

ProductItemSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), ProductType, scope=ProductItemSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1404, 20)))

ProductItemSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=ProductItemSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1405, 20)))

ProductItemSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=ProductItemSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1406, 20)))

ProductItemSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'version'), pyxb.binding.datatypes.string, scope=ProductItemSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1407, 20)))

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1402, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1403, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1404, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1405, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1406, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1407, 20))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'productId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1402, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'releaseDate')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1403, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1404, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1405, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1406, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'version')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1407, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductItemSummary._Automaton = _BuildAutomaton_136()




ProductItemSummaryList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productItemSummaryList'), CTD_ANON_50, scope=ProductItemSummaryList, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1417, 20)))

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1417, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummaryList._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummaryList._UseForTag(pyxb.namespace.ExpandedName(None, 'productItemSummaryList')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1417, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductItemSummaryList._Automaton = _BuildAutomaton_137()




ProductResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=ProductResource, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1434, 20)))

ProductResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'label'), pyxb.binding.datatypes.string, scope=ProductResource, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1435, 20)))

ProductResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parentUri'), pyxb.binding.datatypes.anyURI, scope=ProductResource, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1436, 20)))

ProductResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), STD_ANON_9, scope=ProductResource, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1437, 20)))

ProductResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=ProductResource, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1444, 20)))

ProductResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'url'), pyxb.binding.datatypes.string, scope=ProductResource, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1445, 20)))

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1434, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1435, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1436, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1437, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1444, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1445, 20))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1434, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, 'label')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1435, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, 'parentUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1436, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1437, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1444, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, 'url')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1445, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductResource._Automaton = _BuildAutomaton_138()




Products._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'products'), CTD_ANON_51, scope=Products, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1455, 20)))

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1455, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Products._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Products._UseForTag(pyxb.namespace.ExpandedName(None, 'products')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1455, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Products._Automaton = _BuildAutomaton_139()




ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'badges'), CTD_ANON_52, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1471, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'category'), Category, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1478, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'details'), pyxb.binding.datatypes.string, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1479, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'favoritesUri'), pyxb.binding.datatypes.anyURI, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1480, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'itemsUri'), pyxb.binding.datatypes.anyURI, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1481, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'latestItemUri'), pyxb.binding.datatypes.anyURI, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1482, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'logo'), Logo, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1483, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1484, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbPurchases'), pyxb.binding.datatypes.long, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1485, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbVotes'), pyxb.binding.datatypes.long, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1486, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productId'), pyxb.binding.datatypes.long, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1487, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productUri'), pyxb.binding.datatypes.anyURI, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1488, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'purchasesUri'), pyxb.binding.datatypes.anyURI, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1489, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'rating'), pyxb.binding.datatypes.float, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1490, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'releaseDate'), pyxb.binding.datatypes.dateTime, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1491, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'startingCost'), Cost, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1492, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'tagLine'), pyxb.binding.datatypes.string, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1493, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'tags'), pyxb.binding.datatypes.string, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1494, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vendorName'), pyxb.binding.datatypes.string, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1495, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'version'), pyxb.binding.datatypes.string, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1496, 20)))

ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'popularity'), pyxb.binding.datatypes.double, scope=ProductSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1497, 20)))

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1471, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1478, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1479, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1480, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1481, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1482, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1483, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1484, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1485, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1486, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1487, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1488, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1489, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1490, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1491, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1492, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1493, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1494, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1495, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1496, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1497, 20))
    counters.add(cc_24)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'badges')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1471, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'category')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1478, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'details')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1479, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'favoritesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1480, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'itemsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1481, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'latestItemUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1482, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'logo')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1483, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1484, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'nbPurchases')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1485, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'nbVotes')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1486, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'productId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1487, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'productUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1488, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'purchasesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1489, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'rating')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1490, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'releaseDate')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1491, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'startingCost')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1492, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'tagLine')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1493, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'tags')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1494, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'vendorName')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1495, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'version')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1496, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'popularity')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1497, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductSummary._Automaton = _BuildAutomaton_140()




ProductSummaryList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productSummaryList'), CTD_ANON_53, scope=ProductSummaryList, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1507, 20)))

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1507, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummaryList._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummaryList._UseForTag(pyxb.namespace.ExpandedName(None, 'productSummaryList')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1507, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductSummaryList._Automaton = _BuildAutomaton_141()




ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'primitive'), STD_ANON_10, scope=ProductType, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1524, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productItemsUri'), pyxb.binding.datatypes.anyURI, scope=ProductType, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1534, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), pyxb.binding.datatypes.string, scope=ProductType, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1535, 20)))

ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=ProductType, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1536, 20)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1524, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1534, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1535, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1536, 20))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(None, 'primitive')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1524, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(None, 'productItemsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1534, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1535, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1536, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductType._Automaton = _BuildAutomaton_142()




ProductTypes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productTypes'), CTD_ANON_54, scope=ProductTypes, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1546, 20)))

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1546, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductTypes._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductTypes._UseForTag(pyxb.namespace.ExpandedName(None, 'productTypes')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1546, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductTypes._Automaton = _BuildAutomaton_143()




Purchase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'item'), ProductItemDetails, scope=Purchase, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1562, 20)))

Purchase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'order'), Order, scope=Purchase, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1563, 20)))

Purchase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=Purchase, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1564, 20)))

Purchase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'billingStatus'), pyxb.binding.datatypes.string, scope=Purchase, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1565, 20)))

Purchase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'billingURL'), pyxb.binding.datatypes.string, scope=Purchase, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1566, 20)))

def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1562, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1563, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1564, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1565, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1566, 20))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, 'item')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1562, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, 'order')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1563, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1564, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, 'billingStatus')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1565, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, 'billingURL')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1566, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Purchase._Automaton = _BuildAutomaton_144()




Purchases._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'purchases'), CTD_ANON_55, scope=Purchases, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1576, 20)))

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1576, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Purchases._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Purchases._UseForTag(pyxb.namespace.ExpandedName(None, 'purchases')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1576, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Purchases._Automaton = _BuildAutomaton_145()




Quota._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'frequency'), STD_ANON_11, scope=Quota, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1592, 20)))

Quota._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'limit'), pyxb.binding.datatypes.long, scope=Quota, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1600, 20)))

Quota._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nb'), pyxb.binding.datatypes.long, scope=Quota, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1601, 20)))

Quota._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'renewalDate'), pyxb.binding.datatypes.dateTime, scope=Quota, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1602, 20)))

Quota._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), STD_ANON_12, scope=Quota, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1603, 20)))

Quota._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'typeId'), pyxb.binding.datatypes.int, scope=Quota, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1613, 20)))

Quota._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=Quota, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1614, 20)))

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1592, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1600, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1601, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1602, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1603, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1613, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1614, 20))
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, 'frequency')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1592, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, 'limit')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1600, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, 'nb')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1601, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, 'renewalDate')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1602, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1603, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, 'typeId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1613, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1614, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Quota._Automaton = _BuildAutomaton_146()




Quotas._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quotas'), CTD_ANON_56, scope=Quotas, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1624, 20)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1624, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Quotas._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Quotas._UseForTag(pyxb.namespace.ExpandedName(None, 'quotas')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1624, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Quotas._Automaton = _BuildAutomaton_147()




Role._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=Role, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1640, 20)))

Role._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'entitlements'), CTD_ANON_57, scope=Role, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1641, 20)))

Role._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=Role, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1648, 20)))

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1640, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1641, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1648, 20))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Role._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Role._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Role._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Role._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Role._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1640, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Role._UseForTag(pyxb.namespace.ExpandedName(None, 'entitlements')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1641, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Role._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1648, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Role._Automaton = _BuildAutomaton_148()




Roles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'roles'), CTD_ANON_58, scope=Roles, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1658, 20)))

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1658, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Roles._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Roles._UseForTag(pyxb.namespace.ExpandedName(None, 'roles')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1658, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Roles._Automaton = _BuildAutomaton_149()




ServiceStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'alive'), pyxb.binding.datatypes.boolean, scope=ServiceStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1684, 20)))

ServiceStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serviceLoad'), pyxb.binding.datatypes.int, scope=ServiceStatus, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1685, 20)))

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1684, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1685, 20))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ServiceStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ServiceStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ServiceStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ServiceStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ServiceStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'alive')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1684, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ServiceStatus._UseForTag(pyxb.namespace.ExpandedName(None, 'serviceLoad')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1685, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ServiceStatus._Automaton = _BuildAutomaton_150()




StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'actionId'), pyxb.binding.datatypes.long, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1695, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'actionName'), STD_ANON_13, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1696, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'currency'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1714, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'date'), pyxb.binding.datatypes.dateTime, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1715, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1716, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'diskSize'), pyxb.binding.datatypes.float, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1717, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'distributionId'), pyxb.binding.datatypes.long, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1718, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'distributionName'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1719, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'formatId'), pyxb.binding.datatypes.long, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1720, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'formatName'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1721, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fromObjectId'), pyxb.binding.datatypes.long, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1722, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fromObjectName'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1723, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'fromObjectType'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1724, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'objectId'), pyxb.binding.datatypes.long, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1725, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'objectName'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1726, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'objectStatus'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1727, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'objectType'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1728, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'orgId'), pyxb.binding.datatypes.long, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1729, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'price'), pyxb.binding.datatypes.float, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1730, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1731, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'userId'), pyxb.binding.datatypes.long, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1732, 20)))

StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'userLoginName'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1733, 20)))

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1695, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1696, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1714, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1715, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1716, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1717, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1718, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1719, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1720, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1721, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1722, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1723, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1724, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1725, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1726, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1727, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1728, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1729, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1730, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1731, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1732, 20))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1733, 20))
    counters.add(cc_25)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'actionId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1695, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'actionName')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1696, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'currency')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1714, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'date')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1715, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1716, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'diskSize')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1717, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'distributionId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1718, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'distributionName')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1719, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'formatId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1720, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'formatName')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1721, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'fromObjectId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1722, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'fromObjectName')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1723, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'fromObjectType')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1724, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'objectId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1725, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'objectName')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1726, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'objectStatus')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1727, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'objectType')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1728, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'orgId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1729, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'price')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1730, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1731, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'userId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1732, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, 'userLoginName')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1733, 20))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_25, True) ]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
StatTicket._Automaton = _BuildAutomaton_151()




StatTickets._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'statTickets'), CTD_ANON_59, scope=StatTickets, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1743, 20)))

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1743, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(StatTickets._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(StatTickets._UseForTag(pyxb.namespace.ExpandedName(None, 'statTickets')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1743, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
StatTickets._Automaton = _BuildAutomaton_152()




SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'active'), pyxb.binding.datatypes.boolean, scope=SubscriptionProfile, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1759, 20)))

SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'admins'), CTD_ANON_60, scope=SubscriptionProfile, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1760, 20)))

SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'adminsUri'), pyxb.binding.datatypes.anyURI, scope=SubscriptionProfile, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1767, 20)))

SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'code'), pyxb.binding.datatypes.string, scope=SubscriptionProfile, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1768, 20)))

SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=SubscriptionProfile, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1769, 20)))

SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=SubscriptionProfile, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1770, 20)))

SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'orgUri'), pyxb.binding.datatypes.anyURI, scope=SubscriptionProfile, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1771, 20)))

SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quotas'), CTD_ANON_61, scope=SubscriptionProfile, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1772, 20)))

SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quotasUri'), pyxb.binding.datatypes.anyURI, scope=SubscriptionProfile, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1779, 20)))

SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'roles'), CTD_ANON_62, scope=SubscriptionProfile, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1780, 20)))

SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'rolesUri'), pyxb.binding.datatypes.anyURI, scope=SubscriptionProfile, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1787, 20)))

SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=SubscriptionProfile, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1788, 20)))

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1759, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1760, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1767, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1768, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1769, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1770, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1771, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1772, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1779, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1780, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1787, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1788, 20))
    counters.add(cc_15)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, 'active')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1759, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, 'admins')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1760, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, 'adminsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1767, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, 'code')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1768, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1769, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1770, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, 'orgUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1771, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, 'quotas')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1772, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, 'quotasUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1779, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, 'roles')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1780, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, 'rolesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1787, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1788, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SubscriptionProfile._Automaton = _BuildAutomaton_153()




SubscriptionProfiles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'subscriptionProfiles'), CTD_ANON_63, scope=SubscriptionProfiles, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1798, 20)))

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1798, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfiles._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfiles._UseForTag(pyxb.namespace.ExpandedName(None, 'subscriptionProfiles')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1798, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SubscriptionProfiles._Automaton = _BuildAutomaton_154()




SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'email'), pyxb.binding.datatypes.string, scope=SupportPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1815, 20)))

SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'eula'), pyxb.binding.datatypes.anyURI, scope=SupportPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1816, 20)))

SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=SupportPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1817, 20)))

SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbReferences'), pyxb.binding.datatypes.long, scope=SupportPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1818, 20)))

SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'phone'), pyxb.binding.datatypes.string, scope=SupportPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1819, 20)))

SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productItemsUri'), pyxb.binding.datatypes.anyURI, scope=SupportPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1820, 20)))

SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'resources'), CTD_ANON_64, scope=SupportPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1821, 20)))

SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supportDetails'), pyxb.binding.datatypes.string, scope=SupportPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1828, 20)))

SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supportUrl'), pyxb.binding.datatypes.string, scope=SupportPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1829, 20)))

SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=SupportPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1830, 20)))

SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vendorUri'), pyxb.binding.datatypes.anyURI, scope=SupportPlan, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1831, 20)))

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1815, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1816, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1817, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1818, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1819, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1820, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1821, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1828, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1829, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1830, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1831, 20))
    counters.add(cc_14)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'email')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1815, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'eula')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1816, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1817, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'nbReferences')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1818, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'phone')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1819, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'productItemsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1820, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'resources')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1821, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'supportDetails')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1828, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'supportUrl')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1829, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1830, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, 'vendorUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1831, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SupportPlan._Automaton = _BuildAutomaton_155()




SupportPlans._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supportPlans'), CTD_ANON_65, scope=SupportPlans, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1841, 20)))

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1841, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlans._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlans._UseForTag(pyxb.namespace.ExpandedName(None, 'supportPlans')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1841, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SupportPlans._Automaton = _BuildAutomaton_156()




UforgeCredAccount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=UforgeCredAccount, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1857, 20)))

UforgeCredAccount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'login'), pyxb.binding.datatypes.string, scope=UforgeCredAccount, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1858, 20)))

UforgeCredAccount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parentUri'), pyxb.binding.datatypes.anyURI, scope=UforgeCredAccount, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1859, 20)))

UforgeCredAccount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'password'), pyxb.binding.datatypes.string, scope=UforgeCredAccount, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1860, 20)))

UforgeCredAccount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serverUrl'), pyxb.binding.datatypes.anyURI, scope=UforgeCredAccount, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1861, 20)))

UforgeCredAccount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'appliancesUri'), pyxb.binding.datatypes.anyURI, scope=UforgeCredAccount, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1862, 20)))

UforgeCredAccount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'machineImagesUri'), pyxb.binding.datatypes.anyURI, scope=UforgeCredAccount, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1863, 20)))

UforgeCredAccount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=UforgeCredAccount, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1864, 20)))

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1857, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1858, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1859, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1860, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1861, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1862, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1863, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1864, 20))
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1857, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, 'login')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1858, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, 'parentUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1859, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, 'password')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1860, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, 'serverUrl')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1861, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, 'appliancesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1862, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, 'machineImagesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1863, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1864, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UforgeCredAccount._Automaton = _BuildAutomaton_157()




UforgeCredAccounts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uforgeCredAccounts'), CTD_ANON_66, scope=UforgeCredAccounts, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1874, 20)))

def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1874, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccounts._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccounts._UseForTag(pyxb.namespace.ExpandedName(None, 'uforgeCredAccounts')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1874, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UforgeCredAccounts._Automaton = _BuildAutomaton_158()




UForgeUploadObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'md5sum'), pyxb.binding.datatypes.string, scope=UForgeUploadObject, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1916, 20)))

UForgeUploadObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'mimeType'), pyxb.binding.datatypes.string, scope=UForgeUploadObject, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1917, 20)))

UForgeUploadObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sha256sum'), pyxb.binding.datatypes.string, scope=UForgeUploadObject, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1918, 20)))

UForgeUploadObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'size'), pyxb.binding.datatypes.long, scope=UForgeUploadObject, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1919, 20)))

UForgeUploadObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'status'), OpStatus, scope=UForgeUploadObject, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1920, 20)))

UForgeUploadObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uploaded'), pyxb.binding.datatypes.boolean, scope=UForgeUploadObject, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1921, 20)))

UForgeUploadObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uploadedTime'), pyxb.binding.datatypes.dateTime, scope=UForgeUploadObject, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1922, 20)))

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1916, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1917, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1918, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1919, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1920, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1921, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1922, 20))
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, 'md5sum')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1916, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, 'mimeType')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1917, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, 'sha256sum')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1918, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, 'size')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1919, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1920, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, 'uploaded')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1921, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, 'uploadedTime')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1922, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UForgeUploadObject._Automaton = _BuildAutomaton_159()




Unit._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nb'), pyxb.binding.datatypes.long, scope=Unit, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1932, 20)))

Unit._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), STD_ANON_14, scope=Unit, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1933, 20)))

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1932, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1933, 20))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Unit._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Unit._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Unit._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Unit._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Unit._UseForTag(pyxb.namespace.ExpandedName(None, 'nb')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1932, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Unit._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1933, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Unit._Automaton = _BuildAutomaton_160()




Units._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'units'), CTD_ANON_67, scope=Units, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1968, 20)))

def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1968, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Units._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Units._UseForTag(pyxb.namespace.ExpandedName(None, 'units')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1968, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Units._Automaton = _BuildAutomaton_161()




User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'active'), pyxb.binding.datatypes.boolean, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1990, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'address'), Address, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1991, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'admin'), pyxb.binding.datatypes.boolean, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1992, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'adminOrgsUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1993, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'adminOrgUris'), UriList, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1994, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'apiKeysQuota'), pyxb.binding.datatypes.int, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1995, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'baseApiKeysUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1996, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'baseOrgsUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1997, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'baseRolesUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1998, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'company'), Company, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1999, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'creationCode'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2000, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dob'), pyxb.binding.datatypes.dateTime, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2001, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'email'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2002, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'exportsUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2003, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'firstName'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2004, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'gender'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2005, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'homePhone'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2006, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'jobTitle'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2007, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'joined'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2008, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'lang'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2009, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'loginName'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2010, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'mobilePhone'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2011, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2012, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'officePhone'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2013, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'orgUris'), UriList, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2014, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'password'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2015, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'photo'), Logo, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2016, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'promoCode'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2017, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'purchasesUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2018, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quotasUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2019, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'roles'), CTD_ANON_68, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2020, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'surname'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2027, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uforgeCredAccounts'), CTD_ANON_69, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2028, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'exports'), CTD_ANON_70, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2035, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uforgeCredAccountsUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2042, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2043, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'usageUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2044, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vendorsUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2045, 20)))

User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'website'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2046, 20)))

def _BuildAutomaton_162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1990, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1991, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1992, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1993, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1994, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1995, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1996, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1997, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1998, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1999, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2000, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2001, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2002, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2003, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2004, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2005, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2006, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2007, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2008, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2009, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2010, 20))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2011, 20))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2012, 20))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2013, 20))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2014, 20))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2015, 20))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2016, 20))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2017, 20))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2018, 20))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2019, 20))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2020, 20))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2027, 20))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2028, 20))
    counters.add(cc_36)
    cc_37 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2035, 20))
    counters.add(cc_37)
    cc_38 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2042, 20))
    counters.add(cc_38)
    cc_39 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2043, 20))
    counters.add(cc_39)
    cc_40 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2044, 20))
    counters.add(cc_40)
    cc_41 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2045, 20))
    counters.add(cc_41)
    cc_42 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2046, 20))
    counters.add(cc_42)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'active')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1990, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'address')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1991, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'admin')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1992, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'adminOrgsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1993, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'adminOrgUris')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1994, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'apiKeysQuota')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1995, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'baseApiKeysUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1996, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'baseOrgsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1997, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'baseRolesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1998, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'company')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1999, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'creationCode')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2000, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'dob')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2001, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'email')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2002, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'exportsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2003, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'firstName')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2004, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'gender')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2005, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'homePhone')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2006, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'jobTitle')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2007, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'joined')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2008, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'lang')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2009, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'loginName')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2010, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'mobilePhone')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2011, 20))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2012, 20))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'officePhone')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2013, 20))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'orgUris')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2014, 20))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'password')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2015, 20))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'photo')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2016, 20))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_31, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'promoCode')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2017, 20))
    st_31 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_32, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'purchasesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2018, 20))
    st_32 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_33, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'quotasUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2019, 20))
    st_33 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_34, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'roles')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2020, 20))
    st_34 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_35, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'surname')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2027, 20))
    st_35 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_36, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'uforgeCredAccounts')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2028, 20))
    st_36 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_36)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_37, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'exports')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2035, 20))
    st_37 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_37)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_38, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'uforgeCredAccountsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2042, 20))
    st_38 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_38)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_39, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2043, 20))
    st_39 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_39)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_40, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'usageUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2044, 20))
    st_40 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_40)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_41, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'vendorsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2045, 20))
    st_41 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_41)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_42, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, 'website')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2046, 20))
    st_42 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_42)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_27, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_27, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_28, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_28, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_29, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_29, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_30, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_30, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_31, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_31, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_32, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_32, False) ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_33, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_33, False) ]))
    st_33._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_34, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_34, False) ]))
    st_34._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_35, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_35, False) ]))
    st_35._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_36, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_36, False) ]))
    st_36._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_37, True) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_37, False) ]))
    st_37._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_38, True) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_38, False) ]))
    st_38._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_39, True) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_39, False) ]))
    st_39._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_40, True) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_40, False) ]))
    st_40._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_41, True) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_41, False) ]))
    st_41._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_42, True) ]))
    st_42._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
User._Automaton = _BuildAutomaton_162()




Users._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'users'), CTD_ANON_71, scope=Users, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2056, 20)))

def _BuildAutomaton_163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2056, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Users._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Users._UseForTag(pyxb.namespace.ExpandedName(None, 'users')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2056, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Users._Automaton = _BuildAutomaton_163()




Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'address'), Address, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2071, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'approvalsUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2072, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'badges'), CTD_ANON_72, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2073, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'creator'), User, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2080, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2081, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'email'), pyxb.binding.datatypes.string, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2082, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'inactive'), pyxb.binding.datatypes.boolean, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2083, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'logo'), Logo, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2084, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'marketingPlans'), CTD_ANON_73, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2085, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'marketingPlansUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2093, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'members'), CTD_ANON_74, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2094, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'membersUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2101, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2102, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbMembers'), pyxb.binding.datatypes.int, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2103, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbProductItems'), pyxb.binding.datatypes.int, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2104, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbProducts'), pyxb.binding.datatypes.int, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2105, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'notificationEmail'), pyxb.binding.datatypes.string, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2106, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'orgUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2107, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'phone'), pyxb.binding.datatypes.string, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2108, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pricingPlans'), CTD_ANON_75, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2109, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pricingPlansUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2116, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'products'), CTD_ANON_76, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2117, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'productsUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2124, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'purchasesUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2125, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supportPlans'), CTD_ANON_77, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2126, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supportPlansUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2133, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'twitterName'), pyxb.binding.datatypes.string, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2134, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), STD_ANON_15, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2135, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2143, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'billingMappingUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2144, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'billingRenewTokenUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2145, 20)))

Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'website'), pyxb.binding.datatypes.string, scope=Vendor, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2146, 20)))

def _BuildAutomaton_164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2071, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2072, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2073, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2080, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2081, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2082, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2083, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2084, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2085, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2093, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2094, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2101, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2102, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2103, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2104, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2105, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2106, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2107, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2108, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2109, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2116, 20))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2117, 20))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2124, 20))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2125, 20))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2126, 20))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2133, 20))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2134, 20))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2135, 20))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2143, 20))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2144, 20))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2145, 20))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2146, 20))
    counters.add(cc_35)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'address')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2071, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'approvalsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2072, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'badges')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2073, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'creator')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2080, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2081, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'email')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2082, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'inactive')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2083, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'logo')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2084, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'marketingPlans')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2085, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'marketingPlansUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2093, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'members')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2094, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'membersUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2101, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2102, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'nbMembers')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2103, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'nbProductItems')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2104, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'nbProducts')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2105, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'notificationEmail')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2106, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'orgUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2107, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'phone')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2108, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'pricingPlans')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2109, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'pricingPlansUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2116, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'products')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2117, 20))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'productsUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2124, 20))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'purchasesUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2125, 20))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'supportPlans')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2126, 20))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'supportPlansUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2133, 20))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'twitterName')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2134, 20))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_31, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2135, 20))
    st_31 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_32, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2143, 20))
    st_32 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_33, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'billingMappingUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2144, 20))
    st_33 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_34, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'billingRenewTokenUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2145, 20))
    st_34 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_35, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, 'website')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2146, 20))
    st_35 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_27, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_27, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_28, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_28, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_29, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_29, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_30, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_30, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_31, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_31, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_32, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_32, False) ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_33, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_33, False) ]))
    st_33._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_34, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_34, False) ]))
    st_34._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_35, True) ]))
    st_35._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Vendor._Automaton = _BuildAutomaton_164()




VendorMember._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'role'), pyxb.binding.datatypes.string, scope=VendorMember, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2156, 20)))

VendorMember._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=VendorMember, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2157, 20)))

VendorMember._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'user'), User, scope=VendorMember, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2158, 20)))

VendorMember._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vendorUri'), pyxb.binding.datatypes.anyURI, scope=VendorMember, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2159, 20)))

def _BuildAutomaton_165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2156, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2157, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2158, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2159, 20))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VendorMember._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VendorMember._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(VendorMember._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(VendorMember._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(VendorMember._UseForTag(pyxb.namespace.ExpandedName(None, 'role')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2156, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(VendorMember._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2157, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(VendorMember._UseForTag(pyxb.namespace.ExpandedName(None, 'user')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2158, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(VendorMember._UseForTag(pyxb.namespace.ExpandedName(None, 'vendorUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2159, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
VendorMember._Automaton = _BuildAutomaton_165()




VendorMembers._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vendorMembers'), CTD_ANON_78, scope=VendorMembers, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2169, 20)))

def _BuildAutomaton_166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2169, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VendorMembers._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VendorMembers._UseForTag(pyxb.namespace.ExpandedName(None, 'vendorMembers')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2169, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
VendorMembers._Automaton = _BuildAutomaton_166()




VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=VendorSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2186, 20)))

VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=VendorSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2187, 20)))

VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'email'), pyxb.binding.datatypes.string, scope=VendorSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2188, 20)))

VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'website'), pyxb.binding.datatypes.string, scope=VendorSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2189, 20)))

VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'phone'), pyxb.binding.datatypes.string, scope=VendorSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2190, 20)))

VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'address'), Address, scope=VendorSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2191, 20)))

VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'logo'), Logo, scope=VendorSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2192, 20)))

VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbProductItems'), pyxb.binding.datatypes.int, scope=VendorSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2193, 20)))

VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nbProducts'), pyxb.binding.datatypes.int, scope=VendorSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2194, 20)))

VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'twitterName'), pyxb.binding.datatypes.string, scope=VendorSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2195, 20)))

VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=VendorSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2196, 20)))

VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), STD_ANON_16, scope=VendorSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2197, 20)))

VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'badges'), CTD_ANON_79, scope=VendorSummary, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2205, 20)))

def _BuildAutomaton_167 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2186, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2187, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2188, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2189, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2190, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2191, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2192, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2193, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2194, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2195, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2196, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2197, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2205, 20))
    counters.add(cc_16)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2186, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2187, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'email')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2188, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'website')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2189, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'phone')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2190, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'address')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2191, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'logo')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2192, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'nbProductItems')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2193, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'nbProducts')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2194, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'twitterName')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2195, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2196, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2197, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, 'badges')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2205, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
VendorSummary._Automaton = _BuildAutomaton_167()




Vendors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'vendors'), CTD_ANON_80, scope=Vendors, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2221, 20)))

def _BuildAutomaton_168 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2221, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Vendors._UseForTag(pyxb.namespace.ExpandedName(None, 'total')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Vendors._UseForTag(pyxb.namespace.ExpandedName(None, 'vendors')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2221, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Vendors._Automaton = _BuildAutomaton_168()




VendorMappingItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uforgeId'), pyxb.binding.datatypes.long, scope=VendorMappingItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2237, 20)))

VendorMappingItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'billingId'), pyxb.binding.datatypes.long, scope=VendorMappingItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2238, 20)))

VendorMappingItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'data'), pyxb.binding.datatypes.string, scope=VendorMappingItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2239, 20)))

VendorMappingItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'latestDigest'), pyxb.binding.datatypes.string, scope=VendorMappingItem, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2240, 20)))

def _BuildAutomaton_169 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2237, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2238, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2239, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2240, 20))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VendorMappingItem._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VendorMappingItem._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(VendorMappingItem._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(VendorMappingItem._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(VendorMappingItem._UseForTag(pyxb.namespace.ExpandedName(None, 'uforgeId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2237, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(VendorMappingItem._UseForTag(pyxb.namespace.ExpandedName(None, 'billingId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2238, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(VendorMappingItem._UseForTag(pyxb.namespace.ExpandedName(None, 'data')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2239, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(VendorMappingItem._UseForTag(pyxb.namespace.ExpandedName(None, 'latestDigest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2240, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
VendorMappingItem._Automaton = _BuildAutomaton_169()




Artifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'binaryUri'), pyxb.binding.datatypes.anyURI, scope=Artifact, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 318, 20)))

Artifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=Artifact, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 319, 20)))

Artifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'downloadUri'), pyxb.binding.datatypes.anyURI, scope=Artifact, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 320, 20)))

Artifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=Artifact, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 321, 20)))

Artifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'remoteLocation'), pyxb.binding.datatypes.anyURI, scope=Artifact, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 322, 20)))

Artifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=Artifact, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 323, 20)))

def _BuildAutomaton_170 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1916, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1917, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1918, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1919, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1920, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1921, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1922, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 318, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 319, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 320, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 321, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 322, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 323, 20))
    counters.add(cc_16)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'md5sum')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1916, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'mimeType')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1917, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'sha256sum')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1918, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'size')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1919, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1920, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'uploaded')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1921, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'uploadedTime')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1922, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'binaryUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 318, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 319, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'downloadUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 320, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 321, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'remoteLocation')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 322, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 323, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Artifact._Automaton = _BuildAutomaton_170()




Logo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=Logo, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 809, 20)))

Logo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=Logo, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 810, 20)))

Logo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'parentUri'), pyxb.binding.datatypes.anyURI, scope=Logo, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 811, 20)))

Logo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'title'), pyxb.binding.datatypes.string, scope=Logo, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 812, 20)))

Logo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uri'), pyxb.binding.datatypes.anyURI, scope=Logo, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 813, 20)))

def _BuildAutomaton_171 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1916, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1917, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1918, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1919, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1920, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1921, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1922, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 809, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 810, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 811, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 812, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 813, 20))
    counters.add(cc_15)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, 'md5sum')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1916, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, 'mimeType')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1917, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, 'sha256sum')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1918, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, 'size')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1919, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1920, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, 'uploaded')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1921, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, 'uploadedTime')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1922, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 809, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 810, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, 'parentUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 811, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, 'title')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 812, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 813, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Logo._Automaton = _BuildAutomaton_171()




ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'version'), pyxb.binding.datatypes.string, scope=ApplianceTemplate, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 229, 20)))

ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'passwordSet'), pyxb.binding.datatypes.boolean, scope=ApplianceTemplate, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 231, 20)))

ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'bootscriptsAdded'), pyxb.binding.datatypes.boolean, scope=ApplianceTemplate, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 232, 20)))

ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'softwareAdded'), pyxb.binding.datatypes.boolean, scope=ApplianceTemplate, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 233, 20)))

ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'exportUri'), pyxb.binding.datatypes.anyURI, scope=ApplianceTemplate, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 235, 20)))

ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'applianceUri'), pyxb.binding.datatypes.anyURI, scope=ApplianceTemplate, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 236, 20)))

ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serverUrl'), pyxb.binding.datatypes.anyURI, scope=ApplianceTemplate, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 237, 20)))

ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'accountUri'), pyxb.binding.datatypes.anyURI, scope=ApplianceTemplate, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 238, 20)))

ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'osSettings'), OSSettings, scope=ApplianceTemplate, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 240, 20)))

ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'installSettings'), InstallSettings, scope=ApplianceTemplate, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 241, 20)))

def _BuildAutomaton_172 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1916, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1917, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1918, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1919, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1920, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1921, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1922, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 318, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 319, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 320, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 321, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 322, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 323, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 229, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 231, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 232, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 233, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 235, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 236, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 237, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 238, 20))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 240, 20))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 241, 20))
    counters.add(cc_26)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'md5sum')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1916, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'mimeType')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1917, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'sha256sum')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1918, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'size')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1919, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1920, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'uploaded')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1921, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'uploadedTime')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1922, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'binaryUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 318, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 319, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'downloadUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 320, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 321, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'remoteLocation')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 322, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 323, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'version')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 229, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'passwordSet')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 231, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'bootscriptsAdded')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 232, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'softwareAdded')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 233, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'exportUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 235, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'applianceUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 236, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'serverUrl')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 237, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'accountUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 238, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'osSettings')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 240, 20))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, 'installSettings')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 241, 20))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_26, True) ]))
    st_26._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ApplianceTemplate._Automaton = _BuildAutomaton_172()




MachineImage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'machineImageUri'), pyxb.binding.datatypes.anyURI, scope=MachineImage, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 823, 20)))

MachineImage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'format'), STD_ANON_5, scope=MachineImage, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 824, 20)))

MachineImage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'osType'), STD_ANON_6, scope=MachineImage, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 832, 20)))

MachineImage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'recommendation'), pyxb.binding.datatypes.string, scope=MachineImage, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 840, 20)))

MachineImage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serverUrl'), pyxb.binding.datatypes.anyURI, scope=MachineImage, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 841, 20)))

MachineImage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'accountUri'), pyxb.binding.datatypes.anyURI, scope=MachineImage, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 842, 20)))

MachineImage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), STD_ANON_7, scope=MachineImage, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 843, 20)))

MachineImage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'revision'), pyxb.binding.datatypes.int, scope=MachineImage, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 853, 20)))

def _BuildAutomaton_173 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1916, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1917, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1918, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1919, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1920, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1921, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1922, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 318, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 319, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 320, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 321, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 322, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 323, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 823, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 824, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 832, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 840, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 841, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 842, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 843, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 853, 20))
    counters.add(cc_24)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'md5sum')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1916, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'mimeType')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1917, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'sha256sum')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1918, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'size')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1919, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1920, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'uploaded')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1921, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'uploadedTime')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1922, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'binaryUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 318, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 319, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'downloadUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 320, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 321, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'remoteLocation')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 322, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 323, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'machineImageUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 823, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'format')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 824, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'osType')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 832, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'recommendation')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 840, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'serverUrl')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 841, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'accountUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 842, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 843, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, 'revision')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 853, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MachineImage._Automaton = _BuildAutomaton_173()




SaaS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'serviceUrl'), pyxb.binding.datatypes.string, scope=SaaS, location=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1674, 20)))

def _BuildAutomaton_174 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1916, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1917, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1918, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1919, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1920, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1921, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1922, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 318, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 319, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 320, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 321, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 322, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 323, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1674, 20))
    counters.add(cc_17)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'created')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'dbId')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1900, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'digest')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1901, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'lastModified')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1902, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'md5sum')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1916, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'mimeType')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1917, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'sha256sum')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1918, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'size')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1919, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1920, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'uploaded')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1921, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'uploadedTime')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1922, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'binaryUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 318, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 319, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'downloadUri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 320, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 321, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'remoteLocation')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 322, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'uri')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 323, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, 'serviceUrl')), pyxb.utils.utility.Location('/home/jeff/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1674, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SaaS._Automaton = _BuildAutomaton_174()

