!OozieGraph
nodes:
  end: !End {}
  fail: !Kill {}
  generate-schema: !JavaAction
    args:
    - ${inputport_classname}
    - eu.dnetlib.iis.citationmatching.direct.schemas.DocumentMetadata
    - eu.dnetlib.iis.citationmatching.direct.schemas.Citation
    captures_output: true
    configuration: {}
    error_node: fail
    main_class: eu.dnetlib.iis.core.javamapreduce.hack.AvroSchemaGenerator
    ok_node: transformer
  start: !Start
    next: generate-schema
  transformer: !PigAction
    arguments: []
    configuration:
      mapred.job.queue.name: ${queueName}
    error_node: fail
    ok_node: end
    params:
    - input=${input}
    - schema_input=${wf:actionData('generate-schema')['eu.dnetlib.iis.citationmatching.direct.schemas.DocumentMetadata']}
    - output=${output}
    - schema_output=${wf:actionData('generate-schema')['eu.dnetlib.iis.citationmatching.direct.schemas.Citation']}
    script: lib/scripts/transformer/transformer.pig
parameters: {}

