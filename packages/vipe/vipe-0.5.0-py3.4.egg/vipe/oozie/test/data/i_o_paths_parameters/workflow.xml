<workflow-app xmlns="uri:oozie:workflow:0.4" name="metadataextraction">

	<parameters>
		<property>
			<name>input</name>
			<description>metadata extraction input directory</description>
		</property>
		<property>
			<name>local_output_root</name>
			<description>metadata extraction output directory</description>
		</property>
		<property>
			<name>local_output_name_meta</name>
			<value>meta</value>
			<description>metadata output subdirectory name</description>
		</property>
		<property>
			<name>local_output_name_fault</name>
			<value>fault</value>
			<description>fault output subdirectory name</description>
		</property>
		<property>
			<name>excluded_ids</name>
			<value>$UNDEFINED$</value>
			<description>excluded identifiers list</description>
		</property>
		<property>
			<name>max_file_size_mb</name>
			<value>$UNDEFINED$</value>
			<description>maximum allowed file size in Megabytes</description>
		</property>
		<property>
			<name>log_fault_processing_time_threshold_secs</name>
			<value>300</value>
			<description>processing time threshold expressed in seconds.
				When exceeded apropriate object will be written to fault datastore
			</description>
		</property>
		<property>
			<name>content_connection_timeout</name>
			<value>60000</value>
			<description>streaming content connection timeout</description>
		</property>
		<property>
			<name>content_read_timeout</name>
			<value>60000</value>
			<description>streaming content read timeout</description>
		</property>
		<property>
			<name>mapred_child_java_opts</name>
			<value>-Xmx4096m</value>
			<description>java-opts, e.g. maximum heap size for oozie
			</description>
		</property>
		<property>
			<name>mapred_max_split_size</name>
			<value>50000</value>
			<description>maximum input data split size, required by streaming
				version reading DocumentContentUrl to split input data into more
				chunks</description>
		</property>

		<property>
			<name>processing_mode</name>
			<value>MetadataExtractorMapper</value>
			<description>metadata extraction processing mode, supported values:
				MetadataExtractorMapper, StreamingMetadataExtractorMapper
			</description>
		</property>
		<property>
			<name>inputport_classname</name>
			<value>eu.dnetlib.iis.importer.schemas.DocumentContent</value>
			<description>input classname, should be adjusted according to the
				processing_mode value. Supported values:
				eu.dnetlib.iis.importer.schemas.DocumentContent,
				eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl
			</description>
		</property>
	</parameters>

	<start to="generate-schema" />

	<action name="generate-schema">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>eu.dnetlib.iis.core.javamapreduce.hack.AvroSchemaGenerator
			</main-class>
			<arg>${inputport_classname}</arg>
			<arg>eu.dnetlib.iis.metadataextraction.schemas.ExtractedDocumentMetadata
			</arg>
			<arg>eu.dnetlib.iis.metadataextraction.schemas.DocumentText</arg>
			<arg>eu.dnetlib.iis.audit.schemas.Fault</arg>
			<capture-output />
		</java>
		<ok to="metadata_extractor" />
		<error to="fail" />
	</action>

	<action name="metadata_extractor">
		<map-reduce>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${local_output_root}" />
			</prepare>
			<configuration>
				<property>
					<name>mapred.task.timeout</name>
					<value>3600000</value>
				</property>
				<property>
					<name>mapreduce.inputformat.class</name>
					<value>org.apache.avro.mapreduce.AvroKeyInputFormat</value>
				</property>
				<property>
					<name>mapred.mapoutput.key.class</name>
					<value>org.apache.avro.mapred.AvroKey</value>
				</property>
				<property>
					<name>mapred.mapoutput.value.class</name>
					<value>org.apache.avro.mapred.AvroValue</value>
				</property>
				<property>
					<name>mapred.output.key.class</name>
					<value>org.apache.avro.mapred.AvroKey</value>
				</property>
				<property>
					<name>mapred.output.value.class</name>
					<value>org.apache.avro.mapred.AvroValue</value>
				</property>
				<property>
					<name>mapred.output.key.comparator.class</name>
					<value>org.apache.avro.hadoop.io.AvroKeyComparator</value>
				</property>
				<property>
					<name>io.serializations</name>
					<value>org.apache.hadoop.io.serializer.WritableSerialization,org.apache.hadoop.io.serializer.avro.AvroSpecificSerialization,org.apache.hadoop.io.serializer.avro.AvroReflectSerialization,org.apache.avro.hadoop.io.AvroSerialization
					</value>
				</property>
				<property>
					<name>mapred.output.value.groupfn.class</name>
					<value>org.apache.avro.hadoop.io.AvroKeyComparator</value>
				</property>
				<property>
					<name>rpc.engine.org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolPB
					</name>
					<value>org.apache.hadoop.ipc.ProtobufRpcEngine</value>
				</property>
				<!-- This is required for new api usage -->
				<property>
					<name>mapred.mapper.new-api</name>
					<value>true</value>
				</property>
				<property>
					<name>mapred.reducer.new-api</name>
					<value>true</value>
				</property>

				<!-- Standard stuff for our framework -->
				<property>
					<name>mapred.job.queue.name</name>
					<value>${queueName}</value>
				</property>

				<property>
					<name>mapred.child.java.opts</name>
					<value>${mapred_child_java_opts}</value>
				</property>

				<property>
					<name>mapred.max.split.size</name>
					<value>${mapred_max_split_size}</value>
				</property>
				<property>
					<name>avro.schema.input.key</name>
					<value>${wf:actionData('generate-schema')[wf:conf('inputport_classname')]}
					</value>
				</property>

				<property>
					<name>avro.mapreduce.multipleoutputs</name>
					<value>${local_output_name_meta} ${local_output_name_fault}</value>
				</property>
				<!-- ## Output classes for all output ports -->
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${local_output_name_meta}.format
					</name>
					<value>org.apache.avro.mapreduce.AvroKeyOutputFormat</value>
				</property>
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${local_output_name_fault}.format
					</name>
					<value>org.apache.avro.mapreduce.AvroKeyOutputFormat</value>
				</property>
				<!-- ### Schema of multiple output ports. -->
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${local_output_name_meta}.keyschema
					</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.metadataextraction.schemas.ExtractedDocumentMetadata']}
					</value>
				</property>
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${local_output_name_fault}.keyschema
					</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.audit.schemas.Fault']}
					</value>
				</property>

				<property>
					<name>mapred.input.dir</name>
					<value>${input}</value>
				</property>
				<property>
					<name>mapred.output.dir</name>
					<value>${local_output_root}</value>
				</property>
				<property>
					<name>output.meta</name>
					<value>${local_output_name_meta}</value>
				</property>
				<property>
					<name>output.fault</name>
					<value>${local_output_name_fault}</value>
				</property>
				<property>
					<name>excluded.ids</name>
					<value>${excluded_ids}</value>
				</property>
				<property>
					<name>import.content.max.file.size.mb</name>
					<value>${max_file_size_mb}</value>
				</property>
				<property>
					<name>log.fault.processing.time.threshold.secs</name>
					<value>${log_fault_processing_time_threshold_secs}</value>
				</property>
				<property>
					<name>import.content.connection.timeout</name>
					<value>${content_connection_timeout}</value>
				</property>
				<property>
					<name>import.content.read.timeout</name>
					<value>${content_read_timeout}</value>
				</property>
				<property>
					<name>mapreduce.map.class</name>
					<value>eu.dnetlib.iis.workflows.metadataextraction.${processing_mode}
					</value>
				</property>
				<property>
					<name>mapred.reduce.tasks</name>
					<value>0</value>
				</property>
			</configuration>
		</map-reduce>
		<ok to="consumer" />
		<error to="fail" />
	</action>

	<action name="consumer">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<configuration>
				<property>
					<name>mapred.job.queue.name</name>
					<value>${queueName}</value>
				</property>
			</configuration>
			<main-class>eu.dnetlib.iis.core.java.ProcessWrapper</main-class>
			<arg>eu.dnetlib.iis.core.java.jsonworkflownodes.TestingConsumer</arg>
			<arg>-C{metadata,
				eu.dnetlib.iis.metadataextraction.schemas.ExtractedDocumentMetadata,
				eu/dnetlib/iis/workflows/metadataextraction/sampledataproducer/data/metadata.json}
			</arg>
			<arg>-Imetadata=${local_output_root}/${local_output_name_meta}</arg>
		</java>
		<ok to="end" />
		<error to="fail" />
	</action>
	
	<kill name="fail">
		<message>Unfortunately, the process failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]</message>
	</kill>
	<end name="end" />
</workflow-app>

