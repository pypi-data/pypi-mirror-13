<workflow-app xmlns="uri:oozie:workflow:0.4" name="test-core_examples_hive_joiner">
	<start to="producer" />
	<action name="producer">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/producer" />
				<mkdir path="${nameNode}${workingDir}/producer" />
			</prepare>
			<configuration>
				<property>
					<name>mapred.job.queue.name</name>
					<value>${queueName}</value>
				</property>
			</configuration>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.core.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.core.java.jsonworkflownodes.Producer</arg>
			<!-- Specification of the output ports -->
			<arg>-C{person,
				eu.dnetlib.iis.core.examples.schemas.documentandauthor.Person,
				eu/dnetlib/iis/core/examples/data/person.json}
			</arg>
			<arg>-C{document,
				eu.dnetlib.iis.core.examples.schemas.documentandauthor.Document,
				eu/dnetlib/iis/core/examples/data/document.json}
			</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-Operson=${workingDir}/producer/person</arg>
			<arg>-Odocument=${workingDir}/producer/document</arg>
		</java>
		<ok to="joiner" />
		<error to="fail" />
	</action>
	<action name="joiner">
		<hive xmlns="uri:oozie:hive-action:0.2">
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<prepare>
				<delete path="${nameNode}${workingDir}/joiner" />
				<mkdir path="${nameNode}${workingDir}/joiner" />
				<mkdir path="${nameNode}${workingDir}/joiner/working_dir" />
			</prepare>
			<configuration>
				<property>
					<name>mapred.job.queue.name</name>
					<value>${queueName}</value>
				</property>
				<property>
					<name>oozie.hive.defaults</name>
					<value>hive-site.xml</value>
				</property>
			</configuration>
			<script>lib/scripts/joiner.q</script>
			<!-- The working directory of the workflow node. -->
			<param>workingDir=${workingDir}/joiner/working_dir</param>
			<!-- Input ports. -->
			<param>input_person=${workingDir}/producer/person</param>
			<param>input_document=${workingDir}/producer/document</param>
			<!-- Output ports. -->
			<param>output_document_with_authors=${workingDir}/joiner/document_with_authors
			</param>
			<param>output_person_with_documents=${workingDir}/joiner/person_with_documents
			</param>
			<param>output_person_age=${workingDir}/joiner/person_age</param>
			<!-- Input and output Avro schemas passed to the script must be given 
				as full URIs. -->
			<param>schema_input_document=${wf:appPath()}/lib/scripts/document.avsc
			</param>
			<param>schema_input_person=${wf:appPath()}/lib/scripts/person.avsc
			</param>
			<param>schema_output_document_with_authors=${wf:appPath()}/lib/scripts/document_with_authors.avsc
			</param>
			<param>schema_output_person_with_documents=${wf:appPath()}/lib/scripts/person_with_documents.avsc
			</param>
			<param>schema_output_person_age=${wf:appPath()}/lib/scripts/person_age.avsc
			</param>
		</hive>
		<ok to="consumer" />
		<error to="fail" />
	</action>
	<action name="consumer">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<configuration>
				<property>
					<name>mapred.job.queue.name</name>
					<value>${queueName}</value>
				</property>
			</configuration>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.core.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.core.java.jsonworkflownodes.TestingConsumer</arg>
			<!-- Specification of the input ports -->
			<arg>-C{person_age,
				eu.dnetlib.iis.core.examples.schemas.documentandauthor.PersonAge,
				eu/dnetlib/iis/core/examples/data/person_age.json}
			</arg>
			<arg>-C{document_with_authors,
				eu.dnetlib.iis.core.examples.schemas.documentandauthor.DocumentWithAuthors,
				eu/dnetlib/iis/core/examples/data/document_with_authors.json}
			</arg>
			<arg>-C{person_with_documents,
				eu.dnetlib.iis.core.examples.schemas.documentandauthor.personwithdocuments.PersonWithDocuments,
				eu/dnetlib/iis/core/examples/data/person_with_documents.json}
			</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-Iperson_age=${workingDir}/joiner/person_age</arg>
			<arg>-Idocument_with_authors=${workingDir}/joiner/document_with_authors
			</arg>
			<arg>-Iperson_with_documents=${workingDir}/joiner/person_with_documents
			</arg>
		</java>
		<ok to="end" />
		<error to="fail" />
	</action>
	<kill name="fail">
		<message>Unfortunately, the workflow failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]</message>
	</kill>
	<end name="end" />
</workflow-app>
