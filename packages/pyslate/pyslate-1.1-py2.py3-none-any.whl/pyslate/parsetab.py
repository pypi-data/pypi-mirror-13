
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'AF8AA322440E5891885209BE099286D7'
    
_lr_action_items = {'COLON':([2,11,13,16,],[-23,-22,25,33,]),'PERC_LBRACE':([0,2,4,5,6,8,9,10,11,16,17,20,23,28,30,31,32,33,37,40,44,45,47,],[3,-23,-10,3,3,3,3,3,-22,3,3,-12,-7,-9,-13,3,3,3,-11,-6,3,-8,-14,]),'RBRACE':([2,4,11,12,13,15,16,17,20,23,24,27,28,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,],[-23,-10,-22,23,-24,30,-24,-24,-12,-7,-21,40,-9,-24,-24,-19,-15,-16,-11,45,-24,-6,-17,-18,47,-24,-8,-20,]),'AT':([2,11,13,16,17,23,31,32,39,40,44,45,],[-23,-22,26,26,26,-7,26,26,26,-6,26,-8,]),'QUESTION':([2,8,11,13,29,],[-23,20,-22,20,20,]),'DOL_LBRACE':([0,2,4,6,8,9,10,11,20,23,28,30,37,40,45,47,],[5,-23,-10,5,5,5,5,-22,-12,-7,-9,-13,-11,-6,-8,-14,]),'$end':([0,1,2,4,6,7,8,9,10,11,18,19,20,21,22,23,28,30,37,40,45,47,],[-24,0,-23,-10,-24,-5,-24,-24,-24,-22,-2,-1,-12,-3,-4,-7,-9,-13,-11,-6,-8,-14,]),'PIPE':([2,4,11,20,37,],[-23,14,-22,-12,-11,]),'PLAINTEXT':([0,2,3,4,5,6,8,9,10,11,14,16,17,20,23,25,26,28,30,31,32,33,37,40,44,45,47,],[2,2,2,-10,2,2,2,2,2,-22,2,2,2,2,-7,2,2,-9,-13,2,2,2,-11,-6,2,-8,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,6,8,9,10,],[1,18,19,21,22,]),'variants':([0,3,6,8,9,10,14,25,],[6,12,6,6,6,6,28,38,]),'empty':([0,6,8,9,10,13,16,17,31,32,39,44,],[7,7,7,7,7,24,24,24,24,24,24,24,]),'variant':([0,3,6,8,9,10,14,25,],[4,4,4,4,4,4,4,4,]),'plaintext':([0,2,3,5,6,8,9,10,14,16,17,20,25,26,31,32,33,44,],[8,11,13,16,8,8,8,8,29,31,31,37,29,39,31,31,44,31,]),'inner_tag':([0,6,8,9,10,],[9,9,9,9,9,]),'decorators':([13,16,17,31,32,39,44,],[27,34,34,34,34,46,34,]),'inner_tag_cont':([16,17,31,32,44,],[35,36,41,42,35,]),'inner_tag_name':([5,33,],[15,43,]),'pholder_tag':([0,5,6,8,9,10,16,17,31,32,33,44,],[10,17,10,10,10,10,32,32,32,32,17,32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> plaintext expression','expression',2,'p_expression','parser.py',101),
  ('expression -> variants expression','expression',2,'p_expression','parser.py',102),
  ('expression -> inner_tag expression','expression',2,'p_expression','parser.py',103),
  ('expression -> pholder_tag expression','expression',2,'p_expression','parser.py',104),
  ('expression -> empty','expression',1,'p_expression','parser.py',105),
  ('pholder_tag -> PERC_LBRACE plaintext decorators RBRACE','pholder_tag',4,'p_pholder_tag','parser.py',112),
  ('pholder_tag -> PERC_LBRACE variants RBRACE','pholder_tag',3,'p_variants_tag','parser.py',116),
  ('pholder_tag -> PERC_LBRACE plaintext COLON variants RBRACE','pholder_tag',5,'p_variants_tag','parser.py',117),
  ('variants -> variant PIPE variants','variants',3,'p_variants_variant_next','parser.py',124),
  ('variants -> variant','variants',1,'p_variants_variant_next','parser.py',125),
  ('variant -> plaintext QUESTION plaintext','variant',3,'p_variants_variant_last','parser.py',132),
  ('variant -> plaintext QUESTION','variant',2,'p_variants_variant_part_next','parser.py',137),
  ('inner_tag -> DOL_LBRACE inner_tag_name RBRACE','inner_tag',3,'p_inner_tag','parser.py',142),
  ('inner_tag -> DOL_LBRACE plaintext COLON inner_tag_name RBRACE','inner_tag',5,'p_inner_tag','parser.py',143),
  ('inner_tag_name -> plaintext inner_tag_cont','inner_tag_name',2,'p_inner_tag_name','parser.py',150),
  ('inner_tag_name -> pholder_tag inner_tag_cont','inner_tag_name',2,'p_inner_tag_name','parser.py',151),
  ('inner_tag_cont -> plaintext inner_tag_cont','inner_tag_cont',2,'p_inner_tag_cont','parser.py',155),
  ('inner_tag_cont -> pholder_tag inner_tag_cont','inner_tag_cont',2,'p_inner_tag_cont','parser.py',156),
  ('inner_tag_cont -> decorators','inner_tag_cont',1,'p_inner_tag_cont','parser.py',157),
  ('decorators -> AT plaintext decorators','decorators',3,'p_decorators','parser.py',164),
  ('decorators -> empty','decorators',1,'p_decorators','parser.py',165),
  ('plaintext -> PLAINTEXT plaintext','plaintext',2,'p_plaintext','parser.py',172),
  ('plaintext -> PLAINTEXT','plaintext',1,'p_plaintext','parser.py',173),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',179),
]
