from unittest import TestCase
from iot_analytics.apps.zorg.adaptors import GoogleAnalytics
from iot_analytics.apps.zorg.drivers import (
    Event, Error, Timing, ApiHit
)


class TestEvent(TestCase):

    def setUp(self):
        options = {
            'property_id': 'UA-12573345-12',
            'client_id': 'd944d45c-9c92-46a2-97be-9ba07d922227',
        }
        self.connection = GoogleAnalytics(options)
        self.driver = Event(options, self.connection)

    def test_send(self):
        response = self.driver.send(
            category='button',
            action='pressed',
            label='momentary',
            value=30
        )

        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json['ec'], 'button')
        self.assertEqual(response.json['ea'], 'pressed')
        self.assertEqual(response.json['el'], 'momentary')
        self.assertEqual(response.json['ev'], 30)

    def test_only_required_attributes(self):
        response = self.driver.send(
            category='button',
            action='pressed'
        )

        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json['ec'], 'button')
        self.assertEqual(response.json['ea'], 'pressed')
        self.assertNotIn('el', response.json)
        self.assertNotIn('ev', response.json)


class TestError(TestCase):

    def setUp(self):
        options = {
            'property_id': 'UA-12573345-12',
            'client_id': 'd944d45c-9c92-46a2-97be-9ba07d922227',
        }
        self.connection = GoogleAnalytics(options)
        self.driver = Error(options, self.connection)

    def test_send(self):
        response = self.driver.send(
            description='A test error intentionally generated by a test case.'
        )

        self.assertEqual(response.status_code, 200)
        self.assertIn('exd', response.json)
        self.assertIn('exf', response.json)


class TestTiming(TestCase):

    def setUp(self):
        options = {
            'property_id': 'UA-12573345-12',
            'client_id': 'd944d45c-9c92-46a2-97be-9ba07d922227',
        }
        self.connection = GoogleAnalytics(options)
        self.driver = Timing(options, self.connection)

    def test_send(self):
        response = self.driver.send(
            category='testing',
            name='timing',
            time=123,
            label='seconds',
        )

        self.assertEqual(response.status_code, 200)
        self.assertIn('utc', response.json)
        self.assertIn('utv', response.json)
        self.assertIn('utt', response.json)
        self.assertIn('utl', response.json)


class TestHit(TestCase):

    def setUp(self):
        options = {
            'property_id': 'UA-12573345-12',
            'client_id': 'd944d45c-9c92-46a2-97be-9ba07d922227',
        }
        self.connection = GoogleAnalytics(options)
        self.driver = ApiHit(options, self.connection)

    def test_send(self):
        response = self.driver.send(
            hostname='salvius.org',
            path='/api/testing',
            title='homepage'
        )

        self.assertEqual(response.status_code, 200)
        self.assertIn('dh', response.json)
        self.assertIn('dp', response.json)
        self.assertIn('dt', response.json)
