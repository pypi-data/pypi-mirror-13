# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class TranslatedText(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TranslatedText - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'final_verification_complete': 'bool',
            'language': 'str',
            'metadata': 'str',
            'status': 'str',
            'translation_request': 'SimpleTranslationRequest',
            'translation_text': 'str',
            'uuid': 'str',
            'verified_context': 'bool',
            'verified_grammar': 'bool',
            'verified_spelling': 'bool'
        }

        self.attribute_map = {
            'final_verification_complete': 'final_verification_complete',
            'language': 'language',
            'metadata': 'metadata',
            'status': 'status',
            'translation_request': 'translation_request',
            'translation_text': 'translation_text',
            'uuid': 'uuid',
            'verified_context': 'verified_context',
            'verified_grammar': 'verified_grammar',
            'verified_spelling': 'verified_spelling'
        }

        self._final_verification_complete = None
        self._language = None
        self._metadata = None
        self._status = None
        self._translation_request = None
        self._translation_text = None
        self._uuid = None
        self._verified_context = None
        self._verified_grammar = None
        self._verified_spelling = None

    @property
    def final_verification_complete(self):
        """
        Gets the final_verification_complete of this TranslatedText.


        :return: The final_verification_complete of this TranslatedText.
        :rtype: bool
        """
        return self._final_verification_complete

    @final_verification_complete.setter
    def final_verification_complete(self, final_verification_complete):
        """
        Sets the final_verification_complete of this TranslatedText.


        :param final_verification_complete: The final_verification_complete of this TranslatedText.
        :type: bool
        """
        self._final_verification_complete = final_verification_complete

    @property
    def language(self):
        """
        Gets the language of this TranslatedText.


        :return: The language of this TranslatedText.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this TranslatedText.


        :param language: The language of this TranslatedText.
        :type: str
        """
        self._language = language

    @property
    def metadata(self):
        """
        Gets the metadata of this TranslatedText.


        :return: The metadata of this TranslatedText.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this TranslatedText.


        :param metadata: The metadata of this TranslatedText.
        :type: str
        """
        self._metadata = metadata

    @property
    def status(self):
        """
        Gets the status of this TranslatedText.


        :return: The status of this TranslatedText.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this TranslatedText.


        :param status: The status of this TranslatedText.
        :type: str
        """
        self._status = status

    @property
    def translation_request(self):
        """
        Gets the translation_request of this TranslatedText.


        :return: The translation_request of this TranslatedText.
        :rtype: SimpleTranslationRequest
        """
        return self._translation_request

    @translation_request.setter
    def translation_request(self, translation_request):
        """
        Sets the translation_request of this TranslatedText.


        :param translation_request: The translation_request of this TranslatedText.
        :type: SimpleTranslationRequest
        """
        self._translation_request = translation_request

    @property
    def translation_text(self):
        """
        Gets the translation_text of this TranslatedText.


        :return: The translation_text of this TranslatedText.
        :rtype: str
        """
        return self._translation_text

    @translation_text.setter
    def translation_text(self, translation_text):
        """
        Sets the translation_text of this TranslatedText.


        :param translation_text: The translation_text of this TranslatedText.
        :type: str
        """
        self._translation_text = translation_text

    @property
    def uuid(self):
        """
        Gets the uuid of this TranslatedText.


        :return: The uuid of this TranslatedText.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this TranslatedText.


        :param uuid: The uuid of this TranslatedText.
        :type: str
        """
        self._uuid = uuid

    @property
    def verified_context(self):
        """
        Gets the verified_context of this TranslatedText.


        :return: The verified_context of this TranslatedText.
        :rtype: bool
        """
        return self._verified_context

    @verified_context.setter
    def verified_context(self, verified_context):
        """
        Sets the verified_context of this TranslatedText.


        :param verified_context: The verified_context of this TranslatedText.
        :type: bool
        """
        self._verified_context = verified_context

    @property
    def verified_grammar(self):
        """
        Gets the verified_grammar of this TranslatedText.


        :return: The verified_grammar of this TranslatedText.
        :rtype: bool
        """
        return self._verified_grammar

    @verified_grammar.setter
    def verified_grammar(self, verified_grammar):
        """
        Sets the verified_grammar of this TranslatedText.


        :param verified_grammar: The verified_grammar of this TranslatedText.
        :type: bool
        """
        self._verified_grammar = verified_grammar

    @property
    def verified_spelling(self):
        """
        Gets the verified_spelling of this TranslatedText.


        :return: The verified_spelling of this TranslatedText.
        :rtype: bool
        """
        return self._verified_spelling

    @verified_spelling.setter
    def verified_spelling(self, verified_spelling):
        """
        Sets the verified_spelling of this TranslatedText.


        :param verified_spelling: The verified_spelling of this TranslatedText.
        :type: bool
        """
        self._verified_spelling = verified_spelling

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

