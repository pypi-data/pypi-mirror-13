---

title: Fibonacci sequence
source: Cracking The Coding Interview by Gayle Laakman
description: Write a method to generate the nth Fibonacci number.
tests:
  - {input: 0, output: 0}
  - {input: 1, output: 1}
  - {input: 2, output: 2}
  - {input: 10, output: 55}
  - {input: 15, output: 610}

---

title: Pathfinding robot
source: Cracking The Coding Interview by Gayle Laakman
description: |
  Imagine a robot sitting on the upper left hand corner of an NxN grid The robot can only move in two directions:
  right and down. How many possible paths are there for the robot?
tests:
  - {input: 5, output: 35}
  - {input: 12, output: 364}
  - {input: 1, output: 1}
  - {input: 2, output: 4}
  - {input: 256, output: 2829056}

---

title: Subset of a set
source: Cracking The Coding Interview by Gayle Laakman
description: Write a method that returns all subsets of a set.

---

title: String permutations
source: Cracking The Coding Interview by Gayle Laakman
description: Write a method to compute all permutations of a string.

---

title: Parentheses combinations
source: Cracking The Coding Interview by Gayle Laakman
description: |
  Implement an algorithm to print all valid (e g , properly opened and closed) combinations of n-pairs of parentheses.
tests:
  - {input: 3, output: ()()(), ()(()), (())(), ((()))}

---

title: Paint fill
source: Cracking The Coding Interview by Gayle Laakman
description: |
  Implement the “paint fill” function that one might see on many image editing programs.
  That is, given a screen (represented by a 2 dimensional array of Colors), a point, and a new color,
  fill in the surrounding area until you hit a border of that color.

---

title: Represent price
source: Cracking The Coding Interview by Gayle Laakman
description: |
  Given an infinite number of quarters (25 cents), dimes (10 cents), nickels (5 cents) and pennies (1 cent),
  write code to calculate the number of ways of representing n cents.

---

title: Arranging queens
source: Cracking The Coding Interview by Gayle Laakman
description: |
  Write an algorithm to print all ways of arranging eight queens on a chess board
  so that none of them share the same row, column or diagonal.

---

title: Matching braces
source: https://github.com/kylesteiner/coding-challenges
description: |
  Given a N different open and close braces in a string "( { [ } ] )",
  write a function to check whether the string has matching braces.

  Return 1 if they match, 0 otherwise.
tests:
  - {input: "()()()()", output: 1}
  - {input: "(ok[this]{is}some(text))", output: 1}
  - {input: "((()[({[]})][])[{}])", output: 1}
  - {input: ")(", output: 0}
  - {input: "(", output: 0}
  - {input: "(((((())))))))", output: 0}
  - {input: "(}{)", output: 0}

...