#!python
# PYTHON_ARGCOMPLETE_OK
import argparse
import argcomplete
import textwrap
from musical_games.dice_games.factory import DiceGameFactory
from musical_games.dice_games.shell_utils import CompositionsCompleter

__author__ = 'Robbert Harms'
__date__ = "2015-08-18"
__maintainer__ = "Robbert Harms"
__email__ = "robbert.harms@maastrichtuniversity.nl"


def indent(text, prefix, predicate=None):
    """Adds 'prefix' to the beginning of selected lines in 'text'.

    If 'predicate' is provided, 'prefix' will only be added to the lines
    where 'predicate(line)' is True. If 'predicate' is not provided,
    it will default to adding 'prefix' to all non-empty lines that do not
    consist solely of whitespace characters.
    """
    if predicate is None:
        def predicate(line):
            return line.strip()

    def prefixed_lines():
        for line in text.splitlines(True):
            yield (prefix + line if predicate(line) else line)
    return ''.join(prefixed_lines())


if __name__ == '__main__':

    factory = DiceGameFactory()

    def get_arg_parser():
        """For autocomplete, please execute activate-global-python-argcomplete in your bash or zsh shell."""

        description = textwrap.dedent("""
            Print the relevant dice tables for one of the compositions.
        """)

        epilog = textwrap.dedent("""
            Examples of use:
                mg-dg-dice-table -c Kirnberger -w Menuet\ Trio
        """)

        parser = argparse.ArgumentParser(description=description, epilog=epilog,
                                         formatter_class=argparse.RawTextHelpFormatter)

        parser.add_argument('-c', '--composer',
                            required=True,
                            choices=factory.get_composers(),
                            help='Choose the composer',
                            default=None)

        parser.add_argument('-w', '--composition',
                            required=True,
                            help='Choose the composition',
                            default=None).completer = CompositionsCompleter()

        return parser

    parser = get_arg_parser()
    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    composer = args.composer
    composition = args.composition
    instruments = [p[0] for p in factory.get_instruments(composer, composition)]

    composition = factory.get_composition(composer, composition, instruments)
    dice_tables = composition.get_dice_tables()

    spacer = '   '
    for part_name, staffs in dice_tables.items():
        print(part_name + ':')
        for staff_name, dice_table in staffs.items():
            print(spacer + staff_name + ':')
            print(indent(str(dice_table.table), spacer * 2))

