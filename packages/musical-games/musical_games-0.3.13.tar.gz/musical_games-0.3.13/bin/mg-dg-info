#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
import argparse
import argcomplete
import textwrap

from musical_games.dice_games.factory import DiceGameFactory
from musical_games.dice_games.shell_utils import CompositionsCompleter

__author__ = 'Robbert Harms'
__date__ = "2015-08-18"
__maintainer__ = "Robbert Harms"
__email__ = "robbert.harms@maastrichtuniversity.nl"


def print_info_tree(factory):
    spacer = '   '

    for composer in factory.get_composers():
        print(composer + ':')

        for composition in factory.get_compositions(composer):
            print(spacer + composition + ':')

            instruments = factory.get_instruments(composer, composition)
            composition_parts = factory.get_composition_parts(composer, composition)

            for instr_part in zip(composition_parts, instruments):
                print(spacer * 2 + instr_part[0] + ': ' + ', '.join(instr_part[1]))


if __name__ == '__main__':

    factory = DiceGameFactory()

    def get_arg_parser():
        """For autocomplete, please execute activate-global-python-argcomplete in your bash or zsh shell."""

        description = textwrap.dedent("""
            Get an overview of all the available composers, compositions and instruments for the available dice games.

            There are four print options available:
                overview (o): prints a general overview
                composers (c): prints the available composers
                compositions (w): prints for the given composer all the available compositions/works
                instruments (i): prints the instrument choices for that composition. This prints per part of the
                    composition the available instruments.
        """)

        epilog = textwrap.dedent("""
            Examples of use:
                mg-dg-info
                mg-dg-info --print composers
                mg-dg-info -p c

                mg-dg-info --print compositions --composer Mozart
                mg-dg-info -p w -c Mozart

                mg-dg-info --print instruments --composer Mozart --composition Waltz
                mg-dg-info -p i -c Mozart -w Waltz
        """)

        parser = argparse.ArgumentParser(description=description, epilog=epilog,
                                         formatter_class=argparse.RawTextHelpFormatter)

        parser.add_argument('-p', '--print', dest='print_',
                            choices=['overview', 'composers', 'compositions', 'instruments', 'o', 'c', 'w', 'i'],
                            help='What to print, overview (o), composers (c), compositions (w) or instruments (i).',
                            default='overview')

        parser.add_argument('-c', '--composer',
                            choices=factory.get_composers(),
                            help='Choose the composer. Needed if you want to print the compositions or instruments.',
                            default=None)

        parser.add_argument('-w', '--composition',
                            help='Choose the composition. Needed if you want to print the instruments.',
                            default=None).completer = CompositionsCompleter()

        return parser

    parser = get_arg_parser()
    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    if args.print_ in ('overview', 'o'):
        print_info_tree(factory)

    elif args.print_ in ('composers', 'c'):
        print('\n'.join(factory.get_composers()))

    elif args.print_ in ('compositions', 'w'):
        composer = args.composer
        if not composer:
            print('For listing the compositions the composer is required.')
            exit(-1)

        print('\n'.join(factory.get_compositions(composer)))

    elif args.print_ in ('instruments', 'i'):
        composer = args.composer
        if not composer:
            print('For listing the instruments the composer is required.')
            exit(-1)

        composition = args.composition
        if not composition:
            print('For listing the instruments the composition is required.')
            exit(-1)

        instruments = factory.get_instruments(composer, composition)
        composition_parts = factory.get_composition_parts(composer, composition)

        for instr_part in zip(composition_parts, instruments):
            print(instr_part[0] + ': ' + ', '.join(instr_part[1]))
