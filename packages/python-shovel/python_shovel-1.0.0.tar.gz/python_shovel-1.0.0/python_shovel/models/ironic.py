# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Ironic(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Ironic - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'http_host': 'str',
            'http_port': 'str',
            'version': 'str',
            'os_username': 'str',
            'os_password': 'str',
            'os_tenant_name': 'str',
            'os_auth_token': 'str',
            'insecure': 'str'
        }

        self.attribute_map = {
            'http_host': 'httpHost',
            'http_port': 'httpPort',
            'version': 'version',
            'os_username': 'os_username',
            'os_password': 'os_password',
            'os_tenant_name': 'os_tenant_name',
            'os_auth_token': 'os_auth_token',
            'insecure': 'insecure'
        }

        self._http_host = None
        self._http_port = None
        self._version = None
        self._os_username = None
        self._os_password = None
        self._os_tenant_name = None
        self._os_auth_token = None
        self._insecure = None

    @property
    def http_host(self):
        """
        Gets the http_host of this Ironic.


        :return: The http_host of this Ironic.
        :rtype: str
        """
        return self._http_host

    @http_host.setter
    def http_host(self, http_host):
        """
        Sets the http_host of this Ironic.


        :param http_host: The http_host of this Ironic.
        :type: str
        """
        self._http_host = http_host

    @property
    def http_port(self):
        """
        Gets the http_port of this Ironic.


        :return: The http_port of this Ironic.
        :rtype: str
        """
        return self._http_port

    @http_port.setter
    def http_port(self, http_port):
        """
        Sets the http_port of this Ironic.


        :param http_port: The http_port of this Ironic.
        :type: str
        """
        self._http_port = http_port

    @property
    def version(self):
        """
        Gets the version of this Ironic.


        :return: The version of this Ironic.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Ironic.


        :param version: The version of this Ironic.
        :type: str
        """
        self._version = version

    @property
    def os_username(self):
        """
        Gets the os_username of this Ironic.


        :return: The os_username of this Ironic.
        :rtype: str
        """
        return self._os_username

    @os_username.setter
    def os_username(self, os_username):
        """
        Sets the os_username of this Ironic.


        :param os_username: The os_username of this Ironic.
        :type: str
        """
        self._os_username = os_username

    @property
    def os_password(self):
        """
        Gets the os_password of this Ironic.


        :return: The os_password of this Ironic.
        :rtype: str
        """
        return self._os_password

    @os_password.setter
    def os_password(self, os_password):
        """
        Sets the os_password of this Ironic.


        :param os_password: The os_password of this Ironic.
        :type: str
        """
        self._os_password = os_password

    @property
    def os_tenant_name(self):
        """
        Gets the os_tenant_name of this Ironic.


        :return: The os_tenant_name of this Ironic.
        :rtype: str
        """
        return self._os_tenant_name

    @os_tenant_name.setter
    def os_tenant_name(self, os_tenant_name):
        """
        Sets the os_tenant_name of this Ironic.


        :param os_tenant_name: The os_tenant_name of this Ironic.
        :type: str
        """
        self._os_tenant_name = os_tenant_name

    @property
    def os_auth_token(self):
        """
        Gets the os_auth_token of this Ironic.


        :return: The os_auth_token of this Ironic.
        :rtype: str
        """
        return self._os_auth_token

    @os_auth_token.setter
    def os_auth_token(self, os_auth_token):
        """
        Sets the os_auth_token of this Ironic.


        :param os_auth_token: The os_auth_token of this Ironic.
        :type: str
        """
        self._os_auth_token = os_auth_token

    @property
    def insecure(self):
        """
        Gets the insecure of this Ironic.


        :return: The insecure of this Ironic.
        :rtype: str
        """
        return self._insecure

    @insecure.setter
    def insecure(self, insecure):
        """
        Sets the insecure of this Ironic.


        :param insecure: The insecure of this Ironic.
        :type: str
        """
        self._insecure = insecure

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
