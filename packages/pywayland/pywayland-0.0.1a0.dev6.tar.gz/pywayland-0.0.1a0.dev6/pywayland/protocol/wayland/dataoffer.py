# -*- coding: utf-8 -*-
# This file has been autogenerated by the pywayland scanner

# Copyright © 2008-2011 Kristian Høgsberg
# Copyright © 2010-2011 Intel Corporation
# Copyright © 2012-2013 Collabora, Ltd.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice (including the
# next paragraph) shall be included in all copies or substantial
# portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from pywayland.interface import Interface


class DataOffer(Interface):
    """Offer to transfer data

    A :class:`DataOffer` represents a piece of data offered for transfer by
    another client (the source client).  It is used by the copy-and-paste and
    drag-and-drop mechanisms.  The offer describes the different mime types
    that the data can be converted to and provides the mechanism for
    transferring the data directly from the source client.
    """
    name = "wl_data_offer"
    version = 1


@DataOffer.request("u?s", [None, None])
def accept(self, serial, mime_type):
    """Accept one of the offered mime types

    Indicate that the client can accept the given mime type, or NULL for not
    accepted.

    Used for feedback during drag-and-drop.

    :param serial:
    :type serial: `uint`
    :param mime_type:
    :type mime_type: `string` or `None`
    """
    self._marshal(0, serial, mime_type)


@DataOffer.request("sh", [None, None])
def receive(self, mime_type, fd):
    """Request that the data is transferred

    To transfer the offered data, the client issues this request and indicates
    the mime type it wants to receive.  The transfer happens through the passed
    file descriptor (typically created with the pipe system call).  The source
    client writes the data in the mime type representation requested and then
    closes the file descriptor.

    The receiving client reads from the read end of the pipe until EOF and then
    closes its end, at which point the transfer is complete.

    :param mime_type:
    :type mime_type: `string`
    :param fd:
    :type fd: `fd`
    """
    self._marshal(1, mime_type, fd)


@DataOffer.request("", [])
def destroy(self):
    """Destroy data offer

    Destroy the data offer.
    """
    self._marshal(2)
    self._destroy()


@DataOffer.event("s", [None])
def offer(self, mime_type):
    """Advertise offered mime type

    Sent immediately after creating the :class:`DataOffer` object.  One event
    per offered mime type.

    :param mime_type:
    :type mime_type: `string`
    """
    self._post_event(0, mime_type)


DataOffer._gen_c()
