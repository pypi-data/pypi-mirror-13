# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft and contributors.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .resource import Resource


class MetricDefinition(Resource):
    """
    Class repesenting metadata for the metrics

    :param str id: Resource Id
    :param str name: Resource Name
    :param str location: Resource Location
    :param str type: Resource type
    :param dict tags: Resource tags
    :param str metric_definition_name: Name of the metric
    :param str unit: Unit of the metric
    :param str primary_aggregation_type: Primary aggregation type
    :param list metric_availabilities: List of time grains supported for the
     metric together with retention period
    :param str display_name: Friendly name shown in the UI
    """

    _required = []

    _attribute_map = {
        'metric_definition_name': {'key': 'properties.name', 'type': 'str', 'flatten': True},
        'unit': {'key': 'properties.unit', 'type': 'str', 'flatten': True},
        'primary_aggregation_type': {'key': 'properties.primaryAggregationType', 'type': 'str', 'flatten': True},
        'metric_availabilities': {'key': 'properties.metricAvailabilities', 'type': '[MetricAvailabilily]', 'flatten': True},
        'display_name': {'key': 'properties.displayName', 'type': 'str', 'flatten': True},
    }

    def __init__(self, location, id=None, name=None, type=None, tags=None, metric_definition_name=None, unit=None, primary_aggregation_type=None, metric_availabilities=None, display_name=None):
        super(MetricDefinition, self).__init__(id=id, name=name, location=location, type=type, tags=tags)
        self.metric_definition_name = metric_definition_name
        self.unit = unit
        self.primary_aggregation_type = primary_aggregation_type
        self.metric_availabilities = metric_availabilities
        self.display_name = display_name
