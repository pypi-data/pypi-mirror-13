.\" Man page generated from reStructuredText.
.
.TH "NVECTOR" "1" "December 30, 2015" "0.0.post0.dev12+6fb5038" "nvector"
.SH NAME
nvector \- nvector 0.0.post0.dev12+6fb5038
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
This is the documentation of \fBnvector\fP\&.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This is the main page of your project\(aqs \fI\%Sphinx\fP
documentation. It is formatted in \fI\%reStructuredText\fP\&. Add additional pages by creating
rst\-files in \fBdocs\fP and adding them to the \fI\%toctree\fP below. Use then
\fI\%references\fP in order to link
them from this page, e.g. authors and changes\&.
It is also possible to refer to the documentation of other Python packages
with the \fI\%Python domain syntax\fP\&. By default you
can reference the documentation of \fI\%Sphinx\fP,
\fI\%Python\fP, \fI\%matplotlib\fP, \fI\%NumPy\fP, \fI\%Scikit\-Learn\fP, \fI\%Pandas\fP, \fI\%SciPy\fP\&. You can add more by
extending the \fBintersphinx_mapping\fP in your Sphinx\(aqs \fBconf.py\fP\&.
.UNINDENT
.UNINDENT
.SH CONTENTS
.SS License
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
The content of this library is based on the following publication:

Gade, K. (2010). A Nonsingular Horizontal Position Representation, The Journal
of Navigation, Volume 63, Issue 03, pp 395\-417, July 2010.
(www.navlab.net/Publications/A_Nonsingular_Horizontal_Position_Representation.pdf)

This paper should be cited in publications using this library.

Copyright (c) 2015, Norwegian Defence Research Establishment (FFI)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above publication
information, copyright notice, this list of conditions and the following
disclaimer.

2. Redistributions in binary form must reproduce the above publication
information, copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided with the
distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
THE POSSIBILITY OF SUCH DAMAGE.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Developers
.INDENT 0.0
.IP \(bu 2
Kenneth Gade, FFI
.IP \(bu 2
Kristian Svartveit, FFI
.IP \(bu 2
Brita Hafskjold Gade, FFI
.IP \(bu 2
Per A. Brodtkorb FFI
.UNINDENT
.SS Changelog
.SS Version 0.1
.INDENT 0.0
.IP \(bu 2
Feature A added
.IP \(bu 2
FIX: nasty bug #1729 fixed
.IP \(bu 2
add your changes here!
.UNINDENT
.SS Modules
.SS nvector package
.SS Subpackages
.SS nvector.tests package
.SS Submodules
.SS nvector.tests.conftest module
.sp
Dummy conftest.py for nvector.
.sp
If you don\(aqt know what this is for, just leave it empty.
Read more about conftest.py under:
\fI\%https://pytest.org/latest/plugins.html\fP
.SS nvector.tests.test_frames module
.sp
Created on 18. des. 2015
.sp
@author: pab
.INDENT 0.0
.TP
.B class nvector.tests.test_frames.TestFrameE(methodName=\(aqrunTest\(aq)
Bases: \fBunittest.case.TestCase\fP
.INDENT 7.0
.TP
.B test_Ex10_cross_track_distance()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex1_A_and_B_to_delta_in_frame_N()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex2_B_and_delta_in_frame_B_to_C_in_frame_E()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex3_ECEF_vector_to_geodetic_latitude()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex4_geodetic_latitude_to_ECEF_vector()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex5_great_circle_distance()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex7_mean_position()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex8_position_A_and_azimuth_and_distance_to_B()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex9_intersection()
.UNINDENT
.INDENT 7.0
.TP
.B test_alternative_great_circle_distance()
.UNINDENT
.INDENT 7.0
.TP
.B test_compare_with_frame_B()
.UNINDENT
.INDENT 7.0
.TP
.B test_comparisons_with_frame_E()
.UNINDENT
.INDENT 7.0
.TP
.B test_exact_ellipsoidal_distance()
.UNINDENT
.INDENT 7.0
.TP
.B test_intersection_of_parallell_paths()
.UNINDENT
.UNINDENT
.SS nvector.tests.test_geodesic module
.INDENT 0.0
.TP
.B class nvector.tests.test_geodesic.GeodSolveTest(methodName=\(aqrunTest\(aq)
Bases: \fBunittest.case.TestCase\fP
.INDENT 7.0
.TP
.B test_GeodSolve0()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve1()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve10()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve11()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve12()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve14()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve17()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve2()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve29()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve33()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve4()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve5()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve55()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve6()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve9()
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nvector.tests.test_geodesic.GeodesicTest(methodName=\(aqrunTest\(aq)
Bases: \fBunittest.case.TestCase\fP
.INDENT 7.0
.TP
.B test_direct()
.UNINDENT
.INDENT 7.0
.TP
.B test_inverse()
.UNINDENT
.INDENT 7.0
.TP
.B testcases = [[35.60777, \-139.44815, 111.09874842956033, \-11.17491, \-69.95921, 129.28927088970877, 8935244.56048183, 80.50729714281974, 6273170.205530384, 0.16606318447386068, 0.16479116945612937, 12841384694976.432], [55.52454, 106.05087, 22.0200598809828, 77.03196, 197.18234, 109.11204111067151, 4105086.171392441, 36.89274069044589, 3828869.3344387608, 0.8007634960809261, 0.8010100698420101, 61674961290615.62], [\-21.97856, 142.59065, \-32.44456876433189, 41.84138, 98.56635, \-41.84359951440466, 8394328.894657671, 75.62930491011522, 6161154.577311061, 0.2481633923395038, 0.24930251203627893, \-6637997720646.717], [\-66.99028, 112.2363, 173.73491240878403, \-12.70631, 285.90344, 2.512956620913668, 11150344.231208025, 100.27863418115575, 6289939.567044669, \-0.17199490274700385, \-0.17722569526345708, \-121287239862139.75], [\-17.42761, 173.34268, \-159.03355766119293, \-15.84784, 5.93557, \-20.78748465153699, 16076603.163118068, 144.64010881028625, 3732902.1583877187, \-0.8127363870007047, \-0.8129980051915447, 97825992354058.7], [32.84994, 48.28919, 150.492927788122, \-56.28556, 202.29132, 48.11344939981676, 16727068.943816446, 150.5657999854666, 3147838.191018094, \-0.8733491808692313, \-0.8650503676711063, \-72445258525585.02], [6.96833, 52.74123, 92.58158538631771, \-7.39675, 206.17291, 90.72169216592391, 17102477.249695837, 154.14736623911355, 2772035.616991758, \-0.8999128252030245, \-0.8998689217711074, \-1311796973197.995], [\-50.56724, \-16.30485, \-105.43967990759016, \-33.56571, \-94.97412, \-47.34854783565033, 6455670.511866869, 58.083719495371255, 5409150.7979815835, 0.5305350803599727, 0.529887226444366, 41071447902810.05], [\-58.93002, \-8.90775, 140.96539790250068, \-8.91104, 133.13503, 19.255429433416598, 11756066.021986462, 105.75569124140688, 6151101.227070854, \-0.26548622269867184, \-0.2706848387451074, \-86143460552774.73], [\-68.82867, \-74.28391, 93.77434776311487, \-50.63005, \-8.36685, 34.65564085411343, 3956936.926063544, 35.572254987389286, 3708890.9544062656, 0.8144396373638351, 0.8142085981535834, \-41845309450093.79], [\-10.62672, \-32.0898, \-86.42671328674776, 5.883, \-134.31681, \-80.47378097103487, 11470869.386456301, 103.38739563450406, 6184411.662265971, \-0.23138683500430238, \-0.2315509762228679, 4198803992123.548], [\-21.76221, 166.90563, 29.31942120693643, 48.72884, 213.97627, 43.50867194641017, 9098627.398655491, 81.96347671612196, 6299240.916699228, 0.13965943368590333, 0.14152969707656796, 10024709850277.477], [\-19.79938, \-174.47484, 71.16727578017154, \-11.99349, \-154.35109, 65.58909977519923, 2319004.860116939, 20.896611684802387, 2267960.8703918327, 0.9342700186712585, 0.9342488713503279, \-3935477535005.785], [\-11.95887, \-116.94513, 92.71261983045255, 4.57352, 7.16501, 78.64960934409585, 13834722.580140138, 124.68868416108977, 5228093.177931598, \-0.5687935675566647, \-0.5691873195239722, \-9919582785894.854], [\-87.85331, 85.66836, \-65.12031304024275, 66.48646, 16.09921, \-4.888658719272296, 17286615.314714465, 155.58592449699137, 2635887.472911018, \-0.9069797577139858, \-0.9109560888304277, 42667211366919.53], [1.74708, 128.32011, \-101.58484363117385, \-11.16617, 11.87109, \-86.32579329643748, 12942901.124134742, 116.65051248430186, 5682744.841327057, \-0.44857868222697644, \-0.4482449034000773, 10763055294345.652], [\-25.72959, \-144.90758, \-153.6474686931172, \-57.70581, \-269.17879, \-48.34398315887649, 9413446.745245311, 84.6645338384043, 6356176.689888128, 0.09492245755254702, 0.09737058264766572, 74515122850712.44], [\-41.22777, 122.32875, 14.285113402275739, \-7.57291, 130.37946, 10.805303085187369, 3812686.035106021, 34.34330804743883, 3588703.8812128855, 0.8260522259321789, 0.825721582009202, \-2456961531057.857], [11.01307, 138.25278, 79.43682622782374, 6.62726, 247.05981, 103.70809021552266, 11911190.819018409, 107.34166995411458, 6070904.722786735, \-0.297676089236574, \-0.2978514339025232, 17121631423099.695], [\-29.47124, 95.14681, \-163.77913044168838, \-27.46601, \-69.15955, \-15.90933594555497, 13487015.838114548, 121.29402671574228, 5481428.994573639, \-0.5152722554537326, \-0.5155658796472179, 104679964020340.31]]
.UNINDENT
.UNINDENT
.SS nvector.tests.test_geodesic_org module
.INDENT 0.0
.TP
.B class nvector.tests.test_geodesic_org.GeodSolveTest(methodName=\(aqrunTest\(aq)
Bases: \fBunittest.case.TestCase\fP
.INDENT 7.0
.TP
.B test_GeodSolve0()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve1()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve10()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve11()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve12()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve14()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve15()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve17()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve2()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve26()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve28()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve29()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve33()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve4()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve5()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve55()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve6()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve9()
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nvector.tests.test_geodesic_org.GeodesicTest(methodName=\(aqrunTest\(aq)
Bases: \fBunittest.case.TestCase\fP
.INDENT 7.0
.TP
.B test_arcdirect()
.UNINDENT
.INDENT 7.0
.TP
.B test_direct()
.UNINDENT
.INDENT 7.0
.TP
.B test_inverse()
.UNINDENT
.INDENT 7.0
.TP
.B testcases = [[35.60777, \-139.44815, 111.09874842956033, \-11.17491, \-69.95921, 129.28927088970877, 8935244.56048183, 80.50729714281974, 6273170.205530384, 0.16606318447386068, 0.16479116945612937, 12841384694976.432], [55.52454, 106.05087, 22.0200598809828, 77.03196, 197.18234, 109.11204111067151, 4105086.171392441, 36.89274069044589, 3828869.3344387608, 0.8007634960809261, 0.8010100698420101, 61674961290615.62], [\-21.97856, 142.59065, \-32.44456876433189, 41.84138, 98.56635, \-41.84359951440466, 8394328.894657671, 75.62930491011522, 6161154.577311061, 0.2481633923395038, 0.24930251203627893, \-6637997720646.717], [\-66.99028, 112.2363, 173.73491240878403, \-12.70631, 285.90344, 2.512956620913668, 11150344.231208025, 100.27863418115575, 6289939.567044669, \-0.17199490274700385, \-0.17722569526345708, \-121287239862139.75], [\-17.42761, 173.34268, \-159.03355766119293, \-15.84784, 5.93557, \-20.78748465153699, 16076603.163118068, 144.64010881028625, 3732902.1583877187, \-0.8127363870007047, \-0.8129980051915447, 97825992354058.7], [32.84994, 48.28919, 150.492927788122, \-56.28556, 202.29132, 48.11344939981676, 16727068.943816446, 150.5657999854666, 3147838.191018094, \-0.8733491808692313, \-0.8650503676711063, \-72445258525585.02], [6.96833, 52.74123, 92.58158538631771, \-7.39675, 206.17291, 90.72169216592391, 17102477.249695837, 154.14736623911355, 2772035.616991758, \-0.8999128252030245, \-0.8998689217711074, \-1311796973197.995], [\-50.56724, \-16.30485, \-105.43967990759016, \-33.56571, \-94.97412, \-47.34854783565033, 6455670.511866869, 58.083719495371255, 5409150.7979815835, 0.5305350803599727, 0.529887226444366, 41071447902810.05], [\-58.93002, \-8.90775, 140.96539790250068, \-8.91104, 133.13503, 19.255429433416598, 11756066.021986462, 105.75569124140688, 6151101.227070854, \-0.26548622269867184, \-0.2706848387451074, \-86143460552774.73], [\-68.82867, \-74.28391, 93.77434776311487, \-50.63005, \-8.36685, 34.65564085411343, 3956936.926063544, 35.572254987389286, 3708890.9544062656, 0.8144396373638351, 0.8142085981535834, \-41845309450093.79], [\-10.62672, \-32.0898, \-86.42671328674776, 5.883, \-134.31681, \-80.47378097103487, 11470869.386456301, 103.38739563450406, 6184411.662265971, \-0.23138683500430238, \-0.2315509762228679, 4198803992123.548], [\-21.76221, 166.90563, 29.31942120693643, 48.72884, 213.97627, 43.50867194641017, 9098627.398655491, 81.96347671612196, 6299240.916699228, 0.13965943368590333, 0.14152969707656796, 10024709850277.477], [\-19.79938, \-174.47484, 71.16727578017154, \-11.99349, \-154.35109, 65.58909977519923, 2319004.860116939, 20.896611684802387, 2267960.8703918327, 0.9342700186712585, 0.9342488713503279, \-3935477535005.785], [\-11.95887, \-116.94513, 92.71261983045255, 4.57352, 7.16501, 78.64960934409585, 13834722.580140138, 124.68868416108977, 5228093.177931598, \-0.5687935675566647, \-0.5691873195239722, \-9919582785894.854], [\-87.85331, 85.66836, \-65.12031304024275, 66.48646, 16.09921, \-4.888658719272296, 17286615.314714465, 155.58592449699137, 2635887.472911018, \-0.9069797577139858, \-0.9109560888304277, 42667211366919.53], [1.74708, 128.32011, \-101.58484363117385, \-11.16617, 11.87109, \-86.32579329643748, 12942901.124134742, 116.65051248430186, 5682744.841327057, \-0.44857868222697644, \-0.4482449034000773, 10763055294345.652], [\-25.72959, \-144.90758, \-153.6474686931172, \-57.70581, \-269.17879, \-48.34398315887649, 9413446.745245311, 84.6645338384043, 6356176.689888128, 0.09492245755254702, 0.09737058264766572, 74515122850712.44], [\-41.22777, 122.32875, 14.285113402275739, \-7.57291, 130.37946, 10.805303085187369, 3812686.035106021, 34.34330804743883, 3588703.8812128855, 0.8260522259321789, 0.825721582009202, \-2456961531057.857], [11.01307, 138.25278, 79.43682622782374, 6.62726, 247.05981, 103.70809021552266, 11911190.819018409, 107.34166995411458, 6070904.722786735, \-0.297676089236574, \-0.2978514339025232, 17121631423099.695], [\-29.47124, 95.14681, \-163.77913044168838, \-27.46601, \-69.15955, \-15.90933594555497, 13487015.838114548, 121.29402671574228, 5481428.994573639, \-0.5152722554537326, \-0.5155658796472179, 104679964020340.31]]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nvector.tests.test_geodesic_org.PlanimeterTest(methodName=\(aqrunTest\(aq)
Bases: \fBunittest.case.TestCase\fP
.INDENT 7.0
.TP
.B static Planimeter(points)
.UNINDENT
.INDENT 7.0
.TP
.B static PolyLength(points)
.UNINDENT
.INDENT 7.0
.TP
.B class PolygonArea(earth, polyline=False)
Bases: \fI\%object\fP
.sp
Area of a geodesic polygon
.INDENT 7.0
.TP
.B AddEdge(azi, s)
Add an edge to the polygon.
.UNINDENT
.INDENT 7.0
.TP
.B AddPoint(lat, lon)
Add a vertex to the polygon.
.UNINDENT
.INDENT 7.0
.TP
.B static Area(earth, points, polyline)
Return the number, perimeter, and area for a set of vertices.
.UNINDENT
.INDENT 7.0
.TP
.B Clear()
Reset to empty polygon.
.UNINDENT
.INDENT 7.0
.TP
.B Compute(reverse, sign)
Return the number, perimeter, and area for the polygon.
.UNINDENT
.INDENT 7.0
.TP
.B CurrentPoint()
Return the current point as a lat, lon tuple.
.UNINDENT
.INDENT 7.0
.TP
.B TestCompute(lat, lon, reverse, sign)
.UNINDENT
.INDENT 7.0
.TP
.B TestEdge(azi, s, reverse, sign)
Return the results for a tentative additional edge.
.UNINDENT
.INDENT 7.0
.TP
.B TestPoint(lat, lon, reverse, sign)
Return the results for a tentative additional vertex.
.UNINDENT
.INDENT 7.0
.TP
.B static transit(lon1, lon2)
Count crossings of prime meridian for AddPoint.
.UNINDENT
.INDENT 7.0
.TP
.B static transitdirect(lon1, lon2)
Count crossings of prime meridian for AddEdge.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B PlanimeterTest.polygon = <geographiclib.polygonarea.PolygonArea object at 0x09715E10>
.UNINDENT
.INDENT 7.0
.TP
.B PlanimeterTest.polyline = <geographiclib.polygonarea.PolygonArea object at 0x09715E70>
.UNINDENT
.INDENT 7.0
.TP
.B PlanimeterTest.test_Planimeter0()
.UNINDENT
.INDENT 7.0
.TP
.B PlanimeterTest.test_Planimeter12()
.UNINDENT
.INDENT 7.0
.TP
.B PlanimeterTest.test_Planimeter13()
.UNINDENT
.INDENT 7.0
.TP
.B PlanimeterTest.test_Planimeter5()
.UNINDENT
.INDENT 7.0
.TP
.B PlanimeterTest.test_Planimeter6()
.UNINDENT
.UNINDENT
.SS nvector.tests.test_ngs module
.sp
Created on 14. des. 2015
.sp
@author: pab
.INDENT 0.0
.TP
.B class nvector.tests.test_ngs.GeodSolveTest(methodName=\(aqrunTest\(aq)
Bases: \fBunittest.case.TestCase\fP
.INDENT 7.0
.TP
.B test_GeodSolve0()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve1()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve10()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve11()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve12()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve14()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve2()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve33()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve4()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve5()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve6()
.UNINDENT
.INDENT 7.0
.TP
.B test_GeodSolve9()
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nvector.tests.test_ngs.GeodesicTest(methodName=\(aqrunTest\(aq)
Bases: \fBunittest.case.TestCase\fP
.INDENT 7.0
.TP
.B test_direct()
.UNINDENT
.INDENT 7.0
.TP
.B test_inverse()
.UNINDENT
.INDENT 7.0
.TP
.B testcases = [[35.60777, \-139.44815, 111.09874842956033, \-11.17491, \-69.95921, 129.28927088970877, 8935244.56048183, 80.50729714281974, 6273170.205530384, 0.16606318447386068, 0.16479116945612937, 12841384694976.432], [55.52454, 106.05087, 22.0200598809828, 77.03196, 197.18234, 109.11204111067151, 4105086.171392441, 36.89274069044589, 3828869.3344387608, 0.8007634960809261, 0.8010100698420101, 61674961290615.62], [\-21.97856, 142.59065, \-32.44456876433189, 41.84138, 98.56635, \-41.84359951440466, 8394328.894657671, 75.62930491011522, 6161154.577311061, 0.2481633923395038, 0.24930251203627893, \-6637997720646.717], [\-66.99028, 112.2363, 173.73491240878403, \-12.70631, 285.90344, 2.512956620913668, 11150344.231208025, 100.27863418115575, 6289939.567044669, \-0.17199490274700385, \-0.17722569526345708, \-121287239862139.75], [\-17.42761, 173.34268, \-159.03355766119293, \-15.84784, 5.93557, \-20.78748465153699, 16076603.163118068, 144.64010881028625, 3732902.1583877187, \-0.8127363870007047, \-0.8129980051915447, 97825992354058.7], [32.84994, 48.28919, 150.492927788122, \-56.28556, 202.29132, 48.11344939981676, 16727068.943816446, 150.5657999854666, 3147838.191018094, \-0.8733491808692313, \-0.8650503676711063, \-72445258525585.02], [6.96833, 52.74123, 92.58158538631771, \-7.39675, 206.17291, 90.72169216592391, 17102477.249695837, 154.14736623911355, 2772035.616991758, \-0.8999128252030245, \-0.8998689217711074, \-1311796973197.995], [\-50.56724, \-16.30485, \-105.43967990759016, \-33.56571, \-94.97412, \-47.34854783565033, 6455670.511866869, 58.083719495371255, 5409150.7979815835, 0.5305350803599727, 0.529887226444366, 41071447902810.05], [\-58.93002, \-8.90775, 140.96539790250068, \-8.91104, 133.13503, 19.255429433416598, 11756066.021986462, 105.75569124140688, 6151101.227070854, \-0.26548622269867184, \-0.2706848387451074, \-86143460552774.73], [\-68.82867, \-74.28391, 93.77434776311487, \-50.63005, \-8.36685, 34.65564085411343, 3956936.926063544, 35.572254987389286, 3708890.9544062656, 0.8144396373638351, 0.8142085981535834, \-41845309450093.79], [\-10.62672, \-32.0898, \-86.42671328674776, 5.883, \-134.31681, \-80.47378097103487, 11470869.386456301, 103.38739563450406, 6184411.662265971, \-0.23138683500430238, \-0.2315509762228679, 4198803992123.548], [\-21.76221, 166.90563, 29.31942120693643, 48.72884, 213.97627, 43.50867194641017, 9098627.398655491, 81.96347671612196, 6299240.916699228, 0.13965943368590333, 0.14152969707656796, 10024709850277.477], [\-19.79938, \-174.47484, 71.16727578017154, \-11.99349, \-154.35109, 65.58909977519923, 2319004.860116939, 20.896611684802387, 2267960.8703918327, 0.9342700186712585, 0.9342488713503279, \-3935477535005.785], [\-11.95887, \-116.94513, 92.71261983045255, 4.57352, 7.16501, 78.64960934409585, 13834722.580140138, 124.68868416108977, 5228093.177931598, \-0.5687935675566647, \-0.5691873195239722, \-9919582785894.854], [\-87.85331, 85.66836, \-65.12031304024275, 66.48646, 16.09921, \-4.888658719272296, 17286615.314714465, 155.58592449699137, 2635887.472911018, \-0.9069797577139858, \-0.9109560888304277, 42667211366919.53], [1.74708, 128.32011, \-101.58484363117385, \-11.16617, 11.87109, \-86.32579329643748, 12942901.124134742, 116.65051248430186, 5682744.841327057, \-0.44857868222697644, \-0.4482449034000773, 10763055294345.652], [\-25.72959, \-144.90758, \-153.6474686931172, \-57.70581, \-269.17879, \-48.34398315887649, 9413446.745245311, 84.6645338384043, 6356176.689888128, 0.09492245755254702, 0.09737058264766572, 74515122850712.44], [\-41.22777, 122.32875, 14.285113402275739, \-7.57291, 130.37946, 10.805303085187369, 3812686.035106021, 34.34330804743883, 3588703.8812128855, 0.8260522259321789, 0.825721582009202, \-2456961531057.857], [11.01307, 138.25278, 79.43682622782374, 6.62726, 247.05981, 103.70809021552266, 11911190.819018409, 107.34166995411458, 6070904.722786735, \-0.297676089236574, \-0.2978514339025232, 17121631423099.695], [\-29.47124, 95.14681, \-163.77913044168838, \-27.46601, \-69.15955, \-15.90933594555497, 13487015.838114548, 121.29402671574228, 5481428.994573639, \-0.5152722554537326, \-0.5155658796472179, 104679964020340.31]]
.UNINDENT
.UNINDENT
.SS nvector.tests.test_nvector module
.sp
This file contains solutions to the examples given at
www.navlab.net/nvector
.sp
The content of this file is based on the following publication:
.sp
Gade, K. (2010). A Nonsingular Horizontal Position Representation, The Journal
of Navigation, Volume 63, Issue 03, pp 395\-417, July 2010.
(www.navlab.net/Publications/A_Nonsingular_Horizontal_Position_Representation.pdf)
.sp
Copyright (c) 2015, Norwegian Defence Research Establishment (FFI)
All rights reserved.
.sp
Originated: 2015.03.26 Kenneth Gade, FFI
.sp
NOTES:
\- All angles are by default assumed to be in radians, if an angle is
in degrees, the variable name has the following ending: _deg
.INDENT 0.0
.IP \(bu 2
The dot product (inner product) of vectors x and y is written dot(x,y)
.UNINDENT
.sp
here to make the code more readable for those unfamiliar with
Matlab. In Matlab one would normally write x\(aq
.nf
*
.fi
y (i.e. x transposed
times y)
.INDENT 0.0
.TP
.B class nvector.tests.test_nvector.TestNvector(methodName=\(aqrunTest\(aq)
Bases: \fBunittest.case.TestCase\fP
.INDENT 7.0
.TP
.B test_Ex10_cross_track_distance()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex1_A_and_B_to_delta_in_frame_N()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex2_B_and_delta_in_frame_B_to_C_in_frame_E()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex3_ECEF_vector_to_geodetic_latitude()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex4_geodetic_latitude_to_ECEF_vector()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex5_great_circle_distance()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex6_interpolated_position()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex7_mean_position()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex8_position_A_and_azimuth_and_distance_to_B()
.UNINDENT
.INDENT 7.0
.TP
.B test_Ex9_intersection()
.UNINDENT
.UNINDENT
.SS Module contents
.SS Submodules
.SS nvector.info module
.SS Introduction to Nvector
.sp
Nvector is a suite of tools written in Python to solve geographical position
calculations like:
.INDENT 0.0
.IP \(bu 2
Calculate the surface distance between two geographical positions:*
.IP \(bu 2
Convert positions given in one reference frame into another reference frame*
.IP \(bu 2
Find the destination point given start position, azimuth/bearing and distance*
.IP \(bu 2
Find the mean position (center/midpoint) of several geographical positions.*
.IP \(bu 2
Find the intersection between two paths.*
.IP \(bu 2
Find the cross track distance between a path and a position.*
.UNINDENT
.sp
In this library, we represent position with an "n\-vector",  which
is the normal vector to the Earth model (the same reference ellipsoid that is
used for latitude and longitude). When using n\-vector, all Earth\-positions are
treated equally, and there is no need to worry about singularities or
discontinuities. An additional benefit with using n\-vector is that many
position calculations can be solved with simple vector algebra
(e.g. dot product and cross product).
.sp
Converting between n\-vector and latitude/longitude is unambiguous and easy
using the provided functions.
.sp
n_E is n\-vector in the program code, while in documents we use nE. E denotes
an Earth\-fixed coordinate frame, and it indicates that the three components of
n\-vector are along the three axes of E. More details about the notation used
are found here:  \fI\%http://www.navlab.net/nvector/\fP
.sp
The core functions provided are:
.INDENT 0.0
.TP
.B \fIlat_lon2n_E:\fP
Converts latitude and longitude to n\-vector.
.TP
.B \fIn_E2lat_lon:\fP
Converts n\-vector to latitude and longitude.
.TP
.B \fIn_EB_E2p_EB_E:\fP
Converts n\-vector to Cartesian position vector in meters.
.TP
.B \fIp_EB_E2n_EB_E:\fP
Converts Cartesian position vector in meters to n\-vector.
.TP
.B \fIn_EA_E_and_n_EB_E2p_AB_E:\fP
From two positions A and B, finds the delta position.
.UNINDENT
.sp
Nvector also provide an object oriented interface.
.INDENT 0.0
.TP
.B \fIFrameE:\fP
frame of reference rotates and moves with the Earth.
Origo = Earth\(aqs centre.
z\-axis\->North, x\-axis\->Latitude=Longitude=0
.TP
.B \fIFrameB:\fP
frame of reference rotates and moves with Body.
Origo = Body\(aqs centre.
x\-axis \-> forward, y\-axis \-> starboard, z\-axis \-> down
.TP
.B \fIFrameN:\fP
frame of reference moves with Body and rotates with Earth.
Origo = Beneath/above Body at Earth\(aqs surface.
x\-axis \-> North, y\-axis \-> East, z\-axis \-> down
.TP
.B \fIFrameL:\fP
frame of reference moves with Body, but does not rotate with Earth.
Origo = Beneath/above Body at Earth\(aqs surface.
.TP
.B \fIECEFvector:\fP
Geographical position given as Cartesian position vector in frame E
.TP
.B \fIGeoPoint:\fP
Geographical position given as latitude, longitude, depth in frame E
.TP
.B \fINvector:\fP
Geographical position given as N\-vector and depth in frame E
.TP
.B \fIGeoPath:\fP
Geodesic path between two points in Frame E
.UNINDENT
.sp
Documentation is at: \fI\%http://www.navlab.net/nvector/\fP
.sp
Code and issue tracker is at \fI\%https://github.com/pbrod/nvector\fP\&.
.sp
Latest stable release is at \fI\%http://pypi.python.org/pypi/Nvector\fP\&.
.sp
To test if the toolbox is working paste the following in an interactive
python session:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import nvector as nv
nv.test(coverage=True, doctests=True)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Getting Started
.sp
Example 1: "A and B to delta"
.sp
Given two positions, A and B as latitudes, longitudes and depths relative to
Earth, E.
.sp
Find the exact vector between the two positions, given in meters north, east,
and down, and find the direction (azimuth) to B, relative to north.
Assume WGS\-84 ellipsoid. The given depths are from the ellipsoid surface.
Use position A to define north, east, and down directions.
(Due to the curvature of Earth and different directions to the North Pole,
the north, east, and down directions will change (relative to Earth) for
different places.  A must be outside the poles for the north and east
directions to be defined.)
.INDENT 0.0
.TP
.B Solution:
.sp
.nf
.ft C
>>> import numpy as np
>>> import nvector as nv
>>> wgs84 = nv.FrameE(name=\(aqWGS84\(aq)
>>> pointA = wgs84.GeoPoint(latitude=1, longitude=2, z=3, degrees=True)
>>> pointB = wgs84.GeoPoint(latitude=4, longitude=5, z=6, degrees=True)
.ft P
.fi
.TP
.B Step 1: Convert to ECEF vectors
.sp
.nf
.ft C
>>> p_EA_E = pointA.to_ecef_vector()
>>> p_EB_E = pointB.to_ecef_vector()
.ft P
.fi
.TP
.B Step 2: Find p_AB_E (delta decomposed in E).
.sp
.nf
.ft C
>>> p_AB_E = p_EB_E \- p_EA_E  # (delta decomposed in E).
.ft P
.fi
.TP
.B Step 3: Find p_AB_N (delta decomposed in N).
.sp
.nf
.ft C
>>> frame_N = nv.FrameN(pointA)
>>> p_AB_N = p_AB_E.change_frame(frame_N)
>>> p_AB_N = p_AB_N.pvector.ravel()
>>> valtxt = \(aq{0:8.2f}, {1:8.2f}, {2:8.2f}\(aq.format(*p_AB_N)
>>> \(aqdelta north, east, down = {}\(aq.format(valtxt)
\(aqdelta north, east, down = 331730.23, 332997.87, 17404.27\(aq
.ft P
.fi
.TP
.B Step4: Also find the direction (azimuth) to B, relative to north:
.sp
.nf
.ft C
>>> azimuth = np.arctan2(p_AB_N[1], p_AB_N[0])
>>> \(aqazimuth = {0:4.2f} deg\(aq.format(np.rad2deg(azimuth))
\(aqazimuth = 45.11 deg\(aq
.ft P
.fi
.UNINDENT
.sp
Example 2: "B and delta to C"
.sp
A radar or sonar attached to a vehicle B (Body coordinate frame) measures the
distance and direction to an object C. We assume that the distance and two
angles (typically bearing and elevation relative to B) are already combined to
the vector p_BC_B (i.e. the vector from B to C, decomposed in B). The position
of B is given as n_EB_E and z_EB, and the orientation (attitude) of B is given
as R_NB (this rotation matrix can be found from roll/pitch/yaw by using zyx2R).
.sp
Find the exact position of object C as n\-vector and depth ( n_EC_E and z_EC ),
assuming Earth ellipsoid with semi\-major axis a and flattening f. For WGS\-72,
use a = 6 378 135 m and f = 1/298.26.
.INDENT 0.0
.TP
.B Solution:
.sp
.nf
.ft C
>>> import nvector as nv
>>> wgs72 = nv.FrameE(name=\(aqWGS72\(aq)
>>> wgs72 = nv.FrameE(a=6378135, f=1.0/298.26)
.ft P
.fi
.TP
.B Step 1: Position and orientation of B is given 400m above E:
.sp
.nf
.ft C
>>> n_EB_E = wgs72.Nvector(nv.unit([[1], [2], [3]]), z=\-400)
.ft P
.fi
.TP
.B Step 2: Delta BC decomposed in B
.sp
.nf
.ft C
>>> frame_B = nv.FrameB(n_EB_E, yaw=10, pitch=20, roll=30, degrees=True)
>>> p_BC_B = frame_B.Pvector(np.r_[3000, 2000, 100].reshape((\-1, 1)))
.ft P
.fi
.TP
.B Step 3: Decompose delta BC in E
.sp
.nf
.ft C
>>> p_BC_E = p_BC_B.to_ecef_vector()
.ft P
.fi
.TP
.B Step 4: Find point C by adding delta BC to EB
.sp
.nf
.ft C
>>> p_EB_E = n_EB_E.to_ecef_vector()
>>> p_EC_E = p_EB_E + p_BC_E
>>> pointC = p_EC_E.to_geo_point()
.ft P
.fi
.sp
.nf
.ft C
>>> lat, lon, z = pointC.latitude_deg, pointC.longitude_deg, pointC.z
>>> msg = \(aqPos C: lat, lon = {:4.2f}, {:4.2f} deg,  height = {:4.2f} m\(aq
>>> msg.format(lat[0], lon[0], \-z[0])
\(aqPos C: lat, lon = 53.33, 63.47 deg,  height = 406.01 m\(aq
.ft P
.fi
.UNINDENT
.sp
Example 3: "ECEF\-vector to geodetic latitude"
.sp
Position B is given as an "ECEF\-vector" p_EB_E (i.e. a vector from E, the
center of the Earth, to B, decomposed in E).
Find the geodetic latitude, longitude and height (latEB, lonEB and hEB),
assuming WGS\-84 ellipsoid.
.INDENT 0.0
.TP
.B Solution:
.sp
.nf
.ft C
>>> import nvector as nv
>>> wgs84 = nv.FrameE(name=\(aqWGS84\(aq)
>>> position_B = 6371e3 * np.vstack((0.9, \-1, 1.1))  # m
>>> p_EB_E = wgs84.ECEFvector(position_B)
.ft P
.fi
.TP
.B Step 1: Find position B as geodetic latitude, longitude and height
.sp
.nf
.ft C
>>> pointB = p_EB_E.to_geo_point()
.ft P
.fi
.TP
.B Step 2: Extract latitude and longitude in degrees
.sp
.nf
.ft C
>>> lat, lon, h = pointB.latitude_deg, pointB.longitude_deg, \-pointB.z
>>> msg = \(aqPos B: lat, lon = {:4.2f}, {:4.2f} deg, height = {:9.2f} m\(aq
>>> msg.format(lat[0], lon[0], h[0])
\(aqPos B: lat, lon = 39.38, \-48.01 deg, height = 4702059.83 m\(aq
.ft P
.fi
.UNINDENT
.sp
Example 4: "Geodetic latitude to ECEF\-vector"
.sp
.nf
.ft C
>>> wgs84 = nv.FrameE(name=\(aqWGS84\(aq)
>>> pointB = wgs84.GeoPoint(latitude=1, longitude=2, z=\-3, degrees=True)
>>> p_EB_E = pointB.to_ecef_vector()
>>> \(aqEx4: p_EB_E = {} m\(aq.format(p_EB_E.pvector.ravel())
\(aqEx4: p_EB_E = [ 6373290.27721828   222560.20067474   110568.82718179] m\(aq
.ft P
.fi
.sp
Example 5: "Surface distance"
.sp
Find the surface distance sAB (i.e. great circle distance) between two
positions A and B. The heights of A and B are ignored, i.e. if they don\(aqt have
zero height, we seek the distance between the points that are at the surface of
the Earth, directly above/below A and B. The Euclidean distance (chord length)
dAB should also be found. Use Earth radius 6371e3 m.
.INDENT 0.0
.TP
.B Solution:
.sp
.nf
.ft C
>>> frame_E = nv.FrameE(a=6371e3, f=0)
>>> positionA = frame_E.GeoPoint(latitude=88, longitude=0, degrees=True)
>>> positionB = frame_E.GeoPoint(latitude=89, longitude=\-170, degrees=True)
.ft P
.fi
.sp
.nf
.ft C
>>> s_AB, _azia, _azib = positionA.distance_and_azimuth(positionB)
>>> p_AB_E = positionB.to_ecef_vector() \- positionA.to_ecef_vector()
>>> d_AB = np.linalg.norm(p_AB_E.pvector, axis=0)[0]
.ft P
.fi
.sp
.nf
.ft C
>>> msg = \(aqGreat circle and Euclidean distance = {:5.2f} km, {:5.2f} km\(aq
>>> msg.format(s_AB / 1000, d_AB / 1000)
\(aqGreat circle and Euclidean distance = 332.46 km, 332.42 km\(aq
.ft P
.fi
.TP
.B Alternative solution:
.sp
.nf
.ft C
>>> path = nv.GeoPath(positionA, positionB)
>>> s_AB2 = path.track_distance(method=\(aqgreatcircle\(aq).ravel()
>>> d_AB2 = path.track_distance(method=\(aqeuclidean\(aq).ravel()
>>> msg.format(s_AB2[0] / 1000, d_AB2[0] / 1000)
\(aqGreat circle and Euclidean distance = 332.46 km, 332.42 km\(aq
.ft P
.fi
.TP
.B Exact solution for the WGS84 ellipsoid:
.sp
.nf
.ft C
>>> wgs84 = nv.FrameE(name=\(aqWGS84\(aq)
>>> point1 = wgs84.GeoPoint(latitude=88, longitude=0, degrees=True)
>>> point2 = wgs84.GeoPoint(latitude=89, longitude=\-170, degrees=True)
>>> s_12, _azi1, _azi2 = point1.distance_and_azimuth(point2)
.ft P
.fi
.sp
.nf
.ft C
>>> p_12_E = point2.to_ecef_vector() \- point1.to_ecef_vector()
>>> d_12 = np.linalg.norm(p_12_E.pvector, axis=0)[0]
>>> msg.format(s_12 / 1000, d_12 / 1000)
\(aqGreat circle and Euclidean distance = 333.95 km, 333.91 km\(aq
.ft P
.fi
.UNINDENT
.sp
Example 7: "Mean position"
.sp
Three positions A, B, and C are given as n\-vectors n_EA_E, n_EB_E, and n_EC_E.
Find the mean position, M, given as n_EM_E.
Note that the calculation is independent of the depths of the positions.
.INDENT 0.0
.TP
.B Solution:
.sp
.nf
.ft C
>>> points = nv.GeoPoint(latitude=[90, 60, 50],
\&...                      longitude=[0, 10, \-20], degrees=True)
>>> nvectors = points.to_nvector()
>>> n_EM_E = nvectors.mean_horizontal_position()
>>> g_EM_E = n_EM_E.to_geo_point()
>>> lat, lon = g_EM_E.latitude_deg, g_EM_E.longitude_deg
>>> msg = \(aqPos M: lat, lon = {:4.2f}, {:4.2f} deg\(aq
>>> msg.format(lat[0], lon[0])
\(aqPos M: lat, lon = 67.24, \-6.92 deg\(aq
.ft P
.fi
.UNINDENT
.sp
Example 8: "A and azimuth/distance to B"
.sp
We have an initial position A, direction of travel given as an azimuth
(bearing) relative to north (clockwise), and finally the
distance to travel along a great circle given as sAB.
Use Earth radius 6371e3 m to find the destination point B.
.sp
In geodesy this is known as "The first geodetic problem" or
"The direct geodetic problem" for a sphere, and we see that this is similar to
Example 2, but now the delta is given as an azimuth and a great circle
distance. ("The second/inverse geodetic problem" for a sphere is already
solved in Examples 1 and 5.)
.INDENT 0.0
.TP
.B Solution:
.sp
.nf
.ft C
>>> frame = nv.FrameE(a=6371e3, f=0)
>>> pointA = frame.GeoPoint(latitude=80, longitude=\-90, degrees=True)
>>> pointB, _azimuthb = pointA.geo_point(distance=1000, azimuth=200,
\&...                                      degrees=True)
>>> latB, lonB = pointB.latitude_deg, pointB.longitude_deg
.ft P
.fi
.sp
.nf
.ft C
>>> \(aqEx8, Destination: lat, lon = {:4.2f}, {:4.2f} deg\(aq.format(latB, lonB)
\(aqEx8, Destination: lat, lon = 79.99, \-90.02 deg\(aq
.ft P
.fi
.UNINDENT
.sp
Example 9: "Intersection of two paths"
.sp
Define a path from two given positions (at the surface of a spherical Earth),
as the great circle that goes through the two points.
.sp
Path A is given by A1 and A2, while path B is given by B1 and B2.
.sp
Find the position C where the two paths intersect.
.sp
Solution 9:
.sp
.nf
.ft C
>>> pointA1 = nv.GeoPoint(10, 20, degrees=True)
>>> pointA2 = nv.GeoPoint(30, 40, degrees=True)
>>> pointB1 = nv.GeoPoint(50, 60, degrees=True)
>>> pointB2 = nv.GeoPoint(70, 80, degrees=True)
>>> pathA = nv.GeoPath(pointA1, pointA2)
>>> pathB = nv.GeoPath(pointB1, pointB2)
.ft P
.fi
.sp
.nf
.ft C
>>> pointC = pathA.intersection(pathB)
.ft P
.fi
.sp
.nf
.ft C
>>> lat, lon = pointC.latitude_deg, pointC.longitude_deg
>>> msg = \(aqEx9, Intersection: lat, long = {:4.2f}, {:4.2f} deg\(aq
>>> msg.format(lat[0], lon[0])
\(aqEx9, Intersection: lat, long = 40.32, 55.90 deg\(aq
.ft P
.fi
.sp
Example 10: "Cross track distance"
.sp
Path A is given by the two positions A1 and A2 (similar to the previous
example).
.sp
Find the cross track distance sxt between the path A (i.e. the great circle
through A1 and A2) and the position B (i.e. the shortest distance at the
surface, between the great circle and B).
.sp
Also find the Euclidean distance dxt between B and the plane defined by the
great circle. Use Earth radius 6371e3.
.INDENT 0.0
.TP
.B Solution 10:
.sp
.nf
.ft C
>>> frame = nv.FrameE(a=6371e3, f=0)
>>> pointA1 = frame.GeoPoint(0, 0, degrees=True)
>>> pointA2 = frame.GeoPoint(10, 0, degrees=True)
>>> pointB = frame.GeoPoint(1, 0.1, degrees=True)
.ft P
.fi
.sp
.nf
.ft C
>>> pathA = nv.GeoPath(pointA1, pointA2)
.ft P
.fi
.sp
.nf
.ft C
>>> s_xt = pathA.cross_track_distance(pointB, method=\(aqgreatcircle\(aq).ravel()
>>> d_xt = pathA.cross_track_distance(pointB, method=\(aqeuclidean\(aq).ravel()
>>> val_txt = \(aq{:4.2f} km, {:4.2f} km\(aq.format(s_xt[0]/1000, d_xt[0]/1000)
>>> msg = \(aqcross track distance from path A to position B\(aq
>>> \(aq{}, s_xt, d_xt = {}\(aq.format(msg, val_txt)
\(aqcross track distance from path A to position B, s_xt, d_xt = 11.12 km, 11.12 km\(aq
.ft P
.fi
.UNINDENT
.sp
Below we also give the functional solutions to example 1.
.INDENT 0.0
.TP
.B Example 1: Find the exact vector between the two positions, given in meters
north, east, and down, i.e. find p_AB_N:
.UNINDENT
.sp
.nf
.ft C
>>> import numpy as np
>>> import nvector as nv
>>> from nvector import rad, deg
.ft P
.fi
.sp
.nf
.ft C
>>> lat_EA, lon_EA, z_EA = rad(1), rad(2), 3
>>> lat_EB, lon_EB, z_EB = rad(4), rad(5), 6
.ft P
.fi
.sp
SOLUTION:
Step1: Convert to n\-vectors:
.sp
.nf
.ft C
>>> n_EA_E = nv.lat_lon2n_E(lat_EA, lon_EA)
>>> n_EB_E = nv.lat_lon2n_E(lat_EB, lon_EB)
.ft P
.fi
.sp
Step2: Find p_AB_E (delta decomposed in E).
WGS\-84 ellipsoid is default:
.sp
.nf
.ft C
>>> p_AB_E = nv.n_EA_E_and_n_EB_E2p_AB_E(n_EA_E, n_EB_E, z_EA, z_EB)
.ft P
.fi
.INDENT 0.0
.TP
.B Step3: Find R_EN for position A:
.sp
.nf
.ft C
>>> R_EN = nv.n_E2R_EN(n_EA_E)
.ft P
.fi
.TP
.B Step4: Find p_AB_N (delta decomposed in N).
.sp
.nf
.ft C
>>> p_AB_N = np.dot(R_EN.T, p_AB_E).ravel()
>>> \(aqdelta north, east, down = {0:8.2f}, {1:8.2f}, {2:8.2f}\(aq.format(*p_AB_N)
\(aqdelta north, east, down = 331730.23, 332997.87, 17404.27\(aq
.ft P
.fi
.TP
.B Step5: Also find the direction (azimuth) to B, relative to north:
.sp
.nf
.ft C
>>> azimuth = np.arctan2(p_AB_N[1], p_AB_N[0]) # positive angle about down\-axis
>>> \(aqazimuth = {0:4.2f} deg\(aq.format(deg(azimuth))
\(aqazimuth = 45.11 deg\(aq
.ft P
.fi
.UNINDENT
.SS See also
.sp
geographiclib
.INDENT 0.0
.TP
.B nvector.info.test_docstrings()
.UNINDENT
.SS nvector.navigator module
.sp
Module providing function and classes for  calculating distances and
bearing from ship to sensor as well as the position of the sensor relative to
the ship.
.INDENT 0.0
.TP
.B class nvector.navigator.Navigator(source=None)
Bases: \fBnvector.navigator.Subject\fP
.sp
Reads ship and sensor positions from file, and calculates distance and
bearing from ship to sensor as well as the position of the sensor relative
to the ship.
.sp
source : BufferSource
.INDENT 7.0
.TP
.B distance
real scalar
distance from gps to sensor
.TP
.B bearing
real scalar
angle formed by North\-pole, gps\-position and sensor\-position
.TP
.B true_heading
real scalar
of ship
.TP
.B speed: real scalar
of ship in knots
.UNINDENT
.sp
relative_position :
.INDENT 7.0
.TP
.B handle_sample()
Handles the next sentences and processes them
.UNINDENT
.INDENT 7.0
.TP
.B set_sample_time(sample_time)
.UNINDENT
.INDENT 7.0
.TP
.B update_source(source)
Updates source and initializes sensor location
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nvector.navigator.NmeaFileReader(file_path)
Bases: \fI\%object\fP
.INDENT 7.0
.TP
.B file_path
string
file name with path
.UNINDENT
.INDENT 7.0
.TP
.B get_data()
Return all data from the NMEA file
.UNINDENT
.INDENT 7.0
.TP
.B iget_data()
Iterates over data from NMEA file
.UNINDENT
.UNINDENT
.SS nvector.ngs module
.sp
Vincenty\(aqs formulae are two related iterative methods used in geodesy to
calculate the distance between two points on the surface of a spheroid,
developed by Thaddeus Vincenty (1975a) They are based on the assumption that
the figure of the Earth is an oblate spheroid, and hence are more accurate than
methods such as great\-circle distance which assume a spherical Earth.
The first (direct) method computes the location of a point which is a given
distance and azimuth (direction) from another point. The second (inverse)
method computes the geographical distance and azimuth between two given points.
They have been widely used in geodesy because they are accurate to within
0.5 mm (0.020\(aq\(aq) on the Earth ellipsoid.
.SS Reference
.INDENT 0.0
.INDENT 3.5
name:      inverse
version:   201105.xx
author:    stephen j. frakes
last mod:  dr. dennis milbert
purpose:   to compute a geodetic inverse
.INDENT 0.0
.INDENT 3.5
and then display output information
.UNINDENT
.UNINDENT
.sp
a                semimajor axis equatorial (in meters)
f                flattening
b                semiminor axis polar (in meters)
baz              azimuth back (in radians)
.sp
dlon             temporary value for difference in longitude (radians)
.sp
edist            ellipsoid distance (in meters)
elips            ellipsoid choice
.sp
faz              azimuth forward (in radians)
.sp
finv             reciprocal flattening
.sp
option           user prompt response
.sp
name1            name of station one
glat1,glon1      station one       \- (lat & lon in radians )
.sp
name2            name of station two
glat2,glon2      station two       \- (lat & lon in radians )
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nvector.ngs.Geodesic(a=6378137, f=0.0033528106647474805, name=\(aq\(aq)
Bases: \fI\%object\fP
.sp
Solve geodesic problems.
.sp
The following illustrates its use
.sp
.nf
.ft C
>>> import numpy as np
>>> from ngs import Geodesic
.ft P
.fi
.sp
.nf
.ft C
>>> wgs84 = Geodesic(name=\(aqWGS84\(aq)
.ft P
.fi
.sp
# The geodesic inverse problem
>>> lat1, lon1 = np.deg2rad((\-41.32, 174.81))
>>> lat2, lon2 = np.deg2rad((40.96, \-5.50))
>>> s12, az1, az2 = wgs84.inverse(lat1, lon1, lat2, lon2)[:3]
.sp
# The geodesic direct problem
>>> lat1, lon1, az1 = np.deg2rad((40.6, \-73.8, 45))
>>> lat2, lon2, az2 = wgs84.direct(lat1, lon1, az1, 10000e3)
.sp
All angles (latitudes, longitudes, azimuths, spherical arc lengths)
are measured in radians.  Latitudes must lie in [\-pi/2,pi/2].  All lengths
(distance, reduced length) are measured in meters.
.INDENT 7.0
.TP
.B direct(lat1, lon1, faz, S)
SOLUTION OF THE GEODETIC DIRECT PROBLEM AFTER T.VINCENTY
MODIFIED RAINSFORD\(aqS METHOD WITH HELMERT\(aqS ELLIPTICAL TERMS
EFFECTIVE IN ANY AZIMUTH AND AT ANY DISTANCE SHORT OF ANTIPODAL
.sp
A IS THE SEMI\-MAJOR AXIS OF THE REFERENCE ELLIPSOID
F IS THE FLATTENING OF THE REFERENCE ELLIPSOID
LATITUDES AND LONGITUDES IN RADIANS POSITIVE NORTH AND EAST
AZIMUTHS IN RADIANS CLOCKWISE FROM NORTH
GEODESIC DISTANCE S ASSUMED IN UNITS OF SEMI\-MAJOR AXIS A
.sp
PROGRAMMED FOR CDC\-6600 BY LCDR L.PFEIFER NGS ROCKVILLE MD 20FEB75
MODIFIED FOR SYSTEM 360 BY JOHN G GERGEN NGS ROCKVILLE MD 750608
.UNINDENT
.INDENT 7.0
.TP
.B inverse(lat1, lon1, lat2, lon2)
Return ellipsoidal distance between points
inverse for long\-line and antipodal cases.
latitudes may be 90 degrees exactly.
latitude positive north, longitude positive east, radians.
azimuth clockwise from north, radians.
original programmed by thaddeus vincenty, 1975, 1976
removed back side solution option,
debugged, revised \-\- 2011may01 \-\- dgm
this version of code is interim \-\- antipodal boundary needs work
.INDENT 7.0
.TP
.B s12: real scalar
ellopsoidal distance between point 1 and 2
.TP
.B faz, baz: real scalars
forward and backward azimuth
.UNINDENT
.sp
sig,  spherical distance on auxiliary sphere
lam,  longitude difference on auxiliary sphere
kind, solution flag:  kind=1, long\-line;  kind=2, antipodal
it,   iteration count
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B nvector.ngs.main()
.UNINDENT
.INDENT 0.0
.TP
.B nvector.ngs.select_ellipsoid(name)
.UNINDENT
.SS nvector.objects module
.sp
Created on 29. des. 2015
.sp
@author: pab
.INDENT 0.0
.TP
.B class nvector.objects.FrameE(a=None, f=None, name=\(aqWGS84\(aq, north=\(aqz\(aq)
Bases: \fBnvector.objects._BaseFrame\fP
.INDENT 7.0
.TP
.B Name:
Earth
.TP
.B Position:
The origin coincides with Earth\(aqs centre (geometrical centre of
ellipsoid model).
.TP
.B Orientation:
The x\-axis is along the Earth\(aqs rotation axis, pointing north
(the yz\-plane coincides with the equatorial plane), the y\-axis points
towards longitude +90x (east).
.TP
.B Comments:
The frame is Earth\-fixed (rotates and moves with the Earth). The choice
of axis directions ensures that at zero latitude and longitude, N
(described below) has the same orientation as E. If roll/pitch/yaw are
zero, also B (described below) has this orientation. Note that these
properties are not valid for another common choice of the axis
directions, denoted e (lower case), which has z pointing north and x
pointing to latitude=longitude=0.
.UNINDENT
.INDENT 7.0
.TP
.B ECEFvector(*args, **kwds)
.UNINDENT
.INDENT 7.0
.TP
.B GeoPoint(*args, **kwds)
.UNINDENT
.INDENT 7.0
.TP
.B Nvector(*args, **kwds)
.UNINDENT
.INDENT 7.0
.TP
.B direct(lat_a, lon_a, azimuth, distance, z=0, long_unroll=False, degrees=False)
.UNINDENT
.INDENT 7.0
.TP
.B inverse(lat_a, lon_a, lat_b, lon_b, z=0, long_unroll=False, degrees=False)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nvector.objects.FrameB(position, yaw=0, pitch=0, roll=0, degrees=False)
Bases: \fI\%nvector.objects.FrameN\fP
.INDENT 7.0
.TP
.B Name:
Body (typically of a vehicle)
.TP
.B Position:
The origin is in the vehicle\(aqs reference point.
.TP
.B Orientation:
The x\-axis points forward, the y\-axis to the right (starboard) and the
z\-axis in the vehicle\(aqs down direction.
.TP
.B Comments:
The frame is fixed to the vehicle.
.UNINDENT
.INDENT 7.0
.TP
.B R_EN
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nvector.objects.FrameL(position, wander_azimuth=0)
Bases: \fI\%nvector.objects.FrameN\fP
.INDENT 7.0
.TP
.B Name:
Local level, Wander azimuth
.TP
.B Position:
The origin is directly beneath or above the vehicle (B), at Earth\(aqs
surface (surface of ellipsoid model).
.TP
.B Orientation:
The z\-axis is pointing down. Initially, the x\-axis points towards
north, and the y\-axis points towards east, but as the vehicle moves
they are not rotating about the z\-axis (their angular velocity relative
to the Earth has zero component along the z\-axis).
(Note: Any initial horizontal direction of the x\- and y\-axes is valid
for L, but if the initial position is outside the poles, north and east
are usually chosen for convenience.)
.TP
.B Comments:
The L\-frame is equal to the N\-frame except for the rotation about the
z\-axis, which is always zero for this frame (relative to E). Hence, at
a given time, the only difference between the frames is an angle
between the x\-axis of L and the north direction; this angle is called
the wander azimuth angle. The L\-frame is well suited for general
calculations, as it is non\-singular.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nvector.objects.FrameN(position)
Bases: \fBnvector.objects._BaseFrame\fP
.INDENT 7.0
.TP
.B Name:
North\-East\-Down (local level)
.TP
.B Position:
The origin is directly beneath or above the vehicle (B), at Earth\(aqs
surface (surface of ellipsoid model).
.TP
.B Orientation:
The x\-axis points towards north, the y\-axis points towards east
(both are horizontal), and the z\-axis is pointing down.
.TP
.B Comments:
When moving relative to the Earth, the frame rotates about its z\-axis
to allow the x\-axis to always point towards north. When getting close
to the poles this rotation rate will increase, being infinite at the
poles. The poles are thus singularities and the direction of the
x\- and y\-axes are not defined here. Hence, this coordinate frame is
NOT SUITABLE for general calculations.
.UNINDENT
.INDENT 7.0
.TP
.B Pvector(pvector)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nvector.objects.GeoPoint(latitude, longitude, z=0, frame=None, degrees=False)
Bases: \fI\%object\fP
.sp
Geographical position given as latitude, longitude, depth in frame E
.INDENT 7.0
.TP
.B latitude, longitude: real scalars or vectors of length n.
Geodetic latitude and longitude given in [rad or deg]
.TP
.B z: real scalar or vector of length n.
Depth(s) [m]  relative to the ellipsoid (depth = \-height)
.TP
.B frame: FrameE object
reference ellipsoid. The default ellipsoid model used is WGS84, but
other ellipsoids/spheres might be specified.
.TP
.B degrees: bool
True if input are given in degrees otherwise radians are assumed.
.UNINDENT
.sp
Solve geodesic problems.
.sp
The following illustrates its use
.sp
.nf
.ft C
>>> import nvector as nv
>>> wgs84 = nv.FrameE(name=\(aqWGS84\(aq)
.ft P
.fi
.sp
# The geodesic inverse problem
>>> point1 = wgs84.GeoPoint(\-41.32, 174.81, degrees=True))
>>> point2 = wgs84.GeoPoint(40.96, \-5.50, degrees=True)
>>> s12, az1, az2 = point1.distance_and_azimuth(point2, degrees=True)
>>> \(aqs12 = {:5.2f}, az1 = {:5.2f}, az2 = {:5.2f}\(aq.format(s12, az1, az2)
\(aqs12 = 19959679.27, az1 = 161.07, az2 = 18.83\(aq
.sp
# The geodesic direct problem
>>> point1 = wgs84.GeoPoint(40.6, \-73.8, degrees=True)
>>> az1, distance = 45, 10000e3
>>> point2, az2 = point1.geo_point(distance, az1, degrees=True)
>>> lat2, lon2 = point2.latitude_deg, point2.longitude_deg
>>> \(aqlat2 = {:5.2f}, lon2 = {:5.2f}, az2 = {:5.2f}\(aq.format(lat2, lon2, az2)
\(aqlat2 = 32.64, lon2 = 49.01, az2 = 140.37\(aq
.INDENT 7.0
.TP
.B distance_and_azimuth(point, long_unroll=False, degrees=False)
Return ellipsoidal distance between positions as well as the direction.
.INDENT 7.0
.TP
.B point:  GeoPoint object
Latitude and longitude of position B.
.TP
.B degrees: bool
azimuths are returned in degrees if True otherwise in radians.
.UNINDENT
.INDENT 7.0
.TP
.B s_ab: real scalar
ellipsoidal distance [m] between position A and B.
.TP
.B azimuth_a, azimuth_b
direction [rad or deg] of line at position A and B relative to
North, respectively.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B geo_point(distance, azimuth, long_unroll=False, degrees=False)
Return position B computed from current position, distance and azimuth.
.INDENT 7.0
.TP
.B distance: real scalar
ellipsoidal distance [m] between position A and B.
.TP
.B azimuth_a:
azimuth [rad or deg] of line at position A.
.TP
.B degrees: bool
azimuths are given in degrees if True otherwise in radians.
.UNINDENT
.INDENT 7.0
.TP
.B point_b:  GeoPoint object
latitude and longitude of position B.
.TP
.B azimuth_b
azimuth [rad or deg] of line at position B.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B latitude_deg
.UNINDENT
.INDENT 7.0
.TP
.B longitude_deg
.UNINDENT
.INDENT 7.0
.TP
.B ravel(degrees=False)
.UNINDENT
.INDENT 7.0
.TP
.B to_ecef_vector()
.UNINDENT
.INDENT 7.0
.TP
.B to_nvector()
Converts latitude and longitude to n\-vector.
.INDENT 7.0
.TP
.B latitude, longitude: real scalars or vectors of length n.
Geodetic latitude and longitude given in [rad]
.UNINDENT
.INDENT 7.0
.TP
.B n_E: 3 x n array
n\-vector(s) [no unit] decomposed in E.
.UNINDENT
.sp
n_E2lat_lon.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nvector.objects.GeoPath(point1, point2)
Bases: \fI\%object\fP
.sp
Geographical path between two points in Frame E
.INDENT 7.0
.TP
.B cross_track_distance(point, method=\(aqgreatcircle\(aq, radius=None)
Return cross track distance from the path to a point.
.INDENT 7.0
.TP
.B point: GeoPoint, Nvector or ECEFvector object
position to measure the cross track distance to.
.TP
.B radius: real scalar
radius of sphere in [m]. Default mean Earth radius
.TP
.B method: string
defining distance calculated. Options are:
\(aqgreatcircle\(aq or \(aqeuclidean\(aq
.UNINDENT
.INDENT 7.0
.TP
.B distance: real scalar
distance in [m]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B intersection(path)
Return the intersection between the paths
.INDENT 7.0
.TP
.B path: GeoPath object
path to intersect
.UNINDENT
.INDENT 7.0
.TP
.B point: GeoPoint
point of intersection between paths
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B nvectors()
.UNINDENT
.INDENT 7.0
.TP
.B track_distance(method=\(aqgreatcircle\(aq, radius=None)
Return the distance of the path.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nvector.objects.Nvector(normal, z=0, frame=None)
Bases: \fI\%object\fP
.sp
Geographical position given as N\-vector and depth in frame E
.INDENT 7.0
.TP
.B normal: 3 x n array
n\-vector(s) [no unit] decomposed in E.
.TP
.B z: real scalar or vector of length n.
Depth(s) [m]  relative to the ellipsoid (depth = \-height)
.TP
.B frame: FrameE object
reference ellipsoid. The default ellipsoid model used is WGS84, but
other ellipsoids/spheres might be specified.
.UNINDENT
.sp
The position of B (typically body) relative to E (typically Earth) is
given into this function as n\-vector, n_EB_E and a depth, z relative to the
ellipsiod.
.sp
GeoPoint, ECEFvector, Pvector
.INDENT 7.0
.TP
.B mean_horizontal_position()
Return the n\-vector of the horizontal mean position.
.INDENT 7.0
.TP
.B p_EM_E:  3 x 1 array
n\-vector [no unit] of the mean position, decomposed in E.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B to_ecef_vector()
Converts n\-vector to Cartesian position vector ("ECEF\-vector")
.INDENT 7.0
.TP
.B p_EB_E:  ECEFvector object
Cartesian position vector(s) from E to B, decomposed in E.
.UNINDENT
.sp
The calculation is excact, taking the ellipsity of the Earth into
account. It is also non\-singular as both n\-vector and p\-vector are
non\-singular (except for the center of the Earth).
.sp
n_EB_E2p_EB_E, ECEFvector, Pvector, GeoPoint
.UNINDENT
.INDENT 7.0
.TP
.B to_geo_point()
Converts n\-vector to geo\-point.
.sp
n_E2lat_lon, GeoPoint, ECEFvector, Pvector
.UNINDENT
.INDENT 7.0
.TP
.B to_nvector()
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nvector.objects.Pvector(pvector, frame)
Bases: \fI\%object\fP
.INDENT 7.0
.TP
.B to_ecef_vector()
.UNINDENT
.INDENT 7.0
.TP
.B to_geo_point()
.UNINDENT
.INDENT 7.0
.TP
.B to_nvector()
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class nvector.objects.ECEFvector(pvector, frame=None)
Bases: \fI\%object\fP
.sp
Geographical position given as Cartesian position vector in frame E
.INDENT 7.0
.TP
.B pvector: 3 x n array
Cartesian position vector(s) [m] from E to B, decomposed in E.
.TP
.B frame: FrameE object
reference ellipsoid. The default ellipsoid model used is WGS84, but
other ellipsoids/spheres might be specified.
.UNINDENT
.sp
The position of B (typically body) relative to E (typically Earth) is
given into this function as p\-vector, p_EB_E relative to the center of the
frame.
.sp
GeoPoint, ECEFvector, Pvector
.INDENT 7.0
.TP
.B change_frame(frame)
Converts to Cartesian position vector in another frame
.INDENT 7.0
.TP
.B frame: FrameB, FrameN or frameL object
Frame N used to convert p_AB_E (position vector from A to B,
decomposed in E) to p_AB_N.
.UNINDENT
.INDENT 7.0
.TP
.B p_AB_N:  Pvector object
position vector from A to B, decomposed in frame N.
.UNINDENT
.sp
n_EB_E2p_EB_E, n_EA_E_and_p_AB_E2n_EB_E, n_EA_E_and_n_EB_E2p_AB_E.
.UNINDENT
.INDENT 7.0
.TP
.B to_geo_point()
Converts ECEF\-vector to geo\-point.
.INDENT 7.0
.TP
.B point: GeoPoint object
containing geodetic latitude and longitude given in [rad or deg]
and depth, z, relative to the ellipsoid (depth = \-height).
.UNINDENT
.sp
n_E2lat_lon, n_EB_E2p_EB_E,  GeoPoint, Nvector, ECEFvector, Pvector
.UNINDENT
.INDENT 7.0
.TP
.B to_nvector()
Converts Cartesian position vector to n\-vector.
.INDENT 7.0
.TP
.B n_EB_E:  Nvector object
n\-vector(s) [no unit] of position B, decomposed in E.
.UNINDENT
.sp
The calculation is excact, taking the ellipsity of the Earth into
account. It is also non\-singular as both n\-vector and p\-vector are
non\-singular (except for the center of the Earth).
.sp
n_EB_E2p_EB_E, Nvector
.UNINDENT
.UNINDENT
.SS nvector.plot module
.sp
Created on 9. des. 2015
.sp
@author: pab
.INDENT 0.0
.TP
.B nvector.plot.plot_mean_position()
.UNINDENT
.INDENT 0.0
.TP
.B nvector.plot.plot_world(map1)
.INDENT 7.0
.TP
.B map1: Basemap object
map1 to plot.
.UNINDENT
.UNINDENT
.SS nvector.skeleton module
.sp
This is a skeleton file that can serve as a starting point for a Python
console script. To run this script uncomment the following line in the
entry_points section in setup.cfg:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B console_scripts =
hello_world = nvector.module:function
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Then run \fIpython setup.py install\fP which will install the command \fIhello_world\fP
inside your current environment.
Besides console scripts, the header (i.e. until _logger...) of this file can
also be used as template for Python modules.
.sp
Note: This skeleton file can be safely removed if not needed!
.INDENT 0.0
.TP
.B nvector.skeleton.main(args)
.UNINDENT
.INDENT 0.0
.TP
.B nvector.skeleton.parse_args(args)
Parse command line parameters
.INDENT 7.0
.TP
.B Parameters
\fBargs\fP \-\- command line parameters as list of strings
.TP
.B Returns
command line parameters as \fI\%argparse.Namespace\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B nvector.skeleton.run()
.UNINDENT
.SS Module contents
.SS Introduction to Nvector
.sp
Nvector is a suite of tools written in Python to solve geographical position
calculations like:
.INDENT 0.0
.IP \(bu 2
Calculate the surface distance between two geographical positions:*
.IP \(bu 2
Convert positions given in one reference frame into another reference frame*
.IP \(bu 2
Find the destination point given start position, azimuth/bearing and distance*
.IP \(bu 2
Find the mean position (center/midpoint) of several geographical positions.*
.IP \(bu 2
Find the intersection between two paths.*
.IP \(bu 2
Find the cross track distance between a path and a position.*
.UNINDENT
.sp
In this library, we represent position with an "n\-vector",  which
is the normal vector to the Earth model (the same reference ellipsoid that is
used for latitude and longitude). When using n\-vector, all Earth\-positions are
treated equally, and there is no need to worry about singularities or
discontinuities. An additional benefit with using n\-vector is that many
position calculations can be solved with simple vector algebra
(e.g. dot product and cross product).
.sp
Converting between n\-vector and latitude/longitude is unambiguous and easy
using the provided functions.
.sp
n_E is n\-vector in the program code, while in documents we use nE. E denotes
an Earth\-fixed coordinate frame, and it indicates that the three components of
n\-vector are along the three axes of E. More details about the notation used
are found here:  \fI\%http://www.navlab.net/nvector/\fP
.sp
The core functions provided are:
.INDENT 0.0
.TP
.B \fIlat_lon2n_E:\fP
Converts latitude and longitude to n\-vector.
.TP
.B \fIn_E2lat_lon:\fP
Converts n\-vector to latitude and longitude.
.TP
.B \fIn_EB_E2p_EB_E:\fP
Converts n\-vector to Cartesian position vector in meters.
.TP
.B \fIp_EB_E2n_EB_E:\fP
Converts Cartesian position vector in meters to n\-vector.
.TP
.B \fIn_EA_E_and_n_EB_E2p_AB_E:\fP
From two positions A and B, finds the delta position.
.UNINDENT
.sp
Nvector also provide an object oriented interface.
.INDENT 0.0
.TP
.B \fIFrameE:\fP
frame of reference rotates and moves with the Earth.
Origo = Earth\(aqs centre.
z\-axis\->North, x\-axis\->Latitude=Longitude=0
.TP
.B \fIFrameB:\fP
frame of reference rotates and moves with Body.
Origo = Body\(aqs centre.
x\-axis \-> forward, y\-axis \-> starboard, z\-axis \-> down
.TP
.B \fIFrameN:\fP
frame of reference moves with Body and rotates with Earth.
Origo = Beneath/above Body at Earth\(aqs surface.
x\-axis \-> North, y\-axis \-> East, z\-axis \-> down
.TP
.B \fIFrameL:\fP
frame of reference moves with Body, but does not rotate with Earth.
Origo = Beneath/above Body at Earth\(aqs surface.
.TP
.B \fIECEFvector:\fP
Geographical position given as Cartesian position vector in frame E
.TP
.B \fIGeoPoint:\fP
Geographical position given as latitude, longitude, depth in frame E
.TP
.B \fINvector:\fP
Geographical position given as N\-vector and depth in frame E
.TP
.B \fIGeoPath:\fP
Geodesic path between two points in Frame E
.UNINDENT
.sp
Documentation is at: \fI\%http://www.navlab.net/nvector/\fP
.sp
Code and issue tracker is at \fI\%https://github.com/pbrod/nvector\fP\&.
.sp
Latest stable release is at \fI\%http://pypi.python.org/pypi/Nvector\fP\&.
.sp
To test if the toolbox is working paste the following in an interactive
python session:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
import nvector as nv
nv.test(coverage=True, doctests=True)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Getting Started
.sp
Example 1: "A and B to delta"
.sp
Given two positions, A and B as latitudes, longitudes and depths relative to
Earth, E.
.sp
Find the exact vector between the two positions, given in meters north, east,
and down, and find the direction (azimuth) to B, relative to north.
Assume WGS\-84 ellipsoid. The given depths are from the ellipsoid surface.
Use position A to define north, east, and down directions.
(Due to the curvature of Earth and different directions to the North Pole,
the north, east, and down directions will change (relative to Earth) for
different places.  A must be outside the poles for the north and east
directions to be defined.)
.INDENT 0.0
.TP
.B Solution:
.sp
.nf
.ft C
>>> import numpy as np
>>> import nvector as nv
>>> wgs84 = nv.FrameE(name=\(aqWGS84\(aq)
>>> pointA = wgs84.GeoPoint(latitude=1, longitude=2, z=3, degrees=True)
>>> pointB = wgs84.GeoPoint(latitude=4, longitude=5, z=6, degrees=True)
.ft P
.fi
.TP
.B Step 1: Convert to ECEF vectors
.sp
.nf
.ft C
>>> p_EA_E = pointA.to_ecef_vector()
>>> p_EB_E = pointB.to_ecef_vector()
.ft P
.fi
.TP
.B Step 2: Find p_AB_E (delta decomposed in E).
.sp
.nf
.ft C
>>> p_AB_E = p_EB_E \- p_EA_E  # (delta decomposed in E).
.ft P
.fi
.TP
.B Step 3: Find p_AB_N (delta decomposed in N).
.sp
.nf
.ft C
>>> frame_N = nv.FrameN(pointA)
>>> p_AB_N = p_AB_E.change_frame(frame_N)
>>> p_AB_N = p_AB_N.pvector.ravel()
>>> valtxt = \(aq{0:8.2f}, {1:8.2f}, {2:8.2f}\(aq.format(*p_AB_N)
>>> \(aqdelta north, east, down = {}\(aq.format(valtxt)
\(aqdelta north, east, down = 331730.23, 332997.87, 17404.27\(aq
.ft P
.fi
.TP
.B Step4: Also find the direction (azimuth) to B, relative to north:
.sp
.nf
.ft C
>>> azimuth = np.arctan2(p_AB_N[1], p_AB_N[0])
>>> \(aqazimuth = {0:4.2f} deg\(aq.format(np.rad2deg(azimuth))
\(aqazimuth = 45.11 deg\(aq
.ft P
.fi
.UNINDENT
.sp
Example 2: "B and delta to C"
.sp
A radar or sonar attached to a vehicle B (Body coordinate frame) measures the
distance and direction to an object C. We assume that the distance and two
angles (typically bearing and elevation relative to B) are already combined to
the vector p_BC_B (i.e. the vector from B to C, decomposed in B). The position
of B is given as n_EB_E and z_EB, and the orientation (attitude) of B is given
as R_NB (this rotation matrix can be found from roll/pitch/yaw by using zyx2R).
.sp
Find the exact position of object C as n\-vector and depth ( n_EC_E and z_EC ),
assuming Earth ellipsoid with semi\-major axis a and flattening f. For WGS\-72,
use a = 6 378 135 m and f = 1/298.26.
.INDENT 0.0
.TP
.B Solution:
.sp
.nf
.ft C
>>> import nvector as nv
>>> wgs72 = nv.FrameE(name=\(aqWGS72\(aq)
>>> wgs72 = nv.FrameE(a=6378135, f=1.0/298.26)
.ft P
.fi
.TP
.B Step 1: Position and orientation of B is given 400m above E:
.sp
.nf
.ft C
>>> n_EB_E = wgs72.Nvector(nv.unit([[1], [2], [3]]), z=\-400)
.ft P
.fi
.TP
.B Step 2: Delta BC decomposed in B
.sp
.nf
.ft C
>>> frame_B = nv.FrameB(n_EB_E, yaw=10, pitch=20, roll=30, degrees=True)
>>> p_BC_B = frame_B.Pvector(np.r_[3000, 2000, 100].reshape((\-1, 1)))
.ft P
.fi
.TP
.B Step 3: Decompose delta BC in E
.sp
.nf
.ft C
>>> p_BC_E = p_BC_B.to_ecef_vector()
.ft P
.fi
.TP
.B Step 4: Find point C by adding delta BC to EB
.sp
.nf
.ft C
>>> p_EB_E = n_EB_E.to_ecef_vector()
>>> p_EC_E = p_EB_E + p_BC_E
>>> pointC = p_EC_E.to_geo_point()
.ft P
.fi
.sp
.nf
.ft C
>>> lat, lon, z = pointC.latitude_deg, pointC.longitude_deg, pointC.z
>>> msg = \(aqPos C: lat, lon = {:4.2f}, {:4.2f} deg,  height = {:4.2f} m\(aq
>>> msg.format(lat[0], lon[0], \-z[0])
\(aqPos C: lat, lon = 53.33, 63.47 deg,  height = 406.01 m\(aq
.ft P
.fi
.UNINDENT
.sp
Example 3: "ECEF\-vector to geodetic latitude"
.sp
Position B is given as an "ECEF\-vector" p_EB_E (i.e. a vector from E, the
center of the Earth, to B, decomposed in E).
Find the geodetic latitude, longitude and height (latEB, lonEB and hEB),
assuming WGS\-84 ellipsoid.
.INDENT 0.0
.TP
.B Solution:
.sp
.nf
.ft C
>>> import nvector as nv
>>> wgs84 = nv.FrameE(name=\(aqWGS84\(aq)
>>> position_B = 6371e3 * np.vstack((0.9, \-1, 1.1))  # m
>>> p_EB_E = wgs84.ECEFvector(position_B)
.ft P
.fi
.TP
.B Step 1: Find position B as geodetic latitude, longitude and height
.sp
.nf
.ft C
>>> pointB = p_EB_E.to_geo_point()
.ft P
.fi
.TP
.B Step 2: Extract latitude and longitude in degrees
.sp
.nf
.ft C
>>> lat, lon, h = pointB.latitude_deg, pointB.longitude_deg, \-pointB.z
>>> msg = \(aqPos B: lat, lon = {:4.2f}, {:4.2f} deg, height = {:9.2f} m\(aq
>>> msg.format(lat[0], lon[0], h[0])
\(aqPos B: lat, lon = 39.38, \-48.01 deg, height = 4702059.83 m\(aq
.ft P
.fi
.UNINDENT
.sp
Example 4: "Geodetic latitude to ECEF\-vector"
.sp
.nf
.ft C
>>> wgs84 = nv.FrameE(name=\(aqWGS84\(aq)
>>> pointB = wgs84.GeoPoint(latitude=1, longitude=2, z=\-3, degrees=True)
>>> p_EB_E = pointB.to_ecef_vector()
>>> \(aqEx4: p_EB_E = {} m\(aq.format(p_EB_E.pvector.ravel())
\(aqEx4: p_EB_E = [ 6373290.27721828   222560.20067474   110568.82718179] m\(aq
.ft P
.fi
.sp
Example 5: "Surface distance"
.sp
Find the surface distance sAB (i.e. great circle distance) between two
positions A and B. The heights of A and B are ignored, i.e. if they don\(aqt have
zero height, we seek the distance between the points that are at the surface of
the Earth, directly above/below A and B. The Euclidean distance (chord length)
dAB should also be found. Use Earth radius 6371e3 m.
.INDENT 0.0
.TP
.B Solution:
.sp
.nf
.ft C
>>> frame_E = nv.FrameE(a=6371e3, f=0)
>>> positionA = frame_E.GeoPoint(latitude=88, longitude=0, degrees=True)
>>> positionB = frame_E.GeoPoint(latitude=89, longitude=\-170, degrees=True)
.ft P
.fi
.sp
.nf
.ft C
>>> s_AB, _azia, _azib = positionA.distance_and_azimuth(positionB)
>>> p_AB_E = positionB.to_ecef_vector() \- positionA.to_ecef_vector()
>>> d_AB = np.linalg.norm(p_AB_E.pvector, axis=0)[0]
.ft P
.fi
.sp
.nf
.ft C
>>> msg = \(aqGreat circle and Euclidean distance = {:5.2f} km, {:5.2f} km\(aq
>>> msg.format(s_AB / 1000, d_AB / 1000)
\(aqGreat circle and Euclidean distance = 332.46 km, 332.42 km\(aq
.ft P
.fi
.TP
.B Alternative solution:
.sp
.nf
.ft C
>>> path = nv.GeoPath(positionA, positionB)
>>> s_AB2 = path.track_distance(method=\(aqgreatcircle\(aq).ravel()
>>> d_AB2 = path.track_distance(method=\(aqeuclidean\(aq).ravel()
>>> msg.format(s_AB2[0] / 1000, d_AB2[0] / 1000)
\(aqGreat circle and Euclidean distance = 332.46 km, 332.42 km\(aq
.ft P
.fi
.TP
.B Exact solution for the WGS84 ellipsoid:
.sp
.nf
.ft C
>>> wgs84 = nv.FrameE(name=\(aqWGS84\(aq)
>>> point1 = wgs84.GeoPoint(latitude=88, longitude=0, degrees=True)
>>> point2 = wgs84.GeoPoint(latitude=89, longitude=\-170, degrees=True)
>>> s_12, _azi1, _azi2 = point1.distance_and_azimuth(point2)
.ft P
.fi
.sp
.nf
.ft C
>>> p_12_E = point2.to_ecef_vector() \- point1.to_ecef_vector()
>>> d_12 = np.linalg.norm(p_12_E.pvector, axis=0)[0]
>>> msg.format(s_12 / 1000, d_12 / 1000)
\(aqGreat circle and Euclidean distance = 333.95 km, 333.91 km\(aq
.ft P
.fi
.UNINDENT
.sp
Example 7: "Mean position"
.sp
Three positions A, B, and C are given as n\-vectors n_EA_E, n_EB_E, and n_EC_E.
Find the mean position, M, given as n_EM_E.
Note that the calculation is independent of the depths of the positions.
.INDENT 0.0
.TP
.B Solution:
.sp
.nf
.ft C
>>> points = nv.GeoPoint(latitude=[90, 60, 50],
\&...                      longitude=[0, 10, \-20], degrees=True)
>>> nvectors = points.to_nvector()
>>> n_EM_E = nvectors.mean_horizontal_position()
>>> g_EM_E = n_EM_E.to_geo_point()
>>> lat, lon = g_EM_E.latitude_deg, g_EM_E.longitude_deg
>>> msg = \(aqPos M: lat, lon = {:4.2f}, {:4.2f} deg\(aq
>>> msg.format(lat[0], lon[0])
\(aqPos M: lat, lon = 67.24, \-6.92 deg\(aq
.ft P
.fi
.UNINDENT
.sp
Example 8: "A and azimuth/distance to B"
.sp
We have an initial position A, direction of travel given as an azimuth
(bearing) relative to north (clockwise), and finally the
distance to travel along a great circle given as sAB.
Use Earth radius 6371e3 m to find the destination point B.
.sp
In geodesy this is known as "The first geodetic problem" or
"The direct geodetic problem" for a sphere, and we see that this is similar to
Example 2, but now the delta is given as an azimuth and a great circle
distance. ("The second/inverse geodetic problem" for a sphere is already
solved in Examples 1 and 5.)
.INDENT 0.0
.TP
.B Solution:
.sp
.nf
.ft C
>>> frame = nv.FrameE(a=6371e3, f=0)
>>> pointA = frame.GeoPoint(latitude=80, longitude=\-90, degrees=True)
>>> pointB, _azimuthb = pointA.geo_point(distance=1000, azimuth=200,
\&...                                      degrees=True)
>>> latB, lonB = pointB.latitude_deg, pointB.longitude_deg
.ft P
.fi
.sp
.nf
.ft C
>>> \(aqEx8, Destination: lat, lon = {:4.2f}, {:4.2f} deg\(aq.format(latB, lonB)
\(aqEx8, Destination: lat, lon = 79.99, \-90.02 deg\(aq
.ft P
.fi
.UNINDENT
.sp
Example 9: "Intersection of two paths"
.sp
Define a path from two given positions (at the surface of a spherical Earth),
as the great circle that goes through the two points.
.sp
Path A is given by A1 and A2, while path B is given by B1 and B2.
.sp
Find the position C where the two paths intersect.
.sp
Solution 9:
.sp
.nf
.ft C
>>> pointA1 = nv.GeoPoint(10, 20, degrees=True)
>>> pointA2 = nv.GeoPoint(30, 40, degrees=True)
>>> pointB1 = nv.GeoPoint(50, 60, degrees=True)
>>> pointB2 = nv.GeoPoint(70, 80, degrees=True)
>>> pathA = nv.GeoPath(pointA1, pointA2)
>>> pathB = nv.GeoPath(pointB1, pointB2)
.ft P
.fi
.sp
.nf
.ft C
>>> pointC = pathA.intersection(pathB)
.ft P
.fi
.sp
.nf
.ft C
>>> lat, lon = pointC.latitude_deg, pointC.longitude_deg
>>> msg = \(aqEx9, Intersection: lat, long = {:4.2f}, {:4.2f} deg\(aq
>>> msg.format(lat[0], lon[0])
\(aqEx9, Intersection: lat, long = 40.32, 55.90 deg\(aq
.ft P
.fi
.sp
Example 10: "Cross track distance"
.sp
Path A is given by the two positions A1 and A2 (similar to the previous
example).
.sp
Find the cross track distance sxt between the path A (i.e. the great circle
through A1 and A2) and the position B (i.e. the shortest distance at the
surface, between the great circle and B).
.sp
Also find the Euclidean distance dxt between B and the plane defined by the
great circle. Use Earth radius 6371e3.
.INDENT 0.0
.TP
.B Solution 10:
.sp
.nf
.ft C
>>> frame = nv.FrameE(a=6371e3, f=0)
>>> pointA1 = frame.GeoPoint(0, 0, degrees=True)
>>> pointA2 = frame.GeoPoint(10, 0, degrees=True)
>>> pointB = frame.GeoPoint(1, 0.1, degrees=True)
.ft P
.fi
.sp
.nf
.ft C
>>> pathA = nv.GeoPath(pointA1, pointA2)
.ft P
.fi
.sp
.nf
.ft C
>>> s_xt = pathA.cross_track_distance(pointB, method=\(aqgreatcircle\(aq).ravel()
>>> d_xt = pathA.cross_track_distance(pointB, method=\(aqeuclidean\(aq).ravel()
>>> val_txt = \(aq{:4.2f} km, {:4.2f} km\(aq.format(s_xt[0]/1000, d_xt[0]/1000)
>>> msg = \(aqcross track distance from path A to position B\(aq
>>> \(aq{}, s_xt, d_xt = {}\(aq.format(msg, val_txt)
\(aqcross track distance from path A to position B, s_xt, d_xt = 11.12 km, 11.12 km\(aq
.ft P
.fi
.UNINDENT
.sp
Below we also give the functional solutions to example 1.
.INDENT 0.0
.TP
.B Example 1: Find the exact vector between the two positions, given in meters
north, east, and down, i.e. find p_AB_N:
.UNINDENT
.sp
.nf
.ft C
>>> import numpy as np
>>> import nvector as nv
>>> from nvector import rad, deg
.ft P
.fi
.sp
.nf
.ft C
>>> lat_EA, lon_EA, z_EA = rad(1), rad(2), 3
>>> lat_EB, lon_EB, z_EB = rad(4), rad(5), 6
.ft P
.fi
.sp
SOLUTION:
Step1: Convert to n\-vectors:
.sp
.nf
.ft C
>>> n_EA_E = nv.lat_lon2n_E(lat_EA, lon_EA)
>>> n_EB_E = nv.lat_lon2n_E(lat_EB, lon_EB)
.ft P
.fi
.sp
Step2: Find p_AB_E (delta decomposed in E).
WGS\-84 ellipsoid is default:
.sp
.nf
.ft C
>>> p_AB_E = nv.n_EA_E_and_n_EB_E2p_AB_E(n_EA_E, n_EB_E, z_EA, z_EB)
.ft P
.fi
.INDENT 0.0
.TP
.B Step3: Find R_EN for position A:
.sp
.nf
.ft C
>>> R_EN = nv.n_E2R_EN(n_EA_E)
.ft P
.fi
.TP
.B Step4: Find p_AB_N (delta decomposed in N).
.sp
.nf
.ft C
>>> p_AB_N = np.dot(R_EN.T, p_AB_E).ravel()
>>> \(aqdelta north, east, down = {0:8.2f}, {1:8.2f}, {2:8.2f}\(aq.format(*p_AB_N)
\(aqdelta north, east, down = 331730.23, 332997.87, 17404.27\(aq
.ft P
.fi
.TP
.B Step5: Also find the direction (azimuth) to B, relative to north:
.sp
.nf
.ft C
>>> azimuth = np.arctan2(p_AB_N[1], p_AB_N[0]) # positive angle about down\-axis
>>> \(aqazimuth = {0:4.2f} deg\(aq.format(deg(azimuth))
\(aqazimuth = 45.11 deg\(aq
.ft P
.fi
.UNINDENT
.SS See also
.sp
geographiclib
.SH INDICES AND TABLES
.INDENT 0.0
.IP \(bu 2
genindex
.IP \(bu 2
modindex
.IP \(bu 2
search
.UNINDENT
.SH COPYRIGHT
2015, pbrod
.\" Generated by docutils manpage writer.
.
