# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TraceWindow.ui'
#
# Created: Thu Aug 15 22:30:31 2013
#      by: pyside-uic 0.2.14 running on PySide 1.1.2
#
# WARNING! All changes made in this file will be lost!

'''
@author:     Jose Emilio Romero Lopez

@copyright:  Copyright 2013-2014, Jose Emilio Romero Lopez.

@license:    GPL

@contact:    jemromerol@gmail.com

  This file is part of APASVO.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

from PySide import QtCore, QtGui
from apasvo.gui.views.generated import qrc_icons


class Ui_TraceWindow(object):
    def setupUi(self, TraceWindow):
        TraceWindow.setObjectName("TraceWindow")
        self.centralwidget = QtGui.QWidget(TraceWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setVisible(False)
        self.verticalLayout = QtGui.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.splitter = QtGui.QSplitter(self.centralwidget)
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setObjectName("splitter")
        self.verticalLayout.addWidget(self.splitter)
        self.EventsTableView = QtGui.QTableView(self.splitter)
        self.EventsTableView.setObjectName("EventsTableView")
        self.EventsTableView.horizontalHeader().setMovable(True)
        self.EventsTableView.setSortingEnabled(True)
        self.EventsTableView.horizontalHeader().setStretchLastSection(True)
        self.EventsTableView.resizeColumnsToContents()
        self.EventsTableView.verticalHeader().setVisible(True)
        self.EventsTableView.setSelectionBehavior(QtGui.QAbstractItemView.SelectRows)
        self.EventsTableView.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        TraceWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtGui.QMenuBar(TraceWindow)
        self.menubar.setObjectName("menubar")
        self.menuFile = QtGui.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtGui.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuView = QtGui.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuToolbars = QtGui.QMenu(self.menuView)
        self.menuToolbars.setObjectName("menuToolbars")
        self.menuSignal_Inspector = QtGui.QMenu(self.menuView)
        self.menuSignal_Inspector.setObjectName("menuSignal_Inspector")
        self.menuAnalysis = QtGui.QMenu(self.menubar)
        self.menuAnalysis.setObjectName("menuAnalysis")
        TraceWindow.setMenuBar(self.menubar)
        self.toolBarTrace = QtGui.QToolBar(TraceWindow)
        self.toolBarTrace.setObjectName("toolBarTrace")
        TraceWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBarTrace)
        self.toolBarAnalysis = QtGui.QToolBar(TraceWindow)
        self.toolBarAnalysis.setMovable(True)
        self.toolBarAnalysis.setFloatable(True)
        self.toolBarAnalysis.setObjectName("toolBarAnalysis")
        self.toolBarAnalysis.setEnabled(False)
        self.actionEvent_List = QtGui.QAction(TraceWindow)
        self.actionEvent_List.setCheckable(True)
        self.actionEvent_List.setChecked(True)
        self.actionEvent_List.setObjectName("actionEvent_List")
        self.actionSTA_LTA = QtGui.QAction(TraceWindow)
        self.actionSTA_LTA.setIcon(QtGui.QIcon(":/stalta.png"))
        self.actionSTA_LTA.setEnabled(False)
        self.actionSTA_LTA.setObjectName("actionSTA_LTA")
        self.actionAMPA = QtGui.QAction(TraceWindow)
        self.actionAMPA.setIcon(QtGui.QIcon(":/ampa.png"))
        self.actionAMPA.setEnabled(False)
        self.actionAMPA.setObjectName("actionAMPA")
        # create undo and redo actions
        self.command_stack = QtGui.QUndoStack(self)
        self.actionUndo = self.command_stack.createUndoAction(self)
        self.actionRedo = self.command_stack.createRedoAction(self)
        self.actionUndo.setIcon(QtGui.QIcon(":/undo.png"))
        self.actionUndo.setIconVisibleInMenu(True)
        self.actionRedo.setIcon(QtGui.QIcon(":/redo.png"))
        self.actionRedo.setIconVisibleInMenu(True)
        self.actionSaveCF = QtGui.QAction(TraceWindow)
        self.actionSaveCF.setEnabled(False)
        self.actionSaveCF.setIcon(QtGui.QIcon(":/save.png"))
        self.actionSaveCF.setIconVisibleInMenu(True)
        self.actionSaveCF.setObjectName("actionSaveCF")
        self.actionSaveCF_As = QtGui.QAction(TraceWindow)
        self.actionSaveCF_As.setEnabled(False)
        self.actionSaveCF_As.setIcon(QtGui.QIcon(":/save-as.png"))
        self.actionSaveCF_As.setIconVisibleInMenu(True)
        self.actionSaveCF_As.setObjectName("actionSaveCF_As")
        self.actionMedia_Toolbar = QtGui.QAction(TraceWindow)
        self.actionMedia_Toolbar.setCheckable(True)
        self.actionMedia_Toolbar.setChecked(True)
        self.actionMedia_Toolbar.setObjectName("actionMedia_Toolbar")
        self.actionNavigation_Toolbar = QtGui.QAction(TraceWindow)
        self.actionNavigation_Toolbar.setCheckable(True)
        self.actionNavigation_Toolbar.setChecked(True)
        self.actionNavigation_Toolbar.setObjectName("actionNavigation_Toolbar")
        self.actionClearRecent = QtGui.QAction(TraceWindow)
        self.actionClearRecent.setEnabled(False)
        self.actionClearRecent.setIcon(QtGui.QIcon(":/clear-list.png"))
        self.actionClearRecent.setIconVisibleInMenu(True)
        self.actionClearRecent.setObjectName("actionClearRecent")
        self.actionTakanami = QtGui.QAction(TraceWindow)
        self.actionTakanami.setIcon(QtGui.QIcon(":/takanami.png"))
        self.actionTakanami.setEnabled(False)
        self.actionTakanami.setObjectName("actionTakanami")
        self.actionSignal_Amplitude = QtGui.QAction(TraceWindow)
        self.actionSignal_Amplitude.setCheckable(True)
        self.actionSignal_Amplitude.setChecked(True)
        self.actionSignal_Amplitude.setObjectName("actionSignal_Amplitude")
        self.actionSignal_Envelope = QtGui.QAction(TraceWindow)
        self.actionSignal_Envelope.setCheckable(True)
        self.actionSignal_Envelope.setChecked(True)
        self.actionSignal_Envelope.setObjectName("actionSignal_Envelope")
        self.actionCharacteristic_Function = QtGui.QAction(TraceWindow)
        self.actionCharacteristic_Function.setCheckable(True)
        self.actionCharacteristic_Function.setChecked(False)
        self.actionCharacteristic_Function.setEnabled(False)
        self.actionCharacteristic_Function.setObjectName("actionCharacteristic_Function")
        self.actionEspectrogram = QtGui.QAction(TraceWindow)
        self.actionEspectrogram.setCheckable(True)
        self.actionEspectrogram.setChecked(True)
        self.actionEspectrogram.setObjectName("actionEspectrogram")
        self.actionTrace_Toolbar = QtGui.QAction(TraceWindow)
        self.actionTrace_Toolbar.setCheckable(True)
        self.actionTrace_Toolbar.setChecked(True)
        self.actionTrace_Toolbar.setObjectName("actionTrace_Toolbar")
        self.actionAnalysis_Toolbar = QtGui.QAction(TraceWindow)
        self.actionAnalysis_Toolbar.setCheckable(True)
        self.actionAnalysis_Toolbar.setChecked(True)
        self.actionAnalysis_Toolbar.setObjectName("actionAnalysis_Toolbar")
        self.actionSignal_MiniMap = QtGui.QAction(TraceWindow)
        self.actionSignal_MiniMap.setCheckable(True)
        self.actionSignal_MiniMap.setChecked(True)
        self.actionSignal_MiniMap.setObjectName("actionSignal_MiniMap")
        self.actionDelete_Selected = QtGui.QAction(TraceWindow)
        self.actionDelete_Selected.setEnabled(False)
        self.actionDelete_Selected.setObjectName("actionDelete_Selected")
        self.actionClear_Event_List = QtGui.QAction(TraceWindow)
        self.actionClear_Event_List.setEnabled(False)
        self.actionClear_Event_List.setObjectName("actionClear_Event_List")
        self.menuFile.addAction(self.actionSaveCF)
        self.menuFile.addAction(self.actionSaveCF_As)
        self.menuFile.addSeparator()
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionDelete_Selected)
        self.menuEdit.addAction(self.actionClear_Event_List)
        self.menuToolbars.addAction(self.actionTrace_Toolbar)
        self.menuToolbars.addAction(self.actionAnalysis_Toolbar)
        self.menuToolbars.addAction(self.actionNavigation_Toolbar)
        self.menuToolbars.addAction(self.actionMedia_Toolbar)
        self.menuSignal_Inspector.addAction(self.actionSignal_Amplitude)
        self.menuSignal_Inspector.addAction(self.actionSignal_Envelope)
        self.menuSignal_Inspector.addAction(self.actionCharacteristic_Function)
        self.menuSignal_Inspector.addAction(self.actionEspectrogram)
        self.menuView.addAction(self.actionEvent_List)
        self.menuView.addAction(self.actionSignal_MiniMap)
        self.menuView.addSeparator()
        self.menuView.addAction(self.menuSignal_Inspector.menuAction())
        self.menuView.addSeparator()
        self.menuView.addAction(self.menuToolbars.menuAction())
        self.menuAnalysis.addAction(self.actionSTA_LTA)
        self.menuAnalysis.addAction(self.actionAMPA)
        self.menuAnalysis.addAction(self.actionTakanami)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuAnalysis.menuAction())
        self.toolBarTrace.addSeparator()
        self.toolBarTrace.addAction(self.actionUndo)
        self.toolBarTrace.addAction(self.actionRedo)
        self.toolBarTrace.addSeparator()
        self.toolBarAnalysis.addAction(self.actionSTA_LTA)
        self.toolBarAnalysis.addAction(self.actionAMPA)
        self.toolBarAnalysis.addSeparator()
        self.actionActivateThreshold = QtGui.QAction(TraceWindow)
        self.actionActivateThreshold.setIcon(QtGui.QIcon(":/threshold.png"))
        self.actionActivateThreshold.setCheckable(True)
        self.actionActivateThreshold.setChecked(False)
        self.actionActivateThreshold.setObjectName("actionActivateThreshold")
        self.actionActivateThreshold.setToolTip("Enable/Disable Threshold")
        self.toolBarAnalysis.addAction(self.actionActivateThreshold)
        self.thresholdLabel = QtGui.QLabel(" Threshold value: ", parent=self.toolBarAnalysis)
        self.thresholdLabel.setEnabled(False)
        self.toolBarAnalysis.addWidget(self.thresholdLabel)
        self.thresholdSpinBox = QtGui.QDoubleSpinBox(self.toolBarAnalysis)
        self.thresholdSpinBox.setMinimum(0.0)
        self.thresholdSpinBox.setMaximum(20.0)
        self.thresholdSpinBox.setSingleStep(0.01)
        self.thresholdSpinBox.setValue(1.0)
        self.thresholdSpinBox.setAccelerated(True)
        self.thresholdSpinBox.setEnabled(False)
        self.toolBarAnalysis.addWidget(self.thresholdSpinBox)
        self.toolBarAnalysis.addSeparator()
        self.toolBarAnalysis.addAction(self.actionTakanami)
        # set up status bar
        self.statusbar = QtGui.QStatusBar(TraceWindow)
        self.statusbar.setObjectName("statusbar")
        TraceWindow.setStatusBar(self.statusbar)
        self.analysis_label = QtGui.QLabel("", self.statusbar)
        self.analysis_progress_bar = QtGui.QProgressBar(self.statusbar)
        self.analysis_progress_bar.setOrientation(QtCore.Qt.Horizontal)
        self.analysis_progress_bar.setRange(0, 0)
        self.analysis_progress_bar.hide()
        self.statusbar.addPermanentWidget(self.analysis_label)
        self.statusbar.addPermanentWidget(self.analysis_progress_bar)
        # apply translation
        self.retranslateUi(TraceWindow)
        QtCore.QMetaObject.connectSlotsByName(TraceWindow)

    def retranslateUi(self, TraceWindow):
        TraceWindow.setWindowTitle(QtGui.QApplication.translate("TraceWindow", "TraceWindow", None, QtGui.QApplication.UnicodeUTF8))
        self.menuFile.setTitle(QtGui.QApplication.translate("TraceWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
        self.menuEdit.setTitle(QtGui.QApplication.translate("TraceWindow", "Edit", None, QtGui.QApplication.UnicodeUTF8))
        self.menuView.setTitle(QtGui.QApplication.translate("TraceWindow", "View", None, QtGui.QApplication.UnicodeUTF8))
        self.menuToolbars.setTitle(QtGui.QApplication.translate("TraceWindow", "&Toolbars", None, QtGui.QApplication.UnicodeUTF8))
        self.menuSignal_Inspector.setTitle(QtGui.QApplication.translate("TraceWindow", "&Signal", None, QtGui.QApplication.UnicodeUTF8))
        self.menuAnalysis.setTitle(QtGui.QApplication.translate("TraceWindow", "Analysis", None, QtGui.QApplication.UnicodeUTF8))
        self.toolBarTrace.setWindowTitle(QtGui.QApplication.translate("TraceWindow", "toolBar", None, QtGui.QApplication.UnicodeUTF8))
        self.actionEvent_List.setText(QtGui.QApplication.translate("TraceWindow", "&Event List", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSTA_LTA.setText(QtGui.QApplication.translate("TraceWindow", "&STA-LTA...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSTA_LTA.setToolTip("Apply STA-LTA")
        self.actionSTA_LTA.setStatusTip("Apply STA-LTA algorithm to the entire trace")
        self.actionSTA_LTA.setShortcut(QtGui.QApplication.translate("TraceWindow", "Ctrl+L", None, QtGui.QApplication.UnicodeUTF8))
        self.actionAMPA.setText(QtGui.QApplication.translate("TraceWindow", "&AMPA...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionAMPA.setToolTip("Apply AMPA")
        self.actionAMPA.setStatusTip("Apply AMPA algorithm to the entire trace")
        self.actionAMPA.setShortcut(QtGui.QApplication.translate("TraceWindow", "Ctrl+A", None, QtGui.QApplication.UnicodeUTF8))
        self.actionUndo.setText(QtGui.QApplication.translate("TraceWindow", "&Undo", None, QtGui.QApplication.UnicodeUTF8))
        self.actionUndo.setShortcut(QtGui.QApplication.translate("TraceWindow", "Ctrl+Z", None, QtGui.QApplication.UnicodeUTF8))
        self.actionRedo.setText(QtGui.QApplication.translate("TraceWindow", "&Redo", None, QtGui.QApplication.UnicodeUTF8))
        self.actionRedo.setShortcut(QtGui.QApplication.translate("TraceWindow", "Ctrl+Shift+Z", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSaveCF.setText(QtGui.QApplication.translate("TraceWindow", "Save &CF...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSaveCF.setStatusTip("Save characteristic function")
        self.actionSaveCF.setShortcut(QtGui.QApplication.translate("TraceWindow", "Ctrl+C", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSaveCF_As.setText(QtGui.QApplication.translate("TraceWindow", "Save C&F As...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSaveCF_As.setStatusTip("Save characteristic function to a new file")
        self.actionSaveCF_As.setShortcut(QtGui.QApplication.translate("TraceWindow", "Ctrl+Shift+C", None, QtGui.QApplication.UnicodeUTF8))
        self.actionMedia_Toolbar.setText(QtGui.QApplication.translate("TraceWindow", "M&edia Toolbar", None, QtGui.QApplication.UnicodeUTF8))
        self.actionMedia_Toolbar.setStatusTip("Show/Hide Media Toolbar")
        self.actionNavigation_Toolbar.setText(QtGui.QApplication.translate("TraceWindow", "&Navigation Toolbar", None, QtGui.QApplication.UnicodeUTF8))
        self.actionNavigation_Toolbar.setStatusTip("Show/Hide Navigation Toolbar")
        self.actionClearRecent.setText(QtGui.QApplication.translate("TraceWindow", "&Clear List", None, QtGui.QApplication.UnicodeUTF8))
        self.actionClearRecent.setStatusTip("Clear recent opened files list")
        self.actionTakanami.setText(QtGui.QApplication.translate("TraceWindow", "&Takanami on selection...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionTakanami.setToolTip("Apply Takanami")
        self.actionTakanami.setStatusTip("Apply Takanami algorithm to selection")
        self.actionTakanami.setShortcut(QtGui.QApplication.translate("TraceWindow", "Ctrl+T", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSignal_Amplitude.setText(QtGui.QApplication.translate("TraceWindow", "Signal &Amplitude", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSignal_Amplitude.setStatusTip("Show/Hide signal amplitude")
        self.actionSignal_Envelope.setText(QtGui.QApplication.translate("TraceWindow", "Signal &Envelope", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSignal_Envelope.setStatusTip("Show/Hide signal envelope")
        self.actionCharacteristic_Function.setText(QtGui.QApplication.translate("TraceWindow", "&Characteristic Function", None, QtGui.QApplication.UnicodeUTF8))
        self.actionCharacteristic_Function.setStatusTip("Show/Hide characteristic function")
        self.actionEspectrogram.setText(QtGui.QApplication.translate("TraceWindow", "&Espectrogram", None, QtGui.QApplication.UnicodeUTF8))
        self.actionEspectrogram.setStatusTip("Show/Hide spectrogram")
        self.actionTrace_Toolbar.setText(QtGui.QApplication.translate("TraceWindow", "&Trace Toolbar", None, QtGui.QApplication.UnicodeUTF8))
        self.actionTrace_Toolbar.setStatusTip("Show/Hide Trace Toolbar")
        self.actionAnalysis_Toolbar.setText(QtGui.QApplication.translate("TraceWindow", "&Analysis Toolbar", None, QtGui.QApplication.UnicodeUTF8))
        self.actionAnalysis_Toolbar.setStatusTip("Show/Hide Analysis Toolbar")
        self.actionSignal_MiniMap.setText(QtGui.QApplication.translate("TraceWindow", "Signal &Minimap", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSignal_MiniMap.setStatusTip("Show/Hide Signal Minimap")
        self.actionDelete_Selected.setText(QtGui.QApplication.translate("TraceWindow", "&Delete Selected Event(s)", None, QtGui.QApplication.UnicodeUTF8))
        self.actionDelete_Selected.setStatusTip("Delete selected events")
        self.actionClear_Event_List.setText(QtGui.QApplication.translate("TraceWindow", "&Clear Event List", None, QtGui.QApplication.UnicodeUTF8))
        self.actionClear_Event_List.setStatusTip("Clear event list")

