(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/Balance.jsx":[function(require,module,exports){
var Balance = React.createClass({displayName: "Balance",
    getInitialState: function() {
        return {balance: 0}
    },

    componentDidMount: function() {
        $.ajax({
            url: '/' + this.props.url + 'balance/' + user_id + '/',
            method: 'get',
            success: function(result) {
                console.log('balance', result)
                this.setState({balance: result.balance})
            }.bind(this),
            error: function(xhr, status, err) {
                console.log(xhr, status, err)
            }.bind(this)
        })
    },

    render: function() {
        var balance = Math.round(this.state.balance * 100) / 100
        return (
            React.createElement("span", null, 
                this.props.username, ": ", balance, " kr"
            )
        )
    }
})

window.Balance = Balance
module.exports = Balance

},{}],"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/Buttons.jsx":[function(require,module,exports){
var Button = React.createClass({displayName: "Button",
    render: function() {
        return (
            React.createElement("button", {className: "btn btn-" + this.props.type + " btn-sm", onClick: this.props.clickHandler}, this.props.value)
        )
    }
})

window.Button = Button
module.exports = Button

},{}],"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/IconButton.jsx":[function(require,module,exports){
var IconButton = React.createClass({displayName: "IconButton",
    render: function() {
        return (
            React.createElement("button", {
                className: "btn btn-" + this.props.type + " " + this.props.btnsize, 
                onClick: this.props.clickHandler, 
                id: this.props.btnid
                }, 
                  React.createElement("i", {className: "fa " + (this.props.size ? ("fa-" + this.props.size + " ") : " ") + ("fa-" + this.props.value)})
            )
        )
    }
})

window.IconButton = IconButton
module.exports = IconButton

},{}],"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/Order.jsx":[function(require,module,exports){
var Order = React.createClass({displayName: "Order",
  loadOrder: function(orderid) {
    $.ajax({
      url: api_base + 'orders/' + orderid,
      dataType: 'json',
      success: function(success) {
        this.setState({order: success})
        this.setState({restaurant: success.restaurant})
      }.bind(this),
      error: function(xhr, status, err) {
        console.log(xhr, status, err)
      }.bind(this)
    })
  },

  loadOrderLines: function(path) {
      $.ajax({
      url: path || this.props.url,
      dataType: 'json',
      cache: false,
      success: function(success) {
        var data = this.state.data;
        for (var attrname in success.results) {data[success.results[attrname].id] = success.results[attrname]; }
        this.setState({data: data});
        if (success.next != null) {
            this.loadOrderLines(success.next)
        }
      }.bind(this),
      error: function(xhr, status, error) {
        console.error(xhr, status, error)
      }.bind(this)
    });
  },

  handleOrderLineSubmit: function(orderline) {
    // Submit to server and refresh list
    orderline.csrfmiddlewaretoken = csrftoken;
    orderline.order = order;
    var shouldPut = orderline.id !== ""
    $.ajax({
        url: api_base + "orderlines/" + (shouldPut ? orderline.id : ''),
        beforeSend: function(xhr) {
          xhr.setRequestHeader("X-CSRFToken", getCookie("csrftoken"));
        },
        dateType: 'json',
        type: shouldPut ? 'PUT' : 'POST',
        data: orderline,
        success: function(response) {
            if (shouldPut) {
                var data = this.state.data
                for (var attrname in response) {data[response[attrname].id] = response[attrname]; }
                this.setState({data: data})
                $("#orderline-" + response.id).removeClass("hide") // hacky way to show it again afterwards
            } else {
                this.setState({data: this.state.data.concat(response)})
            }
        }.bind(this),
        error: function(xhr, status, error) {
            console.error(xhr, status, error)
        }.bind(this)
    });
  },

  getInitialState: function() {
    return {
      data: [],
      order: {},
      restaurant: {restaurant_name: ''}
    }
  },

  componentDidMount: function() {
    this.loadOrder(this.props.orderid)
    this.loadOrderLines()
  },

  render: function() {
    var that = this
    var urls = location.pathname.split('/')
    var group = urls[urls.length-2]
    var Menu = React.createClass({displayName: "Menu",
      render: function () {
        return (
          React.createElement("span", null, 
            React.createElement("i", {className: "fa fa-cutlery"}), " ", React.createElement("a", {href: that.state.restaurant.menu_url}, "Menu")
          )
        )
      }
    })
    var Phone = React.createClass({displayName: "Phone",
      render: function () {
        return (
          React.createElement("span", null, 
            React.createElement("i", {className: "fa fa-phone"}), 
              React.createElement("a", {href: "tel:" + that.state.restaurant.phone_number}, 
              that.state.restaurant.phone_number
          )
          )
        )
      }
    })

    return (
      React.createElement("div", {className: "container order"}, 
        React.createElement("div", {className: "row"}, 
          React.createElement("h1", null, "Feedme:", group, 
              React.createElement("small", null, 
                  React.createElement("a", {href: ".."}, React.createElement("i", {className: "fa fa-level-up"})), 
                   "  ::  ", 
                  React.createElement(Balance, {url: this.props.apiroot, username: username})
              )
          ), 
          React.createElement("h2", null, 
              this.state.restaurant.restaurant_name, "  ", 
              React.createElement("small", null, 
                React.createElement(Menu, null), "  ", 
                React.createElement(Phone, null)
              )
          ), 
          React.createElement(OrderLineList, {
              apiroot: this.props.apiroot, 
              data: this.state.data, 
              url: this.props.url, 
              extra_costs: this.state.order.extra_costs, 
              total_cost: this.state.order.total_cost}
              ), 
          React.createElement(OrderLineForm, {onOrderLineSubmit: this.handleOrderLineSubmit})
        )
      )
    );
  }
});

window.Order = Order
module.exports = Order

},{}],"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/OrderLine.jsx":[function(require,module,exports){
var OrderLine = React.createClass({displayName: "OrderLine",
    getInitialState: function() {
      return {
          orderline: {},
          users: [],
          hidden: false,
          showDelete: false,
          showEdit: false,
          showJoin: false,
          showLeave: false
      }
    },

    componentDidMount: function() {
      this.loadOrderLine()
    },

    loadOrderLine: function(path) {
      $.ajax({
        url: path || api_base + "orderlines/" + this.props.olid + "/",
        success: function(result) {
          this.setState({orderline: result, users: result.users})
        }.bind(this),
        error: function(xhr, err, status) {
          console.log("Something went wrong.", xhr, err, status)
        }.bind(this)
      })
      this.setState({hideOrderLine: false})
    },

    generateAlert: function(type, message) {
      var alert_message = "<div class=\"alert alert-" + type + "\"><a class=\"close\" data-dismiss=\"alert\">&times</a> " + message + "</div>"
      $('#bootstrap-messages').append(alert_message)
    },

    handleRemove: function(orderline) {
      this.setState({hideOrderLine: true})
      this.props.onRemoveOrderLine(orderline)
    },

    handleEdit: function(orderline) {
      // @ToDo: Make this better, and send a callback which updates this state
      // Place values in form
      $("#id").val(orderline.id)
      $("#menu_item").val(orderline.menu_item)
      $("#soda").val(orderline.soda)
      $("#extras").val(orderline.extras)
      $("#price").val(orderline.price)
      this.setState({hideOrderLine: true})

      // On form submit, reload current orderline
      var that = this
      $("#formSubmit").click(function() {
        setTimeout(function() {
          that.loadOrderLine()
        }, 500) // I hope 500ms is enough to wait for a POST request to complete.
      })
    },

    handleJoin: function(orderline) {
        $.ajax({
        url: api_base + "orderlines/" + this.props.olid + "/join/",
        beforeSend: function(xhr) {
          xhr.setRequestHeader("X-CSRFToken", getCookie("csrftoken"));
        },
        method: 'put',
        success: function(result) {
          this.generateAlert('info', 'Joined orderline')
          var users = this.state.users
          users.push({username: username})
          this.setState({users: users})
        }.bind(this),
        error: function(xhr, err, status) {
          this.generateAlert('danger', 'Failed to join orderline: ' + xhr.responseText)
          console.log("Something went wrong.", xhr, err, status)
        }.bind(this)
      })
    },

    handleLeave: function(orderline) {
        $.ajax({
        url: api_base + "orderlines/" + this.props.olid + "/leave/",
        beforeSend: function(xhr) {
          xhr.setRequestHeader("X-CSRFToken", getCookie("csrftoken"));
        },
        method: 'put',
        success: function(result) {
          this.generateAlert('info', 'Left orderline')
          var users = this.state.users
          users.pop(username)
          this.setState({users: users})
        }.bind(this),
        error: function(xhr, err, status) {
          console.log("Something went wrong.", xhr, err, status)
        }.bind(this)
      })
    },

    render: function() {
        var is_in = false
        for (var i = 0; i < this.state.users.length; i++) {
            if (this.state.users[i].username === username) {
                is_in = true
            }
        }

        var can_join = (this.props.can_join || (!is_in && this.state.orderline.creator !== username))

        var deleteButton =  this.state.orderline.creator === username ?
            React.createElement(IconButton, {
                value: "trash-o", type: "danger", btnsize: "btn-sm", 
                clickHandler: this.handleRemove.bind(this, this.state.orderline)}) : ""
        var editButton = (is_in || this.state.orderline.creator === username) ?
            React.createElement(IconButton, {
                value: "pencil-square-o", type: "primary", btnsize: "btn-sm", 
                clickHandler: this.handleEdit.bind(this, this.state.orderline)}) : ""
        var joinButton = (can_join) ?
            React.createElement(IconButton, {
                value: "sign-in", type: "primary", btnsize: "btn-sm", 
                clickHandler: this.handleJoin.bind(this, this.state.orderline)}) : ""
        var leaveButton = (is_in) ?
            React.createElement(IconButton, {
                value: "sign-out", type: "danger", btnsize: "btn-sm", 
                clickHandler: this.handleLeave.bind(this, this.state.orderline)}) : ""

        var users = this.state.users.map(function(user) {
            return (
                React.createElement("span", {key: user.id}, user.username, " ")
            )
        })
        return (
            React.createElement("tr", {className: this.state.hideOrderLine ? 'hide' : '', id: "orderline-" + this.state.orderline.id}, 
                React.createElement("td", null, React.createElement("b", null, this.state.orderline.creator), " ", users), 
                React.createElement("td", null, this.state.orderline.menu_item), 
                React.createElement("td", null, this.state.orderline.soda), 
                React.createElement("td", null, this.state.orderline.extras), 
                React.createElement("td", null, this.state.orderline.price), 
                React.createElement("td", null, joinButton, React.createElement("div", {className: "btn-group"}, editButton, " ", leaveButton, " ", deleteButton))
            )
        );
    }
});

window.OrderLine = OrderLine
module.exports = OrderLine

},{}],"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/OrderLineForm.jsx":[function(require,module,exports){
var OrderLineForm = React.createClass({displayName: "OrderLineForm",
    getInitialState: function() {
      return {
        users: []
      }
    },

    componentDidMount: function() {
    },

    handleSubmit: function(e) {
      e.preventDefault();

      this.props.onOrderLineSubmit({
          id: this.refs.id.value,
          menu_item: this.refs.menu_item.value,
          soda: this.refs.soda.value,
          extras: this.refs.extras.value,
          price: this.refs.price.value
      });
      // Reset all the stuff
      this.refs.id.value = "";
      this.refs.menu_item.value = "";
      this.refs.soda.value = "";
      this.refs.extras.value = "";
      this.refs.price.value = "";
      this.refs.users.value = "";
      return;
    },

    render: function() {
        return (
            React.createElement("div", {className: "col-md-12"}, 
              React.createElement("h3", null, "New orderline"), 
              React.createElement("div", {className: "col-md-12"}, 
                React.createElement("form", {className: "form-inline orderLineForm", onSubmit: this.handleSubmit}, 
                  React.createElement("input", {type: "number", id: "id", ref: "id", hidden: true}), 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {className: "sr-only", htmlFor: "menu_item"}, "Menu item"), 
                    React.createElement("input", {type: "text", className: "form-control", placeholder: "Menu item", id: "menu_item", ref: "menu_item"})
                  ), 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {className: "sr-only", htmlFor: "soda"}, "Soda"), 
                    React.createElement("input", {type: "text", className: "form-control", placeholder: "Soda", id: "soda", ref: "soda"})
                  ), 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {className: "sr-only", htmlFor: "extras"}, "Extras"), 
                    React.createElement("input", {type: "text", className: "form-control", placeholder: "Extras", id: "extras", ref: "extras"})
                  ), 
                  React.createElement("div", {className: "form-group"}, 
                    React.createElement("label", {className: "sr-only", htmlFor: "price"}, "Price"), 
                    React.createElement("input", {type: "number", className: "form-control", placeholder: "Price", id: "price", ref: "price"})
                  ), 
                  React.createElement("div", {className: "form-group hidden"}, 
                    React.createElement("label", {className: "sr-only", htmlFor: "users"}, "Additional users"), 
                    React.createElement("input", {type: "text", className: "form-control", placeholder: "Additional users", id: "users", ref: "users", disabled: true})
                  ), 
                  React.createElement(IconButton, {value: "floppy-o", btnid: "formSubmit", type: "success", btnsize: "primary"})
                )
              )
            )
        );
    }
});

window.OrderLineForm = OrderLineForm
module.exports = OrderLineForm

},{}],"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/OrderLineList.jsx":[function(require,module,exports){
var OrderLineList = React.createClass({displayName: "OrderLineList",
  handleRemoveOrderLine: function(orderline) {
    $.ajax({
        url: api_base + "orderlines/" + orderline.id,
        beforeSend: function(xhr) {
          xhr.setRequestHeader("X-CSRFToken", getCookie("csrftoken"));
        },
        type: "DELETE",
        success: function(result) {
        }.bind(this),
          error: function(xhr, error, something) {
            console.log(xhr, error, something)
        }.bind(this)
    })
  },

  render: function() {
    var that = this
    var orderlines = this.props.data.map(function (orderline) {
        return (
            React.createElement(OrderLine, {olid: orderline.id, key: orderline.id, onEditOrderLine: that.handleUpdateOrderLine, onRemoveOrderLine: that.handleRemoveOrderLine})
        );
    });
    return (
      React.createElement("div", {className: "col-md-12"}, 
        React.createElement("table", {className: "table table-striped orderLineList"}, 
          React.createElement("thead", null, 
            React.createElement("tr", null, 
              React.createElement("th", null, "User(s)"), 
              React.createElement("th", null, "Menu item"), 
              React.createElement("th", null, "Soda"), 
              React.createElement("th", null, "Extras"), 
              React.createElement("th", null, "Price"), 
              React.createElement("th", null, "Status")
            )
          ), 
          React.createElement("tbody", null, 
            orderlines, 
            React.createElement("tr", null, 
              React.createElement("td", null, React.createElement("i", {className: "fa fa-2x fa-truck"})), 
              React.createElement("td", null, "Extra costs"), 
              React.createElement("td", null, React.createElement("i", {className: "fa fa-2x fa-bicycle"}), " ", React.createElement("i", {className: "fa fa-2x fa-rocket"})), 
              React.createElement("td", null), 
              React.createElement("td", null, this.props.extra_costs), 
              React.createElement("td", null, "Total: ", this.props.total_cost)
            )
          )
        )
      )
    );
  }
});

window.OrderLineList = OrderLineList
module.exports = OrderLineList

},{}],"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/feedme.jsx":[function(require,module,exports){
var Balance = require('./Balance.jsx')

var Button = require('./Buttons.jsx')

var IconButton = require('./IconButton.jsx')

var Order = require('./Order.jsx')

var OrderLine = require('./OrderLine.jsx')

var OrderLineList = require('./OrderLineList.jsx')

var OrderLineForm = require('./OrderLineForm.jsx')


ReactDOM.render(
    React.createElement(Order, {apiroot: "../feedme-api/", url: "/feedme-api/orderlines/?order=" + order, orderid: order}),
    document.getElementById("feedme-main")
);

},{"./Balance.jsx":"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/Balance.jsx","./Buttons.jsx":"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/Buttons.jsx","./IconButton.jsx":"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/IconButton.jsx","./Order.jsx":"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/Order.jsx","./OrderLine.jsx":"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/OrderLine.jsx","./OrderLineForm.jsx":"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/OrderLineForm.jsx","./OrderLineList.jsx":"/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/OrderLineList.jsx"}]},{},["/Users/sklirg/projects/github/feedme/feedme/static/js/feedme/feedme.jsx"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvc2tsaXJnL3Byb2plY3RzL2dpdGh1Yi9mZWVkbWUvZmVlZG1lL3N0YXRpYy9qcy9mZWVkbWUvQmFsYW5jZS5qc3giLCIvVXNlcnMvc2tsaXJnL3Byb2plY3RzL2dpdGh1Yi9mZWVkbWUvZmVlZG1lL3N0YXRpYy9qcy9mZWVkbWUvQnV0dG9ucy5qc3giLCIvVXNlcnMvc2tsaXJnL3Byb2plY3RzL2dpdGh1Yi9mZWVkbWUvZmVlZG1lL3N0YXRpYy9qcy9mZWVkbWUvSWNvbkJ1dHRvbi5qc3giLCIvVXNlcnMvc2tsaXJnL3Byb2plY3RzL2dpdGh1Yi9mZWVkbWUvZmVlZG1lL3N0YXRpYy9qcy9mZWVkbWUvT3JkZXIuanN4IiwiL1VzZXJzL3NrbGlyZy9wcm9qZWN0cy9naXRodWIvZmVlZG1lL2ZlZWRtZS9zdGF0aWMvanMvZmVlZG1lL09yZGVyTGluZS5qc3giLCIvVXNlcnMvc2tsaXJnL3Byb2plY3RzL2dpdGh1Yi9mZWVkbWUvZmVlZG1lL3N0YXRpYy9qcy9mZWVkbWUvT3JkZXJMaW5lRm9ybS5qc3giLCIvVXNlcnMvc2tsaXJnL3Byb2plY3RzL2dpdGh1Yi9mZWVkbWUvZmVlZG1lL3N0YXRpYy9qcy9mZWVkbWUvT3JkZXJMaW5lTGlzdC5qc3giLCIvVXNlcnMvc2tsaXJnL3Byb2plY3RzL2dpdGh1Yi9mZWVkbWUvZmVlZG1lL3N0YXRpYy9qcy9mZWVkbWUvZmVlZG1lLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLElBQUksNkJBQTZCLHVCQUFBO0lBQzdCLGVBQWUsRUFBRSxXQUFXO1FBQ3hCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQzNCLEtBQUs7O0lBRUQsaUJBQWlCLEVBQUUsV0FBVztRQUMxQixDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ0gsR0FBRyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxVQUFVLEdBQUcsT0FBTyxHQUFHLEdBQUc7WUFDdEQsTUFBTSxFQUFFLEtBQUs7WUFDYixPQUFPLEVBQUUsU0FBUyxNQUFNLEVBQUU7Z0JBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQztnQkFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDM0MsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ1osS0FBSyxFQUFFLFNBQVMsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUU7Z0JBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUM7YUFDaEMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ2YsQ0FBQztBQUNWLEtBQUs7O0lBRUQsTUFBTSxFQUFFLFdBQVc7UUFDZixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUc7UUFDeEQ7WUFDSSxvQkFBQSxNQUFLLEVBQUEsSUFBQyxFQUFBO2dCQUNELElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFDLElBQUEsRUFBRyxPQUFPLEVBQUMsS0FBQTtBQUFBLFlBQzdCLENBQUE7U0FDVjtLQUNKO0FBQ0wsQ0FBQyxDQUFDOztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTztBQUN4QixNQUFNLENBQUMsT0FBTyxHQUFHOzs7QUM5QmpCLElBQUksNEJBQTRCLHNCQUFBO0lBQzVCLE1BQU0sRUFBRSxXQUFXO1FBQ2Y7WUFDSSxvQkFBQSxRQUFPLEVBQUEsQ0FBQSxDQUFDLFNBQUEsRUFBUyxDQUFFLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxTQUFTLEVBQUMsQ0FBQyxPQUFBLEVBQU8sQ0FBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQWMsQ0FBQSxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBZSxDQUFBO1NBQzdIO0tBQ0o7QUFDTCxDQUFDLENBQUM7O0FBRUYsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNO0FBQ3RCLE1BQU0sQ0FBQyxPQUFPLEdBQUc7OztBQ1RqQixJQUFJLGdDQUFnQywwQkFBQTtJQUNoQyxNQUFNLEVBQUUsV0FBVztRQUNmO1lBQ0ksb0JBQUEsUUFBTyxFQUFBLENBQUE7Z0JBQ0gsU0FBQSxFQUFTLENBQUUsVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBQztnQkFDbkUsT0FBQSxFQUFPLENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUM7Z0JBQ2pDLEVBQUEsRUFBRSxDQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBTTtnQkFDcEIsQ0FBQSxFQUFBO2tCQUNDLG9CQUFBLEdBQUUsRUFBQSxDQUFBLENBQUMsU0FBQSxFQUFTLENBQUUsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFHLENBQUksQ0FBQTtZQUMvRyxDQUFBO1NBQ1o7S0FDSjtBQUNMLENBQUMsQ0FBQzs7QUFFRixNQUFNLENBQUMsVUFBVSxHQUFHLFVBQVU7QUFDOUIsTUFBTSxDQUFDLE9BQU8sR0FBRzs7O0FDZmpCLElBQUksMkJBQTJCLHFCQUFBO0VBQzdCLFNBQVMsRUFBRSxTQUFTLE9BQU8sRUFBRTtJQUMzQixDQUFDLENBQUMsSUFBSSxDQUFDO01BQ0wsR0FBRyxFQUFFLFFBQVEsR0FBRyxTQUFTLEdBQUcsT0FBTztNQUNuQyxRQUFRLEVBQUUsTUFBTTtNQUNoQixPQUFPLEVBQUUsU0FBUyxPQUFPLEVBQUU7UUFDekIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztPQUNoRCxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7TUFDWixLQUFLLEVBQUUsU0FBUyxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRTtRQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDO09BQzlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztLQUNiLENBQUM7QUFDTixHQUFHOztFQUVELGNBQWMsRUFBRSxTQUFTLElBQUksRUFBRTtNQUMzQixDQUFDLENBQUMsSUFBSSxDQUFDO01BQ1AsR0FBRyxFQUFFLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7TUFDM0IsUUFBUSxFQUFFLE1BQU07TUFDaEIsS0FBSyxFQUFFLEtBQUs7TUFDWixPQUFPLEVBQUUsU0FBUyxPQUFPLEVBQUU7UUFDekIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDM0IsS0FBSyxJQUFJLFFBQVEsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFO1FBQ3hHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM1QixJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztTQUNwQztPQUNGLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztNQUNaLEtBQUssRUFBRSxTQUFTLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO1FBQ2xDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUM7T0FDbEMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0tBQ2IsQ0FBQyxDQUFDO0FBQ1AsR0FBRzs7QUFFSCxFQUFFLHFCQUFxQixFQUFFLFNBQVMsU0FBUyxFQUFFOztJQUV6QyxTQUFTLENBQUMsbUJBQW1CLEdBQUcsU0FBUyxDQUFDO0lBQzFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLElBQUksU0FBUyxHQUFHLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRTtJQUNuQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ0gsR0FBRyxFQUFFLFFBQVEsR0FBRyxhQUFhLElBQUksU0FBUyxHQUFHLFNBQVMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9ELFVBQVUsRUFBRSxTQUFTLEdBQUcsRUFBRTtVQUN4QixHQUFHLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzdEO1FBQ0QsUUFBUSxFQUFFLE1BQU07UUFDaEIsSUFBSSxFQUFFLFNBQVMsR0FBRyxLQUFLLEdBQUcsTUFBTTtRQUNoQyxJQUFJLEVBQUUsU0FBUztRQUNmLE9BQU8sRUFBRSxTQUFTLFFBQVEsRUFBRTtZQUN4QixJQUFJLFNBQVMsRUFBRTtnQkFDWCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7Z0JBQzFCLEtBQUssSUFBSSxRQUFRLElBQUksUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRTtnQkFDbkYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDM0IsQ0FBQyxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQzthQUNyRCxNQUFNO2dCQUNILElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7YUFDMUQ7U0FDSixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDWixLQUFLLEVBQUUsU0FBUyxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtZQUNoQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDO1NBQ3BDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztLQUNmLENBQUMsQ0FBQztBQUNQLEdBQUc7O0VBRUQsZUFBZSxFQUFFLFdBQVc7SUFDMUIsT0FBTztNQUNMLElBQUksRUFBRSxFQUFFO01BQ1IsS0FBSyxFQUFFLEVBQUU7TUFDVCxVQUFVLEVBQUUsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDO0tBQ2xDO0FBQ0wsR0FBRzs7RUFFRCxpQkFBaUIsRUFBRSxXQUFXO0lBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7SUFDbEMsSUFBSSxDQUFDLGNBQWMsRUFBRTtBQUN6QixHQUFHOztFQUVELE1BQU0sRUFBRSxXQUFXO0lBQ2pCLElBQUksSUFBSSxHQUFHLElBQUk7SUFDZixJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDdkMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQy9CLElBQUksMEJBQTBCLG9CQUFBO01BQzVCLE1BQU0sRUFBRSxZQUFZO1FBQ2xCO1VBQ0Usb0JBQUEsTUFBSyxFQUFBLElBQUMsRUFBQTtZQUNKLG9CQUFBLEdBQUUsRUFBQSxDQUFBLENBQUMsU0FBQSxFQUFTLENBQUMsZUFBZ0IsQ0FBSSxDQUFBLEVBQUEsR0FBQSxFQUFDLG9CQUFBLEdBQUUsRUFBQSxDQUFBLENBQUMsSUFBQSxFQUFJLENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsUUFBVSxDQUFBLEVBQUEsTUFBUSxDQUFBO1VBQzlFLENBQUE7U0FDUjtPQUNGO0tBQ0YsQ0FBQztJQUNGLElBQUksMkJBQTJCLHFCQUFBO01BQzdCLE1BQU0sRUFBRSxZQUFZO1FBQ2xCO1VBQ0Usb0JBQUEsTUFBSyxFQUFBLElBQUMsRUFBQTtZQUNKLG9CQUFBLEdBQUUsRUFBQSxDQUFBLENBQUMsU0FBQSxFQUFTLENBQUMsYUFBYyxDQUFJLENBQUEsRUFBQTtjQUM3QixvQkFBQSxHQUFFLEVBQUEsQ0FBQSxDQUFDLElBQUEsRUFBSSxDQUFFLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxZQUFjLENBQUEsRUFBQTtjQUNyRCxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxZQUFhO1VBQ3BDLENBQUE7VUFDRyxDQUFBO1NBQ1I7T0FDRjtBQUNQLEtBQUssQ0FBQzs7SUFFRjtNQUNFLG9CQUFBLEtBQUksRUFBQSxDQUFBLENBQUMsU0FBQSxFQUFTLENBQUMsaUJBQWtCLENBQUEsRUFBQTtRQUMvQixvQkFBQSxLQUFJLEVBQUEsQ0FBQSxDQUFDLFNBQUEsRUFBUyxDQUFDLEtBQU0sQ0FBQSxFQUFBO1VBQ25CLG9CQUFBLElBQUcsRUFBQSxJQUFDLEVBQUEsU0FBQSxFQUFRLEtBQUssRUFBQztjQUNkLG9CQUFBLE9BQU0sRUFBQSxJQUFDLEVBQUE7a0JBQ0gsb0JBQUEsR0FBRSxFQUFBLENBQUEsQ0FBQyxJQUFBLEVBQUksQ0FBQyxJQUFLLENBQUEsRUFBQSxvQkFBQSxHQUFFLEVBQUEsQ0FBQSxDQUFDLFNBQUEsRUFBUyxDQUFDLGdCQUFpQixDQUFJLENBQUksQ0FBQSxFQUFBO0FBQUEsbUJBQUEsUUFBQSxFQUFBO0FBQUEsa0JBRW5ELG9CQUFDLE9BQU8sRUFBQSxDQUFBLENBQUMsR0FBQSxFQUFHLENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUMsQ0FBQyxRQUFBLEVBQVEsQ0FBRSxRQUFTLENBQUEsQ0FBRyxDQUFBO2NBQ3BELENBQUE7VUFDUCxDQUFBLEVBQUE7VUFDTCxvQkFBQSxJQUFHLEVBQUEsSUFBQyxFQUFBO2NBQ0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFDLElBQUEsRUFBQTtBQUFBLGNBQ3ZDLG9CQUFBLE9BQU0sRUFBQSxJQUFDLEVBQUE7Z0JBQ0wsb0JBQUMsSUFBSSxFQUFBLElBQUEsQ0FBRyxDQUFBLEVBQUEsSUFBQSxFQUFBO0FBQUEsZ0JBQ1Isb0JBQUMsS0FBSyxFQUFBLElBQUEsQ0FBRyxDQUFBO2NBQ0gsQ0FBQTtVQUNQLENBQUEsRUFBQTtVQUNMLG9CQUFDLGFBQWEsRUFBQSxDQUFBO2NBQ1YsT0FBQSxFQUFPLENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUM7Y0FDNUIsSUFBQSxFQUFJLENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUM7Y0FDdEIsR0FBQSxFQUFHLENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUM7Y0FDcEIsV0FBQSxFQUFXLENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFDO2NBQzFDLFVBQUEsRUFBVSxDQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVcsQ0FBQTtjQUN0QyxDQUFBLEVBQUE7VUFDTixvQkFBQyxhQUFhLEVBQUEsQ0FBQSxDQUFDLGlCQUFBLEVBQWlCLENBQUUsSUFBSSxDQUFDLHFCQUFzQixDQUFBLENBQUcsQ0FBQTtRQUM1RCxDQUFBO01BQ0YsQ0FBQTtNQUNOO0dBQ0g7QUFDSCxDQUFDLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUs7QUFDcEIsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLOzs7QUN0SXRCLElBQUksK0JBQStCLHlCQUFBO0lBQy9CLGVBQWUsRUFBRSxXQUFXO01BQzFCLE9BQU87VUFDSCxTQUFTLEVBQUUsRUFBRTtVQUNiLEtBQUssRUFBRSxFQUFFO1VBQ1QsTUFBTSxFQUFFLEtBQUs7VUFDYixVQUFVLEVBQUUsS0FBSztVQUNqQixRQUFRLEVBQUUsS0FBSztVQUNmLFFBQVEsRUFBRSxLQUFLO1VBQ2YsU0FBUyxFQUFFLEtBQUs7T0FDbkI7QUFDUCxLQUFLOztJQUVELGlCQUFpQixFQUFFLFdBQVc7TUFDNUIsSUFBSSxDQUFDLGFBQWEsRUFBRTtBQUMxQixLQUFLOztJQUVELGFBQWEsRUFBRSxTQUFTLElBQUksRUFBRTtNQUM1QixDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ0wsR0FBRyxFQUFFLElBQUksSUFBSSxRQUFRLEdBQUcsYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUc7UUFDN0QsT0FBTyxFQUFFLFNBQVMsTUFBTSxFQUFFO1VBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDeEQsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ1osS0FBSyxFQUFFLFNBQVMsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUU7VUFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQztTQUN2RCxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7T0FDYixDQUFDO01BQ0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMzQyxLQUFLOztJQUVELGFBQWEsRUFBRSxTQUFTLElBQUksRUFBRSxPQUFPLEVBQUU7TUFDckMsSUFBSSxhQUFhLEdBQUcsMkJBQTJCLEdBQUcsSUFBSSxHQUFHLDBEQUEwRCxHQUFHLE9BQU8sR0FBRyxRQUFRO01BQ3hJLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFDcEQsS0FBSzs7SUFFRCxZQUFZLEVBQUUsU0FBUyxTQUFTLEVBQUU7TUFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztNQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQztBQUM3QyxLQUFLOztBQUVMLElBQUksVUFBVSxFQUFFLFNBQVMsU0FBUyxFQUFFO0FBQ3BDOztNQUVNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztNQUMxQixDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7TUFDeEMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO01BQzlCLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztNQUNsQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDdEMsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzFDOztNQUVNLElBQUksSUFBSSxHQUFHLElBQUk7TUFDZixDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVc7UUFDaEMsVUFBVSxDQUFDLFdBQVc7VUFDcEIsSUFBSSxDQUFDLGFBQWEsRUFBRTtTQUNyQixFQUFFLEdBQUcsQ0FBQztPQUNSLENBQUM7QUFDUixLQUFLOztJQUVELFVBQVUsRUFBRSxTQUFTLFNBQVMsRUFBRTtRQUM1QixDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ1AsR0FBRyxFQUFFLFFBQVEsR0FBRyxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsUUFBUTtRQUMxRCxVQUFVLEVBQUUsU0FBUyxHQUFHLEVBQUU7VUFDeEIsR0FBRyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztTQUM3RDtRQUNELE1BQU0sRUFBRSxLQUFLO1FBQ2IsT0FBTyxFQUFFLFNBQVMsTUFBTSxFQUFFO1VBQ3hCLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLGtCQUFrQixDQUFDO1VBQzlDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSztVQUM1QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1VBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDOUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ1osS0FBSyxFQUFFLFNBQVMsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUU7VUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsNEJBQTRCLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQztVQUM3RSxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDO1NBQ3ZELENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztPQUNiLENBQUM7QUFDUixLQUFLOztJQUVELFdBQVcsRUFBRSxTQUFTLFNBQVMsRUFBRTtRQUM3QixDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ1AsR0FBRyxFQUFFLFFBQVEsR0FBRyxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsU0FBUztRQUMzRCxVQUFVLEVBQUUsU0FBUyxHQUFHLEVBQUU7VUFDeEIsR0FBRyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztTQUM3RDtRQUNELE1BQU0sRUFBRSxLQUFLO1FBQ2IsT0FBTyxFQUFFLFNBQVMsTUFBTSxFQUFFO1VBQ3hCLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLGdCQUFnQixDQUFDO1VBQzVDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSztVQUM1QixLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztVQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNaLEtBQUssRUFBRSxTQUFTLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFO1VBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUM7U0FDdkQsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO09BQ2IsQ0FBQztBQUNSLEtBQUs7O0lBRUQsTUFBTSxFQUFFLFdBQVc7UUFDZixJQUFJLEtBQUssR0FBRyxLQUFLO1FBQ2pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDOUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO2dCQUMzQyxLQUFLLEdBQUcsSUFBSTthQUNmO0FBQ2IsU0FBUzs7QUFFVCxRQUFRLElBQUksUUFBUSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sS0FBSyxRQUFRLENBQUMsQ0FBQzs7UUFFN0YsSUFBSSxZQUFZLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxLQUFLLFFBQVE7WUFDekQsb0JBQUMsVUFBVSxFQUFBLENBQUE7Z0JBQ1AsS0FBQSxFQUFLLENBQUMsU0FBQSxFQUFTLENBQUMsSUFBQSxFQUFJLENBQUMsUUFBQSxFQUFRLENBQUMsT0FBQSxFQUFPLENBQUMsUUFBQSxFQUFRO2dCQUM5QyxZQUFBLEVBQVksQ0FBRSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUUsQ0FBQSxDQUFHLENBQUEsR0FBRyxFQUFFO1FBQ2pGLElBQUksVUFBVSxHQUFHLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sS0FBSyxRQUFRO1lBQ2hFLG9CQUFDLFVBQVUsRUFBQSxDQUFBO2dCQUNQLEtBQUEsRUFBSyxDQUFDLGlCQUFBLEVBQWlCLENBQUMsSUFBQSxFQUFJLENBQUMsU0FBQSxFQUFTLENBQUMsT0FBQSxFQUFPLENBQUMsUUFBQSxFQUFRO2dCQUN2RCxZQUFBLEVBQVksQ0FBRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUUsQ0FBQSxDQUFHLENBQUEsR0FBRyxFQUFFO1FBQy9FLElBQUksVUFBVSxHQUFHLENBQUMsUUFBUTtZQUN0QixvQkFBQyxVQUFVLEVBQUEsQ0FBQTtnQkFDUCxLQUFBLEVBQUssQ0FBQyxTQUFBLEVBQVMsQ0FBQyxJQUFBLEVBQUksQ0FBQyxTQUFBLEVBQVMsQ0FBQyxPQUFBLEVBQU8sQ0FBQyxRQUFBLEVBQVE7Z0JBQy9DLFlBQUEsRUFBWSxDQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBRSxDQUFBLENBQUcsQ0FBQSxHQUFHLEVBQUU7UUFDL0UsSUFBSSxXQUFXLEdBQUcsQ0FBQyxLQUFLO1lBQ3BCLG9CQUFDLFVBQVUsRUFBQSxDQUFBO2dCQUNQLEtBQUEsRUFBSyxDQUFDLFVBQUEsRUFBVSxDQUFDLElBQUEsRUFBSSxDQUFDLFFBQUEsRUFBUSxDQUFDLE9BQUEsRUFBTyxDQUFDLFFBQUEsRUFBUTtBQUMvRCxnQkFBZ0IsWUFBQSxFQUFZLENBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFFLENBQUEsQ0FBRyxDQUFBLEdBQUcsRUFBRTs7UUFFaEYsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxFQUFFO1lBQzVDO2dCQUNJLG9CQUFBLE1BQUssRUFBQSxDQUFBLENBQUMsR0FBQSxFQUFHLENBQUUsSUFBSSxDQUFDLEVBQUksQ0FBQSxFQUFDLElBQUksQ0FBQyxRQUFRLEVBQUMsR0FBUSxDQUFBO2FBQzlDO1NBQ0osQ0FBQztRQUNGO1lBQ0ksb0JBQUEsSUFBRyxFQUFBLENBQUEsQ0FBQyxTQUFBLEVBQVMsQ0FBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsR0FBRyxNQUFNLEdBQUcsRUFBRSxFQUFDLENBQUMsRUFBQSxFQUFFLENBQUUsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUksQ0FBQSxFQUFBO2dCQUMvRixvQkFBQSxJQUFHLEVBQUEsSUFBQyxFQUFBLG9CQUFBLEdBQUUsRUFBQSxJQUFDLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBWSxDQUFBLEVBQUEsR0FBQSxFQUFFLEtBQVcsQ0FBQSxFQUFBO2dCQUN0RCxvQkFBQSxJQUFHLEVBQUEsSUFBQyxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFNBQWUsQ0FBQSxFQUFBO2dCQUN6QyxvQkFBQSxJQUFHLEVBQUEsSUFBQyxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQVUsQ0FBQSxFQUFBO2dCQUNwQyxvQkFBQSxJQUFHLEVBQUEsSUFBQyxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQVksQ0FBQSxFQUFBO2dCQUN0QyxvQkFBQSxJQUFHLEVBQUEsSUFBQyxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQVcsQ0FBQSxFQUFBO2dCQUNyQyxvQkFBQSxJQUFHLEVBQUEsSUFBQyxFQUFDLFVBQVUsRUFBQyxvQkFBQSxLQUFJLEVBQUEsQ0FBQSxDQUFDLFNBQUEsRUFBUyxDQUFDLFdBQVksQ0FBQSxFQUFDLFVBQVUsRUFBQyxHQUFBLEVBQUUsV0FBVyxFQUFDLEdBQUEsRUFBRSxZQUFtQixDQUFLLENBQUE7WUFDOUYsQ0FBQTtVQUNQO0tBQ0w7QUFDTCxDQUFDLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsU0FBUyxHQUFHLFNBQVM7QUFDNUIsTUFBTSxDQUFDLE9BQU8sR0FBRzs7O0FDaEpqQixJQUFJLG1DQUFtQyw2QkFBQTtJQUNuQyxlQUFlLEVBQUUsV0FBVztNQUMxQixPQUFPO1FBQ0wsS0FBSyxFQUFFLEVBQUU7T0FDVjtBQUNQLEtBQUs7O0lBRUQsaUJBQWlCLEVBQUUsV0FBVztBQUNsQyxLQUFLOztJQUVELFlBQVksRUFBRSxTQUFTLENBQUMsRUFBRTtBQUM5QixNQUFNLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQzs7TUFFbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQztVQUN6QixFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSztVQUN0QixTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSztVQUNwQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztVQUMxQixNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSztVQUM5QixLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSztBQUN0QyxPQUFPLENBQUMsQ0FBQzs7TUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO01BQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7TUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztNQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO01BQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7TUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztNQUMzQixPQUFPO0FBQ2IsS0FBSzs7SUFFRCxNQUFNLEVBQUUsV0FBVztRQUNmO1lBQ0ksb0JBQUEsS0FBSSxFQUFBLENBQUEsQ0FBQyxTQUFBLEVBQVMsQ0FBQyxXQUFZLENBQUEsRUFBQTtjQUN6QixvQkFBQSxJQUFHLEVBQUEsSUFBQyxFQUFBLGVBQWtCLENBQUEsRUFBQTtjQUN0QixvQkFBQSxLQUFJLEVBQUEsQ0FBQSxDQUFDLFNBQUEsRUFBUyxDQUFDLFdBQVksQ0FBQSxFQUFBO2dCQUN6QixvQkFBQSxNQUFLLEVBQUEsQ0FBQSxDQUFDLFNBQUEsRUFBUyxDQUFDLDJCQUFBLEVBQTJCLENBQUMsUUFBQSxFQUFRLENBQUUsSUFBSSxDQUFDLFlBQWMsQ0FBQSxFQUFBO2tCQUN2RSxvQkFBQSxPQUFNLEVBQUEsQ0FBQSxDQUFDLElBQUEsRUFBSSxDQUFDLFFBQUEsRUFBUSxDQUFDLEVBQUEsRUFBRSxDQUFDLElBQUEsRUFBSSxDQUFDLEdBQUEsRUFBRyxDQUFDLElBQUEsRUFBSSxDQUFDLE1BQUEsRUFBQSxDQUFBLENBQUcsQ0FBQSxFQUFBO2tCQUN6QyxvQkFBQSxLQUFJLEVBQUEsQ0FBQSxDQUFDLFNBQUEsRUFBUyxDQUFDLFlBQWEsQ0FBQSxFQUFBO29CQUMxQixvQkFBQSxPQUFNLEVBQUEsQ0FBQSxDQUFDLFNBQUEsRUFBUyxDQUFDLFNBQUEsRUFBUyxDQUFDLE9BQUEsRUFBTyxDQUFDLFdBQVksQ0FBQSxFQUFBLFdBQWlCLENBQUEsRUFBQTtvQkFDaEUsb0JBQUEsT0FBTSxFQUFBLENBQUEsQ0FBQyxJQUFBLEVBQUksQ0FBQyxNQUFBLEVBQU0sQ0FBQyxTQUFBLEVBQVMsQ0FBQyxjQUFBLEVBQWMsQ0FBQyxXQUFBLEVBQVcsQ0FBQyxXQUFBLEVBQVcsQ0FBQyxFQUFBLEVBQUUsQ0FBQyxXQUFBLEVBQVcsQ0FBQyxHQUFBLEVBQUcsQ0FBQyxXQUFXLENBQUEsQ0FBRyxDQUFBO2tCQUNqRyxDQUFBLEVBQUE7a0JBQ04sb0JBQUEsS0FBSSxFQUFBLENBQUEsQ0FBQyxTQUFBLEVBQVMsQ0FBQyxZQUFhLENBQUEsRUFBQTtvQkFDMUIsb0JBQUEsT0FBTSxFQUFBLENBQUEsQ0FBQyxTQUFBLEVBQVMsQ0FBQyxTQUFBLEVBQVMsQ0FBQyxPQUFBLEVBQU8sQ0FBQyxNQUFPLENBQUEsRUFBQSxNQUFZLENBQUEsRUFBQTtvQkFDdEQsb0JBQUEsT0FBTSxFQUFBLENBQUEsQ0FBQyxJQUFBLEVBQUksQ0FBQyxNQUFBLEVBQU0sQ0FBQyxTQUFBLEVBQVMsQ0FBQyxjQUFBLEVBQWMsQ0FBQyxXQUFBLEVBQVcsQ0FBQyxNQUFBLEVBQU0sQ0FBQyxFQUFBLEVBQUUsQ0FBQyxNQUFBLEVBQU0sQ0FBQyxHQUFBLEVBQUcsQ0FBQyxNQUFNLENBQUEsQ0FBRyxDQUFBO2tCQUNsRixDQUFBLEVBQUE7a0JBQ04sb0JBQUEsS0FBSSxFQUFBLENBQUEsQ0FBQyxTQUFBLEVBQVMsQ0FBQyxZQUFhLENBQUEsRUFBQTtvQkFDMUIsb0JBQUEsT0FBTSxFQUFBLENBQUEsQ0FBQyxTQUFBLEVBQVMsQ0FBQyxTQUFBLEVBQVMsQ0FBQyxPQUFBLEVBQU8sQ0FBQyxRQUFTLENBQUEsRUFBQSxRQUFjLENBQUEsRUFBQTtvQkFDMUQsb0JBQUEsT0FBTSxFQUFBLENBQUEsQ0FBQyxJQUFBLEVBQUksQ0FBQyxNQUFBLEVBQU0sQ0FBQyxTQUFBLEVBQVMsQ0FBQyxjQUFBLEVBQWMsQ0FBQyxXQUFBLEVBQVcsQ0FBQyxRQUFBLEVBQVEsQ0FBQyxFQUFBLEVBQUUsQ0FBQyxRQUFBLEVBQVEsQ0FBQyxHQUFBLEVBQUcsQ0FBQyxRQUFRLENBQUEsQ0FBRyxDQUFBO2tCQUN4RixDQUFBLEVBQUE7a0JBQ04sb0JBQUEsS0FBSSxFQUFBLENBQUEsQ0FBQyxTQUFBLEVBQVMsQ0FBQyxZQUFhLENBQUEsRUFBQTtvQkFDMUIsb0JBQUEsT0FBTSxFQUFBLENBQUEsQ0FBQyxTQUFBLEVBQVMsQ0FBQyxTQUFBLEVBQVMsQ0FBQyxPQUFBLEVBQU8sQ0FBQyxPQUFRLENBQUEsRUFBQSxPQUFhLENBQUEsRUFBQTtvQkFDeEQsb0JBQUEsT0FBTSxFQUFBLENBQUEsQ0FBQyxJQUFBLEVBQUksQ0FBQyxRQUFBLEVBQVEsQ0FBQyxTQUFBLEVBQVMsQ0FBQyxjQUFBLEVBQWMsQ0FBQyxXQUFBLEVBQVcsQ0FBQyxPQUFBLEVBQU8sQ0FBQyxFQUFBLEVBQUUsQ0FBQyxPQUFBLEVBQU8sQ0FBQyxHQUFBLEVBQUcsQ0FBQyxPQUFPLENBQUEsQ0FBRyxDQUFBO2tCQUN2RixDQUFBLEVBQUE7a0JBQ04sb0JBQUEsS0FBSSxFQUFBLENBQUEsQ0FBQyxTQUFBLEVBQVMsQ0FBQyxtQkFBb0IsQ0FBQSxFQUFBO29CQUNqQyxvQkFBQSxPQUFNLEVBQUEsQ0FBQSxDQUFDLFNBQUEsRUFBUyxDQUFDLFNBQUEsRUFBUyxDQUFDLE9BQUEsRUFBTyxDQUFDLE9BQVEsQ0FBQSxFQUFBLGtCQUF3QixDQUFBLEVBQUE7b0JBQ25FLG9CQUFBLE9BQU0sRUFBQSxDQUFBLENBQUMsSUFBQSxFQUFJLENBQUMsTUFBQSxFQUFNLENBQUMsU0FBQSxFQUFTLENBQUMsY0FBQSxFQUFjLENBQUMsV0FBQSxFQUFXLENBQUMsa0JBQUEsRUFBa0IsQ0FBQyxFQUFBLEVBQUUsQ0FBQyxPQUFBLEVBQU8sQ0FBQyxHQUFBLEVBQUcsQ0FBQyxPQUFBLEVBQU8sQ0FBQyxRQUFBLEVBQUEsQ0FBQSxDQUFHLENBQUE7a0JBQ2pHLENBQUEsRUFBQTtrQkFDTixvQkFBQyxVQUFVLEVBQUEsQ0FBQSxDQUFDLEtBQUEsRUFBSyxDQUFDLFVBQUEsRUFBVSxDQUFDLEtBQUEsRUFBSyxDQUFDLFlBQUEsRUFBWSxDQUFDLElBQUEsRUFBSSxDQUFDLFNBQUEsRUFBUyxDQUFDLE9BQUEsRUFBTyxDQUFDLFNBQVMsQ0FBQSxDQUFHLENBQUE7Z0JBQzlFLENBQUE7Y0FDSCxDQUFBO1lBQ0YsQ0FBQTtVQUNSO0tBQ0w7QUFDTCxDQUFDLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsYUFBYSxHQUFHLGFBQWE7QUFDcEMsTUFBTSxDQUFDLE9BQU8sR0FBRzs7O0FDbEVqQixJQUFJLG1DQUFtQyw2QkFBQTtFQUNyQyxxQkFBcUIsRUFBRSxTQUFTLFNBQVMsRUFBRTtJQUN6QyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ0gsR0FBRyxFQUFFLFFBQVEsR0FBRyxhQUFhLEdBQUcsU0FBUyxDQUFDLEVBQUU7UUFDNUMsVUFBVSxFQUFFLFNBQVMsR0FBRyxFQUFFO1VBQ3hCLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7U0FDN0Q7UUFDRCxJQUFJLEVBQUUsUUFBUTtRQUNkLE9BQU8sRUFBRSxTQUFTLE1BQU0sRUFBRTtTQUN6QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7VUFDVixLQUFLLEVBQUUsU0FBUyxHQUFHLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDO1NBQ3JDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztLQUNmLENBQUM7QUFDTixHQUFHOztFQUVELE1BQU0sRUFBRSxXQUFXO0lBQ2pCLElBQUksSUFBSSxHQUFHLElBQUk7SUFDZixJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxTQUFTLEVBQUU7UUFDdEQ7WUFDSSxvQkFBQyxTQUFTLEVBQUEsQ0FBQSxDQUFDLElBQUEsRUFBSSxDQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFBLEVBQUcsQ0FBRSxTQUFTLENBQUMsRUFBRSxFQUFDLENBQUMsZUFBQSxFQUFlLENBQUUsSUFBSSxDQUFDLHFCQUFxQixFQUFDLENBQUMsaUJBQUEsRUFBaUIsQ0FBRSxJQUFJLENBQUMscUJBQXNCLENBQUEsQ0FBRyxDQUFBO1VBQ2xKO0tBQ0wsQ0FBQyxDQUFDO0lBQ0g7TUFDRSxvQkFBQSxLQUFJLEVBQUEsQ0FBQSxDQUFDLFNBQUEsRUFBUyxDQUFDLFdBQVksQ0FBQSxFQUFBO1FBQ3pCLG9CQUFBLE9BQU0sRUFBQSxDQUFBLENBQUMsU0FBQSxFQUFTLENBQUMsbUNBQW9DLENBQUEsRUFBQTtVQUNuRCxvQkFBQSxPQUFNLEVBQUEsSUFBQyxFQUFBO1lBQ0wsb0JBQUEsSUFBRyxFQUFBLElBQUMsRUFBQTtjQUNGLG9CQUFBLElBQUcsRUFBQSxJQUFDLEVBQUEsU0FBWSxDQUFBLEVBQUE7Y0FDaEIsb0JBQUEsSUFBRyxFQUFBLElBQUMsRUFBQSxXQUFjLENBQUEsRUFBQTtjQUNsQixvQkFBQSxJQUFHLEVBQUEsSUFBQyxFQUFBLE1BQVMsQ0FBQSxFQUFBO2NBQ2Isb0JBQUEsSUFBRyxFQUFBLElBQUMsRUFBQSxRQUFXLENBQUEsRUFBQTtjQUNmLG9CQUFBLElBQUcsRUFBQSxJQUFDLEVBQUEsT0FBVSxDQUFBLEVBQUE7Y0FDZCxvQkFBQSxJQUFHLEVBQUEsSUFBQyxFQUFBLFFBQVcsQ0FBQTtZQUNaLENBQUE7VUFDQyxDQUFBLEVBQUE7VUFDUixvQkFBQSxPQUFNLEVBQUEsSUFBQyxFQUFBO1lBQ0osVUFBVSxFQUFDO1lBQ1osb0JBQUEsSUFBRyxFQUFBLElBQUMsRUFBQTtjQUNGLG9CQUFBLElBQUcsRUFBQSxJQUFDLEVBQUEsb0JBQUEsR0FBRSxFQUFBLENBQUEsQ0FBQyxTQUFBLEVBQVMsQ0FBQyxtQkFBb0IsQ0FBSSxDQUFLLENBQUEsRUFBQTtjQUM5QyxvQkFBQSxJQUFHLEVBQUEsSUFBQyxFQUFBLGFBQWdCLENBQUEsRUFBQTtjQUNwQixvQkFBQSxJQUFHLEVBQUEsSUFBQyxFQUFBLG9CQUFBLEdBQUUsRUFBQSxDQUFBLENBQUMsU0FBQSxFQUFTLENBQUMscUJBQXNCLENBQUksQ0FBQSxFQUFBLEdBQUEsRUFBQyxvQkFBQSxHQUFFLEVBQUEsQ0FBQSxDQUFDLFNBQUEsRUFBUyxDQUFDLG9CQUFxQixDQUFJLENBQUssQ0FBQSxFQUFBO2NBQ3ZGLG9CQUFBLElBQUcsRUFBQSxJQUFNLENBQUEsRUFBQTtjQUNULG9CQUFBLElBQUcsRUFBQSxJQUFDLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFpQixDQUFBLEVBQUE7Y0FDakMsb0JBQUEsSUFBRyxFQUFBLElBQUMsRUFBQSxTQUFBLEVBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFnQixDQUFBO1lBQ3BDLENBQUE7VUFDQyxDQUFBO1FBQ0YsQ0FBQTtNQUNKLENBQUE7TUFDTjtHQUNIO0FBQ0gsQ0FBQyxDQUFDLENBQUM7O0FBRUgsTUFBTSxDQUFDLGFBQWEsR0FBRyxhQUFhO0FBQ3BDLE1BQU0sQ0FBQyxPQUFPLEdBQUc7OztBQ3REakIsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQzs7QUFFdEMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQzs7QUFFckMsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDOztBQUU1QyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDOztBQUVsQyxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7O0FBRTFDLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQzs7QUFFbEQsSUFBSSxhQUFhLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0FBQ2xEOztBQUVBLFFBQVEsQ0FBQyxNQUFNO0lBQ1gsb0JBQUMsS0FBSyxFQUFBLENBQUEsQ0FBQyxPQUFBLEVBQU8sQ0FBRSxnQkFBZ0IsRUFBQyxDQUFDLEdBQUEsRUFBRyxDQUFFLGdDQUFnQyxHQUFHLEtBQUssRUFBQyxDQUFDLE9BQUEsRUFBTyxDQUFFLEtBQU0sQ0FBQSxDQUFHLENBQUE7SUFDbkcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUM7Q0FDekMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwidmFyIEJhbGFuY2UgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtiYWxhbmNlOiAwfVxuICAgIH0sXG5cbiAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6ICcvJyArIHRoaXMucHJvcHMudXJsICsgJ2JhbGFuY2UvJyArIHVzZXJfaWQgKyAnLycsXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2JhbGFuY2UnLCByZXN1bHQpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7YmFsYW5jZTogcmVzdWx0LmJhbGFuY2V9KVxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHhociwgc3RhdHVzLCBlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh4aHIsIHN0YXR1cywgZXJyKVxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgIH0pXG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBiYWxhbmNlID0gTWF0aC5yb3VuZCh0aGlzLnN0YXRlLmJhbGFuY2UgKiAxMDApIC8gMTAwXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy51c2VybmFtZX06IHtiYWxhbmNlfSBrclxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICApXG4gICAgfVxufSlcblxud2luZG93LkJhbGFuY2UgPSBCYWxhbmNlXG5tb2R1bGUuZXhwb3J0cyA9IEJhbGFuY2UiLCJ2YXIgQnV0dG9uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT17XCJidG4gYnRuLVwiICsgdGhpcy5wcm9wcy50eXBlICsgXCIgYnRuLXNtXCJ9IG9uQ2xpY2s9e3RoaXMucHJvcHMuY2xpY2tIYW5kbGVyfT57dGhpcy5wcm9wcy52YWx1ZX08L2J1dHRvbj5cbiAgICAgICAgKVxuICAgIH1cbn0pXG5cbndpbmRvdy5CdXR0b24gPSBCdXR0b25cbm1vZHVsZS5leHBvcnRzID0gQnV0dG9uIiwidmFyIEljb25CdXR0b24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wiYnRuIGJ0bi1cIiArIHRoaXMucHJvcHMudHlwZSArIFwiIFwiICsgdGhpcy5wcm9wcy5idG5zaXplfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMucHJvcHMuY2xpY2tIYW5kbGVyfVxuICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLmJ0bmlkfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT17XCJmYSBcIiArICh0aGlzLnByb3BzLnNpemUgPyAoXCJmYS1cIiArIHRoaXMucHJvcHMuc2l6ZSArIFwiIFwiKSA6IFwiIFwiKSArIChcImZhLVwiICsgdGhpcy5wcm9wcy52YWx1ZSl9PjwvaT5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICApXG4gICAgfVxufSlcblxud2luZG93Lkljb25CdXR0b24gPSBJY29uQnV0dG9uXG5tb2R1bGUuZXhwb3J0cyA9IEljb25CdXR0b24iLCJ2YXIgT3JkZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGxvYWRPcmRlcjogZnVuY3Rpb24ob3JkZXJpZCkge1xuICAgICQuYWpheCh7XG4gICAgICB1cmw6IGFwaV9iYXNlICsgJ29yZGVycy8nICsgb3JkZXJpZCxcbiAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihzdWNjZXNzKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe29yZGVyOiBzdWNjZXNzfSlcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7cmVzdGF1cmFudDogc3VjY2Vzcy5yZXN0YXVyYW50fSlcbiAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbih4aHIsIHN0YXR1cywgZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHhociwgc3RhdHVzLCBlcnIpXG4gICAgICB9LmJpbmQodGhpcylcbiAgICB9KVxuICB9LFxuXG4gIGxvYWRPcmRlckxpbmVzOiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAkLmFqYXgoe1xuICAgICAgdXJsOiBwYXRoIHx8IHRoaXMucHJvcHMudXJsLFxuICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHN1Y2Nlc3MpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLnN0YXRlLmRhdGE7XG4gICAgICAgIGZvciAodmFyIGF0dHJuYW1lIGluIHN1Y2Nlc3MucmVzdWx0cykge2RhdGFbc3VjY2Vzcy5yZXN1bHRzW2F0dHJuYW1lXS5pZF0gPSBzdWNjZXNzLnJlc3VsdHNbYXR0cm5hbWVdOyB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe2RhdGE6IGRhdGF9KTtcbiAgICAgICAgaWYgKHN1Y2Nlc3MubmV4dCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRPcmRlckxpbmVzKHN1Y2Nlc3MubmV4dClcbiAgICAgICAgfVxuICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKHhociwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKHhociwgc3RhdHVzLCBlcnJvcilcbiAgICAgIH0uYmluZCh0aGlzKVxuICAgIH0pO1xuICB9LFxuXG4gIGhhbmRsZU9yZGVyTGluZVN1Ym1pdDogZnVuY3Rpb24ob3JkZXJsaW5lKSB7XG4gICAgLy8gU3VibWl0IHRvIHNlcnZlciBhbmQgcmVmcmVzaCBsaXN0XG4gICAgb3JkZXJsaW5lLmNzcmZtaWRkbGV3YXJldG9rZW4gPSBjc3JmdG9rZW47XG4gICAgb3JkZXJsaW5lLm9yZGVyID0gb3JkZXI7XG4gICAgdmFyIHNob3VsZFB1dCA9IG9yZGVybGluZS5pZCAhPT0gXCJcIlxuICAgICQuYWpheCh7XG4gICAgICAgIHVybDogYXBpX2Jhc2UgKyBcIm9yZGVybGluZXMvXCIgKyAoc2hvdWxkUHV0ID8gb3JkZXJsaW5lLmlkIDogJycpLFxuICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbih4aHIpIHtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIlgtQ1NSRlRva2VuXCIsIGdldENvb2tpZShcImNzcmZ0b2tlblwiKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRhdGVUeXBlOiAnanNvbicsXG4gICAgICAgIHR5cGU6IHNob3VsZFB1dCA/ICdQVVQnIDogJ1BPU1QnLFxuICAgICAgICBkYXRhOiBvcmRlcmxpbmUsXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkUHV0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLnN0YXRlLmRhdGFcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBhdHRybmFtZSBpbiByZXNwb25zZSkge2RhdGFbcmVzcG9uc2VbYXR0cm5hbWVdLmlkXSA9IHJlc3BvbnNlW2F0dHJuYW1lXTsgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2RhdGE6IGRhdGF9KVxuICAgICAgICAgICAgICAgICQoXCIjb3JkZXJsaW5lLVwiICsgcmVzcG9uc2UuaWQpLnJlbW92ZUNsYXNzKFwiaGlkZVwiKSAvLyBoYWNreSB3YXkgdG8gc2hvdyBpdCBhZ2FpbiBhZnRlcndhcmRzXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2RhdGE6IHRoaXMuc3RhdGUuZGF0YS5jb25jYXQocmVzcG9uc2UpfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24oeGhyLCBzdGF0dXMsIGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKHhociwgc3RhdHVzLCBlcnJvcilcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgfSk7XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogW10sXG4gICAgICBvcmRlcjoge30sXG4gICAgICByZXN0YXVyYW50OiB7cmVzdGF1cmFudF9uYW1lOiAnJ31cbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubG9hZE9yZGVyKHRoaXMucHJvcHMub3JkZXJpZClcbiAgICB0aGlzLmxvYWRPcmRlckxpbmVzKClcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciB1cmxzID0gbG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoJy8nKVxuICAgIHZhciBncm91cCA9IHVybHNbdXJscy5sZW5ndGgtMl1cbiAgICB2YXIgTWVudSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtY3V0bGVyeVwiPjwvaT4gPGEgaHJlZj17dGhhdC5zdGF0ZS5yZXN0YXVyYW50Lm1lbnVfdXJsfT5NZW51PC9hPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0pXG4gICAgdmFyIFBob25lID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1waG9uZVwiPjwvaT5cbiAgICAgICAgICAgICAgPGEgaHJlZj17XCJ0ZWw6XCIgKyB0aGF0LnN0YXRlLnJlc3RhdXJhbnQucGhvbmVfbnVtYmVyfT5cbiAgICAgICAgICAgICAge3RoYXQuc3RhdGUucmVzdGF1cmFudC5waG9uZV9udW1iZXJ9XG4gICAgICAgICAgPC9hPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXIgb3JkZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICA8aDE+RmVlZG1lOntncm91cH1cbiAgICAgICAgICAgICAgPHNtYWxsPlxuICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIi4uXCI+PGkgY2xhc3NOYW1lPVwiZmEgZmEtbGV2ZWwtdXBcIj48L2k+PC9hPlxuICAgICAgICAgICAgICAgICAgICZuYnNwOyA6OiAmbmJzcDtcbiAgICAgICAgICAgICAgICAgIDxCYWxhbmNlIHVybD17dGhpcy5wcm9wcy5hcGlyb290fSB1c2VybmFtZT17dXNlcm5hbWV9IC8+XG4gICAgICAgICAgICAgIDwvc21hbGw+XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgICA8aDI+XG4gICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnJlc3RhdXJhbnQucmVzdGF1cmFudF9uYW1lfSAmbmJzcDtcbiAgICAgICAgICAgICAgPHNtYWxsPlxuICAgICAgICAgICAgICAgIDxNZW51IC8+ICZuYnNwO1xuICAgICAgICAgICAgICAgIDxQaG9uZSAvPlxuICAgICAgICAgICAgICA8L3NtYWxsPlxuICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgPE9yZGVyTGluZUxpc3RcbiAgICAgICAgICAgICAgYXBpcm9vdD17dGhpcy5wcm9wcy5hcGlyb290fVxuICAgICAgICAgICAgICBkYXRhPXt0aGlzLnN0YXRlLmRhdGF9XG4gICAgICAgICAgICAgIHVybD17dGhpcy5wcm9wcy51cmx9XG4gICAgICAgICAgICAgIGV4dHJhX2Nvc3RzPXt0aGlzLnN0YXRlLm9yZGVyLmV4dHJhX2Nvc3RzfVxuICAgICAgICAgICAgICB0b3RhbF9jb3N0PXt0aGlzLnN0YXRlLm9yZGVyLnRvdGFsX2Nvc3R9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgPE9yZGVyTGluZUZvcm0gb25PcmRlckxpbmVTdWJtaXQ9e3RoaXMuaGFuZGxlT3JkZXJMaW5lU3VibWl0fSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn0pO1xuXG53aW5kb3cuT3JkZXIgPSBPcmRlclxubW9kdWxlLmV4cG9ydHMgPSBPcmRlclxuIiwidmFyIE9yZGVyTGluZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBvcmRlcmxpbmU6IHt9LFxuICAgICAgICAgIHVzZXJzOiBbXSxcbiAgICAgICAgICBoaWRkZW46IGZhbHNlLFxuICAgICAgICAgIHNob3dEZWxldGU6IGZhbHNlLFxuICAgICAgICAgIHNob3dFZGl0OiBmYWxzZSxcbiAgICAgICAgICBzaG93Sm9pbjogZmFsc2UsXG4gICAgICAgICAgc2hvd0xlYXZlOiBmYWxzZVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmxvYWRPcmRlckxpbmUoKVxuICAgIH0sXG5cbiAgICBsb2FkT3JkZXJMaW5lOiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAkLmFqYXgoe1xuICAgICAgICB1cmw6IHBhdGggfHwgYXBpX2Jhc2UgKyBcIm9yZGVybGluZXMvXCIgKyB0aGlzLnByb3BzLm9saWQgKyBcIi9cIixcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7b3JkZXJsaW5lOiByZXN1bHQsIHVzZXJzOiByZXN1bHQudXNlcnN9KVxuICAgICAgICB9LmJpbmQodGhpcyksXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbih4aHIsIGVyciwgc3RhdHVzKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJTb21ldGhpbmcgd2VudCB3cm9uZy5cIiwgeGhyLCBlcnIsIHN0YXR1cylcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICB9KVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7aGlkZU9yZGVyTGluZTogZmFsc2V9KVxuICAgIH0sXG5cbiAgICBnZW5lcmF0ZUFsZXJ0OiBmdW5jdGlvbih0eXBlLCBtZXNzYWdlKSB7XG4gICAgICB2YXIgYWxlcnRfbWVzc2FnZSA9IFwiPGRpdiBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtXCIgKyB0eXBlICsgXCJcXFwiPjxhIGNsYXNzPVxcXCJjbG9zZVxcXCIgZGF0YS1kaXNtaXNzPVxcXCJhbGVydFxcXCI+JnRpbWVzPC9hPiBcIiArIG1lc3NhZ2UgKyBcIjwvZGl2PlwiXG4gICAgICAkKCcjYm9vdHN0cmFwLW1lc3NhZ2VzJykuYXBwZW5kKGFsZXJ0X21lc3NhZ2UpXG4gICAgfSxcblxuICAgIGhhbmRsZVJlbW92ZTogZnVuY3Rpb24ob3JkZXJsaW5lKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtoaWRlT3JkZXJMaW5lOiB0cnVlfSlcbiAgICAgIHRoaXMucHJvcHMub25SZW1vdmVPcmRlckxpbmUob3JkZXJsaW5lKVxuICAgIH0sXG5cbiAgICBoYW5kbGVFZGl0OiBmdW5jdGlvbihvcmRlcmxpbmUpIHtcbiAgICAgIC8vIEBUb0RvOiBNYWtlIHRoaXMgYmV0dGVyLCBhbmQgc2VuZCBhIGNhbGxiYWNrIHdoaWNoIHVwZGF0ZXMgdGhpcyBzdGF0ZVxuICAgICAgLy8gUGxhY2UgdmFsdWVzIGluIGZvcm1cbiAgICAgICQoXCIjaWRcIikudmFsKG9yZGVybGluZS5pZClcbiAgICAgICQoXCIjbWVudV9pdGVtXCIpLnZhbChvcmRlcmxpbmUubWVudV9pdGVtKVxuICAgICAgJChcIiNzb2RhXCIpLnZhbChvcmRlcmxpbmUuc29kYSlcbiAgICAgICQoXCIjZXh0cmFzXCIpLnZhbChvcmRlcmxpbmUuZXh0cmFzKVxuICAgICAgJChcIiNwcmljZVwiKS52YWwob3JkZXJsaW5lLnByaWNlKVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7aGlkZU9yZGVyTGluZTogdHJ1ZX0pXG5cbiAgICAgIC8vIE9uIGZvcm0gc3VibWl0LCByZWxvYWQgY3VycmVudCBvcmRlcmxpbmVcbiAgICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgJChcIiNmb3JtU3VibWl0XCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRoYXQubG9hZE9yZGVyTGluZSgpXG4gICAgICAgIH0sIDUwMCkgLy8gSSBob3BlIDUwMG1zIGlzIGVub3VnaCB0byB3YWl0IGZvciBhIFBPU1QgcmVxdWVzdCB0byBjb21wbGV0ZS5cbiAgICAgIH0pXG4gICAgfSxcblxuICAgIGhhbmRsZUpvaW46IGZ1bmN0aW9uKG9yZGVybGluZSkge1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICB1cmw6IGFwaV9iYXNlICsgXCJvcmRlcmxpbmVzL1wiICsgdGhpcy5wcm9wcy5vbGlkICsgXCIvam9pbi9cIixcbiAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24oeGhyKSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJYLUNTUkZUb2tlblwiLCBnZXRDb29raWUoXCJjc3JmdG9rZW5cIikpO1xuICAgICAgICB9LFxuICAgICAgICBtZXRob2Q6ICdwdXQnLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICB0aGlzLmdlbmVyYXRlQWxlcnQoJ2luZm8nLCAnSm9pbmVkIG9yZGVybGluZScpXG4gICAgICAgICAgdmFyIHVzZXJzID0gdGhpcy5zdGF0ZS51c2Vyc1xuICAgICAgICAgIHVzZXJzLnB1c2goe3VzZXJuYW1lOiB1c2VybmFtZX0pXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7dXNlcnM6IHVzZXJzfSlcbiAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24oeGhyLCBlcnIsIHN0YXR1cykge1xuICAgICAgICAgIHRoaXMuZ2VuZXJhdGVBbGVydCgnZGFuZ2VyJywgJ0ZhaWxlZCB0byBqb2luIG9yZGVybGluZTogJyArIHhoci5yZXNwb25zZVRleHQpXG4gICAgICAgICAgY29uc29sZS5sb2coXCJTb21ldGhpbmcgd2VudCB3cm9uZy5cIiwgeGhyLCBlcnIsIHN0YXR1cylcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICB9KVxuICAgIH0sXG5cbiAgICBoYW5kbGVMZWF2ZTogZnVuY3Rpb24ob3JkZXJsaW5lKSB7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgIHVybDogYXBpX2Jhc2UgKyBcIm9yZGVybGluZXMvXCIgKyB0aGlzLnByb3BzLm9saWQgKyBcIi9sZWF2ZS9cIixcbiAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24oeGhyKSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJYLUNTUkZUb2tlblwiLCBnZXRDb29raWUoXCJjc3JmdG9rZW5cIikpO1xuICAgICAgICB9LFxuICAgICAgICBtZXRob2Q6ICdwdXQnLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICB0aGlzLmdlbmVyYXRlQWxlcnQoJ2luZm8nLCAnTGVmdCBvcmRlcmxpbmUnKVxuICAgICAgICAgIHZhciB1c2VycyA9IHRoaXMuc3RhdGUudXNlcnNcbiAgICAgICAgICB1c2Vycy5wb3AodXNlcm5hbWUpXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7dXNlcnM6IHVzZXJzfSlcbiAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24oeGhyLCBlcnIsIHN0YXR1cykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiU29tZXRoaW5nIHdlbnQgd3JvbmcuXCIsIHhociwgZXJyLCBzdGF0dXMpXG4gICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGlzX2luID0gZmFsc2VcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN0YXRlLnVzZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS51c2Vyc1tpXS51c2VybmFtZSA9PT0gdXNlcm5hbWUpIHtcbiAgICAgICAgICAgICAgICBpc19pbiA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjYW5fam9pbiA9ICh0aGlzLnByb3BzLmNhbl9qb2luIHx8ICghaXNfaW4gJiYgdGhpcy5zdGF0ZS5vcmRlcmxpbmUuY3JlYXRvciAhPT0gdXNlcm5hbWUpKVxuXG4gICAgICAgIHZhciBkZWxldGVCdXR0b24gPSAgdGhpcy5zdGF0ZS5vcmRlcmxpbmUuY3JlYXRvciA9PT0gdXNlcm5hbWUgP1xuICAgICAgICAgICAgPEljb25CdXR0b25cbiAgICAgICAgICAgICAgICB2YWx1ZT1cInRyYXNoLW9cIiB0eXBlPVwiZGFuZ2VyXCIgYnRuc2l6ZT1cImJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgY2xpY2tIYW5kbGVyPXt0aGlzLmhhbmRsZVJlbW92ZS5iaW5kKHRoaXMsIHRoaXMuc3RhdGUub3JkZXJsaW5lKX0gLz4gOiBcIlwiXG4gICAgICAgIHZhciBlZGl0QnV0dG9uID0gKGlzX2luIHx8IHRoaXMuc3RhdGUub3JkZXJsaW5lLmNyZWF0b3IgPT09IHVzZXJuYW1lKSA/XG4gICAgICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgICAgICAgIHZhbHVlPVwicGVuY2lsLXNxdWFyZS1vXCIgdHlwZT1cInByaW1hcnlcIiBidG5zaXplPVwiYnRuLXNtXCJcbiAgICAgICAgICAgICAgICBjbGlja0hhbmRsZXI9e3RoaXMuaGFuZGxlRWRpdC5iaW5kKHRoaXMsIHRoaXMuc3RhdGUub3JkZXJsaW5lKX0gLz4gOiBcIlwiXG4gICAgICAgIHZhciBqb2luQnV0dG9uID0gKGNhbl9qb2luKSA/XG4gICAgICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgICAgICAgIHZhbHVlPVwic2lnbi1pblwiIHR5cGU9XCJwcmltYXJ5XCIgYnRuc2l6ZT1cImJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgY2xpY2tIYW5kbGVyPXt0aGlzLmhhbmRsZUpvaW4uYmluZCh0aGlzLCB0aGlzLnN0YXRlLm9yZGVybGluZSl9IC8+IDogXCJcIlxuICAgICAgICB2YXIgbGVhdmVCdXR0b24gPSAoaXNfaW4pID9cbiAgICAgICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgICAgICAgdmFsdWU9XCJzaWduLW91dFwiIHR5cGU9XCJkYW5nZXJcIiBidG5zaXplPVwiYnRuLXNtXCJcbiAgICAgICAgICAgICAgICBjbGlja0hhbmRsZXI9e3RoaXMuaGFuZGxlTGVhdmUuYmluZCh0aGlzLCB0aGlzLnN0YXRlLm9yZGVybGluZSl9IC8+IDogXCJcIlxuXG4gICAgICAgIHZhciB1c2VycyA9IHRoaXMuc3RhdGUudXNlcnMubWFwKGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPHNwYW4ga2V5PXt1c2VyLmlkfT57dXNlci51c2VybmFtZX0gPC9zcGFuPlxuICAgICAgICAgICAgKVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT17dGhpcy5zdGF0ZS5oaWRlT3JkZXJMaW5lID8gJ2hpZGUnIDogJyd9IGlkPXtcIm9yZGVybGluZS1cIiArIHRoaXMuc3RhdGUub3JkZXJsaW5lLmlkfT5cbiAgICAgICAgICAgICAgICA8dGQ+PGI+e3RoaXMuc3RhdGUub3JkZXJsaW5lLmNyZWF0b3J9PC9iPiB7dXNlcnN9PC90ZD5cbiAgICAgICAgICAgICAgICA8dGQ+e3RoaXMuc3RhdGUub3JkZXJsaW5lLm1lbnVfaXRlbX08L3RkPlxuICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5zdGF0ZS5vcmRlcmxpbmUuc29kYX08L3RkPlxuICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5zdGF0ZS5vcmRlcmxpbmUuZXh0cmFzfTwvdGQ+XG4gICAgICAgICAgICAgICAgPHRkPnt0aGlzLnN0YXRlLm9yZGVybGluZS5wcmljZX08L3RkPlxuICAgICAgICAgICAgICAgIDx0ZD57am9pbkJ1dHRvbn08ZGl2IGNsYXNzTmFtZT1cImJ0bi1ncm91cFwiPntlZGl0QnV0dG9ufSB7bGVhdmVCdXR0b259IHtkZWxldGVCdXR0b259PC9kaXY+PC90ZD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICk7XG4gICAgfVxufSk7XG5cbndpbmRvdy5PcmRlckxpbmUgPSBPcmRlckxpbmVcbm1vZHVsZS5leHBvcnRzID0gT3JkZXJMaW5lIiwidmFyIE9yZGVyTGluZUZvcm0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVzZXJzOiBbXVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgfSxcblxuICAgIGhhbmRsZVN1Ym1pdDogZnVuY3Rpb24oZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICB0aGlzLnByb3BzLm9uT3JkZXJMaW5lU3VibWl0KHtcbiAgICAgICAgICBpZDogdGhpcy5yZWZzLmlkLnZhbHVlLFxuICAgICAgICAgIG1lbnVfaXRlbTogdGhpcy5yZWZzLm1lbnVfaXRlbS52YWx1ZSxcbiAgICAgICAgICBzb2RhOiB0aGlzLnJlZnMuc29kYS52YWx1ZSxcbiAgICAgICAgICBleHRyYXM6IHRoaXMucmVmcy5leHRyYXMudmFsdWUsXG4gICAgICAgICAgcHJpY2U6IHRoaXMucmVmcy5wcmljZS52YWx1ZVxuICAgICAgfSk7XG4gICAgICAvLyBSZXNldCBhbGwgdGhlIHN0dWZmXG4gICAgICB0aGlzLnJlZnMuaWQudmFsdWUgPSBcIlwiO1xuICAgICAgdGhpcy5yZWZzLm1lbnVfaXRlbS52YWx1ZSA9IFwiXCI7XG4gICAgICB0aGlzLnJlZnMuc29kYS52YWx1ZSA9IFwiXCI7XG4gICAgICB0aGlzLnJlZnMuZXh0cmFzLnZhbHVlID0gXCJcIjtcbiAgICAgIHRoaXMucmVmcy5wcmljZS52YWx1ZSA9IFwiXCI7XG4gICAgICB0aGlzLnJlZnMudXNlcnMudmFsdWUgPSBcIlwiO1xuICAgICAgcmV0dXJuO1xuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbWQtMTJcIj5cbiAgICAgICAgICAgICAgPGgzPk5ldyBvcmRlcmxpbmU8L2gzPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1tZC0xMlwiPlxuICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzTmFtZT1cImZvcm0taW5saW5lIG9yZGVyTGluZUZvcm1cIiBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9PlxuICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBpZD1cImlkXCIgcmVmPVwiaWRcIiBoaWRkZW4gLz5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwic3Itb25seVwiIGh0bWxGb3I9XCJtZW51X2l0ZW1cIj5NZW51IGl0ZW08L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiBwbGFjZWhvbGRlcj1cIk1lbnUgaXRlbVwiIGlkPVwibWVudV9pdGVtXCIgcmVmPVwibWVudV9pdGVtXCIgLz5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJzci1vbmx5XCIgaHRtbEZvcj1cInNvZGFcIj5Tb2RhPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgcGxhY2Vob2xkZXI9XCJTb2RhXCIgaWQ9XCJzb2RhXCIgcmVmPVwic29kYVwiIC8+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwic3Itb25seVwiIGh0bWxGb3I9XCJleHRyYXNcIj5FeHRyYXM8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiBwbGFjZWhvbGRlcj1cIkV4dHJhc1wiIGlkPVwiZXh0cmFzXCIgcmVmPVwiZXh0cmFzXCIgLz5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJzci1vbmx5XCIgaHRtbEZvcj1cInByaWNlXCI+UHJpY2U8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHBsYWNlaG9sZGVyPVwiUHJpY2VcIiBpZD1cInByaWNlXCIgcmVmPVwicHJpY2VcIiAvPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXAgaGlkZGVuXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJzci1vbmx5XCIgaHRtbEZvcj1cInVzZXJzXCI+QWRkaXRpb25hbCB1c2VyczwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHBsYWNlaG9sZGVyPVwiQWRkaXRpb25hbCB1c2Vyc1wiIGlkPVwidXNlcnNcIiByZWY9XCJ1c2Vyc1wiIGRpc2FibGVkIC8+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uIHZhbHVlPVwiZmxvcHB5LW9cIiBidG5pZD1cImZvcm1TdWJtaXRcIiB0eXBlPVwic3VjY2Vzc1wiIGJ0bnNpemU9XCJwcmltYXJ5XCIgLz5cbiAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufSk7XG5cbndpbmRvdy5PcmRlckxpbmVGb3JtID0gT3JkZXJMaW5lRm9ybVxubW9kdWxlLmV4cG9ydHMgPSBPcmRlckxpbmVGb3JtIiwidmFyIE9yZGVyTGluZUxpc3QgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGhhbmRsZVJlbW92ZU9yZGVyTGluZTogZnVuY3Rpb24ob3JkZXJsaW5lKSB7XG4gICAgJC5hamF4KHtcbiAgICAgICAgdXJsOiBhcGlfYmFzZSArIFwib3JkZXJsaW5lcy9cIiArIG9yZGVybGluZS5pZCxcbiAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24oeGhyKSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJYLUNTUkZUb2tlblwiLCBnZXRDb29raWUoXCJjc3JmdG9rZW5cIikpO1xuICAgICAgICB9LFxuICAgICAgICB0eXBlOiBcIkRFTEVURVwiLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbih4aHIsIGVycm9yLCBzb21ldGhpbmcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHhociwgZXJyb3IsIHNvbWV0aGluZylcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgfSlcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciBvcmRlcmxpbmVzID0gdGhpcy5wcm9wcy5kYXRhLm1hcChmdW5jdGlvbiAob3JkZXJsaW5lKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8T3JkZXJMaW5lIG9saWQ9e29yZGVybGluZS5pZH0ga2V5PXtvcmRlcmxpbmUuaWR9IG9uRWRpdE9yZGVyTGluZT17dGhhdC5oYW5kbGVVcGRhdGVPcmRlckxpbmV9IG9uUmVtb3ZlT3JkZXJMaW5lPXt0aGF0LmhhbmRsZVJlbW92ZU9yZGVyTGluZX0gLz5cbiAgICAgICAgKTtcbiAgICB9KTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbWQtMTJcIj5cbiAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInRhYmxlIHRhYmxlLXN0cmlwZWQgb3JkZXJMaW5lTGlzdFwiPlxuICAgICAgICAgIDx0aGVhZD5cbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgPHRoPlVzZXIocyk8L3RoPlxuICAgICAgICAgICAgICA8dGg+TWVudSBpdGVtPC90aD5cbiAgICAgICAgICAgICAgPHRoPlNvZGE8L3RoPlxuICAgICAgICAgICAgICA8dGg+RXh0cmFzPC90aD5cbiAgICAgICAgICAgICAgPHRoPlByaWNlPC90aD5cbiAgICAgICAgICAgICAgPHRoPlN0YXR1czwvdGg+XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAge29yZGVybGluZXN9XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0ZD48aSBjbGFzc05hbWU9XCJmYSBmYS0yeCBmYS10cnVja1wiPjwvaT48L3RkPlxuICAgICAgICAgICAgICA8dGQ+RXh0cmEgY29zdHM8L3RkPlxuICAgICAgICAgICAgICA8dGQ+PGkgY2xhc3NOYW1lPVwiZmEgZmEtMnggZmEtYmljeWNsZVwiPjwvaT4gPGkgY2xhc3NOYW1lPVwiZmEgZmEtMnggZmEtcm9ja2V0XCI+PC9pPjwvdGQ+XG4gICAgICAgICAgICAgIDx0ZD48L3RkPlxuICAgICAgICAgICAgICA8dGQ+e3RoaXMucHJvcHMuZXh0cmFfY29zdHN9PC90ZD5cbiAgICAgICAgICAgICAgPHRkPlRvdGFsOiB7dGhpcy5wcm9wcy50b3RhbF9jb3N0fTwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59KTtcblxud2luZG93Lk9yZGVyTGluZUxpc3QgPSBPcmRlckxpbmVMaXN0XG5tb2R1bGUuZXhwb3J0cyA9IE9yZGVyTGluZUxpc3QiLCJ2YXIgQmFsYW5jZSA9IHJlcXVpcmUoJy4vQmFsYW5jZS5qc3gnKVxuXG52YXIgQnV0dG9uID0gcmVxdWlyZSgnLi9CdXR0b25zLmpzeCcpXG5cbnZhciBJY29uQnV0dG9uID0gcmVxdWlyZSgnLi9JY29uQnV0dG9uLmpzeCcpXG5cbnZhciBPcmRlciA9IHJlcXVpcmUoJy4vT3JkZXIuanN4JylcblxudmFyIE9yZGVyTGluZSA9IHJlcXVpcmUoJy4vT3JkZXJMaW5lLmpzeCcpXG5cbnZhciBPcmRlckxpbmVMaXN0ID0gcmVxdWlyZSgnLi9PcmRlckxpbmVMaXN0LmpzeCcpXG5cbnZhciBPcmRlckxpbmVGb3JtID0gcmVxdWlyZSgnLi9PcmRlckxpbmVGb3JtLmpzeCcpXG5cblxuUmVhY3RET00ucmVuZGVyKFxuICAgIDxPcmRlciBhcGlyb290PXtcIi4uL2ZlZWRtZS1hcGkvXCJ9IHVybD17XCIvZmVlZG1lLWFwaS9vcmRlcmxpbmVzLz9vcmRlcj1cIiArIG9yZGVyfSBvcmRlcmlkPXtvcmRlcn0gLz4sXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmZWVkbWUtbWFpblwiKVxuKTsiXX0=
