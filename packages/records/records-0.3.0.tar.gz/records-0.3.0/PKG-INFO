Metadata-Version: 1.1
Name: records
Version: 0.3.0
Summary: SQL for Humans
Home-page: https://github.com/kennethreitz/records
Author: Kenneth Reitz
Author-email: me@kennethreitz.org
License: ISC
Description: Records: SQL for Humans‚Ñ¢
        ========================
        
        Records is a very simple, but powerful, library for making raw SQL queries
        to Postgres databases.
        
        This common task can be surprisingly difficult with the standard tools available.
        This library strives to make this workflow as simple as possible,
        while providing an elegant interface to work with your query results.
        
        We know how to write SQL, so let's send some to our database:
        
        .. code:: python
        
            import records
        
            db = records.Database('postgres://...')
            rows = db.query('select * from active_users')    # or db.query_file('sqls/active-users.sql')
        
        ‚ò§ The Basics
        ------------
        
        Grab one row at a time:
        
        .. code:: python
        
            >>> rows[0]
            Record(username='model-t', name='Henry Ford', active=True, timezone=datetime.datetime(2016, 2, 6, 22, 28, 23, 894202), user_email='model-t@gmail.com')
        
        Or iterate over them:
        
        .. code:: python
        
            for r in rows:
                spam_user(name=r.name, email=r.user_email)
        
        Or store them all for later reference:
        
        .. code:: python
        
            >>> rows.all()
            [Record(username=...), Record(username=...), Record(username=...), ...]
        
        ‚ò§ Features
        ----------
        
        - HSTORE support, if available.
        - Iterated rows are cached for future reference.
        - ``$DATABASE_URL`` environment variable support.
        - Convenience ``Database.get_table_names`` method.
        - Safe `parameterization <http://initd.org/psycopg/docs/usage.html>`_: ``Database.query('life=%s', params=('42',))``
        - Queries can be passed as strings or filenames, parameters supported.
        - Query results are iterators of standard Python dictionaries: ``{'column-name': 'value'}``
        
        Records is proudly powered by `Psycopg2 <https://pypi.python.org/pypi/psycopg2>`_
        and `Tablib <http://docs.python-tablib.org/en/latest/>`_.
        
        ‚ò§ Data Export Functionality
        ---------------------------
        
        Records also features full Tablib integration, and allows you to export
        your results to CSV, XLS, JSON, HTML Tables, or YAML with a single line of code.
        Excellent for sharing data with friends, or generating reports.
        
        .. code:: pycon
        
            >>> print rows.dataset
            username|active|name      |user_email       |timezone
            --------|------|----------|-----------------|--------------------------
            model-t |True  |Henry Ford|model-t@gmail.com|2016-02-06 22:28:23.894202
            ...
        
        - Comma Seperated Values (CSV)
        
          .. code:: pycon
        
              >>> print rows.export('csv')
              username,active,name,user_email,timezone
              model-t,True,Henry Ford,model-t@gmail.com,2016-02-06 22:28:23.894202
              ...
        
        - YAML Ain't Markup Language (YAML)
        
          .. code:: python
        
              >>> print rows.export('yaml')
              - {active: true, name: Henry Ford, timezone: '2016-02-06 22:28:23.894202', user_email: model-t@gmail.com, username: model-t}
              ...
        
        - JavaScript Object Notation (JSON)
        
          .. code:: python
        
              >>> print rows.export('json')
              [{"username": "model-t", "active": true, "name": "Henry Ford", "user_email": "model-t@gmail.com", "timezone": "2016-02-06 22:28:23.894202"}, ...]
        
        - Microsoft Excel (xls, xlsx)
        
          .. code:: python
        
              with open('report.xls', 'wb') as f:
                  f.write(rows.export('xls'))
        
        You get the point. All other features of Tablib are also available,
        so you can sort results, add/remove columns/rows, remove duplicates,
        transpose the table, add separators, slice data by column, and more.
        
        See the `Tablib Documentation <http://docs.python-tablib.org/en/latest/>`_
        for more details.
        
        ‚ò§ Installation
        --------------
        
        Of course, the recommended installation method is pip::
        
            $ pip install records
            ‚ú®üç∞‚ú®
        
        ‚ò§ Thank You
        -----------
        
        Thanks for checking this library out! I hope you find it useful.
        
        Of course, there's always room for improvement. Feel free to `open an issue <https://github.com/kennethreitz/records/issues>`_ so we can make Records better, stronger, faster.
        
        
        
        
        v0.3.0 (02-11-2016)
        ===================
        
        - New ``record`` command-line tool available!
        - Various improvements.
        
        v0.2.0 (02-10-2016)
        ===================
        
        - Results are now represented as `Record`, a namedtuples class with dict-like qualities.
        - New `ResultSet.export` method, for exporting to various formats.
        - Slicing a `ResultSet` now works, and results in a new `ResultSet`.
        - Lots of bugfixes and improvements!
        
        v0.1.0 (02-07-2016)
        ===================
        
        - Initial release.
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: License :: OSI Approved :: ISC License (ISCL)
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: Implementation :: CPython
