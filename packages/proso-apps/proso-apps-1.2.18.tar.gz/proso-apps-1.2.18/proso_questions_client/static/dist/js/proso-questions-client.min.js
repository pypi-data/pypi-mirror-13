(function() {
  'use strict';
  /* global jQuery  */
  // Declare app level module which depends on filters, and services
  angular.module('adaptivePractice', [
    'adaptivePractice.controllers',
    'adaptivePractice.directives',
    'adaptivePractice.filters',
    'adaptivePractice.services',
    'angulartics',
    'angulartics.google.analytics',
    'googleExperiments',
    'ngAnimate',
    'ngMaterial',
    'ngRoute',
    'ngSanitize',
    'proso.feedback',
    'proso.user',
    'timer',
    'ui.bootstrap',
  ])

  .value('$', jQuery)

  .config(['$routeProvider', '$locationProvider', 'domain', 'googleExperimentsProvider',
      function($routeProvider, $locationProvider, domain, googleExperimentsProvider) {
    $routeProvider.when('/', {
    }).when('/login/:somepath/', {
      controller : 'ReloadController',
      templateUrl : 'loading.html'
    }).when('/how-it-works', {
      templateUrl : 'how-it-works.html'
    }).when('/about', {
      templateUrl : 'static/tpl/about.html'
    }).when('/view/:category?', {
      controller : 'AppView',
      templateUrl : 'static/tpl/view_tpl.html',
      reloadOnSearch : false,
    }).when('/refreshpractice/:category?', {
      redirectTo : '/practice/:category'
    }).when('/practice/:category?', {
      controller : 'AppPractice',
      templateUrl : 'static/tpl/practice_tpl.html',
      reloadOnSearch : false,
    }).when('/test/', {
      controller : 'AppTest',
      templateUrl : 'static/tpl/test_tpl.html'
    }).when('/refreshtest/', {
      redirectTo : '/test/'
    }).when('/overview/:user?', {
      controller : 'AppOverview',
      templateUrl : 'static/tpl/overview_tpl.html'
    }).otherwise({
      //redirectTo : '/'
    });

    if (!domain) {
      // TODO: this desn't work in latest Angular
      //$locationProvider.html5Mode(true);
    }
      googleExperimentsProvider.configure({
        experimentId: ''
      });
  }])

  .run(['$analytics', function($analytics) {
    $analytics.settings.pageTracking.autoTrackFirstPage = false;
  }]);
}());

(function() {
  'use strict';
  /* Controllers */
  angular.module('adaptivePractice.controllers', [])

  .controller('AppCtrl', ['$scope', '$rootScope', 'user', 'pageTitle', '$modal', '$window',
      function($scope, $rootScope, user, pageTitle, $modal, $window) {
    $rootScope.topScope = $rootScope;

    $rootScope.initTitle = function (title) {
      $rootScope.initialTitle = title;
      $rootScope.title = title;
    };

    $rootScope.$on("$routeChangeStart", function(event, next) {
      $rootScope.title = pageTitle(next) + $rootScope.initialTitle;
      $rootScope.isHomepage = !next.templateUrl;
    });

    var updateUser = function(data) {
      $rootScope.user = data;
    };

    $scope.initUser = function (userObj) {
      $rootScope.user = user.initUser(userObj);
    };

    $rootScope.logout = function() {
      $rootScope.user = user.logout(updateUser);
    };

  }])

  .controller('AppView', ['$scope', '$routeParams', '$filter', 'questions',
      function($scope, $routeParams, $filter, questions) {
    $scope.categoryId = $routeParams.category;
    $scope.page = 0;
    $scope.questions = [];

    $scope.onBottomReached = function() {
      loadQuestions();
    };

    function loadQuestions() {
      if ($scope.loading) {
        return;
      }
      $scope.loading = true;
      questions.get($scope.categoryId, $scope.page).
        error(function(response){
          if (!response || response.status === 0) {
            $scope.error = "Aplikaci chybí připojení k internetu.";
          } else {
            $scope.error = "V aplikaci bohužel nastala chyba.";
          }
          $scope.loading = false;
        }).
        success(function(data) {
          var questions = data.data;
          questions = questions.map(function(question) {
            for (var i = 0; i < question.options.length; i++) {
              if (question.options[i].correct) {
                question.correct = question.options[i].order;
              }
            }
            return question;
          });
          $scope.questions = $scope.questions.concat(questions);
          $scope.loading = false;
          $scope.hasMoreQuestions = questions.length > 0;
          if ($scope.categoryId && questions.length > 0) {
            $scope.category = questions[0].categories[0];
          }
        });
      $scope.page++;
    }
    loadQuestions();

  }])

  .controller('AppPractice', ['$scope', '$routeParams', '$timeout', '$filter',
      'practice', 'user', 'events',
      function($scope, $routeParams, $timeout, $filter,
      practice, user, events) {
    $scope.categoryId = $routeParams.category;

    $scope.checkAnswer = function(selected) {
      highlightOptions(selected);
      if (selected) {
        $scope.question.answered = selected;
      }
      $scope.progress = practice.answer($scope.question, $scope.categoryId);
      if (selected && selected.correct) {
        $timeout(function() {
          $scope.next();
        }, 700);
      } else {
        $scope.canNext = true;
      }
      user.addAnswer(selected && selected.correct);
    };

    $scope.next = function() {
      if ($scope.progress < 100) {
        practice.next($scope.categoryId, setQuestion);
      } else {
        setupSummary();
      }
    };

    function setupSummary() {
      $scope.progress = 0;
      $scope.questions = [];
      $scope.summary = practice.summary();
      $scope.showSummary = true;
      events.emit('questionSetFinished', user.getUser().points);
    }

    function setQuestion(active) {
      $scope.question = active;
      $scope.questions = [active];
      $scope.canNext = false;
    }

    function highlightOptions(selected) {
      $scope.question.options.map(function(o) {
        o.disabled = true;
        o.selected = o == selected;
        return o;
      });
    }

    practice.first($scope.categoryId, function(q) {
      setQuestion(q);
    }).error(function(response){
        if (!response || response.status === 0) {
          $scope.error = "Aplikaci chybí připojení k internetu.";
        } else {
          $scope.error = "V aplikaci bohužel nastala chyba.";
        }
    });
  }])

  .controller('AppTest', ['$scope', '$timeout', 'practice', '$',
      function($scope, $timeout, practice, $) {

    $scope.checkAnswer = function(selected) {
      highlightOptions(selected);
      if (selected) {
        $scope.question.answered = selected;
      }
      $timeout(function() {
        $scope.next();
      }, 700);
    };

    $scope.prev = function() {
      $scope.activeQuestionIndex--;
      if ($scope.activeQuestionIndex < 0) {
        $scope.activeQuestionIndex = $scope.questions.length - 1;
      }
      setQuestion();
    };

    $scope.next = function() {
      $scope.activeQuestionIndex++;
      if ($scope.activeQuestionIndex > $scope.questions.length - 1) {
        $scope.activeQuestionIndex = 0;
      }
      setQuestion();
    };

    $scope.activateQuestion = function(index) {
      $scope.activeQuestionIndex = index;
      setQuestion();
    };

    $scope.evaluate = function(timeRunOut) {
      addResponseTime();
      $scope.activeQuestionIndex = undefined;
      $scope.showSummary = true;
      $scope.loading = true;
      practice.evaluateTest($scope.test, $scope.questions)
      .success(function(data){
        var result = data.data;
        $scope.result = result;
        $scope.result.pointsRatio = result.score_achieved / result.score_max;
        $scope.result.pointsMissingToPass = Math.max(0, result.score_to_pass - result.score_achieved);
        $scope.result.pointsToPassPortion = $scope.result.pointsMissingToPass / result.score_max;
        for (var i = 0; i < data.data.questions.length; i++) {
          for (var j = 0; j < $scope.questions.length; j++) {
            if ($scope.questions[j].id == data.data.questions[i].question_id ) {
              $scope.questions[j].points = data.data.questions[i].score + ' b';
            }
          }
        }
        $scope.loading = false;
      });
      $scope.questions.map(function(q) {
        q.isCorrect = q.answered && q.answered.correct;
        q.isWrong = !q.isCorrect;
        q.prediction = (q.answered ? q.answered.correct : 0) + 0;
        q.points = ' ';
      });
      $scope.summary = {
        questions : $scope.questions,
        correctlyAnsweredRatio : 0.5,
      };
      if (timeRunOut) {
        $scope.$apply();
      } else {
        $('timer')[0].stop();
      }
    };

    function setQuestion() {
      addResponseTime();
      $scope.question = $scope.questions[$scope.activeQuestionIndex];
      $scope.question.start_time = new Date().valueOf();
    }

    function addResponseTime() {
      if ($scope.question) {
        $scope.question.response_time += new Date().valueOf() - $scope.question.start_time;
      }
    }

    function highlightOptions(selected) {
      $scope.question.options.map(function(o) {
        o.selected = o == selected;
        return o;
      });
    }

    $scope.start = function() {
      $scope.started = true;
      practice.test(function(data) {
        $scope.questions = data.questions;
        $scope.questions.map(function(q){
          q.response_time = 0;
        });
        $scope.test = data.test;
        $scope.activateQuestion(0);
    console.log('test scope', $scope);
      }).error(function(response){
        if (!response || response.status === 0) {
          $scope.error = "Aplikaci chybí připojení k internetu.";
        } else {
          $scope.error = "V aplikaci bohužel nastala chyba.";
        }
      });
    };
  }])

  .controller('ReloadController', ['$window', function($window){
    $window.location.reload();
  }]);
}());

(function() {
  'use strict';
  /* global chroma  */

  /* Services */
  angular.module('adaptivePractice.services', [
    'ngCookies'
  ])

  .value('chroma', chroma)

  .constant('domain', window.domain || '')

  .value('colors', {
    'GOOD': '#0f9d58',
    'BAD': 'd9534f',
    'NEUTRAL': '#bbb',
    'BRIGHT_GRAY' : '#ddd',
  })

  .factory('colorScale', ['colors', 'chroma', function(colors, chroma) {
    var scale = chroma.scale([
        colors.BAD,
        '#ff4500',
        '#ffa500',
        '#ffff00',
        colors.GOOD
      ]);
    return scale;
  }])


  .factory('questions', ['$http', '$routeParams', 'params', 'domain',
      function($http, $routeParams, params, domain) {
    var that = {
      get : function(category, page) {
        var url = domain + '/questions/questions/';
        var options = {
          params : angular.extend({
            stats : true,
            page : page,
            limit : $routeParams.limit || 20,
          }, params.all())
        };
        if (category) {
          options.params.filter_column = 'category_id';
          options.params.filter_value = category;
        }
        options.params.json_orderby = 'prediction';
        var promise = $http.get(url, options);
        return promise;
      },
      fetchPredicitons : function(questions, predictionPropertyName) {
        predictionPropertyName = predictionPropertyName || 'prediction';
        var predictionsUrl = domain + '/models/model/?items=';
        predictionsUrl += questions.map(function(q) {
          return q.item_id;
        }).join(',');
        var options = {
          params : params.all(),
        };
        $http.get(predictionsUrl, options).success(function(data) {
          for (var i = 0; i < data.data.predictions.length; i++) {
            for (var j = 0; j < questions.length; j++) {
              if (questions[j].item_id == data.data.items[i].item_id ) {
                questions[j][predictionPropertyName] = data.data.items[i].prediction;
              }
            }
          }
        });
      },
    };
    return that;
  }])

  .service('practice', ['$http', '$log', 'user', '$', '$routeParams', 'questions',
        'params', 'domain',
      function($http, $log, user, $, $routeParams, questions, params, domain) {
    var qIndex = 0;
    var url;
    $http.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';

    function returnQuestion(fn) {
      var q = questionsList[qIndex++];
      if (q)
        q.response_time = -new Date().valueOf();
      fn(q);
    }
    function hasNoTwoSameInARow(array) {
      for (var i = 0, j = array.length; i + 1 < j; i++) {
        if (array[i].id == array[i + 1].id) {
          return false;
        }
      }
      return true;
    }
    var questionsList = [];
    var summary = [];
    var requestOptions = {};
    return {
      test : function(fn) {
        url = domain + '/questions/test';
        var options = {
          params : params.all(),
        };
        var promise = $http.get(url, options).success(function(data) {
          fn(data.data);
          user.initCsfrtoken();
        });
        return promise;
      },
      evaluateTest : function(test, questions) {
        var data = $.param({
          question : questions.map(function(q){return q.id;}),
          answered : questions.map(function(q){return q.answered && q.answered.id;}),
          response_time : questions.map(function(q){return q.response_time;}),
        });
        var url = domain + test.test_evaluate_url + '?hack' + params.queryString();
        var promise = $http({
          method: 'POST',
          url : url,
          data: data,
          headers: {
            'X-CSRFToken' : user.getCsrftoken(),
          }
        });
        return promise;
      },
      first : function(part, fn) {
        requestOptions.params = angular.extend({
          category : part,
          stats : true,
        }, params.all());
        url = domain + '/questions/practice';
        summary = [];
        var promise = $http.get(url, requestOptions).success(function(data) {
          qIndex = 0;
          questionsList = data.data.questions;
          returnQuestion(fn);
          user.initCsfrtoken();
        });
        return promise;
      },
      next : function(part, fn) {
        returnQuestion(fn);
      },
      answer : function(question, category) {
        question.response_time += new Date().valueOf();
        question.index = qIndex - 1;
        var postParams = $.param({
          question : question.id,
          answered : question.answered.id,
          response_time : question.response_time,
        });
        var limit = (requestOptions.params.limit || 10) - question.index - 1;
        summary.push(question);
        $http({
          method: 'POST',
          url : domain + '/questions/practice?stats=true' +
            (category ?  '&category=' + category : '') +
            params.queryString() + '&limit=' + limit,
          data: postParams,
          headers: {
            'Content-Type' : 'application/x-www-form-urlencoded',
            'X-CSRFToken' : user.getCsrftoken(),
          }
        }).success(function(data) {
          var futureLength = qIndex + data.questions.length;
          console.log(futureLength, data);
          // questions array should be always the same size
          // if data sent by server is longer, it means the server is delayed
          if (questionsList.length == futureLength) {
            // try to handle interleaving
            var questionsCandidate = questionsList.slice(0, qIndex).concat(data.questions);
            if (hasNoTwoSameInARow(questionsCandidate)) {
              questionsList = questionsCandidate;
              $log.log('questions updated, question index', qIndex);
            }
          }
        });
        return 100 * qIndex / questionsList.length;
      },
      summary : function() {
        var correctlyAnswered = summary.filter(function(q) {
            return q.answered.correct;
          });
        questions.fetchPredicitons(summary, 'predictionAfter');
        return {
          correctlyAnsweredRatio : correctlyAnswered.length / summary.length,
          questions : summary
        };
      }
    };
  }])

  .factory('user', ['$http', '$cookies', 'events', 'domain',
      function($http, $cookies, events, domain) {
    var user;
    return {
      initUser : function(username, points) {
        user = {
          'username' : username,
          'points' : points
        };
        return user;
      },
      getUser : function() {
        return user;
      },
      logout : function(callback) {
        $http.get(domain + '/user/logout/').success(callback);
        this.initUser('', 0);
        events.emit('userUpdated', user);
        return user;
      },
      addPoint : function() {
        user.points++;
        $cookies.points = user.points;
        events.emit('userUpdated', user);
      },
      getCsrftoken : function() {
        return user.csrftoken || $cookies.csrftoken;
      },
      initCsfrtoken : function() {
        if (!domain || that.getUser().csrftoken) {
          return;
        }
        var url = domain + '/user/initmobile';
        if (localStorage.username && localStorage.password) {
          url += '?username=' + localStorage.username +
            '&password=' + localStorage.password;
        }
        $http.get(url).success(function(data) {
          that.initUser(data.username, 0);
          user.csrftoken = data.csrftoken;
          if (data.password) {
            localStorage.username = data.username;
            localStorage.password = data.password;
          }
        });
      }
    };
  }])

  .factory('events', function() {
    var handlers = {};
    return {
      on : function(eventName, handler) {
        handlers[eventName] = handlers[eventName] || [];
        handlers[eventName].push(handler);
      },
      emit : function(eventName, args) {
        handlers[eventName] = handlers[eventName] || [];
        handlers[eventName].map(function(handler) {
          handler(args);
        });
      }
    };
  })

  .factory('pageTitle',[function() {

    var titles = {
      '' : '',
      '../templates/home/how_it_works.html' : 'Jak to funguje? - ',
      'static/tpl/about.html' : 'O prjektu - ',
      'static/tpl/view_tpl.html' : 'Prohlížení otázek - ',
      'static/tpl/practice_tpl.html' : 'Procvičování otázek - ',
      'static/tpl/test_tpl.html' : 'Test - ',
    };
    return function (route) {
      var title = route.templateUrl ? titles[route.templateUrl] : '';
      return title;
    };
  }])

  .factory('params', ["$routeParams", "$location",
      function ($routeParams, $location) {
    var keys = ['user', 'debug', 'time', 'limit'];
    var params = {};
    var that =  {
      get: function (key) {
        if (params[key] && ! $routeParams[key]) {
          $location.search(key, params[key]);
        }
        if ($routeParams[key]) {
          params[key] = $routeParams[key];
        }
        return params[key];
      },
      all : function() {
        for (var i = 0; i < keys.length; i++) {
          that.get(keys[i]);
        }
        return params;
      },
      queryString : function() {
        that.all();
        var string = keys.map(function(key) {
          return that.get(key) ? '&' + key + '=' + that.get(key) : '';
        }).join('');
        return string;
      }
    };
    return that;
  }]);
}());

(function() {
  'use strict';
  /* Filters */
  angular.module('adaptivePractice.filters', [])

  .filter('percent', function() {
    return function(n) {
      n = n || 0;
      return Math.round(100 * n) + '%';
    };
  })

  .filter('StatesFromPlaces', function() {
    return function(data) {
      var places = {};
      if (data && data[0]) {
        angular.forEach(data, function(category) {
          if (!category.haveMaps && category.places) {
            angular.forEach(category.places, function(place) {
              places[place.code] = place;
            });
          }
        });
      }
      return places;
    };
  })

  .filter('colNum', function() {
    return function(colsCount) {
      return Math.floor(12 / colsCount);
    };
  })

  .filter('isActive',['$location', function($location) {
    return function(path) {
      if ($location.path().indexOf(path) != -1) {
        return 'active';
      } else {
        return '';
      }
    };
  }])

  .filter('isFindOnMapType', function() {
    return function(question) {
      return question && question.type < 20;
    };
  })

  .filter('isPickNameOfType', function() {
    return function(question) {
      return question && question.type >= 20;
    };
  })

  .filter('isAllowedOption', function() {
    return function(question, code) {
      return !question.options || 1 == question.options.filter(function(place) {
        return place.code == code;
      }).length;
    };
  })

  .filter('imgSrc', ['domain', function(domain) {
    return function(option) {
      var src = option && option.images && option.images[0] && option.images[0].url;
      return domain ? (src && src.substr(1)) : src;
    };
  }])

  .filter('stripImg', function() {
    return function(option) {
      return option && option.text && option.text.replace(/\!\[Image\]\((.*)\)/, "").replace("<br />", "");
    };
  })

  .filter('stripHtml', function() {
    return function(html) {
      return html.replace(/(<([^>]+)>)/ig,"");
    };
  })

  .filter('isTypeCategory', function() {
    return function(types, category) {
      types = types && types.filter(function(t){
        return category.types.filter(function(slug){
          return slug == t.slug;
        }).length == 1;
      });
      return types;
    };
  })

  .filter('codeToName',['places', function(places) {
    return function(code) {
      return places.getName(code) || "Neznámý";
    };
  }])

  .filter('probColor', ['colorScale', function(colorScale) {
    return function(probability) {
      return colorScale(probability).hex();
    };
  }])

  .filter('sumCounts', [ function() {
    return function(layers) {
      if (!layers || layers.length === 0) {
        return 0;
      }
      var sum = layers.map(function(p){
        return p.count;
      }).reduce(function(a, b) {
        return a + b;
      });
      return sum;
    };
  }])

  .filter('prettify', function () {

    function syntaxHighlight(obj) {
      var json = JSON.stringify(obj, undefined, 4) || "";
      json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
      return json.replace(
        /("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, // jshint ignore:line
         function (match) {
        var cls = 'number';
        if (/^"/.test(match)) {
          if (/:$/.test(match)) {
            cls = 'key';
          } else {
            cls = 'string';
          }
        } else if (/true|false/.test(match)) {
          cls = 'boolean';
        } else if (/null/.test(match)) {
          cls = 'null';
        }
        return '<span class="' + cls + '">' + match + '</span>';
      });
    }

    return syntaxHighlight;
  });
}());

(function() {
  'use strict';
  /* Directives */
  angular.module('adaptivePractice.directives', [])
  .directive('email', function() {
    return {
      restrict : 'C',
      compile : function(elem) {
        var emailAddress = elem.html();
        emailAddress = emailAddress.replace('{zavinac}', '@');
        emailAddress = '<a href="mailto:' + emailAddress +
  '">' + emailAddress +
  '</a>';
        elem.html(emailAddress);
      }
    };
  })

  .directive('atooltip', function() {
    return {
      restrict : 'C',
      link : function($scope, elem, attrs) {
        elem.tooltip({
          'placement' : attrs.placement || 'bottom',
          'container' : attrs.container,
        });
      }
    };
  })

  .directive('dropLogin', ['$', function($) {
    return {
      restrict : 'C',
      compile : function(elem) {
        elem.bind('click', function() {
          elem.tooltip('destroy');
          $('.tooltip').each(function() {
            if ($(this).text().indexOf("Přihlašte se") != -1) {
              $(this).remove();
            }
          });
        });
      }
    };
  }])

  .directive('dropLogin',['$timeout', 'events', function($timeout, events) {
    return {
      restrict : 'C',
      link : function($scope, elem) {
        events.on('questionSetFinished', function(points) {
          if (10 < points && points <= 20) {
            $timeout(function() {
              elem.tooltip('show');
            }, 0);
          }
        });
      }
    };
  }])

  .directive('categoryProgress', [function() {
    return {
      restrict : 'C',
      template : '<div class="progress overview-progress">' +
                    '<div class="progress-bar progress-bar-learned" style="' +
                        'width: {{(skills.learned / count)|percent}};">' +
                    '</div>' +
                    '<div class="progress-bar progress-bar-practiced" style="' +
                        'width: {{(skills.practiced / count)|percent}};">' +
                    '</div>' +
                  '</div>',
      link : function($scope, elem, attrs) {
        $scope.count = attrs.count;
        attrs.$observe('skills', function(skills) {
          if(skills !== '') {
            $scope.skills = angular.fromJson(skills);
            elem.tooltip({
              html : true,
              placement: 'bottom',
              title : '<div class="skill-tooltip">' +
                     'Naučeno: ' +
                     '<span class="badge badge-default">' +
                       '<i class="color-indicator learned"></i>' +
                       $scope.skills.learned + ' / ' + $scope.count +
                     '</span>' +
                   '</div>' +
                   '<div class="skill-tooltip">' +
                     'Procvičováno: ' +
                     '<span class="badge badge-default">' +
                       '<i class="color-indicator practiced"></i>' +
                       $scope.skills.practiced + ' / ' + $scope.count +
                     '</span>' +
                   '</div>'
            });
          }
        });
      }
    };
  }])

  .directive('levelProgressBar',['user', '$timeout', function(user, $timeout) {

    function getLevelInfo(points) {
      var levelEnd = 0;
      var levelRange = 30;
      var rangeIncrease = 0;
      for (var i = 1; true; i++) {
        levelEnd += levelRange;
        if (points < levelEnd) {
          return {
            level : i,
            form : levelEnd - levelRange,
            to : levelEnd,
            range : levelRange,
            points : points - (levelEnd - levelRange),
          };
        }
        levelRange += rangeIncrease;
        rangeIncrease += 10;
      }

    }
    return {
      restrict : 'C',
      template : '<span class="badge level-start atooltip" ' +
                   'ng-bind="level.level" title="Aktuální úroveň">' +
                 '</span>' +
                 '<div class="progress level-progress" >' +
                   '<div class="progress-bar progress-bar-warning" ' +
                        'style="width: {{(level.points/level.range)|percent}};">' +
                   '</div>' +
                 '</div>' +
                 '<span class="badge level-goal atooltip" ' +
                       'ng-bind="level.level+1" title="Příští úroveň">' +
                 '</span>',
      link : function($scope, elem) {
        $scope.level = getLevelInfo(user.getUser().points);
        $timeout(function(){
          //console.log(elem, elem.find('.level-progress'));
          elem.find('.level-progress').tooltip({
            placement: 'bottom',
            title : $scope.level.points + ' z ' + $scope.level.range + ' bodů',
          });
        },100);
      }
    };
  }])

  .directive('infiniteScroll', ["$window", "$document", "$",
      function ($window, $document, $) {
    return {
      link:function (scope, element, attrs) {
        var offset = parseInt(attrs.threshold) || 0;
        $document.unbind('scroll');
        $document.bind('scroll', function () {
          if (scope.$eval(attrs.canLoad) &&
              $($window).scrollTop() + $($window).height() >=
              $($document).height() - offset) {
            scope.$apply(attrs.infiniteScroll);
          }
        });
      }
    };
  }])

  .directive('debug', ["params", function (params) {
    return {
      restrict : 'A',
      template : '<pre ng-show="debug" ng-bind-html="debug | prettify"></pre>',
      link:function ($scope, element, attrs) {
        $scope.$watch(attrs.debug, function() {
          $scope.debug = params.get('debug') ? $scope[attrs.debug] : undefined;
        });
      }
    };
  }])

  .directive('loadingIndicator', [function () {
    return {
      restrict : 'C',
      template : '<svg class="spinner" width="65px" height="65px" ' +
                    ' viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">' +
                   '<circle class="path" fill="none" stroke-width="6" ' +
                     'stroke-linecap="round" cx="33" cy="33" r="30"></circle>' +
                 '</svg>'
    };
  }])

  .directive('questionsList', [function () {
    return {
      restrict : 'A',
      templateUrl : 'static/tpl/questions_list_tpl.html',
      scope : false,
      link:function ($scope, element, attrs) {
        $scope.$watch(attrs.questionsList, function(questionsList) {
          $scope.questionsList = questionsList;
        });
        $scope.selectQuestion = function(q) {
          $scope.selected = q != $scope.selected ? q : undefined;
        };
        $scope.showCategories = attrs.showCategories == 'true';
      }
    };
  }])

  .directive('options', [function () {
    return {
      restrict : 'A',
      templateUrl : 'static/tpl/options_tpl.html',
      scope : false,
      link:function ($scope, element, attrs) {
        $scope.$watch(attrs.options, function(question) {
          $scope.question = question;
          $scope.disabled = attrs.ngDisabled;
          $scope.noAnswers = attrs.noAnswers;
        });
      }
    };
  }])

  .directive('dynamicTitle', ['events', function (events) {
    return {
      restrict : 'A',
      template : '{{dynamicTitle}}',
      scope : false,
      link:function ($scope, element, attrs) {
        events.on('titleChaged', function(newTitle) {
          $scope.dynamicTitle = newTitle;
        });
        if (attrs.dynamicTitle) {
          events.emit('titleChaged', attrs.dynamicTitle);
        }
      }
    };
  }]);
}());

angular.module('adaptivePractice').run(['$templateCache', function($templateCache) {
  'use strict';

  $templateCache.put('static/tpl/about.html',
    "<div class=\"how-it-works\"><h2>O projektu</h2><div class=\"col-md-offset-1 col-md-10 col-lg-offset-3 col-lg-6\"><div class=\"works-div\"><h3>Kdo za tím stojí</h3><p>Slepé mapy jsou vyvíjeny na <a href=\"http://www.fi.muni.cz/\">Fakultě informatiky Masarykovy univerzity</a>, konkrétně v rámci skupiny <a href=\"http://www.fi.muni.cz/~xpelanek/proso/\">PROSO</a>. Mezi předchozí projekty této skupiny patří například <a href=\"http://tutor.fi.muni.cz/\">Problem Solving Tutor</a>.</p><p>Na vývoji Slepých map se podílí především Vít Stanislav a Jan Papoušek.</p><p>Pokud studujete na FI a máte zájem se zapojit do vývoje podobného typu systémů, případně pokud máte zájem o výzkumnou spolupráci, kontaktujte <a href=\"http://www.muni.cz/people/4297\">Radka Pelánka</a>.</p><p>Náměty k rozvoji systému zasílejte na <span class=\"email contact\">slepemapy{zavinac}googlegroups.com</span>.</p></div><div class=\"works-div\"><h3>Soukromí</h3>Data o odpovědích jsou ukládána a jsou využívána pro výběr vhodných otázek a pro výzkumné účely. Všechna tato data jsou zpracovávána anonymně. Přihlašovací údaje (Facebook, Google) jsou použity pouze pro určení identity při opakovaných návštěvách, jinak se s nimi nepracuje.</div><div class=\"works-div\"><h3>Zdroje</h3><ul><li><a href=\"http://www.naturalearthdata.com/\">Natural Earth Data</a> - zdroj většiny mapových podkladů (svět, kontinenty, většina států)</li><li><a href=\"http://www.gadm.org/\">Global Administrative Areas</a> - administrativní členění Itálie, Francie a Španělska</li><li><a href=\"http://download.geofabrik.de/\">OpenStreetMap Data Extracts</a> - města České republiky a Slovenska</li></ul><ul><li><a href=\"http://flag-sprites.com/\">Flag sprites</a> - vlaječky států světa a USA</li><li><a href=\"http://en.wikipedia.org/wiki/Template:Flag\">Wikipedia Flags</a> - vlaječky ostatních administrativnách celků</li></ul></div></div><div class=\"clearfix\"></div></div>"
  );


  $templateCache.put('static/tpl/options_tpl.html',
    "<md-radio-group class=\"options\" ng-model=\"question.correct\"><md-radio-button ng-repeat=\"option in question.options\" ng-value=\"option.order\" aria-label=\"{{(option | stripImg) || ''}}\" ng-disabled=\"option.disabled || disabled\" ng-click=\"checkAnswer(option)\" ng-class=\"{\n" +
    "      'correct': !noAnswers && (question.answered || question.points) && option.correct,\n" +
    "      'wrong': !noAnswers && question.answered == option && !option.correct,\n" +
    "      'inline-block': option.images.length\n" +
    "    }\">{{(option | stripImg) || ''}} <img ng-src=\"{{option | imgSrc}}\"></md-radio-button></md-radio-group>"
  );


  $templateCache.put('static/tpl/practice_tpl.html',
    "<div class=\"progress quesions-progress\"><div class=\"progress-bar progress-bar-learned\" style=\"width: {{summary.correctlyAnsweredRatio * 100  }}%\"></div><div class=\"progress-bar progress-bar-danger\" style=\"width: {{showSummary && (1 - summary.correctlyAnsweredRatio) * 100 }}%\"></div><div class=\"progress-bar progress-bar-practice\" style=\"width: {{progress}}%\"></div></div><span ng-hide=\"true\" dynamic-title=\"Procvičování\"></span><div id=\"container\" class=\"practice-container col-lg-12\"><div ng-hide=\"question || showSummary || error\" class=\"loading-indicator\"></div><div ng-show=\"error\" ng-bind=\"error\" class=\"alert alert-danger\"></div><div ng-repeat=\"question in questions\" class=\"practice\"><div class=\"well\" ng-if=\"question|imgSrc\"><img ng-src=\"{{question|imgSrc}}\"></div><div class=\"question\"><div ng-bind=\"question | stripImg\"></div></div><div options=\"question\"></div><div class=\"pull-right\"><button class=\"btn btn-lg next\" ng-class=\"(canNext && 'btn-primary') || 'btn-default'\" ng-click=\"next()\" ng-disabled=\"!canNext\"><i class=\"glyphicon glyphicon-arrow-right\"></i> Další</button></div><div class=\"clearfix\"></div><div debug=\"question\"></div></div><div ng-show=\"showSummary\" class=\"summary\"><div><div class=\"progress-label\">Úspěšnost: {{summary.correctlyAnsweredRatio | percent }}</div><h2 ng-show=\"errorMessage != undefined\" ng-bind=\"errorMessage\"></h2><div questions-list=\"summary.questions\"></div></div><br><span class=\"pull-right\"><a class=\"btn btn-lg btn-default\" href=\"#/refreshpractice/{{categoryId}}\"><i class=\"glyphicon glyphicon-repeat\"></i> Znovu procvičovat</a> <a class=\"btn-continue btn btn-lg btn-primary\" href=\"#/view/{{categoryId}}\">Přehled znalostí</a></span><div class=\"clearfix\"></div><div debug=\"summary\"></div></div><div class=\"clearfix\"></div></div>"
  );


  $templateCache.put('static/tpl/questions_list_tpl.html',
    "<div class=\"questions-list\"><div ng-repeat=\"question in questionsList\"><div class=\"questions-item\" ng-click=\"selectQuestion(question)\"><span class=\"badge badge-default\" title=\"Odhad znalosti {{question.predictionAfter && 'před' || ''}}\"><i class=\"color-indicator\" style=\"background-color: {{question.prediction|probColor}}\"></i> {{question.points || (question.prediction | percent)}}</span> <i class=\"glyphicon glyphicon-circle-arrow-right prediction-shift\" ng-if=\"question.predictionAfter\" style=\"color: {{(question.answered.correct + 0) | probColor}}\"></i> <span class=\"badge badge-default\" title=\"Odhad znalosti po\" ng-if=\"question.predictionAfter\"><i class=\"color-indicator\" style=\"background-color: {{question.predictionAfter|probColor}}\"></i> {{(question.predictionAfter | percent)}}</span> <span ng-repeat=\"cat in question.categories\" ng-if=\"!categoryId\" class=\"badge badge-default pull-right category\" title=\"Kategorie\">{{cat.name}}</span> <span class=\"inline-question\" ng-bind=\"question.html|stripHtml\"></span></div><div class=\"question-details\" ng-if=\"question == selected\" ng-class=\"{'ng-leave' : question != selected}\"><img style=\"display: block\" ng-src=\"{{question | imgSrc}}\"><div options=\"question\" ng-disabled=\"true\"></div><div debug=\"question\"></div></div><md-divider class=\"md-default-theme\"></md-divider></div><br><div ng-click=\"onBottomReached()\" ng-show=\"hasMoreQuestions && !loading\" class=\"btn btn-default btn-block\">Další otázky</div><div class=\"clearfix\"></div></div>"
  );


  $templateCache.put('static/tpl/test_tpl.html',
    "<div id=\"container\" class=\"practice-container\"><div ng-if=\"!started\"><div class=\"ng-view-header hidden-xs\"><h2 dynamic-title=\"Test\">Test</h2></div><br><div ng-include=\"'test_description.html'\" class=\"col-lg-12\"></div><br><div class=\"text-center\"><a href=\"\" class=\"btn btn-primary btn-lg\" ng-click=\"start()\">Spustit test</a></div></div><div ng-if=\"started\" class=\"col-lg-12\"><div ng-if=\"questions\" ng-hide=\"showSummary || error\"><timer countdown=\"30 * 60\" max-time-unit=\"'minute'\" interval=\"1000\" finish-callback=\"evaluate(true);\" title=\"Zývá do konce\" class=\"pull-right\"><i class=\"glyphicon glyphicon-time\"></i> {{minutes}}:{{sseconds}}</timer><ul class=\"progress-indicator\"><li class=\"prev\" ng-click=\"prev()\">&lt;</li><li ng-repeat=\"question in questions\" class=\"question-switcher\" ng-class=\"{ \n" +
    "            'active': ($index == activeQuestionIndex),\n" +
    "            'answered': question.answered !== undefined, \n" +
    "            'correct': question.isCorrect,\n" +
    "            'wrong': question.isWrong\n" +
    "          }\" ng-click=\"activateQuestion($index)\">{{$index}}</li><li class=\"next\" ng-click=\"next()\">&gt;</li></ul></div><div ng-hide=\"questions || showSummary || error\" class=\"loading-indicator\"></div><div ng-show=\"error\" ng-bind=\"error\" class=\"alert alert-danger\"></div><div ng-repeat=\"question in questions\" ng-if=\"$index == activeQuestionIndex\" class=\"practice\"><div class=\"well\" ng-if=\"question|imgSrc\"><img ng-src=\"{{question|imgSrc}}\"></div><div class=\"question\"><div ng-bind=\"question | stripImg\"></div></div><div options=\"question\" no-answers=\"true\"></div><div class=\"pull-right\"><button class=\"btn btn-lg btn-default next {{!canNext || 'btn-primary'}}\" ng-click=\"next()\" ng-disabled=\"questions.length == $index + 1\"><i class=\"glyphicon glyphicon-arrow-right\"></i> Další</button></div><button class=\"btn btn-lg btn-default prev\" ng-click=\"prev()\" ng-disabled=\"$index == 0\"><i class=\"glyphicon glyphicon-arrow-left\"></i> Předchozí</button> <button class=\"btn btn-lg btn-default\" ng-show=\"!showSummary\" ng-click=\"evaluate()\"><i class=\"glyphicon glyphicon-saved\"></i> Vyhodnotit</button><div debug=\"question\"></div></div><div ng-show=\"showSummary\" class=\"summary\"><div class=\"ng-view-header hidden-xs\"><h2 dynamic-title=\"Výsledky testu\"></h2></div><div><h2 ng-show=\"errorMessage != undefined\" ng-bind=\"errorMessage\"></h2><div questions-list=\"summary.questions\"></div><div class=\"progress\" ng-show=\"summary != undefined\"><div class=\"progress-bar progress-bar-success\" style=\"width: {{result.pointsRatio * 100 }}%\"></div><div class=\"progress-bar progress-bar-danger\" style=\"width: {{result.pointsToPassPortion * 100 }}%\"></div></div><div ng-show=\"loading\" class=\"loading-indicator\"></div><div ng-hide=\"loading\"><div class=\"progress-label\"><strong>Celkem získáno</strong> <span class=\"badge badge-default\"><i class=\"color-indicator\" style=\"background-color: {{1|probColor}}\"></i> {{result.score_achieved}} b</span> <span class=\"col-offset-2\" ng-hide=\"result.pointsMissingToPass == 0\">a do úspěšného složení testu chybí <span class=\"badge badge-default\"><i class=\"color-indicator\" style=\"background-color: {{0|probColor}}\"></i> {{result.pointsMissingToPass}} b</span></span></div><br><div class=\"alert alert-success\" ng-show=\"result.pointsMissingToPass == 0\"><h3>Gratulujeme k úspěšnému složení testu!</h3><div></div></div><br><span class=\"pull-right\" ng-if=\"showSummary\"><a class=\"btn-continue btn btn-lg btn-default\" href=\"#/view/\">Přehled znalostí</a> <a class=\"btn-continue btn btn-lg btn-default\" href=\"#/refreshtest/\">Další test</a> <a class=\"btn-continue btn btn-lg btn-primary\" href=\"#/practice/\">Procvičovat</a></span></div><div class=\"clearfix\"></div></div></div></div></div>"
  );


  $templateCache.put('static/tpl/view_tpl.html',
    "<div id=\"container\" infinite-scroll=\"onBottomReached()\" threshold=\"100\" can-load=\"hasMoreQuestions\"><div class=\"view-questions\"><div class=\"ng-view-header\"><a href=\"#/practice/{{categoryId}}\" class=\"btn btn-primary pull-right\"><i class=\"glyphicon glyphicon-check\"></i> Procvičovat</a><h2 ng-if=\"category\" class=\"hidden-xs\" dynamic-title=\"{{category.name}}\">{{category.name}}</h2><span ng-hide=\"true\" dynamic-title=\"Přehled znalostí\"></span><div class=\"clearfix\"></div></div><!--\n" +
    "    <div class=\"category-progress\" count=\"{{type.places.length}}\"  \n" +
    "         skills=\"{{ {\n" +
    "           practiced:(type.places|filter:{practiced:true}).length,\n" +
    "           learned:(type.places|filter:{learned:true}).length\n" +
    "         } }}\"></div>\n" +
    "    --><div questions-list=\"questions\"></div></div><div ng-show=\"loading\" class=\"loading-indicator\"></div><div ng-show=\"error\" ng-bind=\"error\" class=\"alert alert-danger\"></div></div>"
  );

}]);

