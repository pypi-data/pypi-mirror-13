#!/usr/bin/env python3

import datetime
import json
import sys
import click
import phe

__author__ = 'brian'


def log(m, color='red'):
    click.echo(click.style(m, fg=color), file=sys.stderr)


@click.group("pheutil")
@click.version_option('1.0-alpha')
@click.option('--verbose', '-v', is_flag=True,
              help='Enables verbose mode.')
def cli(verbose=False):
    """CLI for interacting with python-paillier
    """

@cli.command("generate")
@click.argument('output', type=click.File('w'))
@click.option("--keysize", type=int, default=2048, help="The keysize in bits")
@click.option("--id", type=str, default=None, help="Add an identifying comment to the key")
def generate_keypair(keysize, id, output):
    """Generate a paillier keypair and output as JWK to given output file.

    Use "-" to output the private key to stdout. See the extract command
    to extract the public component of the private key.
    """
    log("Generating a paillier keypair with keysize of {}".format(keysize))
    pub, priv = phe.generate_paillier_keypair(n_length=keysize)

    log("Keys generated")

    date = datetime.datetime.now().strftime("%Y-%m-%d")
    jwk_public = {
        'kty': "PAI",
        "key_ops": ["encrypt"],
        'g': phe.util.int_to_base64(pub.g),
        'n': phe.util.int_to_base64(pub.n),
        'kid': "Paillier public key generated by pheutil on {}".format(date)
    }

    jwk_private = {
        'kty': "PAI",
        'key_ops': ["decrypt"],
        'lambda': phe.util.int_to_base64(priv.Lambda),
        'mu': phe.util.int_to_base64(priv.mu),
        'pub': jwk_public,
        'kid': "Paillier private key generated by pheutil on {}".format(date)
    }

    json.dump(jwk_private, output)
    output.write('\n')

    log("Private key written to {}".format(output.name))


@cli.command()
@click.argument('input', type=click.File('r'))
@click.argument('output', type=click.File('w'))
def extract(input, output):
    """Given a private paillier key, as generated by generate, extract the
    public key portion.

    Use "-" to output to stdout.
    """
    log("Loading paillier keypair")
    priv = json.load(input)
    assert 'pub' in priv, "Invalid private key"
    json.dump(priv['pub'], output)
    output.write('\n')
    log("Public key written to {}".format(output.name))

@cli.command()
@click.argument('public', type=click.File('r'))
@click.argument('plaintext', type=int)
def encrypt(public, plaintext):
    """Encrypt a number with given public key

    """
    log("Loading public key")
    publickeydata = json.load(public)
    pub = phe.PaillierPublicKey(
            phe.util.base64_to_int(publickeydata['g']),
            phe.util.base64_to_int(publickeydata['n'])
    )

    log("Encrypting")

    enc = pub.encrypt(plaintext)

    # TODO #8 Decide on serialization for encrypted number...
    print(enc.ciphertext(), enc.exponent)

# TODO
# @cli.command("decrypt")
# def decrypt(private_key, ciphertext):
#     """Decrypt ciphertext with private key.
#
#     :param private_key:
#     :param ciphertext:
#     :return:
#     """
#     click.echo("TODO: Decrypt a number")
#
#
if __name__ == "__main__":
    cli()
