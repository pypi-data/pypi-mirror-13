{"version":3,"sources":["ObjectPath.js"],"names":["undefined","ObjectPath","parse","str","TypeError","d","b","q","c","i","parts","length","indexOf","push","slice","replace","RegExp","stringify","arr","quote","Array","isArray","toString","map","n","join","normalize","data","registerModule","angular","module","provider","this","$get","define","amd","exports","window"],"mappings":"AAAA,cAEE,SAASA,GAEV,GAAIC,IACHC,MAAO,SAASC,GACf,GAAkB,gBAARA,GACT,KAAM,IAAIC,WAAU,2CAMrB,KAHA,GAEIC,GAAGC,EAAGC,EAAGC,EAFTC,EAAI,EACJC,KAEGD,EAAIN,EAAIQ,QAKd,GAJAN,EAAIF,EAAIS,QAAQ,IAAKH,GACrBH,EAAIH,EAAIS,QAAQ,IAAKH,GAGX,KAANJ,GAAkB,KAANC,EACfI,EAAMG,KAAKV,EAAIW,MAAML,EAAGN,EAAIQ,SAC5BF,EAAIN,EAAIQ,WAIJ,IAAU,KAANL,GAAmB,KAAND,GAAgBC,EAAJD,EACjCK,EAAMG,KAAKV,EAAIW,MAAML,EAAGJ,IACxBI,EAAIJ,EAAI,MAUR,IALIC,EAAIG,IACPC,EAAMG,KAAKV,EAAIW,MAAML,EAAGH,IACxBG,EAAIH,GAELC,EAAIJ,EAAIW,MAAMR,EAAE,EAAGA,EAAE,GACX,MAANC,GAAkB,MAALA,EAChBC,EAAIL,EAAIS,QAAQ,IAAKN,GACX,KAANE,IAAUA,EAAIL,EAAIQ,QACtBD,EAAMG,KAAKV,EAAIW,MAAML,EAAI,EAAGD,IAC5BC,EAAiC,MAA5BN,EAAIW,MAAMN,EAAI,EAAGA,EAAI,GAAcA,EAAI,EAAIA,EAAI,MAC9C,CAGN,IAFAA,EAAIL,EAAIS,QAAQL,EAAE,IAAKD,GACb,KAANE,IAAUA,EAAIL,EAAIQ,QACS,OAAxBR,EAAIW,MAAMN,EAAI,EAAGA,IAAeF,EAAIH,EAAIQ,QAC9CL,IACAE,EAAIL,EAAIS,QAAQL,EAAE,IAAKD,EAExBI,GAAMG,KAAKV,EAAIW,MAAML,EAAI,EAAGD,GAAGO,QAAQ,GAAIC,QAAO,KAAKT,EAAE,KAAMA,IAC/DE,EAAiC,MAA5BN,EAAIW,MAAMN,EAAI,EAAGA,EAAI,GAAcA,EAAI,EAAIA,EAAI,EAIvD,MAAOE,IAKRO,UAAW,SAASC,EAAKC,GAOxB,MALIC,OAAMC,QAAQH,KACjBA,GAAOA,EAAII,aAEZH,EAAkB,MAAVA,EAAgB,IAAM,IAEvBD,EAAIK,IAAI,SAASC,GAAI,MAAO,IAAML,EAASK,EAAEF,WAAYP,QAAQ,GAAIC,QAAOG,EAAO,KAAM,KAAOA,GAASA,EAAQ,MAAQM,KAAK,KAGtIC,UAAW,SAASC,EAAMR,GACzB,MAAOlB,GAAWgB,UAAUG,MAAMC,QAAQM,GAAQA,EAAO1B,EAAWC,MAAMyB,GAAOR,IAIlFS,eAAgB,SAASC,GACxBA,EAAQC,OAAO,iBAAkBC,SAAS,aAAc,WACvDC,KAAK9B,MAAQD,EAAWC,MACxB8B,KAAKf,UAAYhB,EAAWgB,UAC5Be,KAAKN,UAAYzB,EAAWyB,UAC5BM,KAAKC,KAAO,WACX,MAAOhC,OAOW,mBAAXiC,SAAyBA,OAAOC,IAC1CD,OAAO,WACN,MAAOjC,KAKmB,gBAAZmC,SACfA,QAAQnC,WAAaA,EAKrBoC,OAAOpC,WAAaA","file":"ObjectPath.min.js","sourcesContent":["'use strict';\n\n;!function(undefined) {\n\n\tvar ObjectPath = {\n\t\tparse: function(str){\n\t\t\tif(typeof str !== 'string'){\n\t\t\t\tthrow new TypeError('ObjectPath.parse must be passed a string');\n\t\t\t}\n\n\t\t\tvar i = 0;\n\t\t\tvar parts = [];\n\t\t\tvar d, b, q, c;\n\t\t\twhile (i < str.length){\n\t\t\t\td = str.indexOf('.', i);\n\t\t\t\tb = str.indexOf('[', i);\n\n\t\t\t\t// we've reached the end\n\t\t\t\tif (d === -1 && b === -1){\n\t\t\t\t\tparts.push(str.slice(i, str.length));\n\t\t\t\t\ti = str.length;\n\t\t\t\t}\n\n\t\t\t\t// dots\n\t\t\t\telse if (b === -1 || (d !== -1 && d < b)) {\n\t\t\t\t\tparts.push(str.slice(i, d));\n\t\t\t\t\ti = d + 1;\n\t\t\t\t}\n\n\t\t\t\t// brackets\n\t\t\t\telse {\n\t\t\t\t\tif (b > i){\n\t\t\t\t\t\tparts.push(str.slice(i, b));\n\t\t\t\t\t\ti = b;\n\t\t\t\t\t}\n\t\t\t\t\tq = str.slice(b+1, b+2);\n\t\t\t\t\tif (q !== '\"' && q !=='\\'') {\n\t\t\t\t\t\tc = str.indexOf(']', b);\n\t\t\t\t\t\tif (c === -1) c = str.length;\n\t\t\t\t\t\tparts.push(str.slice(i + 1, c));\n\t\t\t\t\t\ti = (str.slice(c + 1, c + 2) === '.') ? c + 2 : c + 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc = str.indexOf(q+']', b);\n\t\t\t\t\t\tif (c === -1) c = str.length;\n\t\t\t\t\t\twhile (str.slice(c - 1, c) === '\\\\' && b < str.length){\n\t\t\t\t\t\t\tb++;\n\t\t\t\t\t\t\tc = str.indexOf(q+']', b);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tparts.push(str.slice(i + 2, c).replace(new RegExp('\\\\'+q,'g'), q));\n\t\t\t\t\t\ti = (str.slice(c + 2, c + 3) === '.') ? c + 3 : c + 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn parts;\n\t\t},\n\n\t\t// root === true : auto calculate root; must be dot-notation friendly\n\t\t// root String : the string to use as root\n\t\tstringify: function(arr, quote){\n\n\t\t\tif(!Array.isArray(arr))\n\t\t\t\tarr = [arr.toString()];\n\n\t\t\tquote = quote === '\"' ? '\"' : '\\'';\n\n\t\t\treturn arr.map(function(n){ return '[' + quote + (n.toString()).replace(new RegExp(quote, 'g'), '\\\\' + quote) + quote + ']'; }).join('');\n\t\t},\n\n\t\tnormalize: function(data, quote){\n\t\t\treturn ObjectPath.stringify(Array.isArray(data) ? data : ObjectPath.parse(data), quote);\n\t\t},\n\n\t\t// Angular\n\t\tregisterModule: function(angular) {\n\t\t\tangular.module('ObjectPath', []).provider('ObjectPath', function(){\n\t\t\t\tthis.parse = ObjectPath.parse;\n\t\t\t\tthis.stringify = ObjectPath.stringify;\n\t\t\t\tthis.normalize = ObjectPath.normalize;\n\t\t\t\tthis.$get = function(){\n\t\t\t\t\treturn ObjectPath;\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t};\n\n\t// AMD\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(function() {\n\t\t\treturn ObjectPath;\n\t\t});\n\t}\n\n\t// CommonJS\n\telse if (typeof exports === 'object') {\n\t\texports.ObjectPath = ObjectPath;\n\t}\n\n\t// Browser global\n\telse {\n\t\twindow.ObjectPath = ObjectPath;\n\t}\n\t\n}();"],"sourceRoot":"/source/"}