/**
* please-wait
* Display a nice loading screen while your app loads

* @author Pathgather <tech@pathgather.com>
* @copyright Pathgather 2015
* @license MIT <http://opensource.org/licenses/mit-license.php>
* @link https://github.com/Pathgather/please-wait
* @module please-wait
* @version 0.0.5
*/
!function(n,i){"object"==typeof exports?i(exports):"function"==typeof define&&define.amd?define(["exports"],i):i(n)}(this,function(n){var i,t,o,l,e,a,s,d,r,m,g,h,u,c,p,_;a=document.createElement("fakeelement"),l=!1,u=!1,o="animationend",h=null,e="Webkit Moz O ms".split(" "),g={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",msTransition:"MSTransitionEnd",transition:"transitionend"};for(s in g)if(c=g[s],null!=a.style[s]){h=c,u=!0;break}if(null!=a.style.animationName&&(l=!0),!l)for(p=0,_=e.length;_>p;p++)if(d=e[p],null!=a.style[""+d+"AnimationName"]){switch(d){case"Webkit":o="webkitAnimationEnd";break;case"Moz":o="animationend";break;case"O":o="oanimationend";break;case"ms":o="MSAnimationEnd"}l=!0;break}return t=function(n,i){return i.classList?i.classList.add(n):i.className+=" "+n},m=function(n,i){return i.classList?i.classList.remove(n):i.className=i.className.replace(n,"").trim()},i=function(){function n(n){var i,e,a,s;i=this.constructor._defaultOptions,this.options={},this.loaded=!1,this.finishing=!1;for(e in i)s=i[e],this.options[e]=null!=n[e]?n[e]:s;this._loadingElem=document.createElement("div"),this._loadingHtmlToDisplay=[],this._loadingElem.className="pg-loading-screen",null!=this.options.backgroundColor&&(this._loadingElem.style.backgroundColor=this.options.backgroundColor),this._loadingElem.innerHTML=this.options.template,this._loadingHtmlElem=this._loadingElem.getElementsByClassName("pg-loading-html")[0],null!=this._loadingHtmlElem&&(this._loadingHtmlElem.innerHTML=this.options.loadingHtml),this._readyToShowLoadingHtml=!1,this._logoElem=this._loadingElem.getElementsByClassName("pg-loading-logo")[0],null!=this._logoElem&&(this._logoElem.src=this.options.logo),m("pg-loaded",document.body),t("pg-loading",document.body),document.body.appendChild(this._loadingElem),t("pg-loading",this._loadingElem),this._onLoadedCallback=this.options.onLoadedCallback,a=function(n){return function(i){return n.loaded=!0,n._readyToShowLoadingHtml=!0,t("pg-loaded",n._loadingHtmlElem),l&&n._loadingHtmlElem.removeEventListener(o,a),n._loadingHtmlToDisplay.length>0&&n._changeLoadingHtml(),n.finishing?(null!=i&&i.stopPropagation(),n._finish()):void 0}}(this),null!=this._loadingHtmlElem&&(l?this._loadingHtmlElem.addEventListener(o,a):a(),this._loadingHtmlListener=function(n){return function(){return n._readyToShowLoadingHtml=!0,m("pg-loading",n._loadingHtmlElem),u&&n._loadingHtmlElem.removeEventListener(h,n._loadingHtmlListener),n._loadingHtmlToDisplay.length>0?n._changeLoadingHtml():void 0}}(this),this._removingHtmlListener=function(n){return function(){return n._loadingHtmlElem.innerHTML=n._loadingHtmlToDisplay.shift(),m("pg-removing",n._loadingHtmlElem),t("pg-loading",n._loadingHtmlElem),u?(n._loadingHtmlElem.removeEventListener(h,n._removingHtmlListener),n._loadingHtmlElem.addEventListener(h,n._loadingHtmlListener)):n._loadingHtmlListener()}}(this))}return n._defaultOptions={backgroundColor:null,logo:null,loadingHtml:null,template:"<div class='pg-loading-inner'>\n  <div class='pg-loading-center-outer'>\n    <div class='pg-loading-center-middle'>\n      <h1 class='pg-loading-logo-header'>\n        <img class='pg-loading-logo'></img>\n      </h1>\n      <div class='pg-loading-html'>\n      </div>\n    </div>\n  </div>\n</div>",onLoadedCallback:null},n.prototype.finish=function(n,i){return null==n&&(n=!1),window.document.hidden&&(n=!0),this.finishing=!0,null!=i&&this.updateOption("onLoadedCallback",i),this.loaded||n?this._finish(n):void 0},n.prototype.updateOption=function(n,i){switch(n){case"backgroundColor":return this._loadingElem.style.backgroundColor=i;case"logo":return this._logoElem.src=i;case"loadingHtml":return this.updateLoadingHtml(i);case"onLoadedCallback":return this._onLoadedCallback=i;default:throw new Error("Unknown option '"+n+"'")}},n.prototype.updateOptions=function(n){var i,t,o;null==n&&(n={}),o=[];for(i in n)t=n[i],o.push(this.updateOption(i,t));return o},n.prototype.updateLoadingHtml=function(n,i){if(null==i&&(i=!1),null==this._loadingHtmlElem)throw new Error("The loading template does not have an element of class 'pg-loading-html'");return i?(this._loadingHtmlToDisplay=[n],this._readyToShowLoadingHtml=!0):this._loadingHtmlToDisplay.push(n),this._readyToShowLoadingHtml?this._changeLoadingHtml():void 0},n.prototype._changeLoadingHtml=function(){return this._readyToShowLoadingHtml=!1,this._loadingHtmlElem.removeEventListener(h,this._loadingHtmlListener),this._loadingHtmlElem.removeEventListener(h,this._removingHtmlListener),m("pg-loading",this._loadingHtmlElem),m("pg-removing",this._loadingHtmlElem),u?(t("pg-removing",this._loadingHtmlElem),this._loadingHtmlElem.addEventListener(h,this._removingHtmlListener)):this._removingHtmlListener()},n.prototype._finish=function(n){var i;return null==n&&(n=!1),null!=this._loadingElem?(t("pg-loaded",document.body),"function"==typeof this._onLoadedCallback&&this._onLoadedCallback.apply(this),i=function(n){return function(){return document.body.removeChild(n._loadingElem),m("pg-loading",document.body),l&&n._loadingElem.removeEventListener(o,i),n._loadingElem=null}}(this),!n&&l?(t("pg-loaded",this._loadingElem),this._loadingElem.addEventListener(o,i)):i()):void 0},n}(),r=function(n){return null==n&&(n={}),new i(n)},n.pleaseWait=r,r});
//# sourceMappingURL=data:application/json;base64,
