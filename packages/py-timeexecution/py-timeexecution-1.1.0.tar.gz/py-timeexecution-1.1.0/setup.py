
from setuptools import setup
setup(**{'name': 'py-timeexecution', 'author': 'Niels Lensink', 'author_email': 'niels@elements.nl', 'include_package_data': True, 'long_description': 'Time Execution\n==============\n\n.. image:: https://secure.travis-ci.org/kpn-digital/py-timeexecution.svg?branch=master\n    :target:  http://travis-ci.org/kpn-digital/py-timeexecution?branch=master\n\n.. image:: https://img.shields.io/codecov/c/github/kpn-digital/py-timeexecution/master.svg\n    :target: http://codecov.io/github/kpn-digital/py-timeexecution?branch=master\n\n.. image:: https://img.shields.io/pypi/v/py-timeexecution.svg\n    :target: https://pypi.python.org/pypi/py-timeexecution\n\n.. image:: https://readthedocs.org/projects/py-timeexecution/badge/?version=latest\n    :target: http://py-timeexecution.readthedocs.org/en/latest/?badge=latest\n\n\nFeatures\n--------\n\n- Sending data to multiple backends\n- Custom backends\n- Hooks\n\nBackends\n--------\n\n- InfluxDB 0.8\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install py-timeexecution\n\nUsage\n-----\n\nTo use this package you decorate the functions you want to time its execution.\nEvery wrapped function will create a metric consisting of 3 default values:\n\n- `name` - The name of the series the metric will be stored in\n- `value` - The time it took in ms for the wrapped function to complete\n- `hostname` - The hostname of the machine the code is running on\n\nSee the following example\n\n.. code-block:: python\n\n    from time_execution import configure, time_execution\n    from time_execution.backends.influxdb import InfluxBackend\n\n    # Setup the desired backend\n    influx = InfluxBackend(host=\'localhost\', database=\'metrics\', use_udp=False)\n\n    # Configure the time_execution decorator\n    configure(backends=[influx])\n\n    # Wrap the methods where u want the metrics\n    @time_execution\n    def hello():\n        return \'World\'\n\n    # Now when we call hello() and we will get metrics in our backends\n    hello()\n\nThis will result in an entry in the influxdb\n\n.. code-block:: json\n\n    [\n        {\n            "name": "__main__.hello",\n            "columns": [\n                "time",\n                "sequence_number",\n                "value",\n                "hostname",\n            ],\n            "points": [\n                [\n                    1449739813939,\n                    1111950001,\n                    312,\n                    "machine.name",\n                ]\n            ]\n        }\n    ]\n\n\nHooks\n-----\n\n`time_execution` supports hooks where you can change the metric before its\nbeing send to the backend.\n\nWith a hook you can add additional and change existing fields. This can be\nuseful for cases where you would like to add a column to the metric based on\nthe response of the wrapped function.\n\nA hook will always get 3 arguments:\n\n- `response` - The returned value of the wrapped function\n- `exception` - The raised exception of the wrapped function\n- `metric` - A dict containing the data to be send to the backend\n\nFrom within a hook you can change the `name` if you want the metrics to be split\ninto multiple series.\n\nSee the following example how to setup hooks.\n\n.. code-block:: python\n\n    # Now lets create a hook\n    def my_hook(response, exception, metric):\n        status_code = getattr(response, \'status_code\', None)\n        if status_code:\n            return dict(\n                name=\'{}.{}\'.format(metric[\'name\'], status_code),\n                extra_field=\'foo bar\'\n            )\n\n    # Configure the time_execution decorator, but now with hooks\n    configure(backends=[influx], hooks=[my_hook])\n\nManually sending metrics\n------------------------\n\nYou can also send any metric you have manually to the backend. These will not\nadd the default values and will not hit the hooks.\n\nSee the following example.\n\n.. code-block:: python\n\n    loadavg = os.getloadavg()\n    write_metric(\'cpu.load.1m\', value=loadavg[0])\n    write_metric(\'cpu.load.5m\', value=loadavg[1])\n    write_metric(\'cpu.load.15m\', value=loadavg[2])\n', 'url': 'https://github.com/kpn-digital/py-timeexecution', 'version': '1.1.0', 'zip_safe': False, 'install_requires': ['influxdb'], 'packages': ['time_execution', 'time_execution.backends'], 'classifiers': ['Development Status :: 5 - Production/Stable', 'Environment :: Web Environment', 'Intended Audience :: Developers', 'Operating System :: OS Independent', 'Programming Language :: Python', 'Programming Language :: Python :: 2', 'Programming Language :: Python :: 2.7', 'Topic :: Internet :: WWW/HTTP'], 'tests_require': ['tox'], 'description': 'Python project'})
