###
# app configuration
# http://docs.pylonsproject.org/projects/pyramid/en/1.5-branch/narr/environment.html
###

[app:main]
use = egg:bisque_engine

pyramid.reload_templates = true
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes =
    pyramid_debugtoolbar




# By default, the toolbar only appears for clients from IP addresses
# '127.0.0.1' and '::1'.
# debugtoolbar.hosts = 127.0.0.1 ::1

###
# wsgi server configuration
###

[server:main]
use = egg:waitress#main
host = 0.0.0.0
port = 6543

###
# logging configuration
# http://docs.pylonsproject.org/projects/pyramid/en/1.5-branch/narr/logging.html
###

[loggers]
keys = root, bq, sqlalchemy, auth, registration, bq_auth, tgext, bq_util_locks
[handlers]
#keys = console, syslog, pylog, file
#keys =  console, pylog,file
keys = console
[formatters]
keys = generic, syslog, full
# If you create additional loggers, add them as a key to [loggers]

[logger_root]
level = INFO
#handlers = file
#handlers = pylog
#handlers = syslog
handlers = console
[logger_bq]
level = DEBUG
handlers =
qualname = bq

[logger_tgext]
level = DEBUG
handlers = console
qualname = tgext

[logger_bq_auth]
level = DEBUG
handlers =
qualname = bq.auth

[logger_bq_util_locks]
level = INFO
handlers =
qualname = bq.util.locks

[logger_registration]
level = INFO
handlers =
qualname = registration

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[logger_sqlalchemy_pool]
level = WARN
handlers =
qualname = sqlalchemy.pool
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)
# A logger for authentication, identification and authorization -- this is
# repoze.who and repoze.what:
[logger_auth]
level = WARN
handlers =
qualname = auth

# If you create additional handlers, add them as a key to [handlers]
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[handler_rotfile]
class=handlers.RotatingFileHandler
level=NOTSET
formatter=full
args=('logs/bisque.log', 'a', 100*1024*1024, 14)

[handler_file]
class=handlers.RotatingFileHandler
level=NOTSET
formatter=full
args=('logs/bisque.log', 'a')

[handler_syslog]
class= handlers.SysLogHandler
level=NOTSET
formatter=syslog
args=(('localhost', handlers.SYSLOG_UDP_PORT), handlers.SysLogHandler.LOG_LOCAL1)
#args=('/dev/log', handlers.SysLogHandler.LOG_LOCAL1)
#facility=LOG_LOCAL1

[handler_pylog]
# Install a SocketListener
class= handlers.SocketHandler
level=NOTSET
formatter=generic
args=('localhost', handlers.DEFAULT_TCP_LOGGING_PORT)


#Change args to:
# If you create additional formatters, add them as a key to [formatters]
[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s
#datefmt = %H:%M:%S

[formatter_full]
format = %(asctime)s:%(process)d-%(thread)x: %(levelname)-5.5s [%(name)s] %(message)s
#datefmt = %H:%M:%S


[formatter_syslog]
format = %(levelname)s [%(name)s] %(message)s
#datefmt = %H:%M:%S
