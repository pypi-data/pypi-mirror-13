# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_trottersuzuki', [dirname(__file__)])
        except ImportError:
            import _trottersuzuki
            return _trottersuzuki
        if fp is not None:
            try:
                _mod = imp.load_module('_trottersuzuki', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _trottersuzuki = swig_import_helper()
    del swig_import_helper
else:
    import _trottersuzuki
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Lattice(_object):
    """
    This class defines the lattice structure over which the state and potential
    matrices are defined.  

    As to single-process execution, the lattice is a single tile which can be
    surrounded by a halo, in the case of periodic boundary conditions. As to multi-
    process execution, the lattice is divided in smaller lattices, dubbed tiles, one
    for each process. Each of the tiles is surrounded by a halo.  

    C++ includes: trottersuzuki.h

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lattice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Lattice, name)
    __repr__ = _swig_repr
    def __init__(self, dim=100, length_x=20., length_y=20., periodic_x_axis=False, periodic_y_axis=False, 
    angular_velocity=0.): 
        """
        Lattice constructor.  

        Parameters
        ----------
        * `dim` :  
            Linear dimension of the squared lattice.  
        * `length_x` :  
            Physical length of the lattice's side along the x axis.  
        * `length_y` :  
            Physical length of the lattice's side along the y axis.  
        * `periodic_x_axis` :  
            Boundary condition along the x axis (false=closed, true=periodic).  
        * `periodic_y_axis` :  
            Boundary condition along the y axis (false=closed, true=periodic).  
        * `angular_velocity` :  
            Angular velocity of the frame of reference.  

        """
        this = _trottersuzuki.new_Lattice(dim, length_x, length_y, periodic_x_axis, periodic_y_axis, angular_velocity)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["length_x"] = _trottersuzuki.Lattice_length_x_set
    __swig_getmethods__["length_x"] = _trottersuzuki.Lattice_length_x_get
    if _newclass:length_x = _swig_property(_trottersuzuki.Lattice_length_x_get, _trottersuzuki.Lattice_length_x_set)
    __swig_setmethods__["length_y"] = _trottersuzuki.Lattice_length_y_set
    __swig_getmethods__["length_y"] = _trottersuzuki.Lattice_length_y_get
    if _newclass:length_y = _swig_property(_trottersuzuki.Lattice_length_y_get, _trottersuzuki.Lattice_length_y_set)
    __swig_setmethods__["delta_x"] = _trottersuzuki.Lattice_delta_x_set
    __swig_getmethods__["delta_x"] = _trottersuzuki.Lattice_delta_x_get
    if _newclass:delta_x = _swig_property(_trottersuzuki.Lattice_delta_x_get, _trottersuzuki.Lattice_delta_x_set)
    __swig_setmethods__["delta_y"] = _trottersuzuki.Lattice_delta_y_set
    __swig_getmethods__["delta_y"] = _trottersuzuki.Lattice_delta_y_get
    if _newclass:delta_y = _swig_property(_trottersuzuki.Lattice_delta_y_get, _trottersuzuki.Lattice_delta_y_set)
    __swig_setmethods__["dim_x"] = _trottersuzuki.Lattice_dim_x_set
    __swig_getmethods__["dim_x"] = _trottersuzuki.Lattice_dim_x_get
    if _newclass:dim_x = _swig_property(_trottersuzuki.Lattice_dim_x_get, _trottersuzuki.Lattice_dim_x_set)
    __swig_setmethods__["dim_y"] = _trottersuzuki.Lattice_dim_y_set
    __swig_getmethods__["dim_y"] = _trottersuzuki.Lattice_dim_y_get
    if _newclass:dim_y = _swig_property(_trottersuzuki.Lattice_dim_y_get, _trottersuzuki.Lattice_dim_y_set)
    __swig_setmethods__["global_no_halo_dim_x"] = _trottersuzuki.Lattice_global_no_halo_dim_x_set
    __swig_getmethods__["global_no_halo_dim_x"] = _trottersuzuki.Lattice_global_no_halo_dim_x_get
    if _newclass:global_no_halo_dim_x = _swig_property(_trottersuzuki.Lattice_global_no_halo_dim_x_get, _trottersuzuki.Lattice_global_no_halo_dim_x_set)
    __swig_setmethods__["global_no_halo_dim_y"] = _trottersuzuki.Lattice_global_no_halo_dim_y_set
    __swig_getmethods__["global_no_halo_dim_y"] = _trottersuzuki.Lattice_global_no_halo_dim_y_get
    if _newclass:global_no_halo_dim_y = _swig_property(_trottersuzuki.Lattice_global_no_halo_dim_y_get, _trottersuzuki.Lattice_global_no_halo_dim_y_set)
    __swig_setmethods__["global_dim_x"] = _trottersuzuki.Lattice_global_dim_x_set
    __swig_getmethods__["global_dim_x"] = _trottersuzuki.Lattice_global_dim_x_get
    if _newclass:global_dim_x = _swig_property(_trottersuzuki.Lattice_global_dim_x_get, _trottersuzuki.Lattice_global_dim_x_set)
    __swig_setmethods__["global_dim_y"] = _trottersuzuki.Lattice_global_dim_y_set
    __swig_getmethods__["global_dim_y"] = _trottersuzuki.Lattice_global_dim_y_get
    if _newclass:global_dim_y = _swig_property(_trottersuzuki.Lattice_global_dim_y_get, _trottersuzuki.Lattice_global_dim_y_set)
    __swig_setmethods__["periods"] = _trottersuzuki.Lattice_periods_set
    __swig_getmethods__["periods"] = _trottersuzuki.Lattice_periods_get
    if _newclass:periods = _swig_property(_trottersuzuki.Lattice_periods_get, _trottersuzuki.Lattice_periods_set)
    __swig_setmethods__["halo_x"] = _trottersuzuki.Lattice_halo_x_set
    __swig_getmethods__["halo_x"] = _trottersuzuki.Lattice_halo_x_get
    if _newclass:halo_x = _swig_property(_trottersuzuki.Lattice_halo_x_get, _trottersuzuki.Lattice_halo_x_set)
    __swig_setmethods__["halo_y"] = _trottersuzuki.Lattice_halo_y_set
    __swig_getmethods__["halo_y"] = _trottersuzuki.Lattice_halo_y_get
    if _newclass:halo_y = _swig_property(_trottersuzuki.Lattice_halo_y_get, _trottersuzuki.Lattice_halo_y_set)
    __swig_setmethods__["start_x"] = _trottersuzuki.Lattice_start_x_set
    __swig_getmethods__["start_x"] = _trottersuzuki.Lattice_start_x_get
    if _newclass:start_x = _swig_property(_trottersuzuki.Lattice_start_x_get, _trottersuzuki.Lattice_start_x_set)
    __swig_setmethods__["start_y"] = _trottersuzuki.Lattice_start_y_set
    __swig_getmethods__["start_y"] = _trottersuzuki.Lattice_start_y_get
    if _newclass:start_y = _swig_property(_trottersuzuki.Lattice_start_y_get, _trottersuzuki.Lattice_start_y_set)
    __swig_setmethods__["end_x"] = _trottersuzuki.Lattice_end_x_set
    __swig_getmethods__["end_x"] = _trottersuzuki.Lattice_end_x_get
    if _newclass:end_x = _swig_property(_trottersuzuki.Lattice_end_x_get, _trottersuzuki.Lattice_end_x_set)
    __swig_setmethods__["end_y"] = _trottersuzuki.Lattice_end_y_set
    __swig_getmethods__["end_y"] = _trottersuzuki.Lattice_end_y_get
    if _newclass:end_y = _swig_property(_trottersuzuki.Lattice_end_y_get, _trottersuzuki.Lattice_end_y_set)
    __swig_setmethods__["inner_start_x"] = _trottersuzuki.Lattice_inner_start_x_set
    __swig_getmethods__["inner_start_x"] = _trottersuzuki.Lattice_inner_start_x_get
    if _newclass:inner_start_x = _swig_property(_trottersuzuki.Lattice_inner_start_x_get, _trottersuzuki.Lattice_inner_start_x_set)
    __swig_setmethods__["inner_start_y"] = _trottersuzuki.Lattice_inner_start_y_set
    __swig_getmethods__["inner_start_y"] = _trottersuzuki.Lattice_inner_start_y_get
    if _newclass:inner_start_y = _swig_property(_trottersuzuki.Lattice_inner_start_y_get, _trottersuzuki.Lattice_inner_start_y_set)
    __swig_setmethods__["inner_end_x"] = _trottersuzuki.Lattice_inner_end_x_set
    __swig_getmethods__["inner_end_x"] = _trottersuzuki.Lattice_inner_end_x_get
    if _newclass:inner_end_x = _swig_property(_trottersuzuki.Lattice_inner_end_x_get, _trottersuzuki.Lattice_inner_end_x_set)
    __swig_setmethods__["inner_end_y"] = _trottersuzuki.Lattice_inner_end_y_set
    __swig_getmethods__["inner_end_y"] = _trottersuzuki.Lattice_inner_end_y_get
    if _newclass:inner_end_y = _swig_property(_trottersuzuki.Lattice_inner_end_y_get, _trottersuzuki.Lattice_inner_end_y_set)
    __swig_setmethods__["mpi_coords"] = _trottersuzuki.Lattice_mpi_coords_set
    __swig_getmethods__["mpi_coords"] = _trottersuzuki.Lattice_mpi_coords_get
    if _newclass:mpi_coords = _swig_property(_trottersuzuki.Lattice_mpi_coords_get, _trottersuzuki.Lattice_mpi_coords_set)
    __swig_setmethods__["mpi_dims"] = _trottersuzuki.Lattice_mpi_dims_set
    __swig_getmethods__["mpi_dims"] = _trottersuzuki.Lattice_mpi_dims_get
    if _newclass:mpi_dims = _swig_property(_trottersuzuki.Lattice_mpi_dims_get, _trottersuzuki.Lattice_mpi_dims_set)
    __swig_setmethods__["mpi_rank"] = _trottersuzuki.Lattice_mpi_rank_set
    __swig_getmethods__["mpi_rank"] = _trottersuzuki.Lattice_mpi_rank_get
    if _newclass:mpi_rank = _swig_property(_trottersuzuki.Lattice_mpi_rank_get, _trottersuzuki.Lattice_mpi_rank_set)
    __swig_setmethods__["mpi_procs"] = _trottersuzuki.Lattice_mpi_procs_set
    __swig_getmethods__["mpi_procs"] = _trottersuzuki.Lattice_mpi_procs_get
    if _newclass:mpi_procs = _swig_property(_trottersuzuki.Lattice_mpi_procs_get, _trottersuzuki.Lattice_mpi_procs_set)
    __swig_destroy__ = _trottersuzuki.delete_Lattice
    __del__ = lambda self : None;
Lattice_swigregister = _trottersuzuki.Lattice_swigregister
Lattice_swigregister(Lattice)

class State(_object):
    """
    This class defines the quantum state.  

    C++ includes: trottersuzuki.h

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, State, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, State, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p_real"] = _trottersuzuki.State_p_real_set
    __swig_getmethods__["p_real"] = _trottersuzuki.State_p_real_get
    if _newclass:p_real = _swig_property(_trottersuzuki.State_p_real_get, _trottersuzuki.State_p_real_set)
    __swig_setmethods__["p_imag"] = _trottersuzuki.State_p_imag_set
    __swig_getmethods__["p_imag"] = _trottersuzuki.State_p_imag_get
    if _newclass:p_imag = _swig_property(_trottersuzuki.State_p_imag_get, _trottersuzuki.State_p_imag_set)
    __swig_setmethods__["grid"] = _trottersuzuki.State_grid_set
    __swig_getmethods__["grid"] = _trottersuzuki.State_grid_get
    if _newclass:grid = _swig_property(_trottersuzuki.State_grid_get, _trottersuzuki.State_grid_set)
    def __init__(self, *args): 
        """
        Copy constructor: copy the state object.  

        """
        this = _trottersuzuki.new_State(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trottersuzuki.delete_State
    __del__ = lambda self : None;
    def init_state_matrix(self, *args): return _trottersuzuki.State_init_state_matrix(self, *args)
    def loadtxt(self, *args):
        """
        Load the wave function from a file to p_real and p_imag matrices.  

        """
        return _trottersuzuki.State_loadtxt(self, *args)

    def imprint_matrix(self, *args): return _trottersuzuki.State_imprint_matrix(self, *args)
    def get_particle_density(self):
        """
        Return a matrix storing the squared norm of the wave function.  

        """
        return _trottersuzuki.State_get_particle_density(self)

    def get_phase(self):
        """
        Return a matrix storing the phase of the wave function.  

        """
        return _trottersuzuki.State_get_phase(self)

    def get_squared_norm(self):
        """
        Return the squared norm of the quantum state.  

        """
        return _trottersuzuki.State_get_squared_norm(self)

    def get_mean_x(self):
        """
        Return the expected value of the X operator.  

        """
        return _trottersuzuki.State_get_mean_x(self)

    def get_mean_xx(self):
        """
        Return the expected value of the X^2 operator.  

        """
        return _trottersuzuki.State_get_mean_xx(self)

    def get_mean_y(self):
        """
        Return the expected value of the Y operator.  

        """
        return _trottersuzuki.State_get_mean_y(self)

    def get_mean_yy(self):
        """
        Return the expected value of the Y^2 operator.  

        """
        return _trottersuzuki.State_get_mean_yy(self)

    def get_mean_px(self):
        """
        Return the expected value of the P_x operator.  

        """
        return _trottersuzuki.State_get_mean_px(self)

    def get_mean_pxpx(self):
        """
        Return the expected value of the P_x^2 operator.  

        """
        return _trottersuzuki.State_get_mean_pxpx(self)

    def get_mean_py(self):
        """
        Return the expected value of the P_y operator.  

        """
        return _trottersuzuki.State_get_mean_py(self)

    def get_mean_pypy(self):
        """
        Return the expected value of the P_y^2 operator.  

        """
        return _trottersuzuki.State_get_mean_pypy(self)

    def write_to_file(self, *args):
        """
        Write to a file the wave function.  

        """
        return _trottersuzuki.State_write_to_file(self, *args)

    def write_particle_density(self, *args):
        """
        Write to a file the squared norm of the wave function.  

        """
        return _trottersuzuki.State_write_particle_density(self, *args)

    def write_phase(self, *args):
        """
        Write to a file the phase of the wave function.  

        """
        return _trottersuzuki.State_write_phase(self, *args)

    __swig_setmethods__["expected_values_updated"] = _trottersuzuki.State_expected_values_updated_set
    __swig_getmethods__["expected_values_updated"] = _trottersuzuki.State_expected_values_updated_get
    if _newclass:expected_values_updated = _swig_property(_trottersuzuki.State_expected_values_updated_get, _trottersuzuki.State_expected_values_updated_set)
State_swigregister = _trottersuzuki.State_swigregister
State_swigregister(State)

class ExponentialState(State):
    """
    This class defines a quantum state with exponential like wave function.  

    This class is a child of State class.  

    C++ includes: trottersuzuki.h

    """
    __swig_setmethods__ = {}
    for _s in [State]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExponentialState, name, value)
    __swig_getmethods__ = {}
    for _s in [State]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExponentialState, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        Construct the quantum state with exponential like wave function.  

        Parameters
        ----------
        * `grid` :  
            Lattice object.  
        * `n_x` :  
            First quantum number.  
        * `n_y` :  
            Second quantum number.  
        * `norm` :  
            Squared norm of the quantum state.  
        * `phase` :  
            Relative phase of the wave function.  
        * `p_real` :  
            Pointer to the real part of the wave function.  
        * `p_imag` :  
            Pointer to the imaginary part of the wave function.  

        """
        this = _trottersuzuki.new_ExponentialState(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trottersuzuki.delete_ExponentialState
    __del__ = lambda self : None;
ExponentialState_swigregister = _trottersuzuki.ExponentialState_swigregister
ExponentialState_swigregister(ExponentialState)

class GaussianState(State):
    """
    This class defines a quantum state with gaussian like wave function.  

    This class is a child of State class.  

    C++ includes: trottersuzuki.h

    """
    __swig_setmethods__ = {}
    for _s in [State]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianState, name, value)
    __swig_getmethods__ = {}
    for _s in [State]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianState, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        Construct the quantum state with gaussian like wave function.  

        Parameters
        ----------
        * `grid` :  
            Lattice object.  
        * `omega` :  
            Gaussian coefficient.  
        * `mean_x` :  
            X coordinate of the gaussian function's center.  
        * `mean_y` :  
            Y coordinate of the gaussian function's center.  
        * `norm` :  
            Squared norm of the state.  
        * `phase` :  
            Relative phase of the wave function.  
        * `p_real` :  
            Pointer to the real part of the wave function.  
        * `p_imag` :  
            Pointer to the imaginary part of the wave function.  

        """
        this = _trottersuzuki.new_GaussianState(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trottersuzuki.delete_GaussianState
    __del__ = lambda self : None;
GaussianState_swigregister = _trottersuzuki.GaussianState_swigregister
GaussianState_swigregister(GaussianState)

class SinusoidState(State):
    """
    This class defines a quantum state with sinusoidal like wave function.  

    This class is a child of State class.  

    C++ includes: trottersuzuki.h

    """
    __swig_setmethods__ = {}
    for _s in [State]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SinusoidState, name, value)
    __swig_getmethods__ = {}
    for _s in [State]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SinusoidState, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        Construct the quantum state with sinusoidal like wave function.  

        Parameters
        ----------
        * `grid` :  
            Lattice object.  
        * `n_x` :  
            First quantum number.  
        * `n_y` :  
            Second quantum number.  
        * `norm` :  
            Squared norm of the quantum state.  
        * `phase` :  
            Relative phase of the wave function.  
        * `p_real` :  
            Pointer to the real part of the wave function.  
        * `p_imag` :  
            Pointer to the imaginary part of the wave function.  

        """
        this = _trottersuzuki.new_SinusoidState(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trottersuzuki.delete_SinusoidState
    __del__ = lambda self : None;
SinusoidState_swigregister = _trottersuzuki.SinusoidState_swigregister
SinusoidState_swigregister(SinusoidState)

class Potential(_object):
    """
    This class defines the external potential, that is used for Hamiltonian class.  

    C++ includes: trottersuzuki.h

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Potential, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Potential, name)
    __repr__ = _swig_repr
    __swig_setmethods__["grid"] = _trottersuzuki.Potential_grid_set
    __swig_getmethods__["grid"] = _trottersuzuki.Potential_grid_get
    if _newclass:grid = _swig_property(_trottersuzuki.Potential_grid_get, _trottersuzuki.Potential_grid_set)
    __swig_setmethods__["matrix"] = _trottersuzuki.Potential_matrix_set
    __swig_getmethods__["matrix"] = _trottersuzuki.Potential_matrix_get
    if _newclass:matrix = _swig_property(_trottersuzuki.Potential_matrix_get, _trottersuzuki.Potential_matrix_set)
    def __init__(self, *args): 
        """
        Construct the external potential.  

        Parameters
        ----------
        * `grid` :  
            Lattice object.  
        * `potential_function` :  
            Pointer to the time-dependent external potential function.  

        """
        this = _trottersuzuki.new_Potential(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trottersuzuki.delete_Potential
    __del__ = lambda self : None;
    def init_potential_matrix(self, *args): return _trottersuzuki.Potential_init_potential_matrix(self, *args)
    def get_value(self, *args):
        """
        Get the value at the coordinate (x,y).  

        """
        return _trottersuzuki.Potential_get_value(self, *args)

    def update(self, *args):
        """
        Update the potential matrix at time t.  

        """
        return _trottersuzuki.Potential_update(self, *args)

Potential_swigregister = _trottersuzuki.Potential_swigregister
Potential_swigregister(Potential)

class HarmonicPotential(Potential):
    """
    This class defines the external potential, that is used for Hamiltonian class.  

    This class is a child of Potential class.  

    C++ includes: trottersuzuki.h

    """
    __swig_setmethods__ = {}
    for _s in [Potential]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HarmonicPotential, name, value)
    __swig_getmethods__ = {}
    for _s in [Potential]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HarmonicPotential, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        Construct the harmonic external potential.  

        Parameters
        ----------
        * `grid` :  
            Lattice object.  
        * `omegax` :  
            Frequency along x axis.  
        * `omegay` :  
            Frequency along y axis.  
        * `mass` :  
            Mass of the particle.  
        * `mean_x` :  
            Minimum of the potential along x axis.  
        * `mean_y` :  
            Minimum of the potential along y axis.  

        """
        this = _trottersuzuki.new_HarmonicPotential(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trottersuzuki.delete_HarmonicPotential
    __del__ = lambda self : None;
    def get_value(self, *args):
        """
        Return the value of the external potential at coordinate (x,y)  

        """
        return _trottersuzuki.HarmonicPotential_get_value(self, *args)

HarmonicPotential_swigregister = _trottersuzuki.HarmonicPotential_swigregister
HarmonicPotential_swigregister(HarmonicPotential)

class Hamiltonian(_object):
    """
    This class defines the Hamiltonian of a single component system.  

    C++ includes: trottersuzuki.h

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hamiltonian, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hamiltonian, name)
    __repr__ = _swig_repr
    __swig_setmethods__["potential"] = _trottersuzuki.Hamiltonian_potential_set
    __swig_getmethods__["potential"] = _trottersuzuki.Hamiltonian_potential_get
    if _newclass:potential = _swig_property(_trottersuzuki.Hamiltonian_potential_get, _trottersuzuki.Hamiltonian_potential_set)
    __swig_setmethods__["mass"] = _trottersuzuki.Hamiltonian_mass_set
    __swig_getmethods__["mass"] = _trottersuzuki.Hamiltonian_mass_get
    if _newclass:mass = _swig_property(_trottersuzuki.Hamiltonian_mass_get, _trottersuzuki.Hamiltonian_mass_set)
    __swig_setmethods__["coupling_a"] = _trottersuzuki.Hamiltonian_coupling_a_set
    __swig_getmethods__["coupling_a"] = _trottersuzuki.Hamiltonian_coupling_a_get
    if _newclass:coupling_a = _swig_property(_trottersuzuki.Hamiltonian_coupling_a_get, _trottersuzuki.Hamiltonian_coupling_a_set)
    __swig_setmethods__["angular_velocity"] = _trottersuzuki.Hamiltonian_angular_velocity_set
    __swig_getmethods__["angular_velocity"] = _trottersuzuki.Hamiltonian_angular_velocity_get
    if _newclass:angular_velocity = _swig_property(_trottersuzuki.Hamiltonian_angular_velocity_get, _trottersuzuki.Hamiltonian_angular_velocity_set)
    __swig_setmethods__["rot_coord_x"] = _trottersuzuki.Hamiltonian_rot_coord_x_set
    __swig_getmethods__["rot_coord_x"] = _trottersuzuki.Hamiltonian_rot_coord_x_get
    if _newclass:rot_coord_x = _swig_property(_trottersuzuki.Hamiltonian_rot_coord_x_get, _trottersuzuki.Hamiltonian_rot_coord_x_set)
    __swig_setmethods__["rot_coord_y"] = _trottersuzuki.Hamiltonian_rot_coord_y_set
    __swig_getmethods__["rot_coord_y"] = _trottersuzuki.Hamiltonian_rot_coord_y_get
    if _newclass:rot_coord_y = _swig_property(_trottersuzuki.Hamiltonian_rot_coord_y_get, _trottersuzuki.Hamiltonian_rot_coord_y_set)
    def __init__(self, *args): 
        """
        Construct the Hamiltonian of a single component system.  

        Parameters
        ----------
        * `grid` :  
            Lattice object.  
        * `potential` :  
            Potential object.  
        * `mass` :  
            Mass of the particle.  
        * `coupling_a` :  
            Coupling constant of intra-particle interaction.  
        * `angular_velocity` :  
            The frame of reference rotates with this angular velocity.  
        * `rot_coord_x` :  
            X coordinate of the center of rotation.  
        * `rot_coord_y` :  
            Y coordinate of the center of rotation.  

        """
        this = _trottersuzuki.new_Hamiltonian(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trottersuzuki.delete_Hamiltonian
    __del__ = lambda self : None;
Hamiltonian_swigregister = _trottersuzuki.Hamiltonian_swigregister
Hamiltonian_swigregister(Hamiltonian)

class Hamiltonian2Component(Hamiltonian):
    """
    This class defines the Hamiltonian of a two component system.  

    C++ includes: trottersuzuki.h

    """
    __swig_setmethods__ = {}
    for _s in [Hamiltonian]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hamiltonian2Component, name, value)
    __swig_getmethods__ = {}
    for _s in [Hamiltonian]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hamiltonian2Component, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mass_b"] = _trottersuzuki.Hamiltonian2Component_mass_b_set
    __swig_getmethods__["mass_b"] = _trottersuzuki.Hamiltonian2Component_mass_b_get
    if _newclass:mass_b = _swig_property(_trottersuzuki.Hamiltonian2Component_mass_b_get, _trottersuzuki.Hamiltonian2Component_mass_b_set)
    __swig_setmethods__["coupling_ab"] = _trottersuzuki.Hamiltonian2Component_coupling_ab_set
    __swig_getmethods__["coupling_ab"] = _trottersuzuki.Hamiltonian2Component_coupling_ab_get
    if _newclass:coupling_ab = _swig_property(_trottersuzuki.Hamiltonian2Component_coupling_ab_get, _trottersuzuki.Hamiltonian2Component_coupling_ab_set)
    __swig_setmethods__["coupling_b"] = _trottersuzuki.Hamiltonian2Component_coupling_b_set
    __swig_getmethods__["coupling_b"] = _trottersuzuki.Hamiltonian2Component_coupling_b_get
    if _newclass:coupling_b = _swig_property(_trottersuzuki.Hamiltonian2Component_coupling_b_get, _trottersuzuki.Hamiltonian2Component_coupling_b_set)
    __swig_setmethods__["omega_r"] = _trottersuzuki.Hamiltonian2Component_omega_r_set
    __swig_getmethods__["omega_r"] = _trottersuzuki.Hamiltonian2Component_omega_r_get
    if _newclass:omega_r = _swig_property(_trottersuzuki.Hamiltonian2Component_omega_r_get, _trottersuzuki.Hamiltonian2Component_omega_r_set)
    __swig_setmethods__["omega_i"] = _trottersuzuki.Hamiltonian2Component_omega_i_set
    __swig_getmethods__["omega_i"] = _trottersuzuki.Hamiltonian2Component_omega_i_get
    if _newclass:omega_i = _swig_property(_trottersuzuki.Hamiltonian2Component_omega_i_get, _trottersuzuki.Hamiltonian2Component_omega_i_set)
    __swig_setmethods__["potential_b"] = _trottersuzuki.Hamiltonian2Component_potential_b_set
    __swig_getmethods__["potential_b"] = _trottersuzuki.Hamiltonian2Component_potential_b_get
    if _newclass:potential_b = _swig_property(_trottersuzuki.Hamiltonian2Component_potential_b_get, _trottersuzuki.Hamiltonian2Component_potential_b_set)
    def __init__(self, *args): 
        """
        Construct the Hamiltonian of a two component system.  

        Parameters
        ----------
        * `grid` :  
            Lattice object.  
        * `potential` :  
            Potential of the first component.  
        * `potential_b` :  
            Potential of the second component.  
        * `mass` :  
            Mass of the first-component's particles.  
        * `mass_b` :  
            Mass of the second-component's particles.  
        * `coupling_a` :  
            Coupling constant of intra-particle interaction for the first component.  
        * `coupling_ab` :  
            Coupling constant of inter-particle interaction between the two components.  
        * `coupling_b` :  
            Coupling constant of intra-particle interaction for the second component.  
        * `omega_r` :  
            Real part of the Rabi coupling.  
        * `omega_i` :  
            Imaginary part of the Rabi coupling.  
        * `angular_velocity` :  
            The frame of reference rotates with this angular velocity.  
        * `rot_coord_x` :  
            X coordinate of the center of rotation.  
        * `rot_coord_y` :  
            Y coordinate of the center of rotation.  

        """
        this = _trottersuzuki.new_Hamiltonian2Component(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trottersuzuki.delete_Hamiltonian2Component
    __del__ = lambda self : None;
Hamiltonian2Component_swigregister = _trottersuzuki.Hamiltonian2Component_swigregister
Hamiltonian2Component_swigregister(Hamiltonian2Component)

class Solver(_object):
    """
    This class defines the evolution tasks.  

    C++ includes: trottersuzuki.h

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)
    __repr__ = _swig_repr
    __swig_setmethods__["grid"] = _trottersuzuki.Solver_grid_set
    __swig_getmethods__["grid"] = _trottersuzuki.Solver_grid_get
    if _newclass:grid = _swig_property(_trottersuzuki.Solver_grid_get, _trottersuzuki.Solver_grid_set)
    __swig_setmethods__["state"] = _trottersuzuki.Solver_state_set
    __swig_getmethods__["state"] = _trottersuzuki.Solver_state_get
    if _newclass:state = _swig_property(_trottersuzuki.Solver_state_get, _trottersuzuki.Solver_state_set)
    __swig_setmethods__["state_b"] = _trottersuzuki.Solver_state_b_set
    __swig_getmethods__["state_b"] = _trottersuzuki.Solver_state_b_get
    if _newclass:state_b = _swig_property(_trottersuzuki.Solver_state_b_get, _trottersuzuki.Solver_state_b_set)
    __swig_setmethods__["hamiltonian"] = _trottersuzuki.Solver_hamiltonian_set
    __swig_getmethods__["hamiltonian"] = _trottersuzuki.Solver_hamiltonian_get
    if _newclass:hamiltonian = _swig_property(_trottersuzuki.Solver_hamiltonian_get, _trottersuzuki.Solver_hamiltonian_set)
    __swig_setmethods__["current_evolution_time"] = _trottersuzuki.Solver_current_evolution_time_set
    __swig_getmethods__["current_evolution_time"] = _trottersuzuki.Solver_current_evolution_time_get
    if _newclass:current_evolution_time = _swig_property(_trottersuzuki.Solver_current_evolution_time_get, _trottersuzuki.Solver_current_evolution_time_set)
    def __init__(self, *args): 
        """
        Construct the Solver object for a two-component system.  

        Parameters
        ----------
        * `grid` :  
            Lattice object.  
        * `state1` :  
            First component's state of the system.  
        * `state2` :  
            Second component's state of the system.  
        * `hamiltonian` :  
            Hamiltonian of the two-component system.  
        * `delta_t` :  
            A single evolution iteration, evolves the state for this time.  
        * `kernel_type` :  
            Which kernel to use (either cpu or gpu).  

        """
        this = _trottersuzuki.new_Solver(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trottersuzuki.delete_Solver
    __del__ = lambda self : None;
    def evolve(self, *args):
        """
        Evolve the state of the system.  

        """
        return _trottersuzuki.Solver_evolve(self, *args)

    def get_total_energy(self):
        """
        Get the total energy of the system.  

        """
        return _trottersuzuki.Solver_get_total_energy(self)

    def get_squared_norm(self, which=3):
        """
        Get the squared norm of the state (default: total wave-function).  

        """
        return _trottersuzuki.Solver_get_squared_norm(self, which)

    def get_kinetic_energy(self, which=3):
        """
        Get the kinetic energy of the system.  

        """
        return _trottersuzuki.Solver_get_kinetic_energy(self, which)

    def get_potential_energy(self, which=3):
        """
        Get the potential energy of the system.  

        """
        return _trottersuzuki.Solver_get_potential_energy(self, which)

    def get_rotational_energy(self, which=3):
        """
        Get the rotational energy of the system.  

        """
        return _trottersuzuki.Solver_get_rotational_energy(self, which)

    def get_intra_species_energy(self, which=3):
        """
        Get the intra-particles interaction energy of the system.  

        """
        return _trottersuzuki.Solver_get_intra_species_energy(self, which)

    def get_inter_species_energy(self):
        """
        Get the inter-particles interaction energy of the system.  

        """
        return _trottersuzuki.Solver_get_inter_species_energy(self)

    def get_rabi_energy(self):
        """
        Get the Rabi energy of the system.  

        """
        return _trottersuzuki.Solver_get_rabi_energy(self)

Solver_swigregister = _trottersuzuki.Solver_swigregister
Solver_swigregister(Solver)

# This file is compatible with both classic and new-style classes.


