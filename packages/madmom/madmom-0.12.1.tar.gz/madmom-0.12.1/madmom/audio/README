This package includes audio handling functionality and low-level features.
The definition of "low" may vary, but all "high" level features (e.g. beats,
onsets, etc.) should be put into madmom.features.*.

Almost all functionality blocks are split into two classes:
A) a data class: instances are signal dependent, i.e. they operate directly on
   the signal and show different values for different signals.
B) a processor class: for every data class there should be a processor class
   with the exact same name and a "Processor" suffix. This class must inherit
   from madmom.Processor and define a process() method which returns a data
   class or inherit from madmom.SequentialProcessor or ParallelProcessor.

The data classes should be either numpy arrays or classes derived from ndarray
or indexable/iterable, i.e. they can be used as a direct replacement.
This design choice was made to allow both the data as well as the processor
classes to operate either on numpy arrays or instances of data classes
interchangeably. However, there is a small gotcha if interables are used as
input to a function or method that produces a numpy array, because iterating
over those classes leads to a dynamic memory re-allocation of the output array
and is thus much slower. To avoid this, please use the [:] notation.
