import base64
import datetime
import hashlib
import json
import logging
import requests
import urllib
import urlparse


CREATE_USER_API_URL = '/api/user/create'
VERIFY_USER_API_URL = '/api/user/checkUsername'
EDIT_USER_API_URL = '/api/user/edit'
DELETE_USER_API_URL = '/api/user/delete'

USER_KEYS = {}

logger = logging.getLogger(__name__)


def create_datestring():
    """Creates datestring in format asked for by Docebo"""
    currentDatetime = datetime.datetime.now()
    datestring = currentDatetime.strftime('%Y%m%d%H%M%S')
    return datestring


def create_token(username, datestring):
    """Creates MD5 hashed sso_token for Docebo SSO

    Args:
     username: Current user's email
     sso_secret: The sso token provided by Docebo
     datestring: Timestamp generated by create_datestring
    Returns:
      Valid hashed SSO token
    """
    token_hash = hashlib.md5()
    token_string = ','.join([username, datestring, USER_KEYS['sso_secret']])
    token_hash.update(token_string)
    sso_token = token_hash.hexdigest()
    return sso_token


def create_authentication_path(username, datestring, token):
    """Returns path to Docebo SSO endpoint, with all necessary params.

    Args:
     USER_KEYS['domain']: Current user's email
     username: Email of current user
     datestring: Timestamp generated by create_datestring
     token: Valid hashed SSO token
    Returns:
      Valid signed SSO URL
    """

    auth_path = '/lms/index.php'
    params = {
      'r': 'site/sso',
      'modname': 'login',
      'op': 'confirm',
      'login_user': username.lower(),
      'time': datestring,
      'token': token
    }

    # Return the modified redirect URL.
    url_parts = urlparse.urlsplit(USER_KEYS['domain'])

    return urlparse.urlunparse((url_parts.scheme, url_parts.netloc, auth_path, None, urllib.urlencode(params), None))


def setup_valid_docebo_sso_path_and_params(username):
    """SSO into users account

    Args:
     user: User model representing current user
     USER_KEYS['domain']: netloc to redirect user to to SSO
    Returns:
      Valid signed SSO URL
    """
    datestring = create_datestring()
    ssoToken = create_token(username, datestring)
    redirect_path = create_authentication_path(username, datestring, ssoToken)
    return redirect_path


def generate_api_hash(params):
    """Generate hash from params and API secret necessary for making Docebo API calls.

    Args:
     params: params of the API call to be made
    Returns:
      valid API hash
    """
    param_string = ','.join(params.values())
    secret_hash = hashlib.sha1(param_string + ',' + USER_KEYS['api_secret'])
    auth_token = base64.b64encode(USER_KEYS['api_key'] + ':' + secret_hash.hexdigest())
    return auth_token


def send_request_to_docebo(api_url, params):
    """Setup and send request to Docebo given URL and params

    Args:
     api_url: URL to perform given API function
     params: parameters for API request
    Returns:
      JSON body of response
    Throws:
      400 error if Docebo cannot resolve request
    """
    headers = {'X-Authorization': generate_api_hash(params)}
    response = requests.request(
        "POST",
        url=api_url,
        data=params,
        headers=headers
      )
    response_json = response.content
    if response.status_code > 299:
      return requests.Response.raise_for_status()
    try:
      return json.loads(response_json)
    except:
      logger.error("No response body received")
      return None


def generate_api_url(api_url):
    """append function specific API url to base domain"""
    api_url = urlparse.urljoin(USER_KEYS['domain'], api_url)
    return api_url


def verify_user(params):
    """Make Docebo API call to verify user.

    Args:
     user: user model for current user
    Returns:
      Body of response from API request
    """
    api_url = generate_api_url(VERIFY_USER_API_URL)
    response = send_request_to_docebo(api_url, params)
    return response


def edit_user(params):
    """Send Docebo API request to update user info.

    Args:
     user: user model for current user
     docebo_user_id: numerical unique account id provided by Docebo
    Returns:
      Body of response from API request
    """
    api_url = generate_api_url(EDIT_USER_API_URL)
    response = send_request_to_docebo(api_url, params)
    return response


def create_user(params):
    """Make Docebo API call to create user.

    Args:
     user: user model for current user
    Returns:
      Body of response from API request
    """
    api_url = generate_api_url(CREATE_USER_API_URL)
    response = send_request_to_docebo(api_url, params)
    return response


def delete_user(params):
    """API call for user to be deleted -- useful for testing"""
    api_url = generate_api_url(DELETE_USER_API_URL)
    response = send_request_to_docebo(api_url, params)
    return response
