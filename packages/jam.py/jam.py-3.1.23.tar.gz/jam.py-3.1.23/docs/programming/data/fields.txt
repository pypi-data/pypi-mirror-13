======
Fields
======

All items, working with database data have a **fields** attribute - list of 
field objects, which are used to reprisent fields in item records. 

.. code-block:: js

    function tracks_fields(task) {
        var i,
            field,
            tracks = task.tracks;
        tracks.open({limit: 1});
        for (i = 0; i < tracks.fields.length; i ++) {
            field = tracks.fields[i];
            console.log(field.field_name, field.field_caption, field.field_type);        
        }
    }

Every field have the following attributes:

* **ID** — unique ID of the field ID in an item framework,
* **owner** — an item that owns this field,
* **field_name** - the name of the field that will be used in programming code 
  to get access to the field object,
* **field_caption** - is the field name that appears to users,
* **field_type** - type of the item — one of the following values: 
  "text", "integer", "float", 'currency',  "date", "datetime", "boolean", "blob",
* **field_size** — a size of the field with type "text",
* **required** — specifies whether a nonblank value for a field is required,
* **read_only** — can't be changed in the interface controls,
* **lookup_item** — for lookup fields, that store record id of another item, 
  reference to this item.
* **lookup_field** — field name in lookup item.
* **master_field** - reference to master field.

To get access the data fields have the following properties: 

* **value** — this property allows to get or set field value of the current 
  record, the value is converted to the type of the field. So for fields of type 
  integer, float и currency, if value for this field in database table record 
  is NULL, value of this property is 0. To get unconverted value use property 
  raw_value,
* **text** - the text value of the field,
* **lookup_value** - for lookup fields, the field value property is id value of 
  the record in the lookup item, lookup_value is the value of lookup_field in 
  this record,
* **lookup_text** - the text value of the lookup_value,
* **display_text** – if field owner have an on_get_field_text event handler and 
  its result value is not None (undefined), then this property value is the 
  result value. Otherwise for lookup fields it's value is the lookup_text 
  property value and for other fields it is text property value with regard of 
  project locale parameters. 	
  
.. code-block:: py

    def print_field_data(field): 
        print '%s: field_type: "%s"' % (field.field_name, field.field_type) 
        print '            value: %s, value type: %s' % (field.value, type(field.value)) 
        print '             text: "%s"' % field.text 
        print '     lookup_value: %s' % field.lookup_value 
        print '      lookup_text: "%s"' % field.lookup_text 
        print '     display_text: "%s"' % field.display_text 

    print_field_data(invoices.id) 
    print_field_data(invoices.deleted) 
    print_field_data(invoices.invoicedate) 
    print_field_data(invoices.customer) 
    print_field_data(invoices.firstname) 
    print_field_data(invoices.taxrate) 
    print_field_data(invoices.total)

This code will output::

    id: field_type: "integer" 
                    value: 411, value type: <type 'int'> 
                     text: "411" 
             lookup_value: None 
              lookup_text: "" 
             display_text: "411" 
    deleted: field_type: "boolean" 
                    value: False, value type: <type 'bool'> 
                     text: "No" 
             lookup_value: None 
              lookup_text: "" 
             display_text: "No" 
    invoicedate: field_type: "date" 
                    value: 2014-12-14, value type: <type 'datetime.date'> 
                     text: "12/14/2014" 
             lookup_value: None 
              lookup_text: "" 
             display_text: "12/14/2014" 
    customer: field_type: "integer" 
                    value: 44, value type: <type 'int'> 
                     text: "44" 
             lookup_value: Hämäläinen 
              lookup_text: "Hämäläinen" 
             display_text: "Terhi Hämäläinen" 
    firstname: field_type: "integer" 
                    value: 44, value type: <type 'int'> 
                     text: "44" 
             lookup_value: Terhi 
              lookup_text: "Terhi" 
             display_text: "Terhi" 
    taxrate: field_type: "float" 
                    value: 5, value type: <type 'int'> 
                     text: "5" 
             lookup_value: None 
              lookup_text: "" 
             display_text: "5" 
    total: field_type: "currency" 
                    value: 14.56, value type: <type 'float'> 
                     text: "14.56" 
             lookup_value: None 
              lookup_text: "" 
             display_text: "$14.56" 

In the example above the lookup_text value of the field customer is 
'Hämäläinen', while the display_text value - 'Terhi Hämäläinenand'. This is 
because the journal Invoices has an event handler on_get_field_text:

Python:

.. code-block:: py

    def on_get_field_text(field):
        if field.field_name == 'customer':
            return field.owner.firstname.lookup_text + ' ' + field.lookup_text

JavaScript:

.. code-block:: js

    function on_get_field_text(field) {
        if (field.field_name === 'customer') {
            return field.owner.firstname.lookup_text + ' ' + field.lookup_text;
        }
    }