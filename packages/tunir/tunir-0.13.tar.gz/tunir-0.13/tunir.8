.\" Man page generated from reStructuredText.
.
.TH "TUNIR" "8" "February 09, 2016" "0.13" "Tunir"
.SH NAME
tunir \- Tunir, the simple CI with a big heart.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
Tunir is a simple continuous integration (CI) system. The goal is to have a system which is
simple to setup, and easy to maintain.
.sp
Contents:
.SH WHY ANOTHER CI?
.sp
I have used Jenkins before. I was maintaining one instance in one of my VPS
instance.  The amount of RAM required by Jenkins was too much for my small VM.
I can admit that I am not a great sys\-admin anyway.
.sp
As part of my daily job, I have to test the latest cloud images we build under
Fedora project. While doing so, I figured out that most of it can be automated
if we have a system to create/maintain/terminate cloud instances. Of course I
do not want any actual cloud, it will be a different monster to maintain.
.sp
This is the point where I came up with Tunir. Tunir is a simple continuous integration (CI) system that will help
me run automated tests for the cloud images. I kept the system generic enough
to execute any kind of tests people want.
.sp
The configuration is very minimal with Tunir.
.SH INSTALLATION
.sp
Tunir is written in Python. Currently it works with Python2.7+
.SS Clone the repository
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ git clone https://github.com/kushaldas/tunir.git
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Install the dependencies
.sp
We are currently depended on the following projects or libraries.
.INDENT 0.0
.IP \(bu 2
libvirt
.IP \(bu 2
libguestfs
.IP \(bu 2
libguestfs\-tools
.IP \(bu 2
paramiko
.IP \(bu 2
redis
.IP \(bu 2
python\-redis
.IP \(bu 2
vagrant\-libvirt
.IP \(bu 2
docker  (optional)
.UNINDENT
.sp
You can install them in Fedora by the following command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo dnf install libguestfs\-tools python\-paramiko python\-sqlalchemy docker\-io python\-redis redis vagrant\-libvirt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Start the redis server with the following command.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo service redis start
.ft P
.fi
.UNINDENT
.UNINDENT
.SH USAGE
.sp
Tunir is a mini continuous integration (CI) system which can run a set of commands/tests in a
new cloud VM, or bare metal, or in Vagrant boxes based on the job configurations.
.sp
The current version can be used along with cron to run at predefined times. Tunir prints
the output in the terminal, it also saves each command it ran, and the output in a text
file located at \(aq/var/run/tunir/tunir_results.txt\(aq.
.SS Enabling a queue of ports for the VMs
.sp
We maintain a queue of available ports in the local system, which will be used to create
VM(s). We maintain this queue in Redis. We have a helper script which can enable some
default ports to be used. They are defined in the \fIcreateports.py\fP\&. In case you are using
a rpm, please check \fI/usr/share/tunir/\fP directory for the same.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python createports.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This is very important. Please have the queue with usable ports ready before any
other step. We use ports 2222 to 2230 as the default ports available in createports.py.
.UNINDENT
.UNINDENT
.SS Configuring a new job
.sp
For each different job, two files are required. For example, \fIdefault\fP job has two files,
\fBdefault.json\fP and \fBdefault.txt\fP\&.
.SS jobname.json
.sp
This file is the main configuration for the job. Below is the example of one such job.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "name": "jobname",
  "type": "vm",
  "image": "file:///home/vms/Fedora\-Cloud\-Base\-20141203\-21.x86_64.qcow2",
  "ram": 2048,
  "user": "fedora",
  "password": "passw0rd"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The possible keys are mentioned below.
.INDENT 0.0
.TP
.B name
The name of the job, which must match the filename.
.TP
.B type
The type of system in which the tests will run. Possible values are vm, docker, bare.
.TP
.B image
Path to the cloud image in case of a VM. You can provide docker image there for Docker based tests, or the ip/hostname of the bare metal box.
.TP
.B ram
The amount of RAM for the VM. Optional for bare or docker types.
.TP
.B user
The username to connect to.
.TP
.B password
The password of the given user. Right now for cloud VM(s) it is set to \fIpassw0rd\fP\&.
.TP
.B key
The path to the ssh key, the password value should be an empty string for this.
.TP
.B port
The port number as string to connect. (Required for bare type system.)
.UNINDENT
.SS jobname.txt
.sp
This text file contains the bash commands to run in the system, one command per line. In case you are
rebooting the system, you may want to use \fBSLEEP NUMBER_OF_SECONDS\fP command there.
.sp
If a command starts with @@ sign, it means the command is supposed to fail. Generally we check the return codes
of the commands to find if it failed, or not. For Docker container based systems, we track the stderr output.
.sp
We can also have non\-gating tests, means these tests can pass or fail, but the whole job status will depend
on other gating tests. Any command in jobname.txt starting with ## sign will mark the test as non\-gating.
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
## curl \-O https://kushal.fedorapeople.org/tunirtests.tar.gziii
ls /
## foobar
## ls /root
##  sudo ls /root
date
@@ sudo reboot
SLEEP 40
ls /etc
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example of configuration file to run the tests on a remote machine
.sp
The configuration:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "name": "remotejob",
  "type": "bare",
  "image": "192.168.1.100",
  "ram": 2048,
  "user": "fedora",
  "key": "/home/password/id_rsa"
  "port": "22"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Start a new job
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo ./tunir \-\-job jobname
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Job configuration directory
.sp
You can actually provide a path to tunir so that it can pick up job configuration and commands from the given directory.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo ./tunir \-\-job jobname \-\-config\-dir /etc/tunirjobs/
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Persistence for downloaded images
.sp
To make images that are downloaded persist across runs of tunir and get reused then you can specify the image directory to save them in.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo ./tunir \-\-job jobname \-\-image\-dir /var/lib/tunirimages/
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Stateless jobs
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Now all jobs are by default stateless.
.UNINDENT
.UNINDENT
.sp
You can run a job as stateless, which does not require any database. This will print the result at the end of the
run.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo ./tunir \-\-job jobname \-\-stateless
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Atomic images
.sp
In case you are using an Atomic image in vm, you can pass the command line argument \fI\-\-atomic\fP, that way Tunir will be
able to boot the image properly in the local system.
.SS Timeout issue
.sp
In case if one of the command fails to return within 10 minutes (600 seconds),
tunir will fail the job with a timeout error. It will be marked at the end of
the results. You can change the default value in the config file with a timeout
key. In the below example I am having 300 seconds as timeout for each command.:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
 {
  "name": "jobname",
  "type": "vm",
  "image": "file:///home/vms/Fedora\-Cloud\-Base\-20141203\-21.x86_64.qcow2",
  "ram": 2048,
  "user": "fedora",
  "password": "passw0rd",
  "timeout": 300

}
.ft P
.fi
.UNINDENT
.UNINDENT
.SH USING VAGRANT JOBS
.sp
\fI\%Vagrant\fP is a very well known system among developers for creating lightweight
development systems. Now from tunir 0.7 we can use Vagrant boxes to test. In Fedora, we can have two
different kind of vagrant provider, libvirt, and virtualbox.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
The same host can not have both libvirt and virtualbox.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Please create /var/run/tunir directory before running vagrant jobs.
.UNINDENT
.UNINDENT
.SS How to install vagrant\-libvirt?
.sp
Just do
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# dnf install vagrant\-libvirt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The above command will pull in all the required dependencies.
.SS How to install Virtualbox and vagrant?
.sp
Configure required virtualbox repo
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# curl http://download.virtualbox.org/virtualbox/rpm/fedora/virtualbox.repo > /etc/yum.repos.d/virtualbox.repo
# dnf install VirtualBox\-4.3  vagrant \-y
# dnf install kernel\-devel gcc \-y
# /etc/init.d/vboxdrv setup
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now try using \fI\-\-provider\fP option with vagrant command like
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# vagrant up \-\-provider virtualbox
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example of a libvirt based job file
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "name": "fedora",
  "type": "vagrant",
  "image": "/var/run/tunir/Fedora\-Cloud\-Atomic\-Vagrant\-22\-20150521.x86_64.vagrant\-libvirt.box",
  "ram": 2048,
  "user": "vagrant",
  "port": "22"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example of a Virtualbox based job file
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "name": "fedora",
  "type": "vagrant",
  "image": "/var/run/tunir/Fedora\-Cloud\-Atomic\-Vagrant\-22\-20150521.x86_64.vagrant\-virtualbox.box",
  "ram": 2048,
  "user": "vagrant",
  "port": "22",
  "provider": "virtualbox"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
We have a special key provider in the config for Virtualbox based jobs.
.UNINDENT
.UNINDENT
.SH AWS SUPPORT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
New feature from 0.13 release
.UNINDENT
.UNINDENT
.sp
Now we have support to use AWS for testing using Tunir. We can have both HVM,
and paravirtual types of instances to run the test. You will require [Python
libcloud](\fI\%https://libcloud.apache.org/\fP) for the same.
.SS Example of HVM
.sp
The following is a JSON file containing the config of a HVM instance.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "name": "awsjob",
  "type": "aws",
  "image": "ami\-a6fc90c6",
  "ram": 2048,
  "user": "fedora",
  "key": "PATH_TO_PEM",
  "size_id": "m3.2xlarge",
  "access_key": "YOUR_ACCESS_KEY",
  "secret_key": "YOUR_SECRET_KEY",
  "keyname": "YOUR_KEY_NAME",
  "security_group": "THE_GROUP_WITH_SSH",
  "virt_type": "hvm",
  "timeout": 30
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Remember that m3 instances are capable of running HVM.
.UNINDENT
.UNINDENT
.SS Example of paravirtual
.sp
Another example with paravirtual type of instance.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
  "name": "awsjob",
  "type": "aws",
  "image": "ami\-efff938f",
  "ram": 2048,
  "user": "fedora",
  "key": "PATH_TO_PEM",
  "size_id": "m1.xlarge",
  "access_key": "YOUR_ACCESS_KEY",
  "secret_key": "YOUR_SECRET_KEY",
  "keyname": "YOUR_KEY_NAME",
  "security_group": "THE_GROUP_WITH_SSH",
  "virt_type": "paravirtual",
  "aki": "aki\-880531cd",
  "timeout": 30
}
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fIgenindex\fP
.IP \(bu 2
\fImodindex\fP
.IP \(bu 2
\fIsearch\fP
.UNINDENT
.SH AUTHOR
Kushal Das
.SH COPYRIGHT
2015, Kushal Das
.\" Generated by docutils manpage writer.
.
