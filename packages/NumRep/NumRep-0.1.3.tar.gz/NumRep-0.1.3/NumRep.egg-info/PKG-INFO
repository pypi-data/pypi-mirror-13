Metadata-Version: 1.1
Name: NumRep
Version: 0.1.3
Summary: A module to represent numbers by their place value.
Home-page: https://github.com/necessary129/NumRep
Author: Muhammed Shamil K
Author-email: note@noteness.cf
License: 2-clause Simplified BSD
Description: NumRep
        ------
        
        .. image:: https://travis-ci.org/necessary129/NumRep.svg
            :target: https://travis-ci.org/necessary129/NumRep
        
        Version: 0.1.3
        
        This module provides a way to represent the place values in a given number, eg:
            >>> a = NumRep(1234456789123)
            >>> a
            NumRep(Crores=123445,Lakhs=67,Thousands=89,Hundreds=1,Tens=2,Ones=3)
            >>> a.crores
            123445
            >>> a.ones
            3
            >>> a.hundreds
            1
            >>> a.tens
            2
            >>> a.lakhs
            67
            >>> print(a)
            123445 Crores, 67 Lakhs, 89 Thousands, 1 Hundred, 2 Tens, 3 Ones
        
        This raises TypeError when you give it an invalid number, eg:
            >>> a = NumRep('notanumber1111')
            Traceback (most recent call last):
            ...
            TypeError: Not a valid Number.
        
        And Every integer in the NumRep has a GetRep() method, which returns the Representation of the number itself, eg:
            >>> a = NumRep(123456789)
            >>> a
            NumRep(Crores=12,Lakhs=34,Thousands=56,Hundreds=7,Tens=8,Ones=9)
            >>> a.crores
            12
            >>> a.crores.GetRep()
            NumRep(Tens=1,Ones=2)
            >>> a.crores.GetRep().tens.GetRep()
            NumRep(Ones=1)
        
        You can also do arithmetic operations on them and then use GetRep(), eg:
            >>> a = NumRep(123456789)
            >>> a
            NumRep(Crores=12,Lakhs=34,Thousands=56,Hundreds=7,Tens=8,Ones=9)
            >>> (a.crores - 2).GetRep()
            NumRep(Tens=1)
        
        You can compare and do arithmetic operations NumReps with integers and also with other NumReps, like:
            >>> c = NumRep(15)
            >>> c
            NumRep(Tens=1,Ones=5)
            >>> c + 10
            NumRep(Tens=2,Ones=5)
            >>> b = NumRep(10)
            >>> b
            NumRep(Tens=1)
            >>> c + b
            NumRep(Tens=2,Ones=5)
        
        
        This class also provides an all() function, which gives you the real value of the given denomination, eg:
            >>> a = NumRep(1234456789123)
            >>> a.all('hundreds')
            12344567891
        You can also use the values specified in the module for all(), eg:
            >>> a = NumRep(1234456789123)
            >>> a.all(CRORES)
            123445
        
        ChangeLog
        ---------
        
        0.1.3
         * Another bug fix
        
        0.1.2
         * Fixed a major bug.
        
        0.1.1
         * define a __str__() function
         * Add a __main__ module
        
        0.1
         * Now can compare and do arithmetic operations on NumRep objects
         * Made NumRep a package
        
        0.0.1.1
         * Added variabes for all() functions in the module
        
        0.0.1
         * First Release
Keywords: number representation order place value denomination
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Plugins
Classifier: Intended Audience :: Customer Service
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.1
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Topic :: Utilities
