import js2py.pyjs, sys
# Redefine builtin objects... Do you have a better idea?
for m in sys.modules.keys():
	if m.startswith('js2py'):
		del sys.modules[m]
del js2py.pyjs
del js2py
from js2py.pyjs import *
# setting scope
var = Scope( JS_BUILTINS )
set_global_object(var)

# Code follows:
var.registers([])
@Js
def PyJs_anonymous_0_(window, document, undefined, this, arguments, var=var):
    var = Scope({u'this':this, u'window':window, u'document':document, u'undefined':undefined, u'arguments':arguments}, var)
    var.registers([u'forceAsyncEvents', u'$xhrFactoryProvider', u'$HttpParamSerializerJQLikeProvider', u'$BrowserProvider', u'jqLiteParseHTML', u'LocationHashbangUrl', u'OPERATORS', u'APPLICATION_JSON', u'ngSwitchDefaultDirective', u'snake_case', u'parseKeyValue', u'startingTag', u'ngNonBindableDirective', u'$$SanitizeUriProvider', u'forEach', u'setupModuleLoader', u'classDirective', u'$IntervalProvider', u'createInjector', u'isString', u'findConstantAndWatchExpressions', u'DATETIMELOCAL_REGEXP', u'jqLiteExpandoStore', u'shallowCopy', u'ngInitDirective', u'jqNextId', u'VALIDITY_STATE_PROPERTY', u'maxlengthDirective', u'ngBindDirective', u'ngChangeDirective', u'version', u'jqLiteMinErr', u'$SnifferProvider', u'isUndefined', u'DECIMAL_SEP', u'equals', u'$$jqLiteProvider', u'ngAttributeAliasDirectives', u'splice', u'encodePath', u'SCE_CONTEXTS', u'qFactory', u'urlResolve', u'$$CookieReader', u'urlInputType', u'STRIP_COMMENTS', u'isPossiblyDangerousMemberName', u'isFile', u'getNgAttribute', u'isBlob', u'NODE_TYPE_DOCUMENT_FRAGMENT', u'anonFn', u'DIRTY_CLASS', u'formatNumber', u'$ParseProvider', u'createEventHandler', u'NODE_TYPE_ELEMENT', u'NODE_TYPE_COMMENT', u'PRISTINE_CLASS', u'$$RAFProvider', u'ngSwitchWhenDirective', u'locationPrototype', u'badInputChecker', u'$$CoreAnimateQueueProvider', u'Browser', u'ngModelMinErr', u'lowercase', u'getAliasedAttrName', u'stringBasedInputType', u'manualUppercase', u'getterFnCacheExpensive', u'inputType', u'$animateMinErr', u'isBoolean', u'BOOLEAN_ELEMENTS', u'NgModelController', u'ensureSafeAssignContext', u'PENDING_CLASS', u'isBlankObject', u'NG_HIDE_IN_PROGRESS_CLASS', u'ifDefined', u'toJsonReplacer', u'getValueOf', u'stripHash', u'dateFilter', u'$SceProvider', u'formDirective', u'isPromiseLike', u'eraGetter', u'ngMinErr', u'$TimeoutProvider', u'dateStrGetter', u'FN_ARGS', u'BIND', u'bootstrap', u'UNTOUCHED_CLASS', u'CALL', u'JSON_PROTECTION_PREFIX', u'parseConstantExpr', u'getStringValue', u'jqLiteHasClass', u'SPECIAL_CHARS_REGEXP', u'$$HashMapProvider', u'$AnimateProvider', u'DATE_REGEXP', u'ngIncludeDirective', u'ngSwitchDirective', u'addSetValidityMethod', u'ensureSafeMemberName', u'$AnchorScrollProvider', u'jqId', u'isNumber', u'createDateParser', u'ngClassOddDirective', u'assertArg', u'minErr', u'$parseMinErr', u'merge', u'directiveLinkingFn', u'trimEmptyHash', u'jQuery', u'bindJQuery', u'timeZoneGetter', u'WEEK_REGEXP', u'jqLiteClone', u'numberInputType', u'ngBindHtmlDirective', u'jsonFilter', u'ASTCompiler', u'serializeObject', u'encodeUriSegment', u'stripFile', u'msie', u'$LogProvider', u'defaultHandlerWrapper', u'escapeForRegexp', u'assertNotHasOwnProperty', u'arrayRemove', u'jqLiteAddNodes', u'publishExternalAPI', u'SUBMITTED_CLASS', u'jqLiteBuildFragment', u'toJson', u'$HttpParamSerializerProvider', u'angular', u'jqLiteAddClass', u'AST', u'assertArgFn', u'plusFn', u'$$CoreAnimateRunnerProvider', u'angularModule', u'isTypedArray', u'jqLiteRemoveClass', u'isElement', u'isArray', u'ngFormDirective', u'ALIASED_ATTR', u'lowercaseFilter', u'ISO_DATE_REGEXP', u'objectValueOf', u'getter', u'ngCloakDirective', u'copy', u'nextUid', u'LocationHashbangInHtml5Url', u'isFormData', u'locationGetterSetter', u'isObjectEmpty', u'ngClassDirective', u'ampmGetter', u'jqLiteContains', u'dateGetter', u'TIME_REGEXP', u'bind', u'VALID_CLASS', u'$LocationProvider', u'locationGetter', u'selectDirective', u'isFunction', u'$HttpProvider', u'ngClassEvenDirective', u'noopNgModelController', u'ngOptionsDirective', u'$compileMinErr', u'createDateInputType', u'jqCache', u'longEraGetter', u'FN_ARG', u'isObject', u'TOUCHED_CLASS', u'NUMBER_REGEXP', u'toInt', u'$SceDelegateProvider', u'weekParser', u'ngAttrPrefixes', u'valueFn', u'HashMap', u'isArrayLike', u'SNAKE_CASE_REGEXP', u'$DocumentProvider', u'assignableAST', u'LocationHtml5Url', u'ensureSafeFunction', u'jqLiteHasData', u'deepCompare', u'makeMap', u'ngControllerDirective', u'ngRepeatDirective', u'getThursdayThisWeek', u'ngDirective', u'jqLiteIsTextNode', u'baseInputType', u'getPrototypeOf', u'serializeValue', u'formDirectiveFactory', u'$sceMinErr', u'radioInputType', u'jqLiteData', u'ngTranscludeDirective', u'ngModelDirective', u'NODE_TYPE_TEXT', u'JQLitePrototype', u'scriptDirective', u'styleDirective', u'ngPluralizeDirective', u'$ExceptionHandlerProvider', u'ngShowDirective', u'originUrl', u'CONSTANT_VALUE_REGEXP', u'EMAIL_REGEXP', u'URL_REGEXP', u'MOUSE_EVENT_MAP', u'toString', u'$httpMinErrLegacyFn', u'$$ForceReflowProvider', u'createPredicateFn', u'$WindowProvider', u'CNTRL_REG', u'extend', u'nodesetLinkingFn', u'jq', u'transformData', u'ngModelOptionsDirective', u'getTypeForFilter', u'adjustMatcher', u'DATE_FORMATS', u'chromeHack', u'hashKey', u'getTestability', u'minlengthDirective', u'fromJson', u'inputDirective', u'extractElementNode', u'$RootScopeProvider', u'PATH_MATCH', u'jqLiteRemoveData', u'DEFAULT_REGEXP', u'NODE_TYPE_ATTRIBUTE', u'limitToFilter', u'FN_ARG_SPLIT', u'parseAppUrl', u'window', u'APPLY', u'$TemplateCacheProvider', u'identifierForController', u'wrapMap', u'getInputs', u'isAssignable', u'$CoreAnimateCssProvider', u'$controllerMinErr', u'hasOwnProperty', u'$interpolateMinErr', u'requiredDirective', u'forEachSorted', u'emailInputType', u'mergeClasses', u'REGEX_STRING_REGEXP', u'orderByFilter', u'weekGetter', u'$InterpolateProvider', u'$CompileProvider', u'$locationMinErr', u'isWindow', u'$$QProvider', u'camelCase', u'ensureSafeObject', u'DEFAULT_PORTS', u'$ControllerProvider', u'nodeName_', u'getBlockNodes', u'ngStyleDirective', u'NG_HIDE_CLASS', u'$$TestabilityProvider', u'isSuccess', u'specialMouseHandlerWrapper', u'$injectorMinErr', u'document', u'adjustMatchers', u'JSON_START', u'defaultHttpResponseTransform', u'NG_ANIMATE_CLASSNAME', u'beginsWith', u'jqLiteOff', u'NUMBER_STRING', u'identity', u'undefined', u'jqLiteAcceptsData', u'inherit', u'getBooleanAttrName', u'ngHideDirective', u'parseAbsoluteUrl', u'convertTimezoneToLocal', u'ngValueDirective', u'jqLiteDealoc', u'jqLiteInheritedData', u'MONTH_REGEXP', u'manualLowercase', u'tryDecodeURIComponent', u'isStateless', u'reverseParams', u'urlParsingNode', u'SelectController', u'tokenDifference', u'FormController', u'isJsonLike', u'getFirstThursdayOfYear', u'hasCustomToString', u'ESCAPE', u'jqLite', u'textInputType', u'filterFilter', u'isDefined', u'ngBindTemplateDirective', u'encodeUriQuery', u'skipDestroyOnNextJQueryCleanData', u'SINGLE_TAG_REGEXP', u'createHttpBackend', u'sliceArgs', u'uppercase', u'addDateMinutes', u'createMap', u'isConstant', u'csp', u'baseExtend', u'JQLite', u'directiveNormalize', u'slice', u'PREFIX_REGEXP', u'noop', u'prepareAnimateOptions', u'jqLiteRemove', u'htmlAnchorDirective', u'currencyFilter', u'XHTML_TAG_REGEXP', u'nullFormRenameControl', u'INVALID_CLASS', u'jqLiteEmpty', u'splitClasses', u'Lexer', u'optionDirective', u'uppercaseFilter', u'urlIsSameOrigin', u'$HttpBackendProvider', u'Parser', u'timezoneToOffset', u'ngEventDirectives', u'annotate', u'removeEventListenerFn', u'jqLiteController', u'$TemplateRequestProvider', u'DATE_FORMATS_SPLIT', u'numberFilter', u'angularInit', u'MOZ_HACK_REGEXP', u'isRegExp', u'removeComments', u'isScope', u'getterFnCacheDefault', u'headersGetter', u'ELEMENT_NODE', u'ngIfDirective', u'parseHeaders', u'reloadWithDebugInfo', u'TAG_NAME_REGEXP', u'$httpMinErr', u'isDate', u'ngListDirective', u'CONTENT_TYPE_APPLICATION_JSON', u'serverBase', u'isLiteral', u'patternDirective', u'JSON_ENDS', u'trim', u'toKeyValue', u'uid', u'jqLiteDocumentLoaded', u'checkboxInputType', u'padNumber', u'setHashKey', u'$QProvider', u'ngOptionsMinErr', u'toDebugString', u'NODE_TYPE_DOCUMENT', u'HTML_REGEXP', u'BOOLEAN_ATTR', u'includes', u'nullFormCtrl', u'bindJQueryFired', u'NG_OPTIONS_REGEXP', u'concat', u'ASTInterpreter', u'addEventListenerFn', u'$FilterProvider', u'TYPED_ARRAY_REGEXP', u'ngIncludeFillContentDirective', u'$$CookieReaderProvider', u'$CacheFactoryProvider', u'push'])
    @Js
    def PyJsHoisted_parseConstantExpr_(PyJsArg_247061727365_, context, name, expression, fallback, this, arguments, var=var):
        var = Scope({u'name':name, u'context':context, u'this':this, u'arguments':arguments, u'fallback':fallback, u'expression':expression, u'$parse':PyJsArg_247061727365_}, var)
        var.registers([u'parseFn', u'name', u'context', u'fallback', u'expression', u'$parse'])
        pass
        if var.get(u'isDefined')(var.get(u'expression')):
            var.put(u'parseFn', var.get(u'$parse')(var.get(u'expression')))
            if var.get(u'parseFn').get(u'constant').neg():
                PyJsTempException = JsToPyException(var.get(u'ngModelMinErr')(Js(u'constexpr'), (Js(u'Expected constant expression for `{0}`, but saw ')+Js(u'`{1}`.')), var.get(u'name'), var.get(u'expression')))
                raise PyJsTempException
            return var.get(u'parseFn')(var.get(u'context'))
        return var.get(u'fallback')
    PyJsHoisted_parseConstantExpr_.func_name = u'parseConstantExpr'
    var.put(u'parseConstantExpr', PyJsHoisted_parseConstantExpr_)
    @Js
    def PyJsHoisted_convertTimezoneToLocal_(date, timezone, reverse, this, arguments, var=var):
        var = Scope({u'date':date, u'timezone':timezone, u'this':this, u'reverse':reverse, u'arguments':arguments}, var)
        var.registers([u'date', u'timezone', u'reverse', u'timezoneOffset'])
        var.put(u'reverse', ((-Js(1.0)) if var.get(u'reverse') else Js(1.0)))
        var.put(u'timezoneOffset', var.get(u'timezoneToOffset')(var.get(u'timezone'), var.get(u'date').callprop(u'getTimezoneOffset')))
        return var.get(u'addDateMinutes')(var.get(u'date'), (var.get(u'reverse')*(var.get(u'timezoneOffset')-var.get(u'date').callprop(u'getTimezoneOffset'))))
    PyJsHoisted_convertTimezoneToLocal_.func_name = u'convertTimezoneToLocal'
    var.put(u'convertTimezoneToLocal', PyJsHoisted_convertTimezoneToLocal_)
    @Js
    def PyJsHoisted_limitToFilter_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_898_(input, limit, begin, this, arguments, var=var):
            var = Scope({u'this':this, u'input':input, u'begin':begin, u'limit':limit, u'arguments':arguments}, var)
            var.registers([u'input', u'begin', u'limit'])
            if PyJsStrictEq(var.get(u'Math').callprop(u'abs', var.get(u'Number')(var.get(u'limit'))),var.get(u'Infinity')):
                var.put(u'limit', var.get(u'Number')(var.get(u'limit')))
            else:
                var.put(u'limit', var.get(u'toInt')(var.get(u'limit')))
            if var.get(u'isNaN')(var.get(u'limit')):
                return var.get(u'input')
            if var.get(u'isNumber')(var.get(u'input')):
                var.put(u'input', var.get(u'input').callprop(u'toString'))
            if (var.get(u'isArray')(var.get(u'input')).neg() and var.get(u'isString')(var.get(u'input')).neg()):
                return var.get(u'input')
            var.put(u'begin', (Js(0.0) if (var.get(u'begin').neg() or var.get(u'isNaN')(var.get(u'begin'))) else var.get(u'toInt')(var.get(u'begin'))))
            var.put(u'begin', (var.get(u'Math').callprop(u'max', Js(0.0), (var.get(u'input').get(u'length')+var.get(u'begin'))) if (var.get(u'begin')<Js(0.0)) else var.get(u'begin')))
            if (var.get(u'limit')>=Js(0.0)):
                return var.get(u'input').callprop(u'slice', var.get(u'begin'), (var.get(u'begin')+var.get(u'limit')))
            else:
                if PyJsStrictEq(var.get(u'begin'),Js(0.0)):
                    return var.get(u'input').callprop(u'slice', var.get(u'limit'), var.get(u'input').get(u'length'))
                else:
                    return var.get(u'input').callprop(u'slice', var.get(u'Math').callprop(u'max', Js(0.0), (var.get(u'begin')+var.get(u'limit'))), var.get(u'begin'))
        PyJs_anonymous_898_._set_name(u'anonymous')
        return PyJs_anonymous_898_
    PyJsHoisted_limitToFilter_.func_name = u'limitToFilter'
    var.put(u'limitToFilter', PyJsHoisted_limitToFilter_)
    @Js
    def PyJsHoisted_HashMap_(array, isolatedUid, this, arguments, var=var):
        var = Scope({u'this':this, u'array':array, u'isolatedUid':isolatedUid, u'arguments':arguments}, var)
        var.registers([u'array', u'isolatedUid', u'uid'])
        if var.get(u'isolatedUid'):
            var.put(u'uid', Js(0.0))
            @Js
            def PyJs_anonymous_146_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                return var.put(u'uid',var.get(u'uid')+Js(1))
            PyJs_anonymous_146_._set_name(u'anonymous')
            var.get(u"this").put(u'nextUid', PyJs_anonymous_146_)
        var.get(u'forEach')(var.get(u'array'), var.get(u"this").get(u'put'), var.get(u"this"))
    PyJsHoisted_HashMap_.func_name = u'HashMap'
    var.put(u'HashMap', PyJsHoisted_HashMap_)
    @Js
    def PyJsHoisted_getStringValue_(name, fullExpression, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'fullExpression':fullExpression}, var)
        var.registers([u'name', u'fullExpression'])
        var.put(u'name', (var.get(u'name')+Js(u'')))
        if var.get(u'isString')(var.get(u'name')).neg():
            PyJsTempException = JsToPyException(var.get(u'$parseMinErr')(Js(u'iseccst'), (Js(u'Cannot convert object to primitive value! ')+Js(u'Expression: {0}')), var.get(u'fullExpression')))
            raise PyJsTempException
        return var.get(u'name')
    PyJsHoisted_getStringValue_.func_name = u'getStringValue'
    var.put(u'getStringValue', PyJsHoisted_getStringValue_)
    @Js
    def PyJsHoisted_isArrayLike_(obj, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
        var.registers([u'length', u'obj'])
        if ((var.get(u'obj')==var.get(u"null")) or var.get(u'isWindow')(var.get(u'obj'))):
            return Js(False)
        if ((var.get(u'isArray')(var.get(u'obj')) or var.get(u'isString')(var.get(u'obj'))) or (var.get(u'jqLite') and var.get(u'obj').instanceof(var.get(u'jqLite')))):
            return var.get(u'true')
        var.put(u'length', (var.get(u'Object')(var.get(u'obj')).contains(Js(u'length')) and var.get(u'obj').get(u'length')))
        return (var.get(u'isNumber')(var.get(u'length')) and (((var.get(u'length')>=Js(0.0)) and var.get(u'obj').contains((var.get(u'length')-Js(1.0)))) or (var.get(u'obj').get(u'item').typeof()==Js(u'function'))))
    PyJsHoisted_isArrayLike_.func_name = u'isArrayLike'
    var.put(u'isArrayLike', PyJsHoisted_isArrayLike_)
    @Js
    def PyJsHoisted_jqLiteDealoc_(element, onlyDescendants, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'onlyDescendants':onlyDescendants, u'element':element}, var)
        var.registers([u'i', u'onlyDescendants', u'element', u'l', u'descendants'])
        if var.get(u'onlyDescendants').neg():
            var.get(u'jqLiteRemoveData')(var.get(u'element'))
        if var.get(u'element').get(u'querySelectorAll'):
            var.put(u'descendants', var.get(u'element').callprop(u'querySelectorAll', Js(u'*')))
            #for JS loop
            var.put(u'i', Js(0.0))
            var.put(u'l', var.get(u'descendants').get(u'length'))
            while (var.get(u'i')<var.get(u'l')):
                try:
                    var.get(u'jqLiteRemoveData')(var.get(u'descendants').get(var.get(u'i')))
                finally:
                        (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
    PyJsHoisted_jqLiteDealoc_.func_name = u'jqLiteDealoc'
    var.put(u'jqLiteDealoc', PyJsHoisted_jqLiteDealoc_)
    @Js
    def PyJsHoisted_jqLiteInheritedData_(element, name, value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'value':value, u'element':element}, var)
        var.registers([u'name', u'i', u'value', u'element', u'ii', u'names'])
        if (var.get(u'element').get(u'nodeType')==var.get(u'NODE_TYPE_DOCUMENT')):
            var.put(u'element', var.get(u'element').get(u'documentElement'))
        var.put(u'names', (var.get(u'name') if var.get(u'isArray')(var.get(u'name')) else Js([var.get(u'name')])))
        while var.get(u'element'):
            #for JS loop
            var.put(u'i', Js(0.0))
            var.put(u'ii', var.get(u'names').get(u'length'))
            while (var.get(u'i')<var.get(u'ii')):
                try:
                    if var.get(u'isDefined')(var.put(u'value', var.get(u'jqLite').callprop(u'data', var.get(u'element'), var.get(u'names').get(var.get(u'i'))))):
                        return var.get(u'value')
                finally:
                        (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
            var.put(u'element', (var.get(u'element').get(u'parentNode') or (PyJsStrictEq(var.get(u'element').get(u'nodeType'),var.get(u'NODE_TYPE_DOCUMENT_FRAGMENT')) and var.get(u'element').get(u'host'))))
    PyJsHoisted_jqLiteInheritedData_.func_name = u'jqLiteInheritedData'
    var.put(u'jqLiteInheritedData', PyJsHoisted_jqLiteInheritedData_)
    @Js
    def PyJsHoisted_jqLiteHasClass_(element, selector, this, arguments, var=var):
        var = Scope({u'this':this, u'selector':selector, u'arguments':arguments, u'element':element}, var)
        var.registers([u'selector', u'element'])
        if var.get(u'element').get(u'getAttribute').neg():
            return Js(False)
        return (((Js(u' ')+(var.get(u'element').callprop(u'getAttribute', Js(u'class')) or Js(u'')))+Js(u' ')).callprop(u'replace', JsRegExp(u'/[\n\t]/g'), Js(u' ')).callprop(u'indexOf', ((Js(u' ')+var.get(u'selector'))+Js(u' ')))>(-Js(1.0)))
    PyJsHoisted_jqLiteHasClass_.func_name = u'jqLiteHasClass'
    var.put(u'jqLiteHasClass', PyJsHoisted_jqLiteHasClass_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_394_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_createXhr_395_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'createXhr':PyJs_createXhr_395_}, var)
                var.registers([])
                return var.get(u'window').get(u'XMLHttpRequest').create()
            PyJs_createXhr_395_._set_name(u'createXhr')
            return PyJs_createXhr_395_
        PyJs_anonymous_394_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', PyJs_anonymous_394_)
    PyJsHoistedNonPyName.func_name = u'$xhrFactoryProvider'
    var.put(u'$xhrFactoryProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_353_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_jQueryLikeParamSerializer_354_(params, this, arguments, var=var):
                var = Scope({u'this':this, u'params':params, u'arguments':arguments, u'jQueryLikeParamSerializer':PyJs_jQueryLikeParamSerializer_354_}, var)
                var.registers([u'serialize', u'parts', u'params'])
                @Js
                def PyJsHoisted_serialize_(toSerialize, prefix, topLevel, this, arguments, var=var):
                    var = Scope({u'this':this, u'topLevel':topLevel, u'prefix':prefix, u'toSerialize':toSerialize, u'arguments':arguments}, var)
                    var.registers([u'topLevel', u'prefix', u'toSerialize'])
                    if (PyJsStrictEq(var.get(u'toSerialize'),var.get(u"null")) or var.get(u'isUndefined')(var.get(u'toSerialize'))):
                        return var.get('undefined')
                    if var.get(u'isArray')(var.get(u'toSerialize')):
                        @Js
                        def PyJs_anonymous_355_(value, index, this, arguments, var=var):
                            var = Scope({u'this':this, u'index':index, u'arguments':arguments, u'value':value}, var)
                            var.registers([u'index', u'value'])
                            var.get(u'serialize')(var.get(u'value'), (((var.get(u'prefix')+Js(u'['))+(var.get(u'index') if var.get(u'isObject')(var.get(u'value')) else Js(u'')))+Js(u']')))
                        PyJs_anonymous_355_._set_name(u'anonymous')
                        var.get(u'forEach')(var.get(u'toSerialize'), PyJs_anonymous_355_)
                    else:
                        if (var.get(u'isObject')(var.get(u'toSerialize')) and var.get(u'isDate')(var.get(u'toSerialize')).neg()):
                            @Js
                            def PyJs_anonymous_356_(value, key, this, arguments, var=var):
                                var = Scope({u'this':this, u'key':key, u'value':value, u'arguments':arguments}, var)
                                var.registers([u'key', u'value'])
                                var.get(u'serialize')(var.get(u'value'), (((var.get(u'prefix')+(Js(u'') if var.get(u'topLevel') else Js(u'[')))+var.get(u'key'))+(Js(u'') if var.get(u'topLevel') else Js(u']'))))
                            PyJs_anonymous_356_._set_name(u'anonymous')
                            var.get(u'forEachSorted')(var.get(u'toSerialize'), PyJs_anonymous_356_)
                        else:
                            var.get(u'parts').callprop(u'push', ((var.get(u'encodeUriQuery')(var.get(u'prefix'))+Js(u'='))+var.get(u'encodeUriQuery')(var.get(u'serializeValue')(var.get(u'toSerialize')))))
                PyJsHoisted_serialize_.func_name = u'serialize'
                var.put(u'serialize', PyJsHoisted_serialize_)
                if var.get(u'params').neg():
                    return Js(u'')
                var.put(u'parts', Js([]))
                var.get(u'serialize')(var.get(u'params'), Js(u''), var.get(u'true'))
                return var.get(u'parts').callprop(u'join', Js(u'&'))
                pass
            PyJs_jQueryLikeParamSerializer_354_._set_name(u'jQueryLikeParamSerializer')
            return PyJs_jQueryLikeParamSerializer_354_
        PyJs_anonymous_353_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', PyJs_anonymous_353_)
    PyJsHoistedNonPyName.func_name = u'$HttpParamSerializerJQLikeProvider'
    var.put(u'$HttpParamSerializerJQLikeProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_349_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_ngParamSerializer_350_(params, this, arguments, var=var):
                var = Scope({u'this':this, u'ngParamSerializer':PyJs_ngParamSerializer_350_, u'params':params, u'arguments':arguments}, var)
                var.registers([u'parts', u'params'])
                if var.get(u'params').neg():
                    return Js(u'')
                var.put(u'parts', Js([]))
                @Js
                def PyJs_anonymous_351_(value, key, this, arguments, var=var):
                    var = Scope({u'this':this, u'key':key, u'value':value, u'arguments':arguments}, var)
                    var.registers([u'key', u'value'])
                    if (PyJsStrictEq(var.get(u'value'),var.get(u"null")) or var.get(u'isUndefined')(var.get(u'value'))):
                        return var.get('undefined')
                    if var.get(u'isArray')(var.get(u'value')):
                        @Js
                        def PyJs_anonymous_352_(v, k, this, arguments, var=var):
                            var = Scope({u'this':this, u'k':k, u'arguments':arguments, u'v':v}, var)
                            var.registers([u'k', u'v'])
                            var.get(u'parts').callprop(u'push', ((var.get(u'encodeUriQuery')(var.get(u'key'))+Js(u'='))+var.get(u'encodeUriQuery')(var.get(u'serializeValue')(var.get(u'v')))))
                        PyJs_anonymous_352_._set_name(u'anonymous')
                        var.get(u'forEach')(var.get(u'value'), PyJs_anonymous_352_)
                    else:
                        var.get(u'parts').callprop(u'push', ((var.get(u'encodeUriQuery')(var.get(u'key'))+Js(u'='))+var.get(u'encodeUriQuery')(var.get(u'serializeValue')(var.get(u'value')))))
                PyJs_anonymous_351_._set_name(u'anonymous')
                var.get(u'forEachSorted')(var.get(u'params'), PyJs_anonymous_351_)
                return var.get(u'parts').callprop(u'join', Js(u'&'))
            PyJs_ngParamSerializer_350_._set_name(u'ngParamSerializer')
            return PyJs_ngParamSerializer_350_
        PyJs_anonymous_349_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', PyJs_anonymous_349_)
    PyJsHoistedNonPyName.func_name = u'$HttpParamSerializerProvider'
    var.put(u'$HttpParamSerializerProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_235_(PyJsArg_2477696e646f77_, PyJsArg_246c6f67_, PyJsArg_24736e6966666572_, PyJsArg_24646f63756d656e74_, this, arguments, var=var):
            var = Scope({u'$sniffer':PyJsArg_24736e6966666572_, u'arguments':arguments, u'$document':PyJsArg_24646f63756d656e74_, u'$window':PyJsArg_2477696e646f77_, u'this':this, u'$log':PyJsArg_246c6f67_}, var)
            var.registers([u'$sniffer', u'$document', u'$log', u'$window'])
            return var.get(u'Browser').create(var.get(u'$window'), var.get(u'$document'), var.get(u'$log'), var.get(u'$sniffer'))
        PyJs_anonymous_235_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$window'), Js(u'$log'), Js(u'$sniffer'), Js(u'$document'), PyJs_anonymous_235_]))
    PyJsHoistedNonPyName.func_name = u'$BrowserProvider'
    var.put(u'$BrowserProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_isObjectEmpty_(obj, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
        var.registers([u'obj', u'prop'])
        if var.get(u'obj'):
            for PyJsTemp in var.get(u'obj'):
                var.put(u'prop', PyJsTemp)
                if var.get(u'obj').callprop(u'hasOwnProperty', var.get(u'prop')):
                    return Js(False)
        return var.get(u'true')
    PyJsHoisted_isObjectEmpty_.func_name = u'isObjectEmpty'
    var.put(u'isObjectEmpty', PyJsHoisted_isObjectEmpty_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_339_(window, this, arguments, var=var):
            var = Scope({u'this':this, u'window':window, u'arguments':arguments}, var)
            var.registers([u'window'])
            return var.get(u'jqLite')(var.get(u'window').get(u'document'))
        PyJs_anonymous_339_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$window'), PyJs_anonymous_339_]))
    PyJsHoistedNonPyName.func_name = u'$DocumentProvider'
    var.put(u'$DocumentProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_tryDecodeURIComponent_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        try:
            return var.get(u'decodeURIComponent')(var.get(u'value'))
        except PyJsException as PyJsTempException:
            PyJsHolder_65_57663566 = var.own.get(u'e')
            var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
            try:
                pass
            finally:
                if PyJsHolder_65_57663566 is not None:
                    var.own[u'e'] = PyJsHolder_65_57663566
                else:
                    del var.own[u'e']
                del PyJsHolder_65_57663566
    PyJsHoisted_tryDecodeURIComponent_.func_name = u'tryDecodeURIComponent'
    var.put(u'tryDecodeURIComponent', PyJsHoisted_tryDecodeURIComponent_)
    @Js
    def PyJsHoisted_jqLiteParseHTML_(html, context, this, arguments, var=var):
        var = Scope({u'this':this, u'html':html, u'arguments':arguments, u'context':context}, var)
        var.registers([u'html', u'parsed', u'context'])
        var.put(u'context', (var.get(u'context') or var.get(u'document')))
        pass
        if var.put(u'parsed', var.get(u'SINGLE_TAG_REGEXP').callprop(u'exec', var.get(u'html'))):
            return Js([var.get(u'context').callprop(u'createElement', var.get(u'parsed').get(u'1'))])
        if var.put(u'parsed', var.get(u'jqLiteBuildFragment')(var.get(u'html'), var.get(u'context'))):
            return var.get(u'parsed').get(u'childNodes')
        return Js([])
    PyJsHoisted_jqLiteParseHTML_.func_name = u'jqLiteParseHTML'
    var.put(u'jqLiteParseHTML', PyJsHoisted_jqLiteParseHTML_)
    @Js
    def PyJsHoisted_ensureSafeAssignContext_(obj, fullExpression, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'arguments':arguments, u'fullExpression':fullExpression}, var)
        var.registers([u'obj', u'fullExpression'])
        if var.get(u'obj'):
            PyJs_Object_462_ = Js({})
            if (((((PyJsStrictEq(var.get(u'obj'),Js(0.0).get(u'constructor')) or PyJsStrictEq(var.get(u'obj'),Js(False).get(u'constructor'))) or PyJsStrictEq(var.get(u'obj'),Js(u'').get(u'constructor'))) or PyJsStrictEq(var.get(u'obj'),PyJs_Object_462_.get(u'constructor'))) or PyJsStrictEq(var.get(u'obj'),Js([]).get(u'constructor'))) or PyJsStrictEq(var.get(u'obj'),var.get(u'Function').get(u'constructor'))):
                PyJsTempException = JsToPyException(var.get(u'$parseMinErr')(Js(u'isecaf'), Js(u'Assigning to a constructor is disallowed! Expression: {0}'), var.get(u'fullExpression')))
                raise PyJsTempException
    PyJsHoisted_ensureSafeAssignContext_.func_name = u'ensureSafeAssignContext'
    var.put(u'ensureSafeAssignContext', PyJsHoisted_ensureSafeAssignContext_)
    @Js
    def PyJsHoisted_LocationHtml5Url_(appBase, appBaseNoFile, basePrefix, this, arguments, var=var):
        var = Scope({u'this':this, u'basePrefix':basePrefix, u'appBaseNoFile':appBaseNoFile, u'appBase':appBase, u'arguments':arguments}, var)
        var.registers([u'basePrefix', u'appBaseNoFile', u'appBase'])
        var.get(u"this").put(u'$$html5', var.get(u'true'))
        var.put(u'basePrefix', (var.get(u'basePrefix') or Js(u'')))
        var.get(u'parseAbsoluteUrl')(var.get(u'appBase'), var.get(u"this"))
        @Js
        def PyJs_anonymous_424_(url, this, arguments, var=var):
            var = Scope({u'url':url, u'this':this, u'arguments':arguments}, var)
            var.registers([u'url', u'pathUrl'])
            var.put(u'pathUrl', var.get(u'beginsWith')(var.get(u'appBaseNoFile'), var.get(u'url')))
            if var.get(u'isString')(var.get(u'pathUrl')).neg():
                PyJsTempException = JsToPyException(var.get(u'$locationMinErr')(Js(u'ipthprfx'), Js(u'Invalid url "{0}", missing path prefix "{1}".'), var.get(u'url'), var.get(u'appBaseNoFile')))
                raise PyJsTempException
            var.get(u'parseAppUrl')(var.get(u'pathUrl'), var.get(u"this"))
            if var.get(u"this").get(u'$$path').neg():
                var.get(u"this").put(u'$$path', Js(u'/'))
            var.get(u"this").callprop(u'$$compose')
        PyJs_anonymous_424_._set_name(u'anonymous')
        var.get(u"this").put(u'$$parse', PyJs_anonymous_424_)
        @Js
        def PyJs_anonymous_425_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'search', u'hash'])
            var.put(u'search', var.get(u'toKeyValue')(var.get(u"this").get(u'$$search')))
            var.put(u'hash', ((Js(u'#')+var.get(u'encodeUriSegment')(var.get(u"this").get(u'$$hash'))) if var.get(u"this").get(u'$$hash') else Js(u'')))
            var.get(u"this").put(u'$$url', ((var.get(u'encodePath')(var.get(u"this").get(u'$$path'))+((Js(u'?')+var.get(u'search')) if var.get(u'search') else Js(u'')))+var.get(u'hash')))
            var.get(u"this").put(u'$$absUrl', (var.get(u'appBaseNoFile')+var.get(u"this").get(u'$$url').callprop(u'substr', Js(1.0))))
        PyJs_anonymous_425_._set_name(u'anonymous')
        var.get(u"this").put(u'$$compose', PyJs_anonymous_425_)
        @Js
        def PyJs_anonymous_426_(url, relHref, this, arguments, var=var):
            var = Scope({u'url':url, u'relHref':relHref, u'this':this, u'arguments':arguments}, var)
            var.registers([u'url', u'relHref', u'appUrl', u'rewrittenUrl', u'prevAppUrl'])
            if (var.get(u'relHref') and PyJsStrictEq(var.get(u'relHref').get(u'0'),Js(u'#'))):
                var.get(u"this").callprop(u'hash', var.get(u'relHref').callprop(u'slice', Js(1.0)))
                return var.get(u'true')
            pass
            pass
            if var.get(u'isDefined')(var.put(u'appUrl', var.get(u'beginsWith')(var.get(u'appBase'), var.get(u'url')))):
                var.put(u'prevAppUrl', var.get(u'appUrl'))
                if var.get(u'isDefined')(var.put(u'appUrl', var.get(u'beginsWith')(var.get(u'basePrefix'), var.get(u'appUrl')))):
                    var.put(u'rewrittenUrl', (var.get(u'appBaseNoFile')+(var.get(u'beginsWith')(Js(u'/'), var.get(u'appUrl')) or var.get(u'appUrl'))))
                else:
                    var.put(u'rewrittenUrl', (var.get(u'appBase')+var.get(u'prevAppUrl')))
            else:
                if var.get(u'isDefined')(var.put(u'appUrl', var.get(u'beginsWith')(var.get(u'appBaseNoFile'), var.get(u'url')))):
                    var.put(u'rewrittenUrl', (var.get(u'appBaseNoFile')+var.get(u'appUrl')))
                else:
                    if (var.get(u'appBaseNoFile')==(var.get(u'url')+Js(u'/'))):
                        var.put(u'rewrittenUrl', var.get(u'appBaseNoFile'))
            if var.get(u'rewrittenUrl'):
                var.get(u"this").callprop(u'$$parse', var.get(u'rewrittenUrl'))
            return var.get(u'rewrittenUrl').neg().neg()
        PyJs_anonymous_426_._set_name(u'anonymous')
        var.get(u"this").put(u'$$parseLinkUrl', PyJs_anonymous_426_)
    PyJsHoisted_LocationHtml5Url_.func_name = u'LocationHtml5Url'
    var.put(u'LocationHtml5Url', PyJsHoisted_LocationHtml5Url_)
    @Js
    def PyJsHoisted_reloadWithDebugInfo_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        var.get(u'window').put(u'name', (Js(u'NG_ENABLE_DEBUG_INFO!')+var.get(u'window').get(u'name')))
        var.get(u'window').get(u'location').callprop(u'reload')
    PyJsHoisted_reloadWithDebugInfo_.func_name = u'reloadWithDebugInfo'
    var.put(u'reloadWithDebugInfo', PyJsHoisted_reloadWithDebugInfo_)
    @Js
    def PyJsHoisted_LocationHashbangUrl_(appBase, appBaseNoFile, hashPrefix, this, arguments, var=var):
        var = Scope({u'this':this, u'appBaseNoFile':appBaseNoFile, u'appBase':appBase, u'hashPrefix':hashPrefix, u'arguments':arguments}, var)
        var.registers([u'appBaseNoFile', u'appBase', u'hashPrefix'])
        var.get(u'parseAbsoluteUrl')(var.get(u'appBase'), var.get(u"this"))
        @Js
        def PyJs_anonymous_427_(url, this, arguments, var=var):
            var = Scope({u'url':url, u'this':this, u'arguments':arguments}, var)
            var.registers([u'withoutBaseUrl', u'withoutHashUrl', u'removeWindowsDriveName', u'url'])
            @Js
            def PyJsHoisted_removeWindowsDriveName_(path, url, base, this, arguments, var=var):
                var = Scope({u'url':url, u'path':path, u'base':base, u'this':this, u'arguments':arguments}, var)
                var.registers([u'firstPathSegmentMatch', u'path', u'windowsFilePathExp', u'url', u'base'])
                var.put(u'windowsFilePathExp', JsRegExp(u'/^\\/[A-Z]:(\\/.*)/'))
                pass
                if PyJsStrictEq(var.get(u'url').callprop(u'indexOf', var.get(u'base')),Js(0.0)):
                    var.put(u'url', var.get(u'url').callprop(u'replace', var.get(u'base'), Js(u'')))
                if var.get(u'windowsFilePathExp').callprop(u'exec', var.get(u'url')):
                    return var.get(u'path')
                var.put(u'firstPathSegmentMatch', var.get(u'windowsFilePathExp').callprop(u'exec', var.get(u'path')))
                return (var.get(u'firstPathSegmentMatch').get(u'1') if var.get(u'firstPathSegmentMatch') else var.get(u'path'))
            PyJsHoisted_removeWindowsDriveName_.func_name = u'removeWindowsDriveName'
            var.put(u'removeWindowsDriveName', PyJsHoisted_removeWindowsDriveName_)
            var.put(u'withoutBaseUrl', (var.get(u'beginsWith')(var.get(u'appBase'), var.get(u'url')) or var.get(u'beginsWith')(var.get(u'appBaseNoFile'), var.get(u'url'))))
            pass
            if (var.get(u'isUndefined')(var.get(u'withoutBaseUrl')).neg() and PyJsStrictEq(var.get(u'withoutBaseUrl').callprop(u'charAt', Js(0.0)),Js(u'#'))):
                var.put(u'withoutHashUrl', var.get(u'beginsWith')(var.get(u'hashPrefix'), var.get(u'withoutBaseUrl')))
                if var.get(u'isUndefined')(var.get(u'withoutHashUrl')):
                    var.put(u'withoutHashUrl', var.get(u'withoutBaseUrl'))
            else:
                if var.get(u"this").get(u'$$html5'):
                    var.put(u'withoutHashUrl', var.get(u'withoutBaseUrl'))
                else:
                    var.put(u'withoutHashUrl', Js(u''))
                    if var.get(u'isUndefined')(var.get(u'withoutBaseUrl')):
                        var.put(u'appBase', var.get(u'url'))
                        var.get(u"this").callprop(u'replace')
            var.get(u'parseAppUrl')(var.get(u'withoutHashUrl'), var.get(u"this"))
            var.get(u"this").put(u'$$path', var.get(u'removeWindowsDriveName')(var.get(u"this").get(u'$$path'), var.get(u'withoutHashUrl'), var.get(u'appBase')))
            var.get(u"this").callprop(u'$$compose')
            pass
        PyJs_anonymous_427_._set_name(u'anonymous')
        var.get(u"this").put(u'$$parse', PyJs_anonymous_427_)
        @Js
        def PyJs_anonymous_428_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'search', u'hash'])
            var.put(u'search', var.get(u'toKeyValue')(var.get(u"this").get(u'$$search')))
            var.put(u'hash', ((Js(u'#')+var.get(u'encodeUriSegment')(var.get(u"this").get(u'$$hash'))) if var.get(u"this").get(u'$$hash') else Js(u'')))
            var.get(u"this").put(u'$$url', ((var.get(u'encodePath')(var.get(u"this").get(u'$$path'))+((Js(u'?')+var.get(u'search')) if var.get(u'search') else Js(u'')))+var.get(u'hash')))
            var.get(u"this").put(u'$$absUrl', (var.get(u'appBase')+((var.get(u'hashPrefix')+var.get(u"this").get(u'$$url')) if var.get(u"this").get(u'$$url') else Js(u''))))
        PyJs_anonymous_428_._set_name(u'anonymous')
        var.get(u"this").put(u'$$compose', PyJs_anonymous_428_)
        @Js
        def PyJs_anonymous_429_(url, relHref, this, arguments, var=var):
            var = Scope({u'url':url, u'relHref':relHref, u'this':this, u'arguments':arguments}, var)
            var.registers([u'url', u'relHref'])
            if (var.get(u'stripHash')(var.get(u'appBase'))==var.get(u'stripHash')(var.get(u'url'))):
                var.get(u"this").callprop(u'$$parse', var.get(u'url'))
                return var.get(u'true')
            return Js(False)
        PyJs_anonymous_429_._set_name(u'anonymous')
        var.get(u"this").put(u'$$parseLinkUrl', PyJs_anonymous_429_)
    PyJsHoisted_LocationHashbangUrl_.func_name = u'LocationHashbangUrl'
    var.put(u'LocationHashbangUrl', PyJsHoisted_LocationHashbangUrl_)
    @Js
    def PyJsHoisted_jqLiteHasData_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'key'])
        for PyJsTemp in var.get(u'jqCache').get(var.get(u'node').get(u'ng339')):
            var.put(u'key', PyJsTemp)
            return var.get(u'true')
        return Js(False)
    PyJsHoisted_jqLiteHasData_.func_name = u'jqLiteHasData'
    var.put(u'jqLiteHasData', PyJsHoisted_jqLiteHasData_)
    @Js
    def PyJsHoisted_reverseParams_(iteratorFn, this, arguments, var=var):
        var = Scope({u'iteratorFn':iteratorFn, u'this':this, u'arguments':arguments}, var)
        var.registers([u'iteratorFn'])
        @Js
        def PyJs_anonymous_10_(value, key, this, arguments, var=var):
            var = Scope({u'this':this, u'key':key, u'value':value, u'arguments':arguments}, var)
            var.registers([u'key', u'value'])
            var.get(u'iteratorFn')(var.get(u'key'), var.get(u'value'))
        PyJs_anonymous_10_._set_name(u'anonymous')
        return PyJs_anonymous_10_
    PyJsHoisted_reverseParams_.func_name = u'reverseParams'
    var.put(u'reverseParams', PyJsHoisted_reverseParams_)
    @Js
    def PyJsHoisted_makeMap_(str, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'str':str}, var)
        var.registers([u'i', u'items', u'obj', u'str'])
        PyJs_Object_15_ = Js({})
        var.put(u'obj', PyJs_Object_15_)
        var.put(u'items', var.get(u'str').callprop(u'split', Js(u',')))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'items').get(u'length')):
            try:
                var.get(u'obj').put(var.get(u'items').get(var.get(u'i')), var.get(u'true'))
            finally:
                    (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
        return var.get(u'obj')
    PyJsHoisted_makeMap_.func_name = u'makeMap'
    var.put(u'makeMap', PyJsHoisted_makeMap_)
    @Js
    def PyJsHoisted_emailInputType_(scope, element, attr, ctrl, PyJsArg_24736e6966666572_, PyJsArg_2462726f77736572_, this, arguments, var=var):
        var = Scope({u'$sniffer':PyJsArg_24736e6966666572_, u'attr':attr, u'ctrl':ctrl, u'this':this, u'element':element, u'$browser':PyJsArg_2462726f77736572_, u'arguments':arguments, u'scope':scope}, var)
        var.registers([u'$sniffer', u'attr', u'ctrl', u'element', u'$browser', u'scope'])
        var.get(u'baseInputType')(var.get(u'scope'), var.get(u'element'), var.get(u'attr'), var.get(u'ctrl'), var.get(u'$sniffer'), var.get(u'$browser'))
        var.get(u'stringBasedInputType')(var.get(u'ctrl'))
        var.get(u'ctrl').put(u'$$parserName', Js(u'email'))
        @Js
        def PyJs_anonymous_994_(modelValue, viewValue, this, arguments, var=var):
            var = Scope({u'this':this, u'viewValue':viewValue, u'modelValue':modelValue, u'arguments':arguments}, var)
            var.registers([u'viewValue', u'modelValue', u'value'])
            var.put(u'value', (var.get(u'modelValue') or var.get(u'viewValue')))
            return (var.get(u'ctrl').callprop(u'$isEmpty', var.get(u'value')) or var.get(u'EMAIL_REGEXP').callprop(u'test', var.get(u'value')))
        PyJs_anonymous_994_._set_name(u'anonymous')
        var.get(u'ctrl').get(u'$validators').put(u'email', PyJs_anonymous_994_)
    PyJsHoisted_emailInputType_.func_name = u'emailInputType'
    var.put(u'emailInputType', PyJsHoisted_emailInputType_)
    @Js
    def PyJsHoisted_createDateParser_(regexp, mapping, this, arguments, var=var):
        var = Scope({u'this':this, u'regexp':regexp, u'mapping':mapping, u'arguments':arguments}, var)
        var.registers([u'regexp', u'mapping'])
        @Js
        def PyJs_anonymous_974_(iso, date, this, arguments, var=var):
            var = Scope({u'date':date, u'this':this, u'iso':iso, u'arguments':arguments}, var)
            var.registers([u'date', u'map', u'parts', u'iso'])
            pass
            if var.get(u'isDate')(var.get(u'iso')):
                return var.get(u'iso')
            if var.get(u'isString')(var.get(u'iso')):
                if ((var.get(u'iso').callprop(u'charAt', Js(0.0))==Js(u'"')) and (var.get(u'iso').callprop(u'charAt', (var.get(u'iso').get(u'length')-Js(1.0)))==Js(u'"'))):
                    var.put(u'iso', var.get(u'iso').callprop(u'substring', Js(1.0), (var.get(u'iso').get(u'length')-Js(1.0))))
                if var.get(u'ISO_DATE_REGEXP').callprop(u'test', var.get(u'iso')):
                    return var.get(u'Date').create(var.get(u'iso'))
                var.get(u'regexp').put(u'lastIndex', Js(0.0))
                var.put(u'parts', var.get(u'regexp').callprop(u'exec', var.get(u'iso')))
                if var.get(u'parts'):
                    var.get(u'parts').callprop(u'shift')
                    if var.get(u'date'):
                        PyJs_Object_975_ = Js({u'yyyy':var.get(u'date').callprop(u'getFullYear'),u'MM':(var.get(u'date').callprop(u'getMonth')+Js(1.0)),u'dd':var.get(u'date').callprop(u'getDate'),u'HH':var.get(u'date').callprop(u'getHours'),u'mm':var.get(u'date').callprop(u'getMinutes'),u'ss':var.get(u'date').callprop(u'getSeconds'),u'sss':(var.get(u'date').callprop(u'getMilliseconds')/Js(1000.0))})
                        var.put(u'map', PyJs_Object_975_)
                    else:
                        PyJs_Object_976_ = Js({u'yyyy':Js(1970.0),u'MM':Js(1.0),u'dd':Js(1.0),u'HH':Js(0.0),u'mm':Js(0.0),u'ss':Js(0.0),u'sss':Js(0.0)})
                        var.put(u'map', PyJs_Object_976_)
                    @Js
                    def PyJs_anonymous_977_(part, index, this, arguments, var=var):
                        var = Scope({u'this':this, u'index':index, u'part':part, u'arguments':arguments}, var)
                        var.registers([u'index', u'part'])
                        if (var.get(u'index')<var.get(u'mapping').get(u'length')):
                            var.get(u'map').put(var.get(u'mapping').get(var.get(u'index')), (+var.get(u'part')))
                    PyJs_anonymous_977_._set_name(u'anonymous')
                    var.get(u'forEach')(var.get(u'parts'), PyJs_anonymous_977_)
                    return var.get(u'Date').create(var.get(u'map').get(u'yyyy'), (var.get(u'map').get(u'MM')-Js(1.0)), var.get(u'map').get(u'dd'), var.get(u'map').get(u'HH'), var.get(u'map').get(u'mm'), (var.get(u'map').get(u'ss') or Js(0.0)), ((var.get(u'map').get(u'sss')*Js(1000.0)) or Js(0.0)))
            return var.get(u'NaN')
        PyJs_anonymous_974_._set_name(u'anonymous')
        return PyJs_anonymous_974_
    PyJsHoisted_createDateParser_.func_name = u'createDateParser'
    var.put(u'createDateParser', PyJsHoisted_createDateParser_)
    @Js
    def PyJsHoisted_addSetValidityMethod_(context, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'context':context}, var)
        var.registers([u'$animate', u'set', u'$element', u'toggleValidationCss', u'ctrl', u'classCache', u'setValidity', u'context', u'cachedToggleClass', u'unsetAndCleanup', u'createAndSet', u'unset'])
        @Js
        def PyJsHoisted_toggleValidationCss_(validationErrorKey, isValid, this, arguments, var=var):
            var = Scope({u'this':this, u'isValid':isValid, u'validationErrorKey':validationErrorKey, u'arguments':arguments}, var)
            var.registers([u'isValid', u'validationErrorKey'])
            var.put(u'validationErrorKey', ((Js(u'-')+var.get(u'snake_case')(var.get(u'validationErrorKey'), Js(u'-'))) if var.get(u'validationErrorKey') else Js(u'')))
            var.get(u'cachedToggleClass')((var.get(u'VALID_CLASS')+var.get(u'validationErrorKey')), PyJsStrictEq(var.get(u'isValid'),var.get(u'true')))
            var.get(u'cachedToggleClass')((var.get(u'INVALID_CLASS')+var.get(u'validationErrorKey')), PyJsStrictEq(var.get(u'isValid'),Js(False)))
        PyJsHoisted_toggleValidationCss_.func_name = u'toggleValidationCss'
        var.put(u'toggleValidationCss', PyJsHoisted_toggleValidationCss_)
        @Js
        def PyJsHoisted_unsetAndCleanup_(name, value, controller, this, arguments, var=var):
            var = Scope({u'this':this, u'controller':controller, u'name':name, u'value':value, u'arguments':arguments}, var)
            var.registers([u'controller', u'name', u'value'])
            if var.get(u'ctrl').get(var.get(u'name')):
                var.get(u'unset')(var.get(u'ctrl').get(var.get(u'name')), var.get(u'value'), var.get(u'controller'))
            if var.get(u'isObjectEmpty')(var.get(u'ctrl').get(var.get(u'name'))):
                var.get(u'ctrl').put(var.get(u'name'), var.get(u'undefined'))
        PyJsHoisted_unsetAndCleanup_.func_name = u'unsetAndCleanup'
        var.put(u'unsetAndCleanup', PyJsHoisted_unsetAndCleanup_)
        @Js
        def PyJsHoisted_cachedToggleClass_(className, switchValue, this, arguments, var=var):
            var = Scope({u'className':className, u'this':this, u'switchValue':switchValue, u'arguments':arguments}, var)
            var.registers([u'className', u'switchValue'])
            if (var.get(u'switchValue') and var.get(u'classCache').get(var.get(u'className')).neg()):
                var.get(u'$animate').callprop(u'addClass', var.get(u'$element'), var.get(u'className'))
                var.get(u'classCache').put(var.get(u'className'), var.get(u'true'))
            else:
                if (var.get(u'switchValue').neg() and var.get(u'classCache').get(var.get(u'className'))):
                    var.get(u'$animate').callprop(u'removeClass', var.get(u'$element'), var.get(u'className'))
                    var.get(u'classCache').put(var.get(u'className'), Js(False))
        PyJsHoisted_cachedToggleClass_.func_name = u'cachedToggleClass'
        var.put(u'cachedToggleClass', PyJsHoisted_cachedToggleClass_)
        @Js
        def PyJsHoisted_setValidity_(validationErrorKey, state, controller, this, arguments, var=var):
            var = Scope({u'this':this, u'state':state, u'validationErrorKey':validationErrorKey, u'controller':controller, u'arguments':arguments}, var)
            var.registers([u'state', u'controller', u'validationErrorKey', u'combinedState'])
            if var.get(u'isUndefined')(var.get(u'state')):
                var.get(u'createAndSet')(Js(u'$pending'), var.get(u'validationErrorKey'), var.get(u'controller'))
            else:
                var.get(u'unsetAndCleanup')(Js(u'$pending'), var.get(u'validationErrorKey'), var.get(u'controller'))
            if var.get(u'isBoolean')(var.get(u'state')).neg():
                var.get(u'unset')(var.get(u'ctrl').get(u'$error'), var.get(u'validationErrorKey'), var.get(u'controller'))
                var.get(u'unset')(var.get(u'ctrl').get(u'$$success'), var.get(u'validationErrorKey'), var.get(u'controller'))
            else:
                if var.get(u'state'):
                    var.get(u'unset')(var.get(u'ctrl').get(u'$error'), var.get(u'validationErrorKey'), var.get(u'controller'))
                    var.get(u'set')(var.get(u'ctrl').get(u'$$success'), var.get(u'validationErrorKey'), var.get(u'controller'))
                else:
                    var.get(u'set')(var.get(u'ctrl').get(u'$error'), var.get(u'validationErrorKey'), var.get(u'controller'))
                    var.get(u'unset')(var.get(u'ctrl').get(u'$$success'), var.get(u'validationErrorKey'), var.get(u'controller'))
            if var.get(u'ctrl').get(u'$pending'):
                var.get(u'cachedToggleClass')(var.get(u'PENDING_CLASS'), var.get(u'true'))
                var.get(u'ctrl').put(u'$valid', var.get(u'ctrl').put(u'$invalid', var.get(u'undefined')))
                var.get(u'toggleValidationCss')(Js(u''), var.get(u"null"))
            else:
                var.get(u'cachedToggleClass')(var.get(u'PENDING_CLASS'), Js(False))
                var.get(u'ctrl').put(u'$valid', var.get(u'isObjectEmpty')(var.get(u'ctrl').get(u'$error')))
                var.get(u'ctrl').put(u'$invalid', var.get(u'ctrl').get(u'$valid').neg())
                var.get(u'toggleValidationCss')(Js(u''), var.get(u'ctrl').get(u'$valid'))
            pass
            if (var.get(u'ctrl').get(u'$pending') and var.get(u'ctrl').get(u'$pending').get(var.get(u'validationErrorKey'))):
                var.put(u'combinedState', var.get(u'undefined'))
            else:
                if var.get(u'ctrl').get(u'$error').get(var.get(u'validationErrorKey')):
                    var.put(u'combinedState', Js(False))
                else:
                    if var.get(u'ctrl').get(u'$$success').get(var.get(u'validationErrorKey')):
                        var.put(u'combinedState', var.get(u'true'))
                    else:
                        var.put(u'combinedState', var.get(u"null"))
            var.get(u'toggleValidationCss')(var.get(u'validationErrorKey'), var.get(u'combinedState'))
            var.get(u'ctrl').get(u'$$parentForm').callprop(u'$setValidity', var.get(u'validationErrorKey'), var.get(u'combinedState'), var.get(u'ctrl'))
        PyJsHoisted_setValidity_.func_name = u'setValidity'
        var.put(u'setValidity', PyJsHoisted_setValidity_)
        @Js
        def PyJsHoisted_createAndSet_(name, value, controller, this, arguments, var=var):
            var = Scope({u'this':this, u'controller':controller, u'name':name, u'value':value, u'arguments':arguments}, var)
            var.registers([u'controller', u'name', u'value'])
            if var.get(u'ctrl').get(var.get(u'name')).neg():
                PyJs_Object_1141_ = Js({})
                var.get(u'ctrl').put(var.get(u'name'), PyJs_Object_1141_)
            var.get(u'set')(var.get(u'ctrl').get(var.get(u'name')), var.get(u'value'), var.get(u'controller'))
        PyJsHoisted_createAndSet_.func_name = u'createAndSet'
        var.put(u'createAndSet', PyJsHoisted_createAndSet_)
        var.put(u'ctrl', var.get(u'context').get(u'ctrl'))
        var.put(u'$element', var.get(u'context').get(u'$element'))
        PyJs_Object_1140_ = Js({})
        var.put(u'classCache', PyJs_Object_1140_)
        var.put(u'set', var.get(u'context').get(u'set'))
        var.put(u'unset', var.get(u'context').get(u'unset'))
        var.put(u'$animate', var.get(u'context').get(u'$animate'))
        var.get(u'classCache').put(var.get(u'INVALID_CLASS'), var.get(u'classCache').put(var.get(u'VALID_CLASS'), var.get(u'$element').callprop(u'hasClass', var.get(u'VALID_CLASS'))).neg())
        var.get(u'ctrl').put(u'$setValidity', var.get(u'setValidity'))
        pass
        pass
        pass
        pass
        pass
    PyJsHoisted_addSetValidityMethod_.func_name = u'addSetValidityMethod'
    var.put(u'addSetValidityMethod', PyJsHoisted_addSetValidityMethod_)
    @Js
    def PyJsHoisted_dateFilter_(PyJsArg_246c6f63616c65_, this, arguments, var=var):
        var = Scope({u'this':this, u'$locale':PyJsArg_246c6f63616c65_, u'arguments':arguments}, var)
        var.registers([u'jsonStringToDate', u'R_ISO8601_STR', u'$locale'])
        @Js
        def PyJsHoisted_jsonStringToDate_(string, this, arguments, var=var):
            var = Scope({u'this':this, u'string':string, u'arguments':arguments}, var)
            var.registers([u'timeSetter', u'ms', u'string', u'h', u'm', u's', u'tzHour', u'tzMin', u'date', u'match', u'dateSetter'])
            pass
            if var.put(u'match', var.get(u'string').callprop(u'match', var.get(u'R_ISO8601_STR'))):
                var.put(u'date', var.get(u'Date').create(Js(0.0)))
                var.put(u'tzHour', Js(0.0))
                var.put(u'tzMin', Js(0.0))
                var.put(u'dateSetter', (var.get(u'date').get(u'setUTCFullYear') if var.get(u'match').get(u'8') else var.get(u'date').get(u'setFullYear')))
                var.put(u'timeSetter', (var.get(u'date').get(u'setUTCHours') if var.get(u'match').get(u'8') else var.get(u'date').get(u'setHours')))
                if var.get(u'match').get(u'9'):
                    var.put(u'tzHour', var.get(u'toInt')((var.get(u'match').get(u'9')+var.get(u'match').get(u'10'))))
                    var.put(u'tzMin', var.get(u'toInt')((var.get(u'match').get(u'9')+var.get(u'match').get(u'11'))))
                var.get(u'dateSetter').callprop(u'call', var.get(u'date'), var.get(u'toInt')(var.get(u'match').get(u'1')), (var.get(u'toInt')(var.get(u'match').get(u'2'))-Js(1.0)), var.get(u'toInt')(var.get(u'match').get(u'3')))
                var.put(u'h', (var.get(u'toInt')((var.get(u'match').get(u'4') or Js(0.0)))-var.get(u'tzHour')))
                var.put(u'm', (var.get(u'toInt')((var.get(u'match').get(u'5') or Js(0.0)))-var.get(u'tzMin')))
                var.put(u's', var.get(u'toInt')((var.get(u'match').get(u'6') or Js(0.0))))
                var.put(u'ms', var.get(u'Math').callprop(u'round', (var.get(u'parseFloat')((Js(u'0.')+(var.get(u'match').get(u'7') or Js(0.0))))*Js(1000.0))))
                var.get(u'timeSetter').callprop(u'call', var.get(u'date'), var.get(u'h'), var.get(u'm'), var.get(u's'), var.get(u'ms'))
                return var.get(u'date')
            return var.get(u'string')
        PyJsHoisted_jsonStringToDate_.func_name = u'jsonStringToDate'
        var.put(u'jsonStringToDate', PyJsHoisted_jsonStringToDate_)
        var.put(u'R_ISO8601_STR', JsRegExp(u'/^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/'))
        pass
        @Js
        def PyJs_anonymous_895_(date, format, timezone, this, arguments, var=var):
            var = Scope({u'date':date, u'timezone':timezone, u'this':this, u'arguments':arguments, u'format':format}, var)
            var.registers([u'dateTimezoneOffset', u'format', u'text', u'parts', u'fn', u'date', u'timezone', u'match'])
            var.put(u'text', Js(u''))
            var.put(u'parts', Js([]))
            var.put(u'format', (var.get(u'format') or Js(u'mediumDate')))
            var.put(u'format', (var.get(u'$locale').get(u'DATETIME_FORMATS').get(var.get(u'format')) or var.get(u'format')))
            if var.get(u'isString')(var.get(u'date')):
                var.put(u'date', (var.get(u'toInt')(var.get(u'date')) if var.get(u'NUMBER_STRING').callprop(u'test', var.get(u'date')) else var.get(u'jsonStringToDate')(var.get(u'date'))))
            if var.get(u'isNumber')(var.get(u'date')):
                var.put(u'date', var.get(u'Date').create(var.get(u'date')))
            if (var.get(u'isDate')(var.get(u'date')).neg() or var.get(u'isFinite')(var.get(u'date').callprop(u'getTime')).neg()):
                return var.get(u'date')
            while var.get(u'format'):
                var.put(u'match', var.get(u'DATE_FORMATS_SPLIT').callprop(u'exec', var.get(u'format')))
                if var.get(u'match'):
                    var.put(u'parts', var.get(u'concat')(var.get(u'parts'), var.get(u'match'), Js(1.0)))
                    var.put(u'format', var.get(u'parts').callprop(u'pop'))
                else:
                    var.get(u'parts').callprop(u'push', var.get(u'format'))
                    var.put(u'format', var.get(u"null"))
            var.put(u'dateTimezoneOffset', var.get(u'date').callprop(u'getTimezoneOffset'))
            if var.get(u'timezone'):
                var.put(u'dateTimezoneOffset', var.get(u'timezoneToOffset')(var.get(u'timezone'), var.get(u'date').callprop(u'getTimezoneOffset')))
                var.put(u'date', var.get(u'convertTimezoneToLocal')(var.get(u'date'), var.get(u'timezone'), var.get(u'true')))
            @Js
            def PyJs_anonymous_896_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                var.put(u'fn', var.get(u'DATE_FORMATS').get(var.get(u'value')))
                var.put(u'text', (var.get(u'fn')(var.get(u'date'), var.get(u'$locale').get(u'DATETIME_FORMATS'), var.get(u'dateTimezoneOffset')) if var.get(u'fn') else var.get(u'value').callprop(u'replace', JsRegExp(u"/(^'|'$)/g"), Js(u'')).callprop(u'replace', JsRegExp(u"/''/g"), Js(u"'"))), u'+')
            PyJs_anonymous_896_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'parts'), PyJs_anonymous_896_)
            return var.get(u'text')
        PyJs_anonymous_895_._set_name(u'anonymous')
        return PyJs_anonymous_895_
    PyJsHoisted_dateFilter_.func_name = u'dateFilter'
    var.put(u'dateFilter', PyJsHoisted_dateFilter_)
    @Js
    def PyJsHoisted_snake_case_(name, separator, this, arguments, var=var):
        var = Scope({u'this':this, u'separator':separator, u'name':name, u'arguments':arguments}, var)
        var.registers([u'separator', u'name'])
        var.put(u'separator', (var.get(u'separator') or Js(u'_')))
        @Js
        def PyJs_anonymous_42_(letter, pos, this, arguments, var=var):
            var = Scope({u'this':this, u'pos':pos, u'letter':letter, u'arguments':arguments}, var)
            var.registers([u'pos', u'letter'])
            return ((var.get(u'separator') if var.get(u'pos') else Js(u''))+var.get(u'letter').callprop(u'toLowerCase'))
        PyJs_anonymous_42_._set_name(u'anonymous')
        return var.get(u'name').callprop(u'replace', var.get(u'SNAKE_CASE_REGEXP'), PyJs_anonymous_42_)
    PyJsHoisted_snake_case_.func_name = u'snake_case'
    var.put(u'snake_case', PyJsHoisted_snake_case_)
    @Js
    def PyJsHoisted_ensureSafeMemberName_(name, fullExpression, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'fullExpression':fullExpression}, var)
        var.registers([u'name', u'fullExpression'])
        if ((((PyJsStrictEq(var.get(u'name'),Js(u'__defineGetter__')) or PyJsStrictEq(var.get(u'name'),Js(u'__defineSetter__'))) or PyJsStrictEq(var.get(u'name'),Js(u'__lookupGetter__'))) or PyJsStrictEq(var.get(u'name'),Js(u'__lookupSetter__'))) or PyJsStrictEq(var.get(u'name'),Js(u'__proto__'))):
            PyJsTempException = JsToPyException(var.get(u'$parseMinErr')(Js(u'isecfld'), (Js(u'Attempting to access a disallowed field in Angular expressions! ')+Js(u'Expression: {0}')), var.get(u'fullExpression')))
            raise PyJsTempException
        return var.get(u'name')
    PyJsHoisted_ensureSafeMemberName_.func_name = u'ensureSafeMemberName'
    var.put(u'ensureSafeMemberName', PyJsHoisted_ensureSafeMemberName_)
    @Js
    def PyJsHoisted_LocationHashbangInHtml5Url_(appBase, appBaseNoFile, hashPrefix, this, arguments, var=var):
        var = Scope({u'this':this, u'appBaseNoFile':appBaseNoFile, u'appBase':appBase, u'hashPrefix':hashPrefix, u'arguments':arguments}, var)
        var.registers([u'appBaseNoFile', u'appBase', u'hashPrefix'])
        var.get(u"this").put(u'$$html5', var.get(u'true'))
        var.get(u'LocationHashbangUrl').callprop(u'apply', var.get(u"this"), var.get(u'arguments'))
        @Js
        def PyJs_anonymous_430_(url, relHref, this, arguments, var=var):
            var = Scope({u'url':url, u'relHref':relHref, u'this':this, u'arguments':arguments}, var)
            var.registers([u'url', u'relHref', u'appUrl', u'rewrittenUrl'])
            if (var.get(u'relHref') and PyJsStrictEq(var.get(u'relHref').get(u'0'),Js(u'#'))):
                var.get(u"this").callprop(u'hash', var.get(u'relHref').callprop(u'slice', Js(1.0)))
                return var.get(u'true')
            pass
            pass
            if (var.get(u'appBase')==var.get(u'stripHash')(var.get(u'url'))):
                var.put(u'rewrittenUrl', var.get(u'url'))
            else:
                if var.put(u'appUrl', var.get(u'beginsWith')(var.get(u'appBaseNoFile'), var.get(u'url'))):
                    var.put(u'rewrittenUrl', ((var.get(u'appBase')+var.get(u'hashPrefix'))+var.get(u'appUrl')))
                else:
                    if PyJsStrictEq(var.get(u'appBaseNoFile'),(var.get(u'url')+Js(u'/'))):
                        var.put(u'rewrittenUrl', var.get(u'appBaseNoFile'))
            if var.get(u'rewrittenUrl'):
                var.get(u"this").callprop(u'$$parse', var.get(u'rewrittenUrl'))
            return var.get(u'rewrittenUrl').neg().neg()
        PyJs_anonymous_430_._set_name(u'anonymous')
        var.get(u"this").put(u'$$parseLinkUrl', PyJs_anonymous_430_)
        @Js
        def PyJs_anonymous_431_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'search', u'hash'])
            var.put(u'search', var.get(u'toKeyValue')(var.get(u"this").get(u'$$search')))
            var.put(u'hash', ((Js(u'#')+var.get(u'encodeUriSegment')(var.get(u"this").get(u'$$hash'))) if var.get(u"this").get(u'$$hash') else Js(u'')))
            var.get(u"this").put(u'$$url', ((var.get(u'encodePath')(var.get(u"this").get(u'$$path'))+((Js(u'?')+var.get(u'search')) if var.get(u'search') else Js(u'')))+var.get(u'hash')))
            var.get(u"this").put(u'$$absUrl', ((var.get(u'appBase')+var.get(u'hashPrefix'))+var.get(u"this").get(u'$$url')))
        PyJs_anonymous_431_._set_name(u'anonymous')
        var.get(u"this").put(u'$$compose', PyJs_anonymous_431_)
    PyJsHoisted_LocationHashbangInHtml5Url_.func_name = u'LocationHashbangInHtml5Url'
    var.put(u'LocationHashbangInHtml5Url', PyJsHoisted_LocationHashbangInHtml5Url_)
    @Js
    def PyJsHoisted_FormController_(element, attrs, PyJsArg_2473636f7065_, PyJsArg_24616e696d617465_, PyJsArg_24696e746572706f6c617465_, this, arguments, var=var):
        var = Scope({u'$animate':PyJsArg_24616e696d617465_, u'$interpolate':PyJsArg_24696e746572706f6c617465_, u'this':this, u'arguments':arguments, u'element':element, u'$scope':PyJsArg_2473636f7065_, u'attrs':attrs}, var)
        var.registers([u'$animate', u'$interpolate', u'form', u'controls', u'$scope', u'element', u'attrs'])
        var.put(u'form', var.get(u"this"))
        var.put(u'controls', Js([]))
        PyJs_Object_932_ = Js({})
        var.get(u'form').put(u'$error', PyJs_Object_932_)
        PyJs_Object_933_ = Js({})
        var.get(u'form').put(u'$$success', PyJs_Object_933_)
        var.get(u'form').put(u'$pending', var.get(u'undefined'))
        var.get(u'form').put(u'$name', var.get(u'$interpolate')(((var.get(u'attrs').get(u'name') or var.get(u'attrs').get(u'ngForm')) or Js(u'')))(var.get(u'$scope')))
        var.get(u'form').put(u'$dirty', Js(False))
        var.get(u'form').put(u'$pristine', var.get(u'true'))
        var.get(u'form').put(u'$valid', var.get(u'true'))
        var.get(u'form').put(u'$invalid', Js(False))
        var.get(u'form').put(u'$submitted', Js(False))
        var.get(u'form').put(u'$$parentForm', var.get(u'nullFormCtrl'))
        @Js
        def PyJs_anonymous_934_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_935_(control, this, arguments, var=var):
                var = Scope({u'control':control, u'this':this, u'arguments':arguments}, var)
                var.registers([u'control'])
                var.get(u'control').callprop(u'$rollbackViewValue')
            PyJs_anonymous_935_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'controls'), PyJs_anonymous_935_)
        PyJs_anonymous_934_._set_name(u'anonymous')
        var.get(u'form').put(u'$rollbackViewValue', PyJs_anonymous_934_)
        @Js
        def PyJs_anonymous_936_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_937_(control, this, arguments, var=var):
                var = Scope({u'control':control, u'this':this, u'arguments':arguments}, var)
                var.registers([u'control'])
                var.get(u'control').callprop(u'$commitViewValue')
            PyJs_anonymous_937_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'controls'), PyJs_anonymous_937_)
        PyJs_anonymous_936_._set_name(u'anonymous')
        var.get(u'form').put(u'$commitViewValue', PyJs_anonymous_936_)
        @Js
        def PyJs_anonymous_938_(control, this, arguments, var=var):
            var = Scope({u'control':control, u'this':this, u'arguments':arguments}, var)
            var.registers([u'control'])
            var.get(u'assertNotHasOwnProperty')(var.get(u'control').get(u'$name'), Js(u'input'))
            var.get(u'controls').callprop(u'push', var.get(u'control'))
            if var.get(u'control').get(u'$name'):
                var.get(u'form').put(var.get(u'control').get(u'$name'), var.get(u'control'))
            var.get(u'control').put(u'$$parentForm', var.get(u'form'))
        PyJs_anonymous_938_._set_name(u'anonymous')
        var.get(u'form').put(u'$addControl', PyJs_anonymous_938_)
        @Js
        def PyJs_anonymous_939_(control, newName, this, arguments, var=var):
            var = Scope({u'control':control, u'newName':newName, u'this':this, u'arguments':arguments}, var)
            var.registers([u'control', u'newName', u'oldName'])
            var.put(u'oldName', var.get(u'control').get(u'$name'))
            if PyJsStrictEq(var.get(u'form').get(var.get(u'oldName')),var.get(u'control')):
                var.get(u'form').delete(var.get(u'oldName'))
            var.get(u'form').put(var.get(u'newName'), var.get(u'control'))
            var.get(u'control').put(u'$name', var.get(u'newName'))
        PyJs_anonymous_939_._set_name(u'anonymous')
        var.get(u'form').put(u'$$renameControl', PyJs_anonymous_939_)
        @Js
        def PyJs_anonymous_940_(control, this, arguments, var=var):
            var = Scope({u'control':control, u'this':this, u'arguments':arguments}, var)
            var.registers([u'control'])
            if (var.get(u'control').get(u'$name') and PyJsStrictEq(var.get(u'form').get(var.get(u'control').get(u'$name')),var.get(u'control'))):
                var.get(u'form').delete(var.get(u'control').get(u'$name'))
            @Js
            def PyJs_anonymous_941_(value, name, this, arguments, var=var):
                var = Scope({u'this':this, u'name':name, u'value':value, u'arguments':arguments}, var)
                var.registers([u'name', u'value'])
                var.get(u'form').callprop(u'$setValidity', var.get(u'name'), var.get(u"null"), var.get(u'control'))
            PyJs_anonymous_941_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'form').get(u'$pending'), PyJs_anonymous_941_)
            @Js
            def PyJs_anonymous_942_(value, name, this, arguments, var=var):
                var = Scope({u'this':this, u'name':name, u'value':value, u'arguments':arguments}, var)
                var.registers([u'name', u'value'])
                var.get(u'form').callprop(u'$setValidity', var.get(u'name'), var.get(u"null"), var.get(u'control'))
            PyJs_anonymous_942_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'form').get(u'$error'), PyJs_anonymous_942_)
            @Js
            def PyJs_anonymous_943_(value, name, this, arguments, var=var):
                var = Scope({u'this':this, u'name':name, u'value':value, u'arguments':arguments}, var)
                var.registers([u'name', u'value'])
                var.get(u'form').callprop(u'$setValidity', var.get(u'name'), var.get(u"null"), var.get(u'control'))
            PyJs_anonymous_943_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'form').get(u'$$success'), PyJs_anonymous_943_)
            var.get(u'arrayRemove')(var.get(u'controls'), var.get(u'control'))
            var.get(u'control').put(u'$$parentForm', var.get(u'nullFormCtrl'))
        PyJs_anonymous_940_._set_name(u'anonymous')
        var.get(u'form').put(u'$removeControl', PyJs_anonymous_940_)
        @Js
        def PyJs_anonymous_945_(object, property, controller, this, arguments, var=var):
            var = Scope({u'this':this, u'property':property, u'controller':controller, u'object':object, u'arguments':arguments}, var)
            var.registers([u'property', u'index', u'controller', u'object', u'list'])
            var.put(u'list', var.get(u'object').get(var.get(u'property')))
            if var.get(u'list').neg():
                var.get(u'object').put(var.get(u'property'), Js([var.get(u'controller')]))
            else:
                var.put(u'index', var.get(u'list').callprop(u'indexOf', var.get(u'controller')))
                if PyJsStrictEq(var.get(u'index'),(-Js(1.0))):
                    var.get(u'list').callprop(u'push', var.get(u'controller'))
        PyJs_anonymous_945_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_946_(object, property, controller, this, arguments, var=var):
            var = Scope({u'this':this, u'property':property, u'controller':controller, u'object':object, u'arguments':arguments}, var)
            var.registers([u'property', u'controller', u'object', u'list'])
            var.put(u'list', var.get(u'object').get(var.get(u'property')))
            if var.get(u'list').neg():
                return var.get('undefined')
            var.get(u'arrayRemove')(var.get(u'list'), var.get(u'controller'))
            if PyJsStrictEq(var.get(u'list').get(u'length'),Js(0.0)):
                var.get(u'object').delete(var.get(u'property'))
        PyJs_anonymous_946_._set_name(u'anonymous')
        PyJs_Object_944_ = Js({u'ctrl':var.get(u"this"),u'$element':var.get(u'element'),u'set':PyJs_anonymous_945_,u'unset':PyJs_anonymous_946_,u'$animate':var.get(u'$animate')})
        var.get(u'addSetValidityMethod')(PyJs_Object_944_)
        @Js
        def PyJs_anonymous_947_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u'$animate').callprop(u'removeClass', var.get(u'element'), var.get(u'PRISTINE_CLASS'))
            var.get(u'$animate').callprop(u'addClass', var.get(u'element'), var.get(u'DIRTY_CLASS'))
            var.get(u'form').put(u'$dirty', var.get(u'true'))
            var.get(u'form').put(u'$pristine', Js(False))
            var.get(u'form').get(u'$$parentForm').callprop(u'$setDirty')
        PyJs_anonymous_947_._set_name(u'anonymous')
        var.get(u'form').put(u'$setDirty', PyJs_anonymous_947_)
        @Js
        def PyJs_anonymous_948_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u'$animate').callprop(u'setClass', var.get(u'element'), var.get(u'PRISTINE_CLASS'), ((var.get(u'DIRTY_CLASS')+Js(u' '))+var.get(u'SUBMITTED_CLASS')))
            var.get(u'form').put(u'$dirty', Js(False))
            var.get(u'form').put(u'$pristine', var.get(u'true'))
            var.get(u'form').put(u'$submitted', Js(False))
            @Js
            def PyJs_anonymous_949_(control, this, arguments, var=var):
                var = Scope({u'control':control, u'this':this, u'arguments':arguments}, var)
                var.registers([u'control'])
                var.get(u'control').callprop(u'$setPristine')
            PyJs_anonymous_949_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'controls'), PyJs_anonymous_949_)
        PyJs_anonymous_948_._set_name(u'anonymous')
        var.get(u'form').put(u'$setPristine', PyJs_anonymous_948_)
        @Js
        def PyJs_anonymous_950_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_951_(control, this, arguments, var=var):
                var = Scope({u'control':control, u'this':this, u'arguments':arguments}, var)
                var.registers([u'control'])
                var.get(u'control').callprop(u'$setUntouched')
            PyJs_anonymous_951_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'controls'), PyJs_anonymous_951_)
        PyJs_anonymous_950_._set_name(u'anonymous')
        var.get(u'form').put(u'$setUntouched', PyJs_anonymous_950_)
        @Js
        def PyJs_anonymous_952_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u'$animate').callprop(u'addClass', var.get(u'element'), var.get(u'SUBMITTED_CLASS'))
            var.get(u'form').put(u'$submitted', var.get(u'true'))
            var.get(u'form').get(u'$$parentForm').callprop(u'$setSubmitted')
        PyJs_anonymous_952_._set_name(u'anonymous')
        var.get(u'form').put(u'$setSubmitted', PyJs_anonymous_952_)
    PyJsHoisted_FormController_.func_name = u'FormController'
    var.put(u'FormController', PyJsHoisted_FormController_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'autoScrollingEnabled'])
        var.put(u'autoScrollingEnabled', var.get(u'true'))
        @Js
        def PyJs_anonymous_171_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.put(u'autoScrollingEnabled', Js(False))
        PyJs_anonymous_171_._set_name(u'anonymous')
        var.get(u"this").put(u'disableAutoScrolling', PyJs_anonymous_171_)
        @Js
        def PyJs_anonymous_172_(PyJsArg_2477696e646f77_, PyJsArg_246c6f636174696f6e_, PyJsArg_24726f6f7453636f7065_, this, arguments, var=var):
            var = Scope({u'$location':PyJsArg_246c6f636174696f6e_, u'this':this, u'$rootScope':PyJsArg_24726f6f7453636f7065_, u'arguments':arguments, u'$window':PyJsArg_2477696e646f77_}, var)
            var.registers([u'$location', u'$rootScope', u'scrollTo', u'getFirstAnchor', u'getYOffset', u'$window', u'document', u'scroll'])
            @Js
            def PyJsHoisted_scrollTo_(elem, this, arguments, var=var):
                var = Scope({u'this':this, u'elem':elem, u'arguments':arguments}, var)
                var.registers([u'elemTop', u'elem', u'offset'])
                if var.get(u'elem'):
                    var.get(u'elem').callprop(u'scrollIntoView')
                    var.put(u'offset', var.get(u'getYOffset')())
                    if var.get(u'offset'):
                        var.put(u'elemTop', var.get(u'elem').callprop(u'getBoundingClientRect').get(u'top'))
                        var.get(u'$window').callprop(u'scrollBy', Js(0.0), (var.get(u'elemTop')-var.get(u'offset')))
                else:
                    var.get(u'$window').callprop(u'scrollTo', Js(0.0), Js(0.0))
            PyJsHoisted_scrollTo_.func_name = u'scrollTo'
            var.put(u'scrollTo', PyJsHoisted_scrollTo_)
            @Js
            def PyJsHoisted_scroll_(hash, this, arguments, var=var):
                var = Scope({u'this':this, u'hash':hash, u'arguments':arguments}, var)
                var.registers([u'hash', u'elm'])
                var.put(u'hash', (var.get(u'hash') if var.get(u'isString')(var.get(u'hash')) else var.get(u'$location').callprop(u'hash')))
                pass
                if var.get(u'hash').neg():
                    var.get(u'scrollTo')(var.get(u"null"))
                else:
                    if var.put(u'elm', var.get(u'document').callprop(u'getElementById', var.get(u'hash'))):
                        var.get(u'scrollTo')(var.get(u'elm'))
                    else:
                        if var.put(u'elm', var.get(u'getFirstAnchor')(var.get(u'document').callprop(u'getElementsByName', var.get(u'hash')))):
                            var.get(u'scrollTo')(var.get(u'elm'))
                        else:
                            if PyJsStrictEq(var.get(u'hash'),Js(u'top')):
                                var.get(u'scrollTo')(var.get(u"null"))
            PyJsHoisted_scroll_.func_name = u'scroll'
            var.put(u'scroll', PyJsHoisted_scroll_)
            @Js
            def PyJsHoisted_getYOffset_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'style', u'elem', u'offset'])
                var.put(u'offset', var.get(u'scroll').get(u'yOffset'))
                if var.get(u'isFunction')(var.get(u'offset')):
                    var.put(u'offset', var.get(u'offset')())
                else:
                    if var.get(u'isElement')(var.get(u'offset')):
                        var.put(u'elem', var.get(u'offset').get(u'0'))
                        var.put(u'style', var.get(u'$window').callprop(u'getComputedStyle', var.get(u'elem')))
                        if PyJsStrictNeq(var.get(u'style').get(u'position'),Js(u'fixed')):
                            var.put(u'offset', Js(0.0))
                        else:
                            var.put(u'offset', var.get(u'elem').callprop(u'getBoundingClientRect').get(u'bottom'))
                    else:
                        if var.get(u'isNumber')(var.get(u'offset')).neg():
                            var.put(u'offset', Js(0.0))
                return var.get(u'offset')
            PyJsHoisted_getYOffset_.func_name = u'getYOffset'
            var.put(u'getYOffset', PyJsHoisted_getYOffset_)
            @Js
            def PyJsHoisted_getFirstAnchor_(list, this, arguments, var=var):
                var = Scope({u'this':this, u'list':list, u'arguments':arguments}, var)
                var.registers([u'list', u'result'])
                var.put(u'result', var.get(u"null"))
                @Js
                def PyJs_anonymous_173_(element, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
                    var.registers([u'element'])
                    if PyJsStrictEq(var.get(u'nodeName_')(var.get(u'element')),Js(u'a')):
                        var.put(u'result', var.get(u'element'))
                        return var.get(u'true')
                PyJs_anonymous_173_._set_name(u'anonymous')
                var.get(u'Array').get(u'prototype').get(u'some').callprop(u'call', var.get(u'list'), PyJs_anonymous_173_)
                return var.get(u'result')
            PyJsHoisted_getFirstAnchor_.func_name = u'getFirstAnchor'
            var.put(u'getFirstAnchor', PyJsHoisted_getFirstAnchor_)
            var.put(u'document', var.get(u'$window').get(u'document'))
            pass
            pass
            pass
            pass
            if var.get(u'autoScrollingEnabled'):
                @Js
                def PyJs_autoScrollWatch_174_(this, arguments, var=var):
                    var = Scope({u'this':this, u'autoScrollWatch':PyJs_autoScrollWatch_174_, u'arguments':arguments}, var)
                    var.registers([])
                    return var.get(u'$location').callprop(u'hash')
                PyJs_autoScrollWatch_174_._set_name(u'autoScrollWatch')
                @Js
                def PyJs_autoScrollWatchAction_175_(newVal, oldVal, this, arguments, var=var):
                    var = Scope({u'this':this, u'newVal':newVal, u'oldVal':oldVal, u'autoScrollWatchAction':PyJs_autoScrollWatchAction_175_, u'arguments':arguments}, var)
                    var.registers([u'newVal', u'oldVal'])
                    if (PyJsStrictEq(var.get(u'newVal'),var.get(u'oldVal')) and PyJsStrictEq(var.get(u'newVal'),Js(u''))):
                        return var.get('undefined')
                    @Js
                    def PyJs_anonymous_176_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        var.get(u'$rootScope').callprop(u'$evalAsync', var.get(u'scroll'))
                    PyJs_anonymous_176_._set_name(u'anonymous')
                    var.get(u'jqLiteDocumentLoaded')(PyJs_anonymous_176_)
                PyJs_autoScrollWatchAction_175_._set_name(u'autoScrollWatchAction')
                var.get(u'$rootScope').callprop(u'$watch', PyJs_autoScrollWatch_174_, PyJs_autoScrollWatchAction_175_)
            return var.get(u'scroll')
        PyJs_anonymous_172_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$window'), Js(u'$location'), Js(u'$rootScope'), PyJs_anonymous_172_]))
    PyJsHoistedNonPyName.func_name = u'$AnchorScrollProvider'
    var.put(u'$AnchorScrollProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_parseKeyValue_(keyValue, this, arguments, var=var):
        var = Scope({u'this':this, u'keyValue':keyValue, u'arguments':arguments}, var)
        var.registers([u'keyValue', u'obj'])
        PyJs_Object_25_ = Js({})
        var.put(u'obj', PyJs_Object_25_)
        @Js
        def PyJs_anonymous_26_(keyValue, this, arguments, var=var):
            var = Scope({u'this':this, u'keyValue':keyValue, u'arguments':arguments}, var)
            var.registers([u'splitPoint', u'keyValue', u'val', u'key'])
            pass
            if var.get(u'keyValue'):
                var.put(u'key', var.put(u'keyValue', var.get(u'keyValue').callprop(u'replace', JsRegExp(u'/\\+/g'), Js(u'%20'))))
                var.put(u'splitPoint', var.get(u'keyValue').callprop(u'indexOf', Js(u'=')))
                if PyJsStrictNeq(var.get(u'splitPoint'),(-Js(1.0))):
                    var.put(u'key', var.get(u'keyValue').callprop(u'substring', Js(0.0), var.get(u'splitPoint')))
                    var.put(u'val', var.get(u'keyValue').callprop(u'substring', (var.get(u'splitPoint')+Js(1.0))))
                var.put(u'key', var.get(u'tryDecodeURIComponent')(var.get(u'key')))
                if var.get(u'isDefined')(var.get(u'key')):
                    var.put(u'val', (var.get(u'tryDecodeURIComponent')(var.get(u'val')) if var.get(u'isDefined')(var.get(u'val')) else var.get(u'true')))
                    if var.get(u'hasOwnProperty').callprop(u'call', var.get(u'obj'), var.get(u'key')).neg():
                        var.get(u'obj').put(var.get(u'key'), var.get(u'val'))
                    else:
                        if var.get(u'isArray')(var.get(u'obj').get(var.get(u'key'))):
                            var.get(u'obj').get(var.get(u'key')).callprop(u'push', var.get(u'val'))
                        else:
                            var.get(u'obj').put(var.get(u'key'), Js([var.get(u'obj').get(var.get(u'key')), var.get(u'val')]))
        PyJs_anonymous_26_._set_name(u'anonymous')
        var.get(u'forEach')((var.get(u'keyValue') or Js(u'')).callprop(u'split', Js(u'&')), PyJs_anonymous_26_)
        return var.get(u'obj')
    PyJsHoisted_parseKeyValue_.func_name = u'parseKeyValue'
    var.put(u'parseKeyValue', PyJsHoisted_parseKeyValue_)
    @Js
    def PyJsHoisted_forEachSorted_(obj, iterator, context, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'context':context, u'iterator':iterator, u'arguments':arguments}, var)
        var.registers([u'keys', u'i', u'obj', u'context', u'iterator'])
        var.put(u'keys', var.get(u'Object').callprop(u'keys', var.get(u'obj')).callprop(u'sort'))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'keys').get(u'length')):
            try:
                var.get(u'iterator').callprop(u'call', var.get(u'context'), var.get(u'obj').get(var.get(u'keys').get(var.get(u'i'))), var.get(u'keys').get(var.get(u'i')))
            finally:
                    (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
        return var.get(u'keys')
    PyJsHoisted_forEachSorted_.func_name = u'forEachSorted'
    var.put(u'forEachSorted', PyJsHoisted_forEachSorted_)
    @Js
    def PyJsHoisted_getThursdayThisWeek_(datetime, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'datetime':datetime}, var)
        var.registers([u'datetime'])
        return var.get(u'Date').create(var.get(u'datetime').callprop(u'getFullYear'), var.get(u'datetime').callprop(u'getMonth'), (var.get(u'datetime').callprop(u'getDate')+(Js(4.0)-var.get(u'datetime').callprop(u'getDay'))))
    PyJsHoisted_getThursdayThisWeek_.func_name = u'getThursdayThisWeek'
    var.put(u'getThursdayThisWeek', PyJsHoisted_getThursdayThisWeek_)
    @Js
    def PyJsHoisted_startingTag_(element, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'elemHtml', u'element'])
        var.put(u'element', var.get(u'jqLite')(var.get(u'element')).callprop(u'clone'))
        try:
            var.get(u'element').callprop(u'empty')
        except PyJsException as PyJsTempException:
            PyJsHolder_65_38417540 = var.own.get(u'e')
            var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
            try:
                pass
            finally:
                if PyJsHolder_65_38417540 is not None:
                    var.own[u'e'] = PyJsHolder_65_38417540
                else:
                    del var.own[u'e']
                del PyJsHolder_65_38417540
        var.put(u'elemHtml', var.get(u'jqLite')(Js(u'<div>')).callprop(u'append', var.get(u'element')).callprop(u'html'))
        try:
            @Js
            def PyJs_anonymous_24_(match, nodeName, this, arguments, var=var):
                var = Scope({u'this':this, u'nodeName':nodeName, u'match':match, u'arguments':arguments}, var)
                var.registers([u'nodeName', u'match'])
                return (Js(u'<')+var.get(u'lowercase')(var.get(u'nodeName')))
            PyJs_anonymous_24_._set_name(u'anonymous')
            return (var.get(u'lowercase')(var.get(u'elemHtml')) if PyJsStrictEq(var.get(u'element').get(u'0').get(u'nodeType'),var.get(u'NODE_TYPE_TEXT')) else var.get(u'elemHtml').callprop(u'match', JsRegExp(u'/^(<[^>]+>)/')).get(u'1').callprop(u'replace', JsRegExp(u'/^<([\\w\\-]+)/'), PyJs_anonymous_24_))
        except PyJsException as PyJsTempException:
            PyJsHolder_65_70393287 = var.own.get(u'e')
            var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
            try:
                return var.get(u'lowercase')(var.get(u'elemHtml'))
            finally:
                if PyJsHolder_65_70393287 is not None:
                    var.own[u'e'] = PyJsHolder_65_70393287
                else:
                    del var.own[u'e']
                del PyJsHolder_65_70393287
    PyJsHoisted_startingTag_.func_name = u'startingTag'
    var.put(u'startingTag', PyJsHoisted_startingTag_)
    @Js
    def PyJsHoisted_jqLiteIsTextNode_(html, this, arguments, var=var):
        var = Scope({u'this':this, u'html':html, u'arguments':arguments}, var)
        var.registers([u'html'])
        return var.get(u'HTML_REGEXP').callprop(u'test', var.get(u'html')).neg()
    PyJsHoisted_jqLiteIsTextNode_.func_name = u'jqLiteIsTextNode'
    var.put(u'jqLiteIsTextNode', PyJsHoisted_jqLiteIsTextNode_)
    @Js
    def PyJsHoisted_jqLiteRemove_(element, keepData, this, arguments, var=var):
        var = Scope({u'this':this, u'keepData':keepData, u'arguments':arguments, u'element':element}, var)
        var.registers([u'keepData', u'parent', u'element'])
        if var.get(u'keepData').neg():
            var.get(u'jqLiteDealoc')(var.get(u'element'))
        var.put(u'parent', var.get(u'element').get(u'parentNode'))
        if var.get(u'parent'):
            var.get(u'parent').callprop(u'removeChild', var.get(u'element'))
    PyJsHoisted_jqLiteRemove_.func_name = u'jqLiteRemove'
    var.put(u'jqLiteRemove', PyJsHoisted_jqLiteRemove_)
    @Js
    def PyJsHoisted_baseInputType_(scope, element, attr, ctrl, PyJsArg_24736e6966666572_, PyJsArg_2462726f77736572_, this, arguments, var=var):
        var = Scope({u'$sniffer':PyJsArg_24736e6966666572_, u'attr':attr, u'ctrl':ctrl, u'this':this, u'element':element, u'$browser':PyJsArg_2462726f77736572_, u'arguments':arguments, u'scope':scope}, var)
        var.registers([u'$sniffer', u'attr', u'ctrl', u'composing', u'element', u'listener', u'$browser', u'timeout', u'deferListener', u'scope', u'type'])
        var.put(u'type', var.get(u'lowercase')(var.get(u'element').get(u'0').get(u'type')))
        if var.get(u'$sniffer').get(u'android').neg():
            var.put(u'composing', Js(False))
            @Js
            def PyJs_anonymous_967_(data, this, arguments, var=var):
                var = Scope({u'this':this, u'data':data, u'arguments':arguments}, var)
                var.registers([u'data'])
                var.put(u'composing', var.get(u'true'))
            PyJs_anonymous_967_._set_name(u'anonymous')
            var.get(u'element').callprop(u'on', Js(u'compositionstart'), PyJs_anonymous_967_)
            @Js
            def PyJs_anonymous_968_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                var.put(u'composing', Js(False))
                var.get(u'listener')()
            PyJs_anonymous_968_._set_name(u'anonymous')
            var.get(u'element').callprop(u'on', Js(u'compositionend'), PyJs_anonymous_968_)
        @Js
        def PyJs_anonymous_969_(ev, this, arguments, var=var):
            var = Scope({u'this':this, u'ev':ev, u'arguments':arguments}, var)
            var.registers([u'ev', u'event', u'value'])
            if var.get(u'timeout'):
                var.get(u'$browser').get(u'defer').callprop(u'cancel', var.get(u'timeout'))
                var.put(u'timeout', var.get(u"null"))
            if var.get(u'composing'):
                return var.get('undefined')
            var.put(u'value', var.get(u'element').callprop(u'val'))
            var.put(u'event', (var.get(u'ev') and var.get(u'ev').get(u'type')))
            if (PyJsStrictNeq(var.get(u'type'),Js(u'password')) and (var.get(u'attr').get(u'ngTrim').neg() or PyJsStrictNeq(var.get(u'attr').get(u'ngTrim'),Js(u'false')))):
                var.put(u'value', var.get(u'trim')(var.get(u'value')))
            if (PyJsStrictNeq(var.get(u'ctrl').get(u'$viewValue'),var.get(u'value')) or (PyJsStrictEq(var.get(u'value'),Js(u'')) and var.get(u'ctrl').get(u'$$hasNativeValidators'))):
                var.get(u'ctrl').callprop(u'$setViewValue', var.get(u'value'), var.get(u'event'))
        PyJs_anonymous_969_._set_name(u'anonymous')
        var.put(u'listener', PyJs_anonymous_969_)
        if var.get(u'$sniffer').callprop(u'hasEvent', Js(u'input')):
            var.get(u'element').callprop(u'on', Js(u'input'), var.get(u'listener'))
        else:
            pass
            @Js
            def PyJs_anonymous_970_(ev, input, origValue, this, arguments, var=var):
                var = Scope({u'origValue':origValue, u'input':input, u'ev':ev, u'this':this, u'arguments':arguments}, var)
                var.registers([u'origValue', u'input', u'ev'])
                if var.get(u'timeout').neg():
                    @Js
                    def PyJs_anonymous_971_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        var.put(u'timeout', var.get(u"null"))
                        if (var.get(u'input').neg() or PyJsStrictNeq(var.get(u'input').get(u'value'),var.get(u'origValue'))):
                            var.get(u'listener')(var.get(u'ev'))
                    PyJs_anonymous_971_._set_name(u'anonymous')
                    var.put(u'timeout', var.get(u'$browser').callprop(u'defer', PyJs_anonymous_971_))
            PyJs_anonymous_970_._set_name(u'anonymous')
            var.put(u'deferListener', PyJs_anonymous_970_)
            @Js
            def PyJs_anonymous_972_(event, this, arguments, var=var):
                var = Scope({u'this':this, u'event':event, u'arguments':arguments}, var)
                var.registers([u'event', u'key'])
                var.put(u'key', var.get(u'event').get(u'keyCode'))
                if ((PyJsStrictEq(var.get(u'key'),Js(91.0)) or ((Js(15.0)<var.get(u'key')) and (var.get(u'key')<Js(19.0)))) or ((Js(37.0)<=var.get(u'key')) and (var.get(u'key')<=Js(40.0)))):
                    return var.get('undefined')
                var.get(u'deferListener')(var.get(u'event'), var.get(u"this"), var.get(u"this").get(u'value'))
            PyJs_anonymous_972_._set_name(u'anonymous')
            var.get(u'element').callprop(u'on', Js(u'keydown'), PyJs_anonymous_972_)
            if var.get(u'$sniffer').callprop(u'hasEvent', Js(u'paste')):
                var.get(u'element').callprop(u'on', Js(u'paste cut'), var.get(u'deferListener'))
        var.get(u'element').callprop(u'on', Js(u'change'), var.get(u'listener'))
        @Js
        def PyJs_anonymous_973_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'value'])
            var.put(u'value', (Js(u'') if var.get(u'ctrl').callprop(u'$isEmpty', var.get(u'ctrl').get(u'$viewValue')) else var.get(u'ctrl').get(u'$viewValue')))
            if PyJsStrictNeq(var.get(u'element').callprop(u'val'),var.get(u'value')):
                var.get(u'element').callprop(u'val', var.get(u'value'))
        PyJs_anonymous_973_._set_name(u'anonymous')
        var.get(u'ctrl').put(u'$render', PyJs_anonymous_973_)
    PyJsHoisted_baseInputType_.func_name = u'baseInputType'
    var.put(u'baseInputType', PyJsHoisted_baseInputType_)
    @Js
    def PyJsHoisted_textInputType_(scope, element, attr, ctrl, PyJsArg_24736e6966666572_, PyJsArg_2462726f77736572_, this, arguments, var=var):
        var = Scope({u'$sniffer':PyJsArg_24736e6966666572_, u'attr':attr, u'ctrl':ctrl, u'this':this, u'element':element, u'$browser':PyJsArg_2462726f77736572_, u'arguments':arguments, u'scope':scope}, var)
        var.registers([u'$sniffer', u'attr', u'ctrl', u'element', u'$browser', u'scope'])
        var.get(u'baseInputType')(var.get(u'scope'), var.get(u'element'), var.get(u'attr'), var.get(u'ctrl'), var.get(u'$sniffer'), var.get(u'$browser'))
        var.get(u'stringBasedInputType')(var.get(u'ctrl'))
    PyJsHoisted_textInputType_.func_name = u'textInputType'
    var.put(u'textInputType', PyJsHoisted_textInputType_)
    @Js
    def PyJsHoisted_serializeValue_(v, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'v':v}, var)
        var.registers([u'v'])
        if var.get(u'isObject')(var.get(u'v')):
            return (var.get(u'v').callprop(u'toISOString') if var.get(u'isDate')(var.get(u'v')) else var.get(u'toJson')(var.get(u'v')))
        return var.get(u'v')
    PyJsHoisted_serializeValue_.func_name = u'serializeValue'
    var.put(u'serializeValue', PyJsHoisted_serializeValue_)
    @Js
    def PyJsHoisted_hasCustomToString_(obj, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
        var.registers([u'obj'])
        return (var.get(u'isFunction')(var.get(u'obj').get(u'toString')) and PyJsStrictNeq(var.get(u'obj').get(u'toString'),var.get(u'toString')))
    PyJsHoisted_hasCustomToString_.func_name = u'hasCustomToString'
    var.put(u'hasCustomToString', PyJsHoisted_hasCustomToString_)
    @Js
    def PyJsHoisted_forEach_(obj, iterator, context, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'context':context, u'iterator':iterator, u'arguments':arguments}, var)
        var.registers([u'obj', u'key', u'iterator', u'isPrimitive', u'length', u'context'])
        pass
        if var.get(u'obj'):
            if var.get(u'isFunction')(var.get(u'obj')):
                for PyJsTemp in var.get(u'obj'):
                    var.put(u'key', PyJsTemp)
                    if ((((var.get(u'key')!=Js(u'prototype')) and (var.get(u'key')!=Js(u'length'))) and (var.get(u'key')!=Js(u'name'))) and (var.get(u'obj').get(u'hasOwnProperty').neg() or var.get(u'obj').callprop(u'hasOwnProperty', var.get(u'key')))):
                        var.get(u'iterator').callprop(u'call', var.get(u'context'), var.get(u'obj').get(var.get(u'key')), var.get(u'key'), var.get(u'obj'))
            else:
                if (var.get(u'isArray')(var.get(u'obj')) or var.get(u'isArrayLike')(var.get(u'obj'))):
                    var.put(u'isPrimitive', PyJsStrictNeq(var.get(u'obj',throw=False).typeof(),Js(u'object')))
                    #for JS loop
                    PyJsComma(var.put(u'key', Js(0.0)),var.put(u'length', var.get(u'obj').get(u'length')))
                    while (var.get(u'key')<var.get(u'length')):
                        try:
                            if (var.get(u'isPrimitive') or var.get(u'obj').contains(var.get(u'key'))):
                                var.get(u'iterator').callprop(u'call', var.get(u'context'), var.get(u'obj').get(var.get(u'key')), var.get(u'key'), var.get(u'obj'))
                        finally:
                                (var.put(u'key',var.get(u'key')+Js(1))-Js(1))
                else:
                    if (var.get(u'obj').get(u'forEach') and PyJsStrictNeq(var.get(u'obj').get(u'forEach'),var.get(u'forEach'))):
                        var.get(u'obj').callprop(u'forEach', var.get(u'iterator'), var.get(u'context'), var.get(u'obj'))
                    else:
                        if var.get(u'isBlankObject')(var.get(u'obj')):
                            for PyJsTemp in var.get(u'obj'):
                                var.put(u'key', PyJsTemp)
                                var.get(u'iterator').callprop(u'call', var.get(u'context'), var.get(u'obj').get(var.get(u'key')), var.get(u'key'), var.get(u'obj'))
                        else:
                            if PyJsStrictEq(var.get(u'obj').get(u'hasOwnProperty').typeof(),Js(u'function')):
                                for PyJsTemp in var.get(u'obj'):
                                    var.put(u'key', PyJsTemp)
                                    if var.get(u'obj').callprop(u'hasOwnProperty', var.get(u'key')):
                                        var.get(u'iterator').callprop(u'call', var.get(u'context'), var.get(u'obj').get(var.get(u'key')), var.get(u'key'), var.get(u'obj'))
                            else:
                                for PyJsTemp in var.get(u'obj'):
                                    var.put(u'key', PyJsTemp)
                                    if var.get(u'hasOwnProperty').callprop(u'call', var.get(u'obj'), var.get(u'key')):
                                        var.get(u'iterator').callprop(u'call', var.get(u'context'), var.get(u'obj').get(var.get(u'key')), var.get(u'key'), var.get(u'obj'))
        return var.get(u'obj')
    PyJsHoisted_forEach_.func_name = u'forEach'
    var.put(u'forEach', PyJsHoisted_forEach_)
    @Js
    def PyJsHoisted_setupModuleLoader_(window, this, arguments, var=var):
        var = Scope({u'this':this, u'window':window, u'arguments':arguments}, var)
        var.registers([u'ngMinErr', u'$injectorMinErr', u'window', u'ensure', u'angular'])
        @Js
        def PyJsHoisted_ensure_(obj, name, factory, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'obj':obj, u'name':name, u'factory':factory}, var)
            var.registers([u'obj', u'name', u'factory'])
            return (var.get(u'obj').get(var.get(u'name')) or var.get(u'obj').put(var.get(u'name'), var.get(u'factory')()))
        PyJsHoisted_ensure_.func_name = u'ensure'
        var.put(u'ensure', PyJsHoisted_ensure_)
        var.put(u'$injectorMinErr', var.get(u'minErr')(Js(u'$injector')))
        var.put(u'ngMinErr', var.get(u'minErr')(Js(u'ng')))
        pass
        var.put(u'angular', var.get(u'ensure')(var.get(u'window'), Js(u'angular'), var.get(u'Object')))
        var.get(u'angular').put(u'$$minErr', (var.get(u'angular').get(u'$$minErr') or var.get(u'minErr')))
        @Js
        def PyJs_anonymous_45_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'modules'])
            PyJs_Object_46_ = Js({})
            var.put(u'modules', PyJs_Object_46_)
            @Js
            def PyJs_module_47_(name, requires, configFn, this, arguments, var=var):
                var = Scope({u'name':name, u'this':this, u'module':PyJs_module_47_, u'arguments':arguments, u'requires':requires, u'configFn':configFn}, var)
                var.registers([u'requires', u'assertNotHasOwnProperty', u'configFn', u'name'])
                @Js
                def PyJs_anonymous_48_(name, context, this, arguments, var=var):
                    var = Scope({u'this':this, u'name':name, u'context':context, u'arguments':arguments}, var)
                    var.registers([u'name', u'context'])
                    if PyJsStrictEq(var.get(u'name'),Js(u'hasOwnProperty')):
                        PyJsTempException = JsToPyException(var.get(u'ngMinErr')(Js(u'badname'), Js(u'hasOwnProperty is not a valid {0} name'), var.get(u'context')))
                        raise PyJsTempException
                PyJs_anonymous_48_._set_name(u'anonymous')
                var.put(u'assertNotHasOwnProperty', PyJs_anonymous_48_)
                var.get(u'assertNotHasOwnProperty')(var.get(u'name'), Js(u'module'))
                if (var.get(u'requires') and var.get(u'modules').callprop(u'hasOwnProperty', var.get(u'name'))):
                    var.get(u'modules').put(var.get(u'name'), var.get(u"null"))
                @Js
                def PyJs_anonymous_49_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'invokeLaterAndSetModuleName', u'invokeLater', u'configBlocks', u'runBlocks', u'config', u'invokeQueue', u'moduleInstance'])
                    @Js
                    def PyJsHoisted_invokeLater_(provider, method, insertMethod, queue, this, arguments, var=var):
                        var = Scope({u'queue':queue, u'arguments':arguments, u'provider':provider, u'this':this, u'insertMethod':insertMethod, u'method':method}, var)
                        var.registers([u'queue', u'insertMethod', u'method', u'provider'])
                        if var.get(u'queue').neg():
                            var.put(u'queue', var.get(u'invokeQueue'))
                        @Js
                        def PyJs_anonymous_52_(this, arguments, var=var):
                            var = Scope({u'this':this, u'arguments':arguments}, var)
                            var.registers([])
                            var.get(u'queue').callprop((var.get(u'insertMethod') or Js(u'push')), Js([var.get(u'provider'), var.get(u'method'), var.get(u'arguments')]))
                            return var.get(u'moduleInstance')
                        PyJs_anonymous_52_._set_name(u'anonymous')
                        return PyJs_anonymous_52_
                    PyJsHoisted_invokeLater_.func_name = u'invokeLater'
                    var.put(u'invokeLater', PyJsHoisted_invokeLater_)
                    @Js
                    def PyJsHoisted_invokeLaterAndSetModuleName_(provider, method, this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments, u'method':method, u'provider':provider}, var)
                        var.registers([u'method', u'provider'])
                        @Js
                        def PyJs_anonymous_53_(recipeName, factoryFunction, this, arguments, var=var):
                            var = Scope({u'this':this, u'factoryFunction':factoryFunction, u'recipeName':recipeName, u'arguments':arguments}, var)
                            var.registers([u'factoryFunction', u'recipeName'])
                            if (var.get(u'factoryFunction') and var.get(u'isFunction')(var.get(u'factoryFunction'))):
                                var.get(u'factoryFunction').put(u'$$moduleName', var.get(u'name'))
                            var.get(u'invokeQueue').callprop(u'push', Js([var.get(u'provider'), var.get(u'method'), var.get(u'arguments')]))
                            return var.get(u'moduleInstance')
                        PyJs_anonymous_53_._set_name(u'anonymous')
                        return PyJs_anonymous_53_
                    PyJsHoisted_invokeLaterAndSetModuleName_.func_name = u'invokeLaterAndSetModuleName'
                    var.put(u'invokeLaterAndSetModuleName', PyJsHoisted_invokeLaterAndSetModuleName_)
                    if var.get(u'requires').neg():
                        PyJsTempException = JsToPyException(var.get(u'$injectorMinErr')(Js(u'nomod'), ((Js(u"Module '{0}' is not available! You either misspelled ")+Js(u'the module name or forgot to load it. If registering a module ensure that you '))+Js(u'specify the dependencies as the second argument.')), var.get(u'name')))
                        raise PyJsTempException
                    var.put(u'invokeQueue', Js([]))
                    var.put(u'configBlocks', Js([]))
                    var.put(u'runBlocks', Js([]))
                    var.put(u'config', var.get(u'invokeLater')(Js(u'$injector'), Js(u'invoke'), Js(u'push'), var.get(u'configBlocks')))
                    @Js
                    def PyJs_anonymous_51_(block, this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments, u'block':block}, var)
                        var.registers([u'block'])
                        var.get(u'runBlocks').callprop(u'push', var.get(u'block'))
                        return var.get(u"this")
                    PyJs_anonymous_51_._set_name(u'anonymous')
                    PyJs_Object_50_ = Js({u'_invokeQueue':var.get(u'invokeQueue'),u'_configBlocks':var.get(u'configBlocks'),u'_runBlocks':var.get(u'runBlocks'),u'requires':var.get(u'requires'),u'name':var.get(u'name'),u'provider':var.get(u'invokeLaterAndSetModuleName')(Js(u'$provide'), Js(u'provider')),u'factory':var.get(u'invokeLaterAndSetModuleName')(Js(u'$provide'), Js(u'factory')),u'service':var.get(u'invokeLaterAndSetModuleName')(Js(u'$provide'), Js(u'service')),u'value':var.get(u'invokeLater')(Js(u'$provide'), Js(u'value')),u'constant':var.get(u'invokeLater')(Js(u'$provide'), Js(u'constant'), Js(u'unshift')),u'decorator':var.get(u'invokeLaterAndSetModuleName')(Js(u'$provide'), Js(u'decorator')),u'animation':var.get(u'invokeLaterAndSetModuleName')(Js(u'$animateProvider'), Js(u'register')),u'filter':var.get(u'invokeLaterAndSetModuleName')(Js(u'$filterProvider'), Js(u'register')),u'controller':var.get(u'invokeLaterAndSetModuleName')(Js(u'$controllerProvider'), Js(u'register')),u'directive':var.get(u'invokeLaterAndSetModuleName')(Js(u'$compileProvider'), Js(u'directive')),u'config':var.get(u'config'),u'run':PyJs_anonymous_51_})
                    var.put(u'moduleInstance', PyJs_Object_50_)
                    if var.get(u'configFn'):
                        var.get(u'config')(var.get(u'configFn'))
                    return var.get(u'moduleInstance')
                    pass
                    pass
                PyJs_anonymous_49_._set_name(u'anonymous')
                return var.get(u'ensure')(var.get(u'modules'), var.get(u'name'), PyJs_anonymous_49_)
            PyJs_module_47_._set_name(u'module')
            return PyJs_module_47_
        PyJs_anonymous_45_._set_name(u'anonymous')
        return var.get(u'ensure')(var.get(u'angular'), Js(u'module'), PyJs_anonymous_45_)
    PyJsHoisted_setupModuleLoader_.func_name = u'setupModuleLoader'
    var.put(u'setupModuleLoader', PyJsHoisted_setupModuleLoader_)
    @Js
    def PyJsHoisted_classDirective_(name, selector, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'selector':selector}, var)
        var.registers([u'name', u'selector'])
        var.put(u'name', (Js(u'ngClass')+var.get(u'name')))
        @Js
        def PyJs_anonymous_1031_(PyJsArg_24616e696d617465_, this, arguments, var=var):
            var = Scope({u'this':this, u'$animate':PyJsArg_24616e696d617465_, u'arguments':arguments}, var)
            var.registers([u'arrayDifference', u'$animate', u'arrayClasses'])
            @Js
            def PyJsHoisted_arrayDifference_(tokens1, tokens2, this, arguments, var=var):
                var = Scope({u'this':this, u'tokens1':tokens1, u'arguments':arguments, u'tokens2':tokens2}, var)
                var.registers([u'i', u'j', u'token', u'tokens1', u'tokens2', u'values'])
                var.put(u'values', Js([]))
                class JS_CONTINUE_LABEL_6f75746572(Exception): pass
                class JS_BREAK_LABEL_6f75746572(Exception): pass
                try:
                    #for JS loop
                    var.put(u'i', Js(0.0))
                    while (var.get(u'i')<var.get(u'tokens1').get(u'length')):
                        try:
                            try:
                                var.put(u'token', var.get(u'tokens1').get(var.get(u'i')))
                                #for JS loop
                                var.put(u'j', Js(0.0))
                                while (var.get(u'j')<var.get(u'tokens2').get(u'length')):
                                    try:
                                        if (var.get(u'token')==var.get(u'tokens2').get(var.get(u'j'))):
                                            raise JS_CONTINUE_LABEL_6f75746572("Continued")
                                    finally:
                                            (var.put(u'j',var.get(u'j')+Js(1))-Js(1))
                                var.get(u'values').callprop(u'push', var.get(u'token'))
                            finally:
                                    (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                        except JS_CONTINUE_LABEL_6f75746572:
                            pass
                except JS_BREAK_LABEL_6f75746572:
                    pass
                return var.get(u'values')
            PyJsHoisted_arrayDifference_.func_name = u'arrayDifference'
            var.put(u'arrayDifference', PyJsHoisted_arrayDifference_)
            @Js
            def PyJsHoisted_arrayClasses_(classVal, this, arguments, var=var):
                var = Scope({u'this':this, u'classVal':classVal, u'arguments':arguments}, var)
                var.registers([u'classes', u'classVal'])
                var.put(u'classes', Js([]))
                if var.get(u'isArray')(var.get(u'classVal')):
                    @Js
                    def PyJs_anonymous_1037_(v, this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments, u'v':v}, var)
                        var.registers([u'v'])
                        var.put(u'classes', var.get(u'classes').callprop(u'concat', var.get(u'arrayClasses')(var.get(u'v'))))
                    PyJs_anonymous_1037_._set_name(u'anonymous')
                    var.get(u'forEach')(var.get(u'classVal'), PyJs_anonymous_1037_)
                    return var.get(u'classes')
                else:
                    if var.get(u'isString')(var.get(u'classVal')):
                        return var.get(u'classVal').callprop(u'split', Js(u' '))
                    else:
                        if var.get(u'isObject')(var.get(u'classVal')):
                            @Js
                            def PyJs_anonymous_1038_(v, k, this, arguments, var=var):
                                var = Scope({u'this':this, u'k':k, u'arguments':arguments, u'v':v}, var)
                                var.registers([u'k', u'v'])
                                if var.get(u'v'):
                                    var.put(u'classes', var.get(u'classes').callprop(u'concat', var.get(u'k').callprop(u'split', Js(u' '))))
                            PyJs_anonymous_1038_._set_name(u'anonymous')
                            var.get(u'forEach')(var.get(u'classVal'), PyJs_anonymous_1038_)
                            return var.get(u'classes')
                return var.get(u'classVal')
            PyJsHoisted_arrayClasses_.func_name = u'arrayClasses'
            var.put(u'arrayClasses', PyJsHoisted_arrayClasses_)
            @Js
            def PyJs_anonymous_1033_(scope, element, attr, this, arguments, var=var):
                var = Scope({u'this':this, u'scope':scope, u'attr':attr, u'arguments':arguments, u'element':element}, var)
                var.registers([u'attr', u'element', u'ngClassWatchAction', u'removeClasses', u'oldVal', u'updateClasses', u'scope', u'addClasses', u'digestClassCounts'])
                @Js
                def PyJsHoisted_ngClassWatchAction_(newVal, this, arguments, var=var):
                    var = Scope({u'this':this, u'newVal':newVal, u'arguments':arguments}, var)
                    var.registers([u'newClasses', u'newVal', u'oldClasses'])
                    if (PyJsStrictEq(var.get(u'selector'),var.get(u'true')) or PyJsStrictEq((var.get(u'scope').get(u'$index')%Js(2.0)),var.get(u'selector'))):
                        var.put(u'newClasses', var.get(u'arrayClasses')((var.get(u'newVal') or Js([]))))
                        if var.get(u'oldVal').neg():
                            var.get(u'addClasses')(var.get(u'newClasses'))
                        else:
                            if var.get(u'equals')(var.get(u'newVal'), var.get(u'oldVal')).neg():
                                var.put(u'oldClasses', var.get(u'arrayClasses')(var.get(u'oldVal')))
                                var.get(u'updateClasses')(var.get(u'oldClasses'), var.get(u'newClasses'))
                    var.put(u'oldVal', var.get(u'shallowCopy')(var.get(u'newVal')))
                PyJsHoisted_ngClassWatchAction_.func_name = u'ngClassWatchAction'
                var.put(u'ngClassWatchAction', PyJsHoisted_ngClassWatchAction_)
                @Js
                def PyJsHoisted_addClasses_(classes, this, arguments, var=var):
                    var = Scope({u'this':this, u'classes':classes, u'arguments':arguments}, var)
                    var.registers([u'newClasses', u'classes'])
                    var.put(u'newClasses', var.get(u'digestClassCounts')(var.get(u'classes'), Js(1.0)))
                    var.get(u'attr').callprop(u'$addClass', var.get(u'newClasses'))
                PyJsHoisted_addClasses_.func_name = u'addClasses'
                var.put(u'addClasses', PyJsHoisted_addClasses_)
                @Js
                def PyJsHoisted_updateClasses_(oldClasses, newClasses, this, arguments, var=var):
                    var = Scope({u'newClasses':newClasses, u'this':this, u'arguments':arguments, u'oldClasses':oldClasses}, var)
                    var.registers([u'newClasses', u'toRemove', u'toAdd', u'oldClasses'])
                    var.put(u'toAdd', var.get(u'arrayDifference')(var.get(u'newClasses'), var.get(u'oldClasses')))
                    var.put(u'toRemove', var.get(u'arrayDifference')(var.get(u'oldClasses'), var.get(u'newClasses')))
                    var.put(u'toAdd', var.get(u'digestClassCounts')(var.get(u'toAdd'), Js(1.0)))
                    var.put(u'toRemove', var.get(u'digestClassCounts')(var.get(u'toRemove'), (-Js(1.0))))
                    if (var.get(u'toAdd') and var.get(u'toAdd').get(u'length')):
                        var.get(u'$animate').callprop(u'addClass', var.get(u'element'), var.get(u'toAdd'))
                    if (var.get(u'toRemove') and var.get(u'toRemove').get(u'length')):
                        var.get(u'$animate').callprop(u'removeClass', var.get(u'element'), var.get(u'toRemove'))
                PyJsHoisted_updateClasses_.func_name = u'updateClasses'
                var.put(u'updateClasses', PyJsHoisted_updateClasses_)
                @Js
                def PyJsHoisted_digestClassCounts_(classes, count, this, arguments, var=var):
                    var = Scope({u'count':count, u'this':this, u'classes':classes, u'arguments':arguments}, var)
                    var.registers([u'classes', u'count', u'classesToUpdate', u'classCounts'])
                    var.put(u'classCounts', (var.get(u'element').callprop(u'data', Js(u'$classCounts')) or var.get(u'createMap')()))
                    var.put(u'classesToUpdate', Js([]))
                    @Js
                    def PyJs_anonymous_1036_(className, this, arguments, var=var):
                        var = Scope({u'className':className, u'this':this, u'arguments':arguments}, var)
                        var.registers([u'className'])
                        if ((var.get(u'count')>Js(0.0)) or var.get(u'classCounts').get(var.get(u'className'))):
                            var.get(u'classCounts').put(var.get(u'className'), ((var.get(u'classCounts').get(var.get(u'className')) or Js(0.0))+var.get(u'count')))
                            if PyJsStrictEq(var.get(u'classCounts').get(var.get(u'className')),(+(var.get(u'count')>Js(0.0)))):
                                var.get(u'classesToUpdate').callprop(u'push', var.get(u'className'))
                    PyJs_anonymous_1036_._set_name(u'anonymous')
                    var.get(u'forEach')(var.get(u'classes'), PyJs_anonymous_1036_)
                    var.get(u'element').callprop(u'data', Js(u'$classCounts'), var.get(u'classCounts'))
                    return var.get(u'classesToUpdate').callprop(u'join', Js(u' '))
                PyJsHoisted_digestClassCounts_.func_name = u'digestClassCounts'
                var.put(u'digestClassCounts', PyJsHoisted_digestClassCounts_)
                @Js
                def PyJsHoisted_removeClasses_(classes, this, arguments, var=var):
                    var = Scope({u'this':this, u'classes':classes, u'arguments':arguments}, var)
                    var.registers([u'newClasses', u'classes'])
                    var.put(u'newClasses', var.get(u'digestClassCounts')(var.get(u'classes'), (-Js(1.0))))
                    var.get(u'attr').callprop(u'$removeClass', var.get(u'newClasses'))
                PyJsHoisted_removeClasses_.func_name = u'removeClasses'
                var.put(u'removeClasses', PyJsHoisted_removeClasses_)
                pass
                var.get(u'scope').callprop(u'$watch', var.get(u'attr').get(var.get(u'name')), var.get(u'ngClassWatchAction'), var.get(u'true'))
                @Js
                def PyJs_anonymous_1034_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    var.get(u'ngClassWatchAction')(var.get(u'scope').callprop(u'$eval', var.get(u'attr').get(var.get(u'name'))))
                PyJs_anonymous_1034_._set_name(u'anonymous')
                var.get(u'attr').callprop(u'$observe', Js(u'class'), PyJs_anonymous_1034_)
                if PyJsStrictNeq(var.get(u'name'),Js(u'ngClass')):
                    @Js
                    def PyJs_anonymous_1035_(PyJsArg_24696e646578_, PyJsArg_6f6c6424696e646578_, this, arguments, var=var):
                        var = Scope({u'this':this, u'old$index':PyJsArg_6f6c6424696e646578_, u'arguments':arguments, u'$index':PyJsArg_24696e646578_}, var)
                        var.registers([u'old$index', u'classes', u'$index', u'mod'])
                        var.put(u'mod', (var.get(u'$index')&Js(1.0)))
                        if PyJsStrictNeq(var.get(u'mod'),(var.get(u'old$index')&Js(1.0))):
                            var.put(u'classes', var.get(u'arrayClasses')(var.get(u'scope').callprop(u'$eval', var.get(u'attr').get(var.get(u'name')))))
                            (var.get(u'addClasses')(var.get(u'classes')) if PyJsStrictEq(var.get(u'mod'),var.get(u'selector')) else var.get(u'removeClasses')(var.get(u'classes')))
                    PyJs_anonymous_1035_._set_name(u'anonymous')
                    var.get(u'scope').callprop(u'$watch', Js(u'$index'), PyJs_anonymous_1035_)
                pass
                pass
                pass
                pass
                pass
            PyJs_anonymous_1033_._set_name(u'anonymous')
            PyJs_Object_1032_ = Js({u'restrict':Js(u'AC'),u'link':PyJs_anonymous_1033_})
            return PyJs_Object_1032_
            pass
            pass
        PyJs_anonymous_1031_._set_name(u'anonymous')
        return Js([Js(u'$animate'), PyJs_anonymous_1031_])
    PyJsHoisted_classDirective_.func_name = u'classDirective'
    var.put(u'classDirective', PyJsHoisted_classDirective_)
    @Js
    def PyJsHoisted_isNumber_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        return PyJsStrictEq(var.get(u'value',throw=False).typeof(),Js(u'number'))
    PyJsHoisted_isNumber_.func_name = u'isNumber'
    var.put(u'isNumber', PyJsHoisted_isNumber_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_418_(PyJsArg_24726f6f7453636f7065_, PyJsArg_2477696e646f77_, PyJsArg_2471_, PyJsArg_242471_, this, arguments, var=var):
            var = Scope({u'$rootScope':PyJsArg_24726f6f7453636f7065_, u'arguments':arguments, u'$window':PyJsArg_2477696e646f77_, u'this':this, u'$$q':PyJsArg_242471_, u'$q':PyJsArg_2471_}, var)
            var.registers([u'$rootScope', u'$$q', u'interval', u'intervals', u'$window', u'$q'])
            @Js
            def PyJsHoisted_interval_(fn, delay, count, invokeApply, this, arguments, var=var):
                var = Scope({u'delay':delay, u'count':count, u'arguments':arguments, u'invokeApply':invokeApply, u'this':this, u'fn':fn}, var)
                var.registers([u'count', u'setInterval', u'args', u'iteration', u'clearInterval', u'delay', u'deferred', u'hasParams', u'promise', u'invokeApply', u'skipApply', u'fn'])
                var.put(u'hasParams', (var.get(u'arguments').get(u'length')>Js(4.0)))
                var.put(u'args', (var.get(u'sliceArgs')(var.get(u'arguments'), Js(4.0)) if var.get(u'hasParams') else Js([])))
                var.put(u'setInterval', var.get(u'$window').get(u'setInterval'))
                var.put(u'clearInterval', var.get(u'$window').get(u'clearInterval'))
                var.put(u'iteration', Js(0.0))
                var.put(u'skipApply', (var.get(u'isDefined')(var.get(u'invokeApply')) and var.get(u'invokeApply').neg()))
                var.put(u'deferred', (var.get(u'$$q') if var.get(u'skipApply') else var.get(u'$q')).callprop(u'defer'))
                var.put(u'promise', var.get(u'deferred').get(u'promise'))
                var.put(u'count', (var.get(u'count') if var.get(u'isDefined')(var.get(u'count')) else Js(0.0)))
                @Js
                def PyJs_anonymous_420_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'fn').callprop(u'apply', var.get(u"null"), var.get(u'args'))
                PyJs_anonymous_420_._set_name(u'anonymous')
                var.get(u'promise').callprop(u'then', var.get(u"null"), var.get(u"null"), (var.get(u'fn') if var.get(u'hasParams').neg() else PyJs_anonymous_420_))
                @Js
                def PyJs_tick_421_(this, arguments, var=var):
                    var = Scope({u'this':this, u'tick':PyJs_tick_421_, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'deferred').callprop(u'notify', (var.put(u'iteration',var.get(u'iteration')+Js(1))-Js(1)))
                    if ((var.get(u'count')>Js(0.0)) and (var.get(u'iteration')>=var.get(u'count'))):
                        var.get(u'deferred').callprop(u'resolve', var.get(u'iteration'))
                        var.get(u'clearInterval')(var.get(u'promise').get(u'$$intervalId'))
                        var.get(u'intervals').delete(var.get(u'promise').get(u'$$intervalId'))
                    if var.get(u'skipApply').neg():
                        var.get(u'$rootScope').callprop(u'$apply')
                PyJs_tick_421_._set_name(u'tick')
                var.get(u'promise').put(u'$$intervalId', var.get(u'setInterval')(PyJs_tick_421_, var.get(u'delay')))
                var.get(u'intervals').put(var.get(u'promise').get(u'$$intervalId'), var.get(u'deferred'))
                return var.get(u'promise')
            PyJsHoisted_interval_.func_name = u'interval'
            var.put(u'interval', PyJsHoisted_interval_)
            PyJs_Object_419_ = Js({})
            var.put(u'intervals', PyJs_Object_419_)
            pass
            @Js
            def PyJs_anonymous_422_(promise, this, arguments, var=var):
                var = Scope({u'this':this, u'promise':promise, u'arguments':arguments}, var)
                var.registers([u'promise'])
                if (var.get(u'promise') and var.get(u'intervals').contains(var.get(u'promise').get(u'$$intervalId'))):
                    var.get(u'intervals').get(var.get(u'promise').get(u'$$intervalId')).callprop(u'reject', Js(u'canceled'))
                    var.get(u'$window').callprop(u'clearInterval', var.get(u'promise').get(u'$$intervalId'))
                    var.get(u'intervals').delete(var.get(u'promise').get(u'$$intervalId'))
                    return var.get(u'true')
                return Js(False)
            PyJs_anonymous_422_._set_name(u'anonymous')
            var.get(u'interval').put(u'cancel', PyJs_anonymous_422_)
            return var.get(u'interval')
        PyJs_anonymous_418_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$rootScope'), Js(u'$window'), Js(u'$q'), Js(u'$$q'), PyJs_anonymous_418_]))
    PyJsHoistedNonPyName.func_name = u'$IntervalProvider'
    var.put(u'$IntervalProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_assertArg_(arg, name, reason, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'reason':reason, u'name':name, u'arg':arg}, var)
        var.registers([u'reason', u'name', u'arg'])
        if var.get(u'arg').neg():
            PyJsTempException = JsToPyException(var.get(u'ngMinErr')(Js(u'areq'), Js(u"Argument '{0}' is {1}"), (var.get(u'name') or Js(u'?')), (var.get(u'reason') or Js(u'required'))))
            raise PyJsTempException
        return var.get(u'arg')
    PyJsHoisted_assertArg_.func_name = u'assertArg'
    var.put(u'assertArg', PyJsHoisted_assertArg_)
    @Js
    def PyJsHoisted_jqLiteData_(element, key, value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value, u'key':key, u'element':element}, var)
        var.registers([u'expandoStore', u'value', u'element', u'key', u'isSimpleSetter', u'massGetter', u'data', u'isSimpleGetter'])
        if var.get(u'jqLiteAcceptsData')(var.get(u'element')):
            var.put(u'isSimpleSetter', var.get(u'isDefined')(var.get(u'value')))
            var.put(u'isSimpleGetter', ((var.get(u'isSimpleSetter').neg() and var.get(u'key')) and var.get(u'isObject')(var.get(u'key')).neg()))
            var.put(u'massGetter', var.get(u'key').neg())
            var.put(u'expandoStore', var.get(u'jqLiteExpandoStore')(var.get(u'element'), var.get(u'isSimpleGetter').neg()))
            var.put(u'data', (var.get(u'expandoStore') and var.get(u'expandoStore').get(u'data')))
            if var.get(u'isSimpleSetter'):
                var.get(u'data').put(var.get(u'key'), var.get(u'value'))
            else:
                if var.get(u'massGetter'):
                    return var.get(u'data')
                else:
                    if var.get(u'isSimpleGetter'):
                        return (var.get(u'data') and var.get(u'data').get(var.get(u'key')))
                    else:
                        var.get(u'extend')(var.get(u'data'), var.get(u'key'))
    PyJsHoisted_jqLiteData_.func_name = u'jqLiteData'
    var.put(u'jqLiteData', PyJsHoisted_jqLiteData_)
    @Js
    def PyJsHoisted_createInjector_(modulesToLoad, strictDi, this, arguments, var=var):
        var = Scope({u'this':this, u'modulesToLoad':modulesToLoad, u'strictDi':strictDi, u'arguments':arguments}, var)
        var.registers([u'instanceInjector', u'strictDi', u'loadedModules', u'constant', u'createInternalInjector', u'service', u'enforceReturnValue', u'providerInjector', u'loadModules', u'providerCache', u'value', u'factory', u'supportObject', u'providerSuffix', u'modulesToLoad', u'INSTANTIATING', u'provider', u'instanceCache', u'path', u'decorator'])
        @Js
        def PyJsHoisted_constant_(name, value, this, arguments, var=var):
            var = Scope({u'this':this, u'name':name, u'value':value, u'arguments':arguments}, var)
            var.registers([u'name', u'value'])
            var.get(u'assertNotHasOwnProperty')(var.get(u'name'), Js(u'constant'))
            var.get(u'providerCache').put(var.get(u'name'), var.get(u'value'))
            var.get(u'instanceCache').put(var.get(u'name'), var.get(u'value'))
        PyJsHoisted_constant_.func_name = u'constant'
        var.put(u'constant', PyJsHoisted_constant_)
        @Js
        def PyJsHoisted_service_(name, constructor, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'constructor':constructor}, var)
            var.registers([u'name', u'constructor'])
            @Js
            def PyJs_anonymous_165_(PyJsArg_24696e6a6563746f72_, this, arguments, var=var):
                var = Scope({u'this':this, u'$injector':PyJsArg_24696e6a6563746f72_, u'arguments':arguments}, var)
                var.registers([u'$injector'])
                return var.get(u'$injector').callprop(u'instantiate', var.get(u'constructor'))
            PyJs_anonymous_165_._set_name(u'anonymous')
            return var.get(u'factory')(var.get(u'name'), Js([Js(u'$injector'), PyJs_anonymous_165_]))
        PyJsHoisted_service_.func_name = u'service'
        var.put(u'service', PyJsHoisted_service_)
        @Js
        def PyJsHoisted_enforceReturnValue_(name, factory, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'factory':factory}, var)
            var.registers([u'name', u'factory'])
            @Js
            def PyJs_enforcedReturnValue_163_(this, arguments, var=var):
                var = Scope({u'this':this, u'enforcedReturnValue':PyJs_enforcedReturnValue_163_, u'arguments':arguments}, var)
                var.registers([u'result'])
                var.put(u'result', var.get(u'instanceInjector').callprop(u'invoke', var.get(u'factory'), var.get(u"this")))
                if var.get(u'isUndefined')(var.get(u'result')):
                    PyJsTempException = JsToPyException(var.get(u'$injectorMinErr')(Js(u'undef'), Js(u"Provider '{0}' must return a value from $get factory method."), var.get(u'name')))
                    raise PyJsTempException
                return var.get(u'result')
            PyJs_enforcedReturnValue_163_._set_name(u'enforcedReturnValue')
            return PyJs_enforcedReturnValue_163_
        PyJsHoisted_enforceReturnValue_.func_name = u'enforceReturnValue'
        var.put(u'enforceReturnValue', PyJsHoisted_enforceReturnValue_)
        @Js
        def PyJsHoisted_loadModules_(modulesToLoad, this, arguments, var=var):
            var = Scope({u'this':this, u'modulesToLoad':modulesToLoad, u'arguments':arguments}, var)
            var.registers([u'runBlocks', u'modulesToLoad', u'moduleFn'])
            var.get(u'assertArg')((var.get(u'isUndefined')(var.get(u'modulesToLoad')) or var.get(u'isArray')(var.get(u'modulesToLoad'))), Js(u'modulesToLoad'), Js(u'not an array'))
            var.put(u'runBlocks', Js([]))
            @Js
            def PyJs_anonymous_168_(module, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'module':module}, var)
                var.registers([u'module', u'runInvokeQueue'])
                @Js
                def PyJsHoisted_runInvokeQueue_(queue, this, arguments, var=var):
                    var = Scope({u'queue':queue, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'i', u'ii', u'queue', u'invokeArgs', u'provider'])
                    pass
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'ii', var.get(u'queue').get(u'length')))
                    while (var.get(u'i')<var.get(u'ii')):
                        try:
                            var.put(u'invokeArgs', var.get(u'queue').get(var.get(u'i')))
                            var.put(u'provider', var.get(u'providerInjector').callprop(u'get', var.get(u'invokeArgs').get(u'0')))
                            var.get(u'provider').get(var.get(u'invokeArgs').get(u'1')).callprop(u'apply', var.get(u'provider'), var.get(u'invokeArgs').get(u'2'))
                        finally:
                                (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                PyJsHoisted_runInvokeQueue_.func_name = u'runInvokeQueue'
                var.put(u'runInvokeQueue', PyJsHoisted_runInvokeQueue_)
                if var.get(u'loadedModules').callprop(u'get', var.get(u'module')):
                    return var.get('undefined')
                var.get(u'loadedModules').callprop(u'put', var.get(u'module'), var.get(u'true'))
                pass
                try:
                    if var.get(u'isString')(var.get(u'module')):
                        var.put(u'moduleFn', var.get(u'angularModule')(var.get(u'module')))
                        var.put(u'runBlocks', var.get(u'runBlocks').callprop(u'concat', var.get(u'loadModules')(var.get(u'moduleFn').get(u'requires'))).callprop(u'concat', var.get(u'moduleFn').get(u'_runBlocks')))
                        var.get(u'runInvokeQueue')(var.get(u'moduleFn').get(u'_invokeQueue'))
                        var.get(u'runInvokeQueue')(var.get(u'moduleFn').get(u'_configBlocks'))
                    else:
                        if var.get(u'isFunction')(var.get(u'module')):
                            var.get(u'runBlocks').callprop(u'push', var.get(u'providerInjector').callprop(u'invoke', var.get(u'module')))
                        else:
                            if var.get(u'isArray')(var.get(u'module')):
                                var.get(u'runBlocks').callprop(u'push', var.get(u'providerInjector').callprop(u'invoke', var.get(u'module')))
                            else:
                                var.get(u'assertArgFn')(var.get(u'module'), Js(u'module'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_13393972 = var.own.get(u'e')
                    var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                    try:
                        if var.get(u'isArray')(var.get(u'module')):
                            var.put(u'module', var.get(u'module').get((var.get(u'module').get(u'length')-Js(1.0))))
                        if ((var.get(u'e').get(u'message') and var.get(u'e').get(u'stack')) and (var.get(u'e').get(u'stack').callprop(u'indexOf', var.get(u'e').get(u'message'))==(-Js(1.0)))):
                            var.put(u'e', ((var.get(u'e').get(u'message')+Js(u'\n'))+var.get(u'e').get(u'stack')))
                        PyJsTempException = JsToPyException(var.get(u'$injectorMinErr')(Js(u'modulerr'), Js(u'Failed to instantiate module {0} due to:\n{1}'), var.get(u'module'), ((var.get(u'e').get(u'stack') or var.get(u'e').get(u'message')) or var.get(u'e'))))
                        raise PyJsTempException
                    finally:
                        if PyJsHolder_65_13393972 is not None:
                            var.own[u'e'] = PyJsHolder_65_13393972
                        else:
                            del var.own[u'e']
                        del PyJsHolder_65_13393972
            PyJs_anonymous_168_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'modulesToLoad'), PyJs_anonymous_168_)
            return var.get(u'runBlocks')
        PyJsHoisted_loadModules_.func_name = u'loadModules'
        var.put(u'loadModules', PyJsHoisted_loadModules_)
        @Js
        def PyJsHoisted_factory_(name, factoryFn, enforce, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'enforce':enforce, u'name':name, u'factoryFn':factoryFn}, var)
            var.registers([u'enforce', u'name', u'factoryFn'])
            PyJs_Object_164_ = Js({u'$get':(var.get(u'enforceReturnValue')(var.get(u'name'), var.get(u'factoryFn')) if PyJsStrictNeq(var.get(u'enforce'),Js(False)) else var.get(u'factoryFn'))})
            return var.get(u'provider')(var.get(u'name'), PyJs_Object_164_)
        PyJsHoisted_factory_.func_name = u'factory'
        var.put(u'factory', PyJsHoisted_factory_)
        @Js
        def PyJsHoisted_value_(name, val, this, arguments, var=var):
            var = Scope({u'this':this, u'name':name, u'val':val, u'arguments':arguments}, var)
            var.registers([u'name', u'val'])
            return var.get(u'factory')(var.get(u'name'), var.get(u'valueFn')(var.get(u'val')), Js(False))
        PyJsHoisted_value_.func_name = u'value'
        var.put(u'value', PyJsHoisted_value_)
        @Js
        def PyJsHoisted_createInternalInjector_(cache, factory, this, arguments, var=var):
            var = Scope({u'this':this, u'cache':cache, u'factory':factory, u'arguments':arguments}, var)
            var.registers([u'cache', u'instantiate', u'factory', u'invoke', u'getService'])
            @Js
            def PyJsHoisted_instantiate_(Type, locals, serviceName, this, arguments, var=var):
                var = Scope({u'this':this, u'serviceName':serviceName, u'Type':Type, u'arguments':arguments, u'locals':locals}, var)
                var.registers([u'instance', u'serviceName', u'Type', u'locals', u'returnedValue'])
                var.put(u'instance', var.get(u'Object').callprop(u'create', ((var.get(u'Type').get((var.get(u'Type').get(u'length')-Js(1.0))) if var.get(u'isArray')(var.get(u'Type')) else var.get(u'Type')).get(u'prototype') or var.get(u"null"))))
                var.put(u'returnedValue', var.get(u'invoke')(var.get(u'Type'), var.get(u'instance'), var.get(u'locals'), var.get(u'serviceName')))
                return (var.get(u'returnedValue') if (var.get(u'isObject')(var.get(u'returnedValue')) or var.get(u'isFunction')(var.get(u'returnedValue'))) else var.get(u'instance'))
            PyJsHoisted_instantiate_.func_name = u'instantiate'
            var.put(u'instantiate', PyJsHoisted_instantiate_)
            @Js
            def PyJsHoisted_invoke_(fn, self, locals, serviceName, this, arguments, var=var):
                var = Scope({u'serviceName':serviceName, u'fn':fn, u'this':this, u'self':self, u'locals':locals, u'arguments':arguments}, var)
                var.registers([u'i', u'self', u'args', u'length', u'serviceName', u'locals', u'key', u'$inject', u'fn'])
                if PyJsStrictEq(var.get(u'locals',throw=False).typeof(),Js(u'string')):
                    var.put(u'serviceName', var.get(u'locals'))
                    var.put(u'locals', var.get(u"null"))
                var.put(u'args', Js([]))
                var.put(u'$inject', var.get(u'createInjector').callprop(u'$$annotate', var.get(u'fn'), var.get(u'strictDi'), var.get(u'serviceName')))
                #for JS loop
                PyJsComma(var.put(u'i', Js(0.0)),var.put(u'length', var.get(u'$inject').get(u'length')))
                while (var.get(u'i')<var.get(u'length')):
                    try:
                        var.put(u'key', var.get(u'$inject').get(var.get(u'i')))
                        if PyJsStrictNeq(var.get(u'key',throw=False).typeof(),Js(u'string')):
                            PyJsTempException = JsToPyException(var.get(u'$injectorMinErr')(Js(u'itkn'), Js(u'Incorrect injection token! Expected service name as string, got {0}'), var.get(u'key')))
                            raise PyJsTempException
                        var.get(u'args').callprop(u'push', (var.get(u'locals').get(var.get(u'key')) if (var.get(u'locals') and var.get(u'locals').callprop(u'hasOwnProperty', var.get(u'key'))) else var.get(u'getService')(var.get(u'key'), var.get(u'serviceName'))))
                    finally:
                            (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                if var.get(u'isArray')(var.get(u'fn')):
                    var.put(u'fn', var.get(u'fn').get(var.get(u'length')))
                return var.get(u'fn').callprop(u'apply', var.get(u'self'), var.get(u'args'))
            PyJsHoisted_invoke_.func_name = u'invoke'
            var.put(u'invoke', PyJsHoisted_invoke_)
            @Js
            def PyJsHoisted_getService_(serviceName, caller, this, arguments, var=var):
                var = Scope({u'this':this, u'serviceName':serviceName, u'caller':caller, u'arguments':arguments}, var)
                var.registers([u'serviceName', u'caller'])
                if var.get(u'cache').callprop(u'hasOwnProperty', var.get(u'serviceName')):
                    if PyJsStrictEq(var.get(u'cache').get(var.get(u'serviceName')),var.get(u'INSTANTIATING')):
                        PyJsTempException = JsToPyException(var.get(u'$injectorMinErr')(Js(u'cdep'), Js(u'Circular dependency found: {0}'), ((var.get(u'serviceName')+Js(u' <- '))+var.get(u'path').callprop(u'join', Js(u' <- ')))))
                        raise PyJsTempException
                    return var.get(u'cache').get(var.get(u'serviceName'))
                else:
                    try:
                        var.get(u'path').callprop(u'unshift', var.get(u'serviceName'))
                        var.get(u'cache').put(var.get(u'serviceName'), var.get(u'INSTANTIATING'))
                        return var.get(u'cache').put(var.get(u'serviceName'), var.get(u'factory')(var.get(u'serviceName'), var.get(u'caller')))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_657272_73220180 = var.own.get(u'err')
                        var.force_own_put(u'err', PyExceptionToJs(PyJsTempException))
                        try:
                            if PyJsStrictEq(var.get(u'cache').get(var.get(u'serviceName')),var.get(u'INSTANTIATING')):
                                var.get(u'cache').delete(var.get(u'serviceName'))
                            PyJsTempException = JsToPyException(var.get(u'err'))
                            raise PyJsTempException
                        finally:
                            if PyJsHolder_657272_73220180 is not None:
                                var.own[u'err'] = PyJsHolder_657272_73220180
                            else:
                                del var.own[u'err']
                            del PyJsHolder_657272_73220180
                    finally:
                        var.get(u'path').callprop(u'shift')
            PyJsHoisted_getService_.func_name = u'getService'
            var.put(u'getService', PyJsHoisted_getService_)
            pass
            pass
            pass
            @Js
            def PyJs_anonymous_170_(name, this, arguments, var=var):
                var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
                var.registers([u'name'])
                return (var.get(u'providerCache').callprop(u'hasOwnProperty', (var.get(u'name')+var.get(u'providerSuffix'))) or var.get(u'cache').callprop(u'hasOwnProperty', var.get(u'name')))
            PyJs_anonymous_170_._set_name(u'anonymous')
            PyJs_Object_169_ = Js({u'invoke':var.get(u'invoke'),u'instantiate':var.get(u'instantiate'),u'get':var.get(u'getService'),u'annotate':var.get(u'createInjector').get(u'$$annotate'),u'has':PyJs_anonymous_170_})
            return PyJs_Object_169_
        PyJsHoisted_createInternalInjector_.func_name = u'createInternalInjector'
        var.put(u'createInternalInjector', PyJsHoisted_createInternalInjector_)
        @Js
        def PyJsHoisted_supportObject_(delegate, this, arguments, var=var):
            var = Scope({u'this':this, u'delegate':delegate, u'arguments':arguments}, var)
            var.registers([u'delegate'])
            @Js
            def PyJs_anonymous_162_(key, value, this, arguments, var=var):
                var = Scope({u'this':this, u'value':value, u'key':key, u'arguments':arguments}, var)
                var.registers([u'value', u'key'])
                if var.get(u'isObject')(var.get(u'key')):
                    var.get(u'forEach')(var.get(u'key'), var.get(u'reverseParams')(var.get(u'delegate')))
                else:
                    return var.get(u'delegate')(var.get(u'key'), var.get(u'value'))
            PyJs_anonymous_162_._set_name(u'anonymous')
            return PyJs_anonymous_162_
        PyJsHoisted_supportObject_.func_name = u'supportObject'
        var.put(u'supportObject', PyJsHoisted_supportObject_)
        @Js
        def PyJsHoisted_provider_(name, provider_, this, arguments, var=var):
            var = Scope({u'this':this, u'provider_':provider_, u'name':name, u'arguments':arguments}, var)
            var.registers([u'provider_', u'name'])
            var.get(u'assertNotHasOwnProperty')(var.get(u'name'), Js(u'service'))
            if (var.get(u'isFunction')(var.get(u'provider_')) or var.get(u'isArray')(var.get(u'provider_'))):
                var.put(u'provider_', var.get(u'providerInjector').callprop(u'instantiate', var.get(u'provider_')))
            if var.get(u'provider_').get(u'$get').neg():
                PyJsTempException = JsToPyException(var.get(u'$injectorMinErr')(Js(u'pget'), Js(u"Provider '{0}' must define $get factory method."), var.get(u'name')))
                raise PyJsTempException
            return var.get(u'providerCache').put((var.get(u'name')+var.get(u'providerSuffix')), var.get(u'provider_'))
        PyJsHoisted_provider_.func_name = u'provider'
        var.put(u'provider', PyJsHoisted_provider_)
        @Js
        def PyJsHoisted_decorator_(serviceName, decorFn, this, arguments, var=var):
            var = Scope({u'decorFn':decorFn, u'this':this, u'serviceName':serviceName, u'arguments':arguments}, var)
            var.registers([u'decorFn', u'serviceName', u'orig$get', u'origProvider'])
            var.put(u'origProvider', var.get(u'providerInjector').callprop(u'get', (var.get(u'serviceName')+var.get(u'providerSuffix'))))
            var.put(u'orig$get', var.get(u'origProvider').get(u'$get'))
            @Js
            def PyJs_anonymous_166_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'origInstance'])
                var.put(u'origInstance', var.get(u'instanceInjector').callprop(u'invoke', var.get(u'orig$get'), var.get(u'origProvider')))
                PyJs_Object_167_ = Js({u'$delegate':var.get(u'origInstance')})
                return var.get(u'instanceInjector').callprop(u'invoke', var.get(u'decorFn'), var.get(u"null"), PyJs_Object_167_)
            PyJs_anonymous_166_._set_name(u'anonymous')
            var.get(u'origProvider').put(u'$get', PyJs_anonymous_166_)
        PyJsHoisted_decorator_.func_name = u'decorator'
        var.put(u'decorator', PyJsHoisted_decorator_)
        var.put(u'strictDi', PyJsStrictEq(var.get(u'strictDi'),var.get(u'true')))
        PyJs_Object_155_ = Js({})
        var.put(u'INSTANTIATING', PyJs_Object_155_)
        var.put(u'providerSuffix', Js(u'Provider'))
        var.put(u'path', Js([]))
        var.put(u'loadedModules', var.get(u'HashMap').create(Js([]), var.get(u'true')))
        PyJs_Object_157_ = Js({u'provider':var.get(u'supportObject')(var.get(u'provider')),u'factory':var.get(u'supportObject')(var.get(u'factory')),u'service':var.get(u'supportObject')(var.get(u'service')),u'value':var.get(u'supportObject')(var.get(u'value')),u'constant':var.get(u'supportObject')(var.get(u'constant')),u'decorator':var.get(u'decorator')})
        PyJs_Object_156_ = Js({u'$provide':PyJs_Object_157_})
        var.put(u'providerCache', PyJs_Object_156_)
        @Js
        def PyJs_anonymous_158_(serviceName, caller, this, arguments, var=var):
            var = Scope({u'this':this, u'serviceName':serviceName, u'caller':caller, u'arguments':arguments}, var)
            var.registers([u'serviceName', u'caller'])
            if var.get(u'angular').callprop(u'isString', var.get(u'caller')):
                var.get(u'path').callprop(u'push', var.get(u'caller'))
            PyJsTempException = JsToPyException(var.get(u'$injectorMinErr')(Js(u'unpr'), Js(u'Unknown provider: {0}'), var.get(u'path').callprop(u'join', Js(u' <- '))))
            raise PyJsTempException
        PyJs_anonymous_158_._set_name(u'anonymous')
        var.put(u'providerInjector', var.get(u'providerCache').put(u'$injector', var.get(u'createInternalInjector')(var.get(u'providerCache'), PyJs_anonymous_158_)))
        PyJs_Object_159_ = Js({})
        var.put(u'instanceCache', PyJs_Object_159_)
        @Js
        def PyJs_anonymous_160_(serviceName, caller, this, arguments, var=var):
            var = Scope({u'this':this, u'serviceName':serviceName, u'caller':caller, u'arguments':arguments}, var)
            var.registers([u'serviceName', u'caller', u'provider'])
            var.put(u'provider', var.get(u'providerInjector').callprop(u'get', (var.get(u'serviceName')+var.get(u'providerSuffix')), var.get(u'caller')))
            return var.get(u'instanceInjector').callprop(u'invoke', var.get(u'provider').get(u'$get'), var.get(u'provider'), var.get(u'undefined'), var.get(u'serviceName'))
        PyJs_anonymous_160_._set_name(u'anonymous')
        var.put(u'instanceInjector', var.get(u'instanceCache').put(u'$injector', var.get(u'createInternalInjector')(var.get(u'instanceCache'), PyJs_anonymous_160_)))
        @Js
        def PyJs_anonymous_161_(fn, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'fn':fn}, var)
            var.registers([u'fn'])
            if var.get(u'fn'):
                var.get(u'instanceInjector').callprop(u'invoke', var.get(u'fn'))
        PyJs_anonymous_161_._set_name(u'anonymous')
        var.get(u'forEach')(var.get(u'loadModules')(var.get(u'modulesToLoad')), PyJs_anonymous_161_)
        return var.get(u'instanceInjector')
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
    PyJsHoisted_createInjector_.func_name = u'createInjector'
    var.put(u'createInjector', PyJsHoisted_createInjector_)
    @Js
    def PyJsHoisted_isString_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        return PyJsStrictEq(var.get(u'value',throw=False).typeof(),Js(u'string'))
    PyJsHoisted_isString_.func_name = u'isString'
    var.put(u'isString', PyJsHoisted_isString_)
    @Js
    def PyJsHoisted_getFirstThursdayOfYear_(year, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'year':year}, var)
        var.registers([u'dayOfWeekOnFirst', u'year'])
        var.put(u'dayOfWeekOnFirst', var.get(u'Date').create(var.get(u'year'), Js(0.0), Js(1.0)).callprop(u'getDay'))
        return var.get(u'Date').create(var.get(u'year'), Js(0.0), ((Js(5.0) if (var.get(u'dayOfWeekOnFirst')<=Js(4.0)) else Js(12.0))-var.get(u'dayOfWeekOnFirst')))
    PyJsHoisted_getFirstThursdayOfYear_.func_name = u'getFirstThursdayOfYear'
    var.put(u'getFirstThursdayOfYear', PyJsHoisted_getFirstThursdayOfYear_)
    @Js
    def PyJsHoisted_filterFilter_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_885_(array, expression, comparator, this, arguments, var=var):
            var = Scope({u'this':this, u'array':array, u'expression':expression, u'arguments':arguments, u'comparator':comparator}, var)
            var.registers([u'comparator', u'expressionType', u'predicateFn', u'array', u'expression', u'matchAgainstAnyProp'])
            if var.get(u'isArrayLike')(var.get(u'array')).neg():
                if (var.get(u'array')==var.get(u"null")):
                    return var.get(u'array')
                else:
                    PyJsTempException = JsToPyException(var.get(u'minErr')(Js(u'filter'))(Js(u'notarray'), Js(u'Expected array but received: {0}'), var.get(u'array')))
                    raise PyJsTempException
            var.put(u'expressionType', var.get(u'getTypeForFilter')(var.get(u'expression')))
            pass
            pass
            while 1:
                SWITCHED = False
                CONDITION = (var.get(u'expressionType'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'function')):
                    SWITCHED = True
                    var.put(u'predicateFn', var.get(u'expression'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'boolean')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'null')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'number')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'string')):
                    SWITCHED = True
                    var.put(u'matchAgainstAnyProp', var.get(u'true'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'object')):
                    SWITCHED = True
                    var.put(u'predicateFn', var.get(u'createPredicateFn')(var.get(u'expression'), var.get(u'comparator'), var.get(u'matchAgainstAnyProp')))
                    break
                if True:
                    SWITCHED = True
                    return var.get(u'array')
                SWITCHED = True
                break
            return var.get(u'Array').get(u'prototype').get(u'filter').callprop(u'call', var.get(u'array'), var.get(u'predicateFn'))
        PyJs_anonymous_885_._set_name(u'anonymous')
        return PyJs_anonymous_885_
    PyJsHoisted_filterFilter_.func_name = u'filterFilter'
    var.put(u'filterFilter', PyJsHoisted_filterFilter_)
    @Js
    def PyJsHoisted_findConstantAndWatchExpressions_(ast, PyJsArg_2466696c746572_, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'$filter':PyJsArg_2466696c746572_, u'ast':ast}, var)
        var.registers([u'allConstants', u'$filter', u'argsToWatch', u'ast'])
        pass
        pass
        while 1:
            SWITCHED = False
            CONDITION = (var.get(u'ast').get(u'type'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'Program')):
                SWITCHED = True
                var.put(u'allConstants', var.get(u'true'))
                @Js
                def PyJs_anonymous_538_(expr, this, arguments, var=var):
                    var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                    var.registers([u'expr'])
                    var.get(u'findConstantAndWatchExpressions')(var.get(u'expr').get(u'expression'), var.get(u'$filter'))
                    var.put(u'allConstants', (var.get(u'allConstants') and var.get(u'expr').get(u'expression').get(u'constant')))
                PyJs_anonymous_538_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'ast').get(u'body'), PyJs_anonymous_538_)
                var.get(u'ast').put(u'constant', var.get(u'allConstants'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'Literal')):
                SWITCHED = True
                var.get(u'ast').put(u'constant', var.get(u'true'))
                var.get(u'ast').put(u'toWatch', Js([]))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'UnaryExpression')):
                SWITCHED = True
                var.get(u'findConstantAndWatchExpressions')(var.get(u'ast').get(u'argument'), var.get(u'$filter'))
                var.get(u'ast').put(u'constant', var.get(u'ast').get(u'argument').get(u'constant'))
                var.get(u'ast').put(u'toWatch', var.get(u'ast').get(u'argument').get(u'toWatch'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'BinaryExpression')):
                SWITCHED = True
                var.get(u'findConstantAndWatchExpressions')(var.get(u'ast').get(u'left'), var.get(u'$filter'))
                var.get(u'findConstantAndWatchExpressions')(var.get(u'ast').get(u'right'), var.get(u'$filter'))
                var.get(u'ast').put(u'constant', (var.get(u'ast').get(u'left').get(u'constant') and var.get(u'ast').get(u'right').get(u'constant')))
                var.get(u'ast').put(u'toWatch', var.get(u'ast').get(u'left').get(u'toWatch').callprop(u'concat', var.get(u'ast').get(u'right').get(u'toWatch')))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'LogicalExpression')):
                SWITCHED = True
                var.get(u'findConstantAndWatchExpressions')(var.get(u'ast').get(u'left'), var.get(u'$filter'))
                var.get(u'findConstantAndWatchExpressions')(var.get(u'ast').get(u'right'), var.get(u'$filter'))
                var.get(u'ast').put(u'constant', (var.get(u'ast').get(u'left').get(u'constant') and var.get(u'ast').get(u'right').get(u'constant')))
                var.get(u'ast').put(u'toWatch', (Js([]) if var.get(u'ast').get(u'constant') else Js([var.get(u'ast')])))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'ConditionalExpression')):
                SWITCHED = True
                var.get(u'findConstantAndWatchExpressions')(var.get(u'ast').get(u'test'), var.get(u'$filter'))
                var.get(u'findConstantAndWatchExpressions')(var.get(u'ast').get(u'alternate'), var.get(u'$filter'))
                var.get(u'findConstantAndWatchExpressions')(var.get(u'ast').get(u'consequent'), var.get(u'$filter'))
                var.get(u'ast').put(u'constant', ((var.get(u'ast').get(u'test').get(u'constant') and var.get(u'ast').get(u'alternate').get(u'constant')) and var.get(u'ast').get(u'consequent').get(u'constant')))
                var.get(u'ast').put(u'toWatch', (Js([]) if var.get(u'ast').get(u'constant') else Js([var.get(u'ast')])))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'Identifier')):
                SWITCHED = True
                var.get(u'ast').put(u'constant', Js(False))
                var.get(u'ast').put(u'toWatch', Js([var.get(u'ast')]))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'MemberExpression')):
                SWITCHED = True
                var.get(u'findConstantAndWatchExpressions')(var.get(u'ast').get(u'object'), var.get(u'$filter'))
                if var.get(u'ast').get(u'computed'):
                    var.get(u'findConstantAndWatchExpressions')(var.get(u'ast').get(u'property'), var.get(u'$filter'))
                var.get(u'ast').put(u'constant', (var.get(u'ast').get(u'object').get(u'constant') and (var.get(u'ast').get(u'computed').neg() or var.get(u'ast').get(u'property').get(u'constant'))))
                var.get(u'ast').put(u'toWatch', Js([var.get(u'ast')]))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'CallExpression')):
                SWITCHED = True
                var.put(u'allConstants', (var.get(u'isStateless')(var.get(u'$filter'), var.get(u'ast').get(u'callee').get(u'name')) if var.get(u'ast').get(u'filter') else Js(False)))
                var.put(u'argsToWatch', Js([]))
                @Js
                def PyJs_anonymous_539_(expr, this, arguments, var=var):
                    var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                    var.registers([u'expr'])
                    var.get(u'findConstantAndWatchExpressions')(var.get(u'expr'), var.get(u'$filter'))
                    var.put(u'allConstants', (var.get(u'allConstants') and var.get(u'expr').get(u'constant')))
                    if var.get(u'expr').get(u'constant').neg():
                        var.get(u'argsToWatch').get(u'push').callprop(u'apply', var.get(u'argsToWatch'), var.get(u'expr').get(u'toWatch'))
                PyJs_anonymous_539_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'ast').get(u'arguments'), PyJs_anonymous_539_)
                var.get(u'ast').put(u'constant', var.get(u'allConstants'))
                var.get(u'ast').put(u'toWatch', (var.get(u'argsToWatch') if (var.get(u'ast').get(u'filter') and var.get(u'isStateless')(var.get(u'$filter'), var.get(u'ast').get(u'callee').get(u'name'))) else Js([var.get(u'ast')])))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'AssignmentExpression')):
                SWITCHED = True
                var.get(u'findConstantAndWatchExpressions')(var.get(u'ast').get(u'left'), var.get(u'$filter'))
                var.get(u'findConstantAndWatchExpressions')(var.get(u'ast').get(u'right'), var.get(u'$filter'))
                var.get(u'ast').put(u'constant', (var.get(u'ast').get(u'left').get(u'constant') and var.get(u'ast').get(u'right').get(u'constant')))
                var.get(u'ast').put(u'toWatch', Js([var.get(u'ast')]))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'ArrayExpression')):
                SWITCHED = True
                var.put(u'allConstants', var.get(u'true'))
                var.put(u'argsToWatch', Js([]))
                @Js
                def PyJs_anonymous_540_(expr, this, arguments, var=var):
                    var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                    var.registers([u'expr'])
                    var.get(u'findConstantAndWatchExpressions')(var.get(u'expr'), var.get(u'$filter'))
                    var.put(u'allConstants', (var.get(u'allConstants') and var.get(u'expr').get(u'constant')))
                    if var.get(u'expr').get(u'constant').neg():
                        var.get(u'argsToWatch').get(u'push').callprop(u'apply', var.get(u'argsToWatch'), var.get(u'expr').get(u'toWatch'))
                PyJs_anonymous_540_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'ast').get(u'elements'), PyJs_anonymous_540_)
                var.get(u'ast').put(u'constant', var.get(u'allConstants'))
                var.get(u'ast').put(u'toWatch', var.get(u'argsToWatch'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'ObjectExpression')):
                SWITCHED = True
                var.put(u'allConstants', var.get(u'true'))
                var.put(u'argsToWatch', Js([]))
                @Js
                def PyJs_anonymous_541_(property, this, arguments, var=var):
                    var = Scope({u'this':this, u'property':property, u'arguments':arguments}, var)
                    var.registers([u'property'])
                    var.get(u'findConstantAndWatchExpressions')(var.get(u'property').get(u'value'), var.get(u'$filter'))
                    var.put(u'allConstants', (var.get(u'allConstants') and var.get(u'property').get(u'value').get(u'constant')))
                    if var.get(u'property').get(u'value').get(u'constant').neg():
                        var.get(u'argsToWatch').get(u'push').callprop(u'apply', var.get(u'argsToWatch'), var.get(u'property').get(u'value').get(u'toWatch'))
                PyJs_anonymous_541_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'ast').get(u'properties'), PyJs_anonymous_541_)
                var.get(u'ast').put(u'constant', var.get(u'allConstants'))
                var.get(u'ast').put(u'toWatch', var.get(u'argsToWatch'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'ThisExpression')):
                SWITCHED = True
                var.get(u'ast').put(u'constant', Js(False))
                var.get(u'ast').put(u'toWatch', Js([]))
                break
            SWITCHED = True
            break
    PyJsHoisted_findConstantAndWatchExpressions_.func_name = u'findConstantAndWatchExpressions'
    var.put(u'findConstantAndWatchExpressions', PyJsHoisted_findConstantAndWatchExpressions_)
    @Js
    def PyJsHoisted_isDefined_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        return PyJsStrictNeq(var.get(u'value',throw=False).typeof(),Js(u'undefined'))
    PyJsHoisted_isDefined_.func_name = u'isDefined'
    var.put(u'isDefined', PyJsHoisted_isDefined_)
    @Js
    def PyJsHoisted_minErr_(module, ErrorConstructor, this, arguments, var=var):
        var = Scope({u'this':this, u'ErrorConstructor':ErrorConstructor, u'arguments':arguments, u'module':module}, var)
        var.registers([u'ErrorConstructor', u'module'])
        var.put(u'ErrorConstructor', (var.get(u'ErrorConstructor') or var.get(u'Error')))
        @Js
        def PyJs_anonymous_1_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'code', u'i', u'SKIP_INDEXES', u'paramPrefix', u'templateArgs', u'template', u'message'])
            var.put(u'SKIP_INDEXES', Js(2.0))
            var.put(u'templateArgs', var.get(u'arguments'))
            var.put(u'code', var.get(u'templateArgs').get(u'0'))
            var.put(u'message', (((Js(u'[')+((var.get(u'module')+Js(u':')) if var.get(u'module') else Js(u'')))+var.get(u'code'))+Js(u'] ')))
            var.put(u'template', var.get(u'templateArgs').get(u'1'))
            @Js
            def PyJs_anonymous_2_(match, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'match':match}, var)
                var.registers([u'index', u'shiftedIndex', u'match'])
                var.put(u'index', (+var.get(u'match').callprop(u'slice', Js(1.0), (-Js(1.0)))))
                var.put(u'shiftedIndex', (var.get(u'index')+var.get(u'SKIP_INDEXES')))
                if (var.get(u'shiftedIndex')<var.get(u'templateArgs').get(u'length')):
                    return var.get(u'toDebugString')(var.get(u'templateArgs').get(var.get(u'shiftedIndex')))
                return var.get(u'match')
            PyJs_anonymous_2_._set_name(u'anonymous')
            var.put(u'message', var.get(u'template').callprop(u'replace', JsRegExp(u'/\\{\\d+\\}/g'), PyJs_anonymous_2_), u'+')
            var.put(u'message', ((Js(u'\nhttp://errors.angularjs.org/1.4.8/')+((var.get(u'module')+Js(u'/')) if var.get(u'module') else Js(u'')))+var.get(u'code')), u'+')
            #for JS loop
            PyJsComma(var.put(u'i', var.get(u'SKIP_INDEXES')),var.put(u'paramPrefix', Js(u'?')))
            while (var.get(u'i')<var.get(u'templateArgs').get(u'length')):
                try:
                    var.put(u'message', ((((var.get(u'paramPrefix')+Js(u'p'))+(var.get(u'i')-var.get(u'SKIP_INDEXES')))+Js(u'='))+var.get(u'encodeURIComponent')(var.get(u'toDebugString')(var.get(u'templateArgs').get(var.get(u'i'))))), u'+')
                finally:
                        PyJsComma((var.put(u'i',var.get(u'i')+Js(1))-Js(1)),var.put(u'paramPrefix', Js(u'&')))
            return var.get(u'ErrorConstructor').create(var.get(u'message'))
        PyJs_anonymous_1_._set_name(u'anonymous')
        return PyJs_anonymous_1_
    PyJsHoisted_minErr_.func_name = u'minErr'
    var.put(u'minErr', PyJsHoisted_minErr_)
    @Js
    def PyJsHoisted_merge_(dst, this, arguments, var=var):
        var = Scope({u'this':this, u'dst':dst, u'arguments':arguments}, var)
        var.registers([u'dst'])
        return var.get(u'baseExtend')(var.get(u'dst'), var.get(u'slice').callprop(u'call', var.get(u'arguments'), Js(1.0)), var.get(u'true'))
    PyJsHoisted_merge_.func_name = u'merge'
    var.put(u'merge', PyJsHoisted_merge_)
    @Js
    def PyJsHoisted_createPredicateFn_(expression, comparator, matchAgainstAnyProp, this, arguments, var=var):
        var = Scope({u'this':this, u'expression':expression, u'matchAgainstAnyProp':matchAgainstAnyProp, u'comparator':comparator, u'arguments':arguments}, var)
        var.registers([u'predicateFn', u'shouldMatchPrimitives', u'expression', u'matchAgainstAnyProp', u'comparator'])
        var.put(u'shouldMatchPrimitives', (var.get(u'isObject')(var.get(u'expression')) and var.get(u'expression').contains(Js(u'$'))))
        pass
        if PyJsStrictEq(var.get(u'comparator'),var.get(u'true')):
            var.put(u'comparator', var.get(u'equals'))
        else:
            if var.get(u'isFunction')(var.get(u'comparator')).neg():
                @Js
                def PyJs_anonymous_886_(actual, expected, this, arguments, var=var):
                    var = Scope({u'expected':expected, u'this':this, u'actual':actual, u'arguments':arguments}, var)
                    var.registers([u'expected', u'actual'])
                    if var.get(u'isUndefined')(var.get(u'actual')):
                        return Js(False)
                    if (PyJsStrictEq(var.get(u'actual'),var.get(u"null")) or PyJsStrictEq(var.get(u'expected'),var.get(u"null"))):
                        return PyJsStrictEq(var.get(u'actual'),var.get(u'expected'))
                    if (var.get(u'isObject')(var.get(u'expected')) or (var.get(u'isObject')(var.get(u'actual')) and var.get(u'hasCustomToString')(var.get(u'actual')).neg())):
                        return Js(False)
                    var.put(u'actual', var.get(u'lowercase')((Js(u'')+var.get(u'actual'))))
                    var.put(u'expected', var.get(u'lowercase')((Js(u'')+var.get(u'expected'))))
                    return PyJsStrictNeq(var.get(u'actual').callprop(u'indexOf', var.get(u'expected')),(-Js(1.0)))
                PyJs_anonymous_886_._set_name(u'anonymous')
                var.put(u'comparator', PyJs_anonymous_886_)
        @Js
        def PyJs_anonymous_887_(item, this, arguments, var=var):
            var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
            var.registers([u'item'])
            if (var.get(u'shouldMatchPrimitives') and var.get(u'isObject')(var.get(u'item')).neg()):
                return var.get(u'deepCompare')(var.get(u'item'), var.get(u'expression').get(u'$'), var.get(u'comparator'), Js(False))
            return var.get(u'deepCompare')(var.get(u'item'), var.get(u'expression'), var.get(u'comparator'), var.get(u'matchAgainstAnyProp'))
        PyJs_anonymous_887_._set_name(u'anonymous')
        var.put(u'predicateFn', PyJs_anonymous_887_)
        return var.get(u'predicateFn')
    PyJsHoisted_createPredicateFn_.func_name = u'createPredicateFn'
    var.put(u'createPredicateFn', PyJsHoisted_createPredicateFn_)
    @Js
    def PyJsHoisted_encodeUriQuery_(val, pctEncodeSpaces, this, arguments, var=var):
        var = Scope({u'this':this, u'pctEncodeSpaces':pctEncodeSpaces, u'arguments':arguments, u'val':val}, var)
        var.registers([u'pctEncodeSpaces', u'val'])
        def PyJs_LONG_29_(var=var):
            return var.get(u'encodeURIComponent')(var.get(u'val')).callprop(u'replace', JsRegExp(u'/%40/gi'), Js(u'@')).callprop(u'replace', JsRegExp(u'/%3A/gi'), Js(u':')).callprop(u'replace', JsRegExp(u'/%24/g'), Js(u'$')).callprop(u'replace', JsRegExp(u'/%2C/gi'), Js(u',')).callprop(u'replace', JsRegExp(u'/%3B/gi'), Js(u';')).callprop(u'replace', JsRegExp(u'/%20/g'), (Js(u'%20') if var.get(u'pctEncodeSpaces') else Js(u'+')))
        return PyJs_LONG_29_()
    PyJsHoisted_encodeUriQuery_.func_name = u'encodeUriQuery'
    var.put(u'encodeUriQuery', PyJsHoisted_encodeUriQuery_)
    @Js
    def PyJsHoisted_directiveLinkingFn_(nodesetLinkingFn, scope, node, rootElement, boundTranscludeFn, this, arguments, var=var):
        var = Scope({u'node':node, u'boundTranscludeFn':boundTranscludeFn, u'arguments':arguments, u'nodesetLinkingFn':nodesetLinkingFn, u'scope':scope, u'rootElement':rootElement, u'this':this}, var)
        var.registers([u'nodesetLinkingFn', u'scope', u'rootElement', u'node', u'boundTranscludeFn'])
        pass
    PyJsHoisted_directiveLinkingFn_.func_name = u'directiveLinkingFn'
    var.put(u'directiveLinkingFn', PyJsHoisted_directiveLinkingFn_)
    @Js
    def PyJsHoisted_nullFormRenameControl_(control, name, this, arguments, var=var):
        var = Scope({u'control':control, u'this':this, u'name':name, u'arguments':arguments}, var)
        var.registers([u'control', u'name'])
        var.get(u'control').put(u'$name', var.get(u'name'))
    PyJsHoisted_nullFormRenameControl_.func_name = u'nullFormRenameControl'
    var.put(u'nullFormRenameControl', PyJsHoisted_nullFormRenameControl_)
    @Js
    def PyJsHoisted_trimEmptyHash_(url, this, arguments, var=var):
        var = Scope({u'url':url, u'this':this, u'arguments':arguments}, var)
        var.registers([u'url'])
        return var.get(u'url').callprop(u'replace', JsRegExp(u'/(#.+)|#$/'), Js(u'$1'))
    PyJsHoisted_trimEmptyHash_.func_name = u'trimEmptyHash'
    var.put(u'trimEmptyHash', PyJsHoisted_trimEmptyHash_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'$rootScopeMinErr', u'createChildScopeClass', u'lastDirtyWatch', u'applyAsyncId', u'TTL'])
        @Js
        def PyJsHoisted_createChildScopeClass_(parent, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'parent':parent}, var)
            var.registers([u'ChildScope', u'parent'])
            @Js
            def PyJsHoisted_ChildScope_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                var.get(u"this").put(u'$$watchers', var.get(u"this").put(u'$$nextSibling', var.get(u"this").put(u'$$childHead', var.get(u"this").put(u'$$childTail', var.get(u"null")))))
                PyJs_Object_781_ = Js({})
                var.get(u"this").put(u'$$listeners', PyJs_Object_781_)
                PyJs_Object_782_ = Js({})
                var.get(u"this").put(u'$$listenerCount', PyJs_Object_782_)
                var.get(u"this").put(u'$$watchersCount', Js(0.0))
                var.get(u"this").put(u'$id', var.get(u'nextUid')())
                var.get(u"this").put(u'$$ChildScope', var.get(u"null"))
            PyJsHoisted_ChildScope_.func_name = u'ChildScope'
            var.put(u'ChildScope', PyJsHoisted_ChildScope_)
            pass
            var.get(u'ChildScope').put(u'prototype', var.get(u'parent'))
            return var.get(u'ChildScope')
        PyJsHoisted_createChildScopeClass_.func_name = u'createChildScopeClass'
        var.put(u'createChildScopeClass', PyJsHoisted_createChildScopeClass_)
        var.put(u'TTL', Js(10.0))
        var.put(u'$rootScopeMinErr', var.get(u'minErr')(Js(u'$rootScope')))
        var.put(u'lastDirtyWatch', var.get(u"null"))
        var.put(u'applyAsyncId', var.get(u"null"))
        @Js
        def PyJs_anonymous_780_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            if var.get(u'arguments').get(u'length'):
                var.put(u'TTL', var.get(u'value'))
            return var.get(u'TTL')
        PyJs_anonymous_780_._set_name(u'anonymous')
        var.get(u"this").put(u'digestTtl', PyJs_anonymous_780_)
        pass
        @Js
        def PyJs_anonymous_783_(PyJsArg_24696e6a6563746f72_, PyJsArg_24657863657074696f6e48616e646c6572_, PyJsArg_247061727365_, PyJsArg_2462726f77736572_, this, arguments, var=var):
            var = Scope({u'this':this, u'$browser':PyJsArg_2462726f77736572_, u'arguments':arguments, u'$exceptionHandler':PyJsArg_24657863657074696f6e48616e646c6572_, u'$injector':PyJsArg_24696e6a6563746f72_, u'$parse':PyJsArg_247061727365_}, var)
            var.registers([u'applyAsyncQueue', u'$rootScope', u'initWatchVal', u'scheduleApplyAsync', u'incrementWatchersCount', u'$exceptionHandler', u'beginPhase', u'destroyChildScope', u'$injector', u'postDigestQueue', u'asyncQueue', u'cleanUpScope', u'$browser', u'flushApplyAsync', u'Scope', u'clearPhase', u'decrementListenerCount', u'$parse'])
            @Js
            def PyJsHoisted_beginPhase_(phase, this, arguments, var=var):
                var = Scope({u'phase':phase, u'this':this, u'arguments':arguments}, var)
                var.registers([u'phase'])
                if var.get(u'$rootScope').get(u'$$phase'):
                    PyJsTempException = JsToPyException(var.get(u'$rootScopeMinErr')(Js(u'inprog'), Js(u'{0} already in progress'), var.get(u'$rootScope').get(u'$$phase')))
                    raise PyJsTempException
                var.get(u'$rootScope').put(u'$$phase', var.get(u'phase'))
            PyJsHoisted_beginPhase_.func_name = u'beginPhase'
            var.put(u'beginPhase', PyJsHoisted_beginPhase_)
            @Js
            def PyJsHoisted_initWatchVal_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                pass
            PyJsHoisted_initWatchVal_.func_name = u'initWatchVal'
            var.put(u'initWatchVal', PyJsHoisted_initWatchVal_)
            @Js
            def PyJsHoisted_scheduleApplyAsync_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                if PyJsStrictEq(var.get(u'applyAsyncId'),var.get(u"null")):
                    @Js
                    def PyJs_anonymous_824_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        var.get(u'$rootScope').callprop(u'$apply', var.get(u'flushApplyAsync'))
                    PyJs_anonymous_824_._set_name(u'anonymous')
                    var.put(u'applyAsyncId', var.get(u'$browser').callprop(u'defer', PyJs_anonymous_824_))
            PyJsHoisted_scheduleApplyAsync_.func_name = u'scheduleApplyAsync'
            var.put(u'scheduleApplyAsync', PyJsHoisted_scheduleApplyAsync_)
            @Js
            def PyJsHoisted_incrementWatchersCount_(current, count, this, arguments, var=var):
                var = Scope({u'current':current, u'count':count, u'this':this, u'arguments':arguments}, var)
                var.registers([u'current', u'count'])
                while 1:
                    var.get(u'current').put(u'$$watchersCount', var.get(u'count'), u'+')
                    if not var.put(u'current', var.get(u'current').get(u'$parent')):
                        break
            PyJsHoisted_incrementWatchersCount_.func_name = u'incrementWatchersCount'
            var.put(u'incrementWatchersCount', PyJsHoisted_incrementWatchersCount_)
            @Js
            def PyJsHoisted_destroyChildScope_(PyJsArg_246576656e74_, this, arguments, var=var):
                var = Scope({u'this':this, u'$event':PyJsArg_246576656e74_, u'arguments':arguments}, var)
                var.registers([u'$event'])
                var.get(u'$event').get(u'currentScope').put(u'$$destroyed', var.get(u'true'))
            PyJsHoisted_destroyChildScope_.func_name = u'destroyChildScope'
            var.put(u'destroyChildScope', PyJsHoisted_destroyChildScope_)
            @Js
            def PyJsHoisted_cleanUpScope_(PyJsArg_2473636f7065_, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'$scope':PyJsArg_2473636f7065_}, var)
                var.registers([u'$scope'])
                if PyJsStrictEq(var.get(u'msie'),Js(9.0)):
                    (var.get(u'$scope').get(u'$$childHead') and var.get(u'cleanUpScope')(var.get(u'$scope').get(u'$$childHead')))
                    (var.get(u'$scope').get(u'$$nextSibling') and var.get(u'cleanUpScope')(var.get(u'$scope').get(u'$$nextSibling')))
                var.get(u'$scope').put(u'$parent', var.get(u'$scope').put(u'$$nextSibling', var.get(u'$scope').put(u'$$prevSibling', var.get(u'$scope').put(u'$$childHead', var.get(u'$scope').put(u'$$childTail', var.get(u'$scope').put(u'$root', var.get(u'$scope').put(u'$$watchers', var.get(u"null"))))))))
            PyJsHoisted_cleanUpScope_.func_name = u'cleanUpScope'
            var.put(u'cleanUpScope', PyJsHoisted_cleanUpScope_)
            @Js
            def PyJsHoisted_flushApplyAsync_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                while var.get(u'applyAsyncQueue').get(u'length'):
                    try:
                        var.get(u'applyAsyncQueue').callprop(u'shift')()
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_35468516 = var.own.get(u'e')
                        var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                        try:
                            var.get(u'$exceptionHandler')(var.get(u'e'))
                        finally:
                            if PyJsHolder_65_35468516 is not None:
                                var.own[u'e'] = PyJsHolder_65_35468516
                            else:
                                del var.own[u'e']
                            del PyJsHolder_65_35468516
                var.put(u'applyAsyncId', var.get(u"null"))
            PyJsHoisted_flushApplyAsync_.func_name = u'flushApplyAsync'
            var.put(u'flushApplyAsync', PyJsHoisted_flushApplyAsync_)
            @Js
            def PyJsHoisted_Scope_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                var.get(u"this").put(u'$id', var.get(u'nextUid')())
                var.get(u"this").put(u'$$phase', var.get(u"this").put(u'$parent', var.get(u"this").put(u'$$watchers', var.get(u"this").put(u'$$nextSibling', var.get(u"this").put(u'$$prevSibling', var.get(u"this").put(u'$$childHead', var.get(u"this").put(u'$$childTail', var.get(u"null"))))))))
                var.get(u"this").put(u'$root', var.get(u"this"))
                var.get(u"this").put(u'$$destroyed', Js(False))
                PyJs_Object_784_ = Js({})
                var.get(u"this").put(u'$$listeners', PyJs_Object_784_)
                PyJs_Object_785_ = Js({})
                var.get(u"this").put(u'$$listenerCount', PyJs_Object_785_)
                var.get(u"this").put(u'$$watchersCount', Js(0.0))
                var.get(u"this").put(u'$$isolateBindings', var.get(u"null"))
            PyJsHoisted_Scope_.func_name = u'Scope'
            var.put(u'Scope', PyJsHoisted_Scope_)
            @Js
            def PyJsHoisted_clearPhase_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                var.get(u'$rootScope').put(u'$$phase', var.get(u"null"))
            PyJsHoisted_clearPhase_.func_name = u'clearPhase'
            var.put(u'clearPhase', PyJsHoisted_clearPhase_)
            @Js
            def PyJsHoisted_decrementListenerCount_(current, count, name, this, arguments, var=var):
                var = Scope({u'current':current, u'count':count, u'this':this, u'name':name, u'arguments':arguments}, var)
                var.registers([u'current', u'count', u'name'])
                while 1:
                    var.get(u'current').get(u'$$listenerCount').put(var.get(u'name'), var.get(u'count'), u'-')
                    if PyJsStrictEq(var.get(u'current').get(u'$$listenerCount').get(var.get(u'name')),Js(0.0)):
                        var.get(u'current').get(u'$$listenerCount').delete(var.get(u'name'))
                    if not var.put(u'current', var.get(u'current').get(u'$parent')):
                        break
            PyJsHoisted_decrementListenerCount_.func_name = u'decrementListenerCount'
            var.put(u'decrementListenerCount', PyJsHoisted_decrementListenerCount_)
            pass
            pass
            pass
            @Js
            def PyJs_anonymous_787_(isolate, parent, this, arguments, var=var):
                var = Scope({u'this':this, u'isolate':isolate, u'arguments':arguments, u'parent':parent}, var)
                var.registers([u'isolate', u'parent', u'child'])
                pass
                var.put(u'parent', (var.get(u'parent') or var.get(u"this")))
                if var.get(u'isolate'):
                    var.put(u'child', var.get(u'Scope').create())
                    var.get(u'child').put(u'$root', var.get(u"this").get(u'$root'))
                else:
                    if var.get(u"this").get(u'$$ChildScope').neg():
                        var.get(u"this").put(u'$$ChildScope', var.get(u'createChildScopeClass')(var.get(u"this")))
                    var.put(u'child', var.get(u"this").get(u'$$ChildScope').create())
                var.get(u'child').put(u'$parent', var.get(u'parent'))
                var.get(u'child').put(u'$$prevSibling', var.get(u'parent').get(u'$$childTail'))
                if var.get(u'parent').get(u'$$childHead'):
                    var.get(u'parent').get(u'$$childTail').put(u'$$nextSibling', var.get(u'child'))
                    var.get(u'parent').put(u'$$childTail', var.get(u'child'))
                else:
                    var.get(u'parent').put(u'$$childHead', var.get(u'parent').put(u'$$childTail', var.get(u'child')))
                if (var.get(u'isolate') or (var.get(u'parent')!=var.get(u"this"))):
                    var.get(u'child').callprop(u'$on', Js(u'$destroy'), var.get(u'destroyChildScope'))
                return var.get(u'child')
            PyJs_anonymous_787_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_788_(watchExp, listener, objectEquality, prettyPrintExpression, this, arguments, var=var):
                var = Scope({u'listener':listener, u'arguments':arguments, u'prettyPrintExpression':prettyPrintExpression, u'this':this, u'watchExp':watchExp, u'objectEquality':objectEquality}, var)
                var.registers([u'get', u'watcher', u'listener', u'prettyPrintExpression', u'scope', u'array', u'objectEquality', u'watchExp'])
                var.put(u'get', var.get(u'$parse')(var.get(u'watchExp')))
                if var.get(u'get').get(u'$$watchDelegate'):
                    return var.get(u'get').callprop(u'$$watchDelegate', var.get(u"this"), var.get(u'listener'), var.get(u'objectEquality'), var.get(u'get'), var.get(u'watchExp'))
                var.put(u'scope', var.get(u"this"))
                var.put(u'array', var.get(u'scope').get(u'$$watchers'))
                PyJs_Object_789_ = Js({u'fn':var.get(u'listener'),u'last':var.get(u'initWatchVal'),u'get':var.get(u'get'),u'exp':(var.get(u'prettyPrintExpression') or var.get(u'watchExp')),u'eq':var.get(u'objectEquality').neg().neg()})
                var.put(u'watcher', PyJs_Object_789_)
                var.put(u'lastDirtyWatch', var.get(u"null"))
                if var.get(u'isFunction')(var.get(u'listener')).neg():
                    var.get(u'watcher').put(u'fn', var.get(u'noop'))
                if var.get(u'array').neg():
                    var.put(u'array', var.get(u'scope').put(u'$$watchers', Js([])))
                var.get(u'array').callprop(u'unshift', var.get(u'watcher'))
                var.get(u'incrementWatchersCount')(var.get(u"this"), Js(1.0))
                @Js
                def PyJs_deregisterWatch_790_(this, arguments, var=var):
                    var = Scope({u'this':this, u'deregisterWatch':PyJs_deregisterWatch_790_, u'arguments':arguments}, var)
                    var.registers([])
                    if (var.get(u'arrayRemove')(var.get(u'array'), var.get(u'watcher'))>=Js(0.0)):
                        var.get(u'incrementWatchersCount')(var.get(u'scope'), (-Js(1.0)))
                    var.put(u'lastDirtyWatch', var.get(u"null"))
                PyJs_deregisterWatch_790_._set_name(u'deregisterWatch')
                return PyJs_deregisterWatch_790_
            PyJs_anonymous_788_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_791_(watchExpressions, listener, this, arguments, var=var):
                var = Scope({u'listener':listener, u'this':this, u'arguments':arguments, u'watchExpressions':watchExpressions}, var)
                var.registers([u'oldValues', u'watchGroupAction', u'shouldCall', u'newValues', u'changeReactionScheduled', u'self', u'deregisterFns', u'watchExpressions', u'listener', u'firstRun'])
                @Js
                def PyJsHoisted_watchGroupAction_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.put(u'changeReactionScheduled', Js(False))
                    if var.get(u'firstRun'):
                        var.put(u'firstRun', Js(False))
                        var.get(u'listener')(var.get(u'newValues'), var.get(u'newValues'), var.get(u'self'))
                    else:
                        var.get(u'listener')(var.get(u'newValues'), var.get(u'oldValues'), var.get(u'self'))
                PyJsHoisted_watchGroupAction_.func_name = u'watchGroupAction'
                var.put(u'watchGroupAction', PyJsHoisted_watchGroupAction_)
                var.put(u'oldValues', var.get(u'Array').create(var.get(u'watchExpressions').get(u'length')))
                var.put(u'newValues', var.get(u'Array').create(var.get(u'watchExpressions').get(u'length')))
                var.put(u'deregisterFns', Js([]))
                var.put(u'self', var.get(u"this"))
                var.put(u'changeReactionScheduled', Js(False))
                var.put(u'firstRun', var.get(u'true'))
                if var.get(u'watchExpressions').get(u'length').neg():
                    var.put(u'shouldCall', var.get(u'true'))
                    @Js
                    def PyJs_anonymous_792_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        if var.get(u'shouldCall'):
                            var.get(u'listener')(var.get(u'newValues'), var.get(u'newValues'), var.get(u'self'))
                    PyJs_anonymous_792_._set_name(u'anonymous')
                    var.get(u'self').callprop(u'$evalAsync', PyJs_anonymous_792_)
                    @Js
                    def PyJs_deregisterWatchGroup_793_(this, arguments, var=var):
                        var = Scope({u'this':this, u'deregisterWatchGroup':PyJs_deregisterWatchGroup_793_, u'arguments':arguments}, var)
                        var.registers([])
                        var.put(u'shouldCall', Js(False))
                    PyJs_deregisterWatchGroup_793_._set_name(u'deregisterWatchGroup')
                    return PyJs_deregisterWatchGroup_793_
                if PyJsStrictEq(var.get(u'watchExpressions').get(u'length'),Js(1.0)):
                    @Js
                    def PyJs_watchGroupAction_794_(value, oldValue, scope, this, arguments, var=var):
                        var = Scope({u'watchGroupAction':PyJs_watchGroupAction_794_, u'this':this, u'value':value, u'arguments':arguments, u'oldValue':oldValue, u'scope':scope}, var)
                        var.registers([u'scope', u'oldValue', u'value'])
                        var.get(u'newValues').put(u'0', var.get(u'value'))
                        var.get(u'oldValues').put(u'0', var.get(u'oldValue'))
                        var.get(u'listener')(var.get(u'newValues'), (var.get(u'newValues') if PyJsStrictEq(var.get(u'value'),var.get(u'oldValue')) else var.get(u'oldValues')), var.get(u'scope'))
                    PyJs_watchGroupAction_794_._set_name(u'watchGroupAction')
                    return var.get(u"this").callprop(u'$watch', var.get(u'watchExpressions').get(u'0'), PyJs_watchGroupAction_794_)
                @Js
                def PyJs_anonymous_795_(expr, i, this, arguments, var=var):
                    var = Scope({u'i':i, u'expr':expr, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'i', u'expr', u'unwatchFn'])
                    @Js
                    def PyJs_watchGroupSubAction_796_(value, oldValue, this, arguments, var=var):
                        var = Scope({u'this':this, u'watchGroupSubAction':PyJs_watchGroupSubAction_796_, u'oldValue':oldValue, u'value':value, u'arguments':arguments}, var)
                        var.registers([u'oldValue', u'value'])
                        var.get(u'newValues').put(var.get(u'i'), var.get(u'value'))
                        var.get(u'oldValues').put(var.get(u'i'), var.get(u'oldValue'))
                        if var.get(u'changeReactionScheduled').neg():
                            var.put(u'changeReactionScheduled', var.get(u'true'))
                            var.get(u'self').callprop(u'$evalAsync', var.get(u'watchGroupAction'))
                    PyJs_watchGroupSubAction_796_._set_name(u'watchGroupSubAction')
                    var.put(u'unwatchFn', var.get(u'self').callprop(u'$watch', var.get(u'expr'), PyJs_watchGroupSubAction_796_))
                    var.get(u'deregisterFns').callprop(u'push', var.get(u'unwatchFn'))
                PyJs_anonymous_795_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'watchExpressions'), PyJs_anonymous_795_)
                pass
                @Js
                def PyJs_deregisterWatchGroup_797_(this, arguments, var=var):
                    var = Scope({u'this':this, u'deregisterWatchGroup':PyJs_deregisterWatchGroup_797_, u'arguments':arguments}, var)
                    var.registers([])
                    while var.get(u'deregisterFns').get(u'length'):
                        var.get(u'deregisterFns').callprop(u'shift')()
                PyJs_deregisterWatchGroup_797_._set_name(u'deregisterWatchGroup')
                return PyJs_deregisterWatchGroup_797_
            PyJs_anonymous_791_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_798_(obj, listener, this, arguments, var=var):
                var = Scope({u'listener':listener, u'this':this, u'obj':obj, u'arguments':arguments}, var)
                var.registers([u'$watchCollectionAction', u'internalArray', u'internalObject', u'initRun', u'trackVeryOldValue', u'self', u'listener', u'obj', u'changeDetector', u'oldLength', u'oldValue', u'$watchCollectionInterceptor', u'changeDetected', u'newValue', u'veryOldValue'])
                @Js
                def PyJsHoistedNonPyName(_value, this, arguments, var=var):
                    var = Scope({u'_value':_value, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'oldItem', u'newLength', u'i', u'bothNaN', u'_value', u'key', u'newItem'])
                    var.put(u'newValue', var.get(u'_value'))
                    pass
                    if var.get(u'isUndefined')(var.get(u'newValue')):
                        return var.get('undefined')
                    if var.get(u'isObject')(var.get(u'newValue')).neg():
                        if PyJsStrictNeq(var.get(u'oldValue'),var.get(u'newValue')):
                            var.put(u'oldValue', var.get(u'newValue'))
                            (var.put(u'changeDetected',var.get(u'changeDetected')+Js(1))-Js(1))
                    else:
                        if var.get(u'isArrayLike')(var.get(u'newValue')):
                            if PyJsStrictNeq(var.get(u'oldValue'),var.get(u'internalArray')):
                                var.put(u'oldValue', var.get(u'internalArray'))
                                var.put(u'oldLength', var.get(u'oldValue').put(u'length', Js(0.0)))
                                (var.put(u'changeDetected',var.get(u'changeDetected')+Js(1))-Js(1))
                            var.put(u'newLength', var.get(u'newValue').get(u'length'))
                            if PyJsStrictNeq(var.get(u'oldLength'),var.get(u'newLength')):
                                (var.put(u'changeDetected',var.get(u'changeDetected')+Js(1))-Js(1))
                                var.get(u'oldValue').put(u'length', var.put(u'oldLength', var.get(u'newLength')))
                            #for JS loop
                            var.put(u'i', Js(0.0))
                            while (var.get(u'i')<var.get(u'newLength')):
                                try:
                                    var.put(u'oldItem', var.get(u'oldValue').get(var.get(u'i')))
                                    var.put(u'newItem', var.get(u'newValue').get(var.get(u'i')))
                                    var.put(u'bothNaN', (PyJsStrictNeq(var.get(u'oldItem'),var.get(u'oldItem')) and PyJsStrictNeq(var.get(u'newItem'),var.get(u'newItem'))))
                                    if (var.get(u'bothNaN').neg() and PyJsStrictNeq(var.get(u'oldItem'),var.get(u'newItem'))):
                                        (var.put(u'changeDetected',var.get(u'changeDetected')+Js(1))-Js(1))
                                        var.get(u'oldValue').put(var.get(u'i'), var.get(u'newItem'))
                                finally:
                                        (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                        else:
                            if PyJsStrictNeq(var.get(u'oldValue'),var.get(u'internalObject')):
                                PyJs_Object_800_ = Js({})
                                var.put(u'oldValue', var.put(u'internalObject', PyJs_Object_800_))
                                var.put(u'oldLength', Js(0.0))
                                (var.put(u'changeDetected',var.get(u'changeDetected')+Js(1))-Js(1))
                            var.put(u'newLength', Js(0.0))
                            for PyJsTemp in var.get(u'newValue'):
                                var.put(u'key', PyJsTemp)
                                if var.get(u'hasOwnProperty').callprop(u'call', var.get(u'newValue'), var.get(u'key')):
                                    (var.put(u'newLength',var.get(u'newLength')+Js(1))-Js(1))
                                    var.put(u'newItem', var.get(u'newValue').get(var.get(u'key')))
                                    var.put(u'oldItem', var.get(u'oldValue').get(var.get(u'key')))
                                    if var.get(u'oldValue').contains(var.get(u'key')):
                                        var.put(u'bothNaN', (PyJsStrictNeq(var.get(u'oldItem'),var.get(u'oldItem')) and PyJsStrictNeq(var.get(u'newItem'),var.get(u'newItem'))))
                                        if (var.get(u'bothNaN').neg() and PyJsStrictNeq(var.get(u'oldItem'),var.get(u'newItem'))):
                                            (var.put(u'changeDetected',var.get(u'changeDetected')+Js(1))-Js(1))
                                            var.get(u'oldValue').put(var.get(u'key'), var.get(u'newItem'))
                                    else:
                                        (var.put(u'oldLength',var.get(u'oldLength')+Js(1))-Js(1))
                                        var.get(u'oldValue').put(var.get(u'key'), var.get(u'newItem'))
                                        (var.put(u'changeDetected',var.get(u'changeDetected')+Js(1))-Js(1))
                            if (var.get(u'oldLength')>var.get(u'newLength')):
                                (var.put(u'changeDetected',var.get(u'changeDetected')+Js(1))-Js(1))
                                for PyJsTemp in var.get(u'oldValue'):
                                    var.put(u'key', PyJsTemp)
                                    if var.get(u'hasOwnProperty').callprop(u'call', var.get(u'newValue'), var.get(u'key')).neg():
                                        (var.put(u'oldLength',var.get(u'oldLength')-Js(1))+Js(1))
                                        var.get(u'oldValue').delete(var.get(u'key'))
                    return var.get(u'changeDetected')
                PyJsHoistedNonPyName.func_name = u'$watchCollectionInterceptor'
                var.put(u'$watchCollectionInterceptor', PyJsHoistedNonPyName)
                @Js
                def PyJsHoistedNonPyName(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'i', u'key'])
                    if var.get(u'initRun'):
                        var.put(u'initRun', Js(False))
                        var.get(u'listener')(var.get(u'newValue'), var.get(u'newValue'), var.get(u'self'))
                    else:
                        var.get(u'listener')(var.get(u'newValue'), var.get(u'veryOldValue'), var.get(u'self'))
                    if var.get(u'trackVeryOldValue'):
                        if var.get(u'isObject')(var.get(u'newValue')).neg():
                            var.put(u'veryOldValue', var.get(u'newValue'))
                        else:
                            if var.get(u'isArrayLike')(var.get(u'newValue')):
                                var.put(u'veryOldValue', var.get(u'Array').create(var.get(u'newValue').get(u'length')))
                                #for JS loop
                                var.put(u'i', Js(0.0))
                                while (var.get(u'i')<var.get(u'newValue').get(u'length')):
                                    try:
                                        var.get(u'veryOldValue').put(var.get(u'i'), var.get(u'newValue').get(var.get(u'i')))
                                    finally:
                                            (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                            else:
                                PyJs_Object_801_ = Js({})
                                var.put(u'veryOldValue', PyJs_Object_801_)
                                for PyJsTemp in var.get(u'newValue'):
                                    var.put(u'key', PyJsTemp)
                                    if var.get(u'hasOwnProperty').callprop(u'call', var.get(u'newValue'), var.get(u'key')):
                                        var.get(u'veryOldValue').put(var.get(u'key'), var.get(u'newValue').get(var.get(u'key')))
                PyJsHoistedNonPyName.func_name = u'$watchCollectionAction'
                var.put(u'$watchCollectionAction', PyJsHoistedNonPyName)
                var.get(u'$watchCollectionInterceptor').put(u'$stateful', var.get(u'true'))
                var.put(u'self', var.get(u"this"))
                pass
                pass
                pass
                var.put(u'trackVeryOldValue', (var.get(u'listener').get(u'length')>Js(1.0)))
                var.put(u'changeDetected', Js(0.0))
                var.put(u'changeDetector', var.get(u'$parse')(var.get(u'obj'), var.get(u'$watchCollectionInterceptor')))
                var.put(u'internalArray', Js([]))
                PyJs_Object_799_ = Js({})
                var.put(u'internalObject', PyJs_Object_799_)
                var.put(u'initRun', var.get(u'true'))
                var.put(u'oldLength', Js(0.0))
                pass
                pass
                return var.get(u"this").callprop(u'$watch', var.get(u'changeDetector'), var.get(u'$watchCollectionAction'))
            PyJs_anonymous_798_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_802_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'logIdx', u'watchers', u'last', u'target', u'logMsg', u'watch', u'asyncTask', u'value', u'next', u'current', u'watchLog', u'length', u'dirty', u'ttl'])
                var.put(u'ttl', var.get(u'TTL'))
                var.put(u'target', var.get(u"this"))
                var.put(u'watchLog', Js([]))
                var.get(u'beginPhase')(Js(u'$digest'))
                var.get(u'$browser').callprop(u'$$checkUrlChange')
                if (PyJsStrictEq(var.get(u"this"),var.get(u'$rootScope')) and PyJsStrictNeq(var.get(u'applyAsyncId'),var.get(u"null"))):
                    var.get(u'$browser').get(u'defer').callprop(u'cancel', var.get(u'applyAsyncId'))
                    var.get(u'flushApplyAsync')()
                var.put(u'lastDirtyWatch', var.get(u"null"))
                while 1:
                    var.put(u'dirty', Js(False))
                    var.put(u'current', var.get(u'target'))
                    while var.get(u'asyncQueue').get(u'length'):
                        try:
                            var.put(u'asyncTask', var.get(u'asyncQueue').callprop(u'shift'))
                            var.get(u'asyncTask').get(u'scope').callprop(u'$eval', var.get(u'asyncTask').get(u'expression'), var.get(u'asyncTask').get(u'locals'))
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65_26974362 = var.own.get(u'e')
                            var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                            try:
                                var.get(u'$exceptionHandler')(var.get(u'e'))
                            finally:
                                if PyJsHolder_65_26974362 is not None:
                                    var.own[u'e'] = PyJsHolder_65_26974362
                                else:
                                    del var.own[u'e']
                                del PyJsHolder_65_26974362
                        var.put(u'lastDirtyWatch', var.get(u"null"))
                    class JS_CONTINUE_LABEL_747261766572736553636f7065734c6f6f70(Exception): pass
                    class JS_BREAK_LABEL_747261766572736553636f7065734c6f6f70(Exception): pass
                    try:
                        while 1:
                            try:
                                if var.put(u'watchers', var.get(u'current').get(u'$$watchers')):
                                    var.put(u'length', var.get(u'watchers').get(u'length'))
                                    while (var.put(u'length',var.get(u'length')-Js(1))+Js(1)):
                                        try:
                                            var.put(u'watch', var.get(u'watchers').get(var.get(u'length')))
                                            if var.get(u'watch'):
                                                def PyJs_LONG_803_(var=var):
                                                    return (PyJsStrictNeq(var.put(u'value', var.get(u'watch').callprop(u'get', var.get(u'current'))),var.put(u'last', var.get(u'watch').get(u'last'))) and (var.get(u'equals')(var.get(u'value'), var.get(u'last')) if var.get(u'watch').get(u'eq') else (((PyJsStrictEq(var.get(u'value',throw=False).typeof(),Js(u'number')) and PyJsStrictEq(var.get(u'last',throw=False).typeof(),Js(u'number'))) and var.get(u'isNaN')(var.get(u'value'))) and var.get(u'isNaN')(var.get(u'last')))).neg())
                                                if PyJs_LONG_803_():
                                                    var.put(u'dirty', var.get(u'true'))
                                                    var.put(u'lastDirtyWatch', var.get(u'watch'))
                                                    var.get(u'watch').put(u'last', (var.get(u'copy')(var.get(u'value'), var.get(u"null")) if var.get(u'watch').get(u'eq') else var.get(u'value')))
                                                    var.get(u'watch').callprop(u'fn', var.get(u'value'), (var.get(u'value') if PyJsStrictEq(var.get(u'last'),var.get(u'initWatchVal')) else var.get(u'last')), var.get(u'current'))
                                                    if (var.get(u'ttl')<Js(5.0)):
                                                        var.put(u'logIdx', (Js(4.0)-var.get(u'ttl')))
                                                        if var.get(u'watchLog').get(var.get(u'logIdx')).neg():
                                                            var.get(u'watchLog').put(var.get(u'logIdx'), Js([]))
                                                        PyJs_Object_804_ = Js({u'msg':((Js(u'fn: ')+(var.get(u'watch').get(u'exp').get(u'name') or var.get(u'watch').get(u'exp').callprop(u'toString'))) if var.get(u'isFunction')(var.get(u'watch').get(u'exp')) else var.get(u'watch').get(u'exp')),u'newVal':var.get(u'value'),u'oldVal':var.get(u'last')})
                                                        var.get(u'watchLog').get(var.get(u'logIdx')).callprop(u'push', PyJs_Object_804_)
                                                else:
                                                    if PyJsStrictEq(var.get(u'watch'),var.get(u'lastDirtyWatch')):
                                                        var.put(u'dirty', Js(False))
                                                        raise JS_BREAK_LABEL_747261766572736553636f7065734c6f6f70("Breaked")
                                        except PyJsException as PyJsTempException:
                                            PyJsHolder_65_72732908 = var.own.get(u'e')
                                            var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                                            try:
                                                var.get(u'$exceptionHandler')(var.get(u'e'))
                                            finally:
                                                if PyJsHolder_65_72732908 is not None:
                                                    var.own[u'e'] = PyJsHolder_65_72732908
                                                else:
                                                    del var.own[u'e']
                                                del PyJsHolder_65_72732908
                                if var.put(u'next', ((var.get(u'current').get(u'$$watchersCount') and var.get(u'current').get(u'$$childHead')) or (PyJsStrictNeq(var.get(u'current'),var.get(u'target')) and var.get(u'current').get(u'$$nextSibling')))).neg():
                                    while (PyJsStrictNeq(var.get(u'current'),var.get(u'target')) and var.put(u'next', var.get(u'current').get(u'$$nextSibling')).neg()):
                                        var.put(u'current', var.get(u'current').get(u'$parent'))
                                if not var.put(u'current', var.get(u'next')):
                                    break
                            except JS_CONTINUE_LABEL_747261766572736553636f7065734c6f6f70:
                                pass
                    except JS_BREAK_LABEL_747261766572736553636f7065734c6f6f70:
                        pass
                    if ((var.get(u'dirty') or var.get(u'asyncQueue').get(u'length')) and (var.put(u'ttl',var.get(u'ttl')-Js(1))+Js(1)).neg()):
                        var.get(u'clearPhase')()
                        PyJsTempException = JsToPyException(var.get(u'$rootScopeMinErr')(Js(u'infdig'), (Js(u'{0} $digest() iterations reached. Aborting!\n')+Js(u'Watchers fired in the last 5 iterations: {1}')), var.get(u'TTL'), var.get(u'watchLog')))
                        raise PyJsTempException
                    if not (var.get(u'dirty') or var.get(u'asyncQueue').get(u'length')):
                        break
                var.get(u'clearPhase')()
                while var.get(u'postDigestQueue').get(u'length'):
                    try:
                        var.get(u'postDigestQueue').callprop(u'shift')()
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_7507648 = var.own.get(u'e')
                        var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                        try:
                            var.get(u'$exceptionHandler')(var.get(u'e'))
                        finally:
                            if PyJsHolder_65_7507648 is not None:
                                var.own[u'e'] = PyJsHolder_65_7507648
                            else:
                                del var.own[u'e']
                            del PyJsHolder_65_7507648
            PyJs_anonymous_802_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_805_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'eventName', u'parent'])
                if var.get(u"this").get(u'$$destroyed'):
                    return var.get('undefined')
                var.put(u'parent', var.get(u"this").get(u'$parent'))
                var.get(u"this").callprop(u'$broadcast', Js(u'$destroy'))
                var.get(u"this").put(u'$$destroyed', var.get(u'true'))
                if PyJsStrictEq(var.get(u"this"),var.get(u'$rootScope')):
                    var.get(u'$browser').callprop(u'$$applicationDestroyed')
                var.get(u'incrementWatchersCount')(var.get(u"this"), (-var.get(u"this").get(u'$$watchersCount')))
                for PyJsTemp in var.get(u"this").get(u'$$listenerCount'):
                    var.put(u'eventName', PyJsTemp)
                    var.get(u'decrementListenerCount')(var.get(u"this"), var.get(u"this").get(u'$$listenerCount').get(var.get(u'eventName')), var.get(u'eventName'))
                if (var.get(u'parent') and (var.get(u'parent').get(u'$$childHead')==var.get(u"this"))):
                    var.get(u'parent').put(u'$$childHead', var.get(u"this").get(u'$$nextSibling'))
                if (var.get(u'parent') and (var.get(u'parent').get(u'$$childTail')==var.get(u"this"))):
                    var.get(u'parent').put(u'$$childTail', var.get(u"this").get(u'$$prevSibling'))
                if var.get(u"this").get(u'$$prevSibling'):
                    var.get(u"this").get(u'$$prevSibling').put(u'$$nextSibling', var.get(u"this").get(u'$$nextSibling'))
                if var.get(u"this").get(u'$$nextSibling'):
                    var.get(u"this").get(u'$$nextSibling').put(u'$$prevSibling', var.get(u"this").get(u'$$prevSibling'))
                var.get(u"this").put(u'$destroy', var.get(u"this").put(u'$digest', var.get(u"this").put(u'$apply', var.get(u"this").put(u'$evalAsync', var.get(u"this").put(u'$applyAsync', var.get(u'noop'))))))
                @Js
                def PyJs_anonymous_806_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    return var.get(u'noop')
                PyJs_anonymous_806_._set_name(u'anonymous')
                var.get(u"this").put(u'$on', var.get(u"this").put(u'$watch', var.get(u"this").put(u'$watchGroup', PyJs_anonymous_806_)))
                PyJs_Object_807_ = Js({})
                var.get(u"this").put(u'$$listeners', PyJs_Object_807_)
                var.get(u"this").put(u'$$nextSibling', var.get(u"null"))
                var.get(u'cleanUpScope')(var.get(u"this"))
            PyJs_anonymous_805_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_808_(expr, locals, this, arguments, var=var):
                var = Scope({u'this':this, u'expr':expr, u'arguments':arguments, u'locals':locals}, var)
                var.registers([u'expr', u'locals'])
                return var.get(u'$parse')(var.get(u'expr'))(var.get(u"this"), var.get(u'locals'))
            PyJs_anonymous_808_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_809_(expr, locals, this, arguments, var=var):
                var = Scope({u'this':this, u'expr':expr, u'arguments':arguments, u'locals':locals}, var)
                var.registers([u'expr', u'locals'])
                if (var.get(u'$rootScope').get(u'$$phase').neg() and var.get(u'asyncQueue').get(u'length').neg()):
                    @Js
                    def PyJs_anonymous_810_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        if var.get(u'asyncQueue').get(u'length'):
                            var.get(u'$rootScope').callprop(u'$digest')
                    PyJs_anonymous_810_._set_name(u'anonymous')
                    var.get(u'$browser').callprop(u'defer', PyJs_anonymous_810_)
                PyJs_Object_811_ = Js({u'scope':var.get(u"this"),u'expression':var.get(u'expr'),u'locals':var.get(u'locals')})
                var.get(u'asyncQueue').callprop(u'push', PyJs_Object_811_)
            PyJs_anonymous_809_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_812_(fn, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'fn':fn}, var)
                var.registers([u'fn'])
                var.get(u'postDigestQueue').callprop(u'push', var.get(u'fn'))
            PyJs_anonymous_812_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_813_(expr, this, arguments, var=var):
                var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                var.registers([u'expr'])
                try:
                    var.get(u'beginPhase')(Js(u'$apply'))
                    try:
                        return var.get(u"this").callprop(u'$eval', var.get(u'expr'))
                    finally:
                        var.get(u'clearPhase')()
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_68033665 = var.own.get(u'e')
                    var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                    try:
                        var.get(u'$exceptionHandler')(var.get(u'e'))
                    finally:
                        if PyJsHolder_65_68033665 is not None:
                            var.own[u'e'] = PyJsHolder_65_68033665
                        else:
                            del var.own[u'e']
                        del PyJsHolder_65_68033665
                finally:
                    try:
                        var.get(u'$rootScope').callprop(u'$digest')
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_16813984 = var.own.get(u'e')
                        var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                        try:
                            var.get(u'$exceptionHandler')(var.get(u'e'))
                            PyJsTempException = JsToPyException(var.get(u'e'))
                            raise PyJsTempException
                        finally:
                            if PyJsHolder_65_16813984 is not None:
                                var.own[u'e'] = PyJsHolder_65_16813984
                            else:
                                del var.own[u'e']
                            del PyJsHolder_65_16813984
            PyJs_anonymous_813_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_814_(expr, this, arguments, var=var):
                var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                var.registers([u'scope', u'expr', u'$applyAsyncExpression'])
                @Js
                def PyJsHoistedNonPyName(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'scope').callprop(u'$eval', var.get(u'expr'))
                PyJsHoistedNonPyName.func_name = u'$applyAsyncExpression'
                var.put(u'$applyAsyncExpression', PyJsHoistedNonPyName)
                var.put(u'scope', var.get(u"this"))
                (var.get(u'expr') and var.get(u'applyAsyncQueue').callprop(u'push', var.get(u'$applyAsyncExpression')))
                var.get(u'scheduleApplyAsync')()
                pass
            PyJs_anonymous_814_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_815_(name, listener, this, arguments, var=var):
                var = Scope({u'listener':listener, u'this':this, u'name':name, u'arguments':arguments}, var)
                var.registers([u'current', u'listener', u'self', u'namedListeners', u'name'])
                var.put(u'namedListeners', var.get(u"this").get(u'$$listeners').get(var.get(u'name')))
                if var.get(u'namedListeners').neg():
                    var.get(u"this").get(u'$$listeners').put(var.get(u'name'), var.put(u'namedListeners', Js([])))
                var.get(u'namedListeners').callprop(u'push', var.get(u'listener'))
                var.put(u'current', var.get(u"this"))
                while 1:
                    if var.get(u'current').get(u'$$listenerCount').get(var.get(u'name')).neg():
                        var.get(u'current').get(u'$$listenerCount').put(var.get(u'name'), Js(0.0))
                    (var.get(u'current').get(u'$$listenerCount').put(var.get(u'name'),var.get(u'current').get(u'$$listenerCount').get(var.get(u'name'))+Js(1))-Js(1))
                    if not var.put(u'current', var.get(u'current').get(u'$parent')):
                        break
                var.put(u'self', var.get(u"this"))
                @Js
                def PyJs_anonymous_816_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'indexOfListener'])
                    var.put(u'indexOfListener', var.get(u'namedListeners').callprop(u'indexOf', var.get(u'listener')))
                    if PyJsStrictNeq(var.get(u'indexOfListener'),(-Js(1.0))):
                        var.get(u'namedListeners').put(var.get(u'indexOfListener'), var.get(u"null"))
                        var.get(u'decrementListenerCount')(var.get(u'self'), Js(1.0), var.get(u'name'))
                PyJs_anonymous_816_._set_name(u'anonymous')
                return PyJs_anonymous_816_
            PyJs_anonymous_815_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_817_(name, args, this, arguments, var=var):
                var = Scope({u'this':this, u'args':args, u'name':name, u'arguments':arguments}, var)
                var.registers([u'args', u'name', u'i', u'listenerArgs', u'namedListeners', u'event', u'length', u'scope', u'stopPropagation', u'empty'])
                var.put(u'empty', Js([]))
                var.put(u'scope', var.get(u"this"))
                var.put(u'stopPropagation', Js(False))
                @Js
                def PyJs_anonymous_819_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.put(u'stopPropagation', var.get(u'true'))
                PyJs_anonymous_819_._set_name(u'anonymous')
                @Js
                def PyJs_anonymous_820_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'event').put(u'defaultPrevented', var.get(u'true'))
                PyJs_anonymous_820_._set_name(u'anonymous')
                PyJs_Object_818_ = Js({u'name':var.get(u'name'),u'targetScope':var.get(u'scope'),u'stopPropagation':PyJs_anonymous_819_,u'preventDefault':PyJs_anonymous_820_,u'defaultPrevented':Js(False)})
                var.put(u'event', PyJs_Object_818_)
                var.put(u'listenerArgs', var.get(u'concat')(Js([var.get(u'event')]), var.get(u'arguments'), Js(1.0)))
                while 1:
                    var.put(u'namedListeners', (var.get(u'scope').get(u'$$listeners').get(var.get(u'name')) or var.get(u'empty')))
                    var.get(u'event').put(u'currentScope', var.get(u'scope'))
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'length', var.get(u'namedListeners').get(u'length')))
                    while (var.get(u'i')<var.get(u'length')):
                        try:
                            if var.get(u'namedListeners').get(var.get(u'i')).neg():
                                var.get(u'namedListeners').callprop(u'splice', var.get(u'i'), Js(1.0))
                                (var.put(u'i',var.get(u'i')-Js(1))+Js(1))
                                (var.put(u'length',var.get(u'length')-Js(1))+Js(1))
                                continue
                            try:
                                var.get(u'namedListeners').get(var.get(u'i')).callprop(u'apply', var.get(u"null"), var.get(u'listenerArgs'))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_65_39454634 = var.own.get(u'e')
                                var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                                try:
                                    var.get(u'$exceptionHandler')(var.get(u'e'))
                                finally:
                                    if PyJsHolder_65_39454634 is not None:
                                        var.own[u'e'] = PyJsHolder_65_39454634
                                    else:
                                        del var.own[u'e']
                                    del PyJsHolder_65_39454634
                        finally:
                                (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                    if var.get(u'stopPropagation'):
                        var.get(u'event').put(u'currentScope', var.get(u"null"))
                        return var.get(u'event')
                    var.put(u'scope', var.get(u'scope').get(u'$parent'))
                    if not var.get(u'scope'):
                        break
                var.get(u'event').put(u'currentScope', var.get(u"null"))
                return var.get(u'event')
            PyJs_anonymous_817_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_821_(name, args, this, arguments, var=var):
                var = Scope({u'this':this, u'args':args, u'name':name, u'arguments':arguments}, var)
                var.registers([u'args', u'target', u'i', u'listenerArgs', u'length', u'next', u'current', u'listeners', u'event', u'name'])
                var.put(u'target', var.get(u"this"))
                var.put(u'current', var.get(u'target'))
                var.put(u'next', var.get(u'target'))
                @Js
                def PyJs_anonymous_823_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'event').put(u'defaultPrevented', var.get(u'true'))
                PyJs_anonymous_823_._set_name(u'anonymous')
                PyJs_Object_822_ = Js({u'name':var.get(u'name'),u'targetScope':var.get(u'target'),u'preventDefault':PyJs_anonymous_823_,u'defaultPrevented':Js(False)})
                var.put(u'event', PyJs_Object_822_)
                if var.get(u'target').get(u'$$listenerCount').get(var.get(u'name')).neg():
                    return var.get(u'event')
                var.put(u'listenerArgs', var.get(u'concat')(Js([var.get(u'event')]), var.get(u'arguments'), Js(1.0)))
                while var.put(u'current', var.get(u'next')):
                    var.get(u'event').put(u'currentScope', var.get(u'current'))
                    var.put(u'listeners', (var.get(u'current').get(u'$$listeners').get(var.get(u'name')) or Js([])))
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'length', var.get(u'listeners').get(u'length')))
                    while (var.get(u'i')<var.get(u'length')):
                        try:
                            if var.get(u'listeners').get(var.get(u'i')).neg():
                                var.get(u'listeners').callprop(u'splice', var.get(u'i'), Js(1.0))
                                (var.put(u'i',var.get(u'i')-Js(1))+Js(1))
                                (var.put(u'length',var.get(u'length')-Js(1))+Js(1))
                                continue
                            try:
                                var.get(u'listeners').get(var.get(u'i')).callprop(u'apply', var.get(u"null"), var.get(u'listenerArgs'))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_65_15395065 = var.own.get(u'e')
                                var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                                try:
                                    var.get(u'$exceptionHandler')(var.get(u'e'))
                                finally:
                                    if PyJsHolder_65_15395065 is not None:
                                        var.own[u'e'] = PyJsHolder_65_15395065
                                    else:
                                        del var.own[u'e']
                                    del PyJsHolder_65_15395065
                        finally:
                                (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                    if var.put(u'next', ((var.get(u'current').get(u'$$listenerCount').get(var.get(u'name')) and var.get(u'current').get(u'$$childHead')) or (PyJsStrictNeq(var.get(u'current'),var.get(u'target')) and var.get(u'current').get(u'$$nextSibling')))).neg():
                        while (PyJsStrictNeq(var.get(u'current'),var.get(u'target')) and var.put(u'next', var.get(u'current').get(u'$$nextSibling')).neg()):
                            var.put(u'current', var.get(u'current').get(u'$parent'))
                var.get(u'event').put(u'currentScope', var.get(u"null"))
                return var.get(u'event')
            PyJs_anonymous_821_._set_name(u'anonymous')
            PyJs_Object_786_ = Js({u'constructor':var.get(u'Scope'),u'$new':PyJs_anonymous_787_,u'$watch':PyJs_anonymous_788_,u'$watchGroup':PyJs_anonymous_791_,u'$watchCollection':PyJs_anonymous_798_,u'$digest':PyJs_anonymous_802_,u'$destroy':PyJs_anonymous_805_,u'$eval':PyJs_anonymous_808_,u'$evalAsync':PyJs_anonymous_809_,u'$$postDigest':PyJs_anonymous_812_,u'$apply':PyJs_anonymous_813_,u'$applyAsync':PyJs_anonymous_814_,u'$on':PyJs_anonymous_815_,u'$emit':PyJs_anonymous_817_,u'$broadcast':PyJs_anonymous_821_})
            var.get(u'Scope').put(u'prototype', PyJs_Object_786_)
            var.put(u'$rootScope', var.get(u'Scope').create())
            var.put(u'asyncQueue', var.get(u'$rootScope').put(u'$$asyncQueue', Js([])))
            var.put(u'postDigestQueue', var.get(u'$rootScope').put(u'$$postDigestQueue', Js([])))
            var.put(u'applyAsyncQueue', var.get(u'$rootScope').put(u'$$applyAsyncQueue', Js([])))
            return var.get(u'$rootScope')
            pass
            pass
            pass
            pass
            pass
            pass
            pass
        PyJs_anonymous_783_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$injector'), Js(u'$exceptionHandler'), Js(u'$parse'), Js(u'$browser'), PyJs_anonymous_783_]))
    PyJsHoistedNonPyName.func_name = u'$RootScopeProvider'
    var.put(u'$RootScopeProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_urlIsSameOrigin_(requestUrl, this, arguments, var=var):
        var = Scope({u'this':this, u'requestUrl':requestUrl, u'arguments':arguments}, var)
        var.registers([u'requestUrl', u'parsed'])
        var.put(u'parsed', (var.get(u'urlResolve')(var.get(u'requestUrl')) if var.get(u'isString')(var.get(u'requestUrl')) else var.get(u'requestUrl')))
        return (PyJsStrictEq(var.get(u'parsed').get(u'protocol'),var.get(u'originUrl').get(u'protocol')) and PyJsStrictEq(var.get(u'parsed').get(u'host'),var.get(u'originUrl').get(u'host')))
    PyJsHoisted_urlIsSameOrigin_.func_name = u'urlIsSameOrigin'
    var.put(u'urlIsSameOrigin', PyJsHoisted_urlIsSameOrigin_)
    @Js
    def PyJsHoisted_bindJQuery_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'jqName', u'originalCleanData'])
        pass
        if var.get(u'bindJQueryFired'):
            return var.get('undefined')
        var.put(u'jqName', var.get(u'jq')())
        var.put(u'jQuery', (var.get(u'window').get(u'jQuery') if var.get(u'isUndefined')(var.get(u'jqName')) else (var.get(u'undefined') if var.get(u'jqName').neg() else var.get(u'window').get(var.get(u'jqName')))))
        if (var.get(u'jQuery') and var.get(u'jQuery').get(u'fn').get(u'on')):
            var.put(u'jqLite', var.get(u'jQuery'))
            PyJs_Object_43_ = Js({u'scope':var.get(u'JQLitePrototype').get(u'scope'),u'isolateScope':var.get(u'JQLitePrototype').get(u'isolateScope'),u'controller':var.get(u'JQLitePrototype').get(u'controller'),u'injector':var.get(u'JQLitePrototype').get(u'injector'),u'inheritedData':var.get(u'JQLitePrototype').get(u'inheritedData')})
            var.get(u'extend')(var.get(u'jQuery').get(u'fn'), PyJs_Object_43_)
            var.put(u'originalCleanData', var.get(u'jQuery').get(u'cleanData'))
            @Js
            def PyJs_anonymous_44_(elems, this, arguments, var=var):
                var = Scope({u'this':this, u'elems':elems, u'arguments':arguments}, var)
                var.registers([u'i', u'elems', u'events', u'elem'])
                pass
                if var.get(u'skipDestroyOnNextJQueryCleanData').neg():
                    #for JS loop
                    var.put(u'i', Js(0.0))
                    while (var.put(u'elem', var.get(u'elems').get(var.get(u'i')))!=var.get(u"null")):
                        try:
                            var.put(u'events', var.get(u'jQuery').callprop(u'_data', var.get(u'elem'), Js(u'events')))
                            if (var.get(u'events') and var.get(u'events').get(u'$destroy')):
                                var.get(u'jQuery')(var.get(u'elem')).callprop(u'triggerHandler', Js(u'$destroy'))
                        finally:
                                (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                else:
                    var.put(u'skipDestroyOnNextJQueryCleanData', Js(False))
                var.get(u'originalCleanData')(var.get(u'elems'))
            PyJs_anonymous_44_._set_name(u'anonymous')
            var.get(u'jQuery').put(u'cleanData', PyJs_anonymous_44_)
        else:
            var.put(u'jqLite', var.get(u'JQLite'))
        var.get(u'angular').put(u'element', var.get(u'jqLite'))
        var.put(u'bindJQueryFired', var.get(u'true'))
    PyJsHoisted_bindJQuery_.func_name = u'bindJQuery'
    var.put(u'bindJQuery', PyJsHoisted_bindJQuery_)
    @Js
    def PyJsHoisted_timeZoneGetter_(date, formats, offset, this, arguments, var=var):
        var = Scope({u'date':date, u'this':this, u'offset':offset, u'arguments':arguments, u'formats':formats}, var)
        var.registers([u'date', u'offset', u'paddedZone', u'zone', u'formats'])
        var.put(u'zone', ((-Js(1.0))*var.get(u'offset')))
        var.put(u'paddedZone', (Js(u'+') if (var.get(u'zone')>=Js(0.0)) else Js(u'')))
        var.put(u'paddedZone', (var.get(u'padNumber')(var.get(u'Math').callprop((Js(u'floor') if (var.get(u'zone')>Js(0.0)) else Js(u'ceil')), (var.get(u'zone')/Js(60.0))), Js(2.0))+var.get(u'padNumber')(var.get(u'Math').callprop(u'abs', (var.get(u'zone')%Js(60.0))), Js(2.0))), u'+')
        return var.get(u'paddedZone')
    PyJsHoisted_timeZoneGetter_.func_name = u'timeZoneGetter'
    var.put(u'timeZoneGetter', PyJsHoisted_timeZoneGetter_)
    @Js
    def PyJsHoisted_jqLiteExpandoStore_(element, createIfNecessary, this, arguments, var=var):
        var = Scope({u'this':this, u'createIfNecessary':createIfNecessary, u'arguments':arguments, u'element':element}, var)
        var.registers([u'expandoId', u'createIfNecessary', u'expandoStore', u'element'])
        var.put(u'expandoId', var.get(u'element').get(u'ng339'))
        var.put(u'expandoStore', (var.get(u'expandoId') and var.get(u'jqCache').get(var.get(u'expandoId'))))
        if (var.get(u'createIfNecessary') and var.get(u'expandoStore').neg()):
            var.get(u'element').put(u'ng339', var.put(u'expandoId', var.get(u'jqNextId')()))
            PyJs_Object_77_ = Js({})
            PyJs_Object_78_ = Js({})
            PyJs_Object_76_ = Js({u'events':PyJs_Object_77_,u'data':PyJs_Object_78_,u'handle':var.get(u'undefined')})
            var.put(u'expandoStore', var.get(u'jqCache').put(var.get(u'expandoId'), PyJs_Object_76_))
        return var.get(u'expandoStore')
    PyJsHoisted_jqLiteExpandoStore_.func_name = u'jqLiteExpandoStore'
    var.put(u'jqLiteExpandoStore', PyJsHoisted_jqLiteExpandoStore_)
    @Js
    def PyJsHoisted_shallowCopy_(src, dst, this, arguments, var=var):
        var = Scope({u'this':this, u'src':src, u'dst':dst, u'arguments':arguments}, var)
        var.registers([u'i', u'ii', u'dst', u'key', u'src'])
        if var.get(u'isArray')(var.get(u'src')):
            var.put(u'dst', (var.get(u'dst') or Js([])))
            #for JS loop
            var.put(u'i', Js(0.0))
            var.put(u'ii', var.get(u'src').get(u'length'))
            while (var.get(u'i')<var.get(u'ii')):
                try:
                    var.get(u'dst').put(var.get(u'i'), var.get(u'src').get(var.get(u'i')))
                finally:
                        (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
        else:
            if var.get(u'isObject')(var.get(u'src')):
                PyJs_Object_17_ = Js({})
                var.put(u'dst', (var.get(u'dst') or PyJs_Object_17_))
                for PyJsTemp in var.get(u'src'):
                    var.put(u'key', PyJsTemp)
                    if (PyJsStrictEq(var.get(u'key').callprop(u'charAt', Js(0.0)),Js(u'$')) and PyJsStrictEq(var.get(u'key').callprop(u'charAt', Js(1.0)),Js(u'$'))).neg():
                        var.get(u'dst').put(var.get(u'key'), var.get(u'src').get(var.get(u'key')))
        return (var.get(u'dst') or var.get(u'src'))
    PyJsHoisted_shallowCopy_.func_name = u'shallowCopy'
    var.put(u'shallowCopy', PyJsHoisted_shallowCopy_)
    @Js
    def PyJsHoisted_jqLiteClone_(element, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'element'])
        return var.get(u'element').callprop(u'cloneNode', var.get(u'true'))
    PyJsHoisted_jqLiteClone_.func_name = u'jqLiteClone'
    var.put(u'jqLiteClone', PyJsHoisted_jqLiteClone_)
    @Js
    def PyJsHoisted_addDateMinutes_(date, minutes, this, arguments, var=var):
        var = Scope({u'date':date, u'this':this, u'minutes':minutes, u'arguments':arguments}, var)
        var.registers([u'date', u'minutes'])
        var.put(u'date', var.get(u'Date').create(var.get(u'date').callprop(u'getTime')))
        var.get(u'date').callprop(u'setMinutes', (var.get(u'date').callprop(u'getMinutes')+var.get(u'minutes')))
        return var.get(u'date')
    PyJsHoisted_addDateMinutes_.func_name = u'addDateMinutes'
    var.put(u'addDateMinutes', PyJsHoisted_addDateMinutes_)
    @Js
    def PyJsHoisted_jqLiteController_(element, name, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'element':element}, var)
        var.registers([u'name', u'element'])
        return var.get(u'jqLiteInheritedData')(var.get(u'element'), ((Js(u'$')+(var.get(u'name') or Js(u'ngController')))+Js(u'Controller')))
    PyJsHoisted_jqLiteController_.func_name = u'jqLiteController'
    var.put(u'jqLiteController', PyJsHoisted_jqLiteController_)
    @Js
    def PyJsHoisted_getValueOf_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        return (var.get(u'value').callprop(u'valueOf') if var.get(u'isFunction')(var.get(u'value').get(u'valueOf')) else var.get(u'objectValueOf').callprop(u'call', var.get(u'value')))
    PyJsHoisted_getValueOf_.func_name = u'getValueOf'
    var.put(u'getValueOf', PyJsHoisted_getValueOf_)
    @Js
    def PyJsHoisted_isConstant_(ast, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'ast':ast}, var)
        var.registers([u'ast'])
        return var.get(u'ast').get(u'constant')
    PyJsHoisted_isConstant_.func_name = u'isConstant'
    var.put(u'isConstant', PyJsHoisted_isConstant_)
    @Js
    def PyJsHoisted_isJsonLike_(str, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'str':str}, var)
        var.registers([u'str', u'jsonStart'])
        var.put(u'jsonStart', var.get(u'str').callprop(u'match', var.get(u'JSON_START')))
        return (var.get(u'jsonStart') and var.get(u'JSON_ENDS').get(var.get(u'jsonStart').get(u'0')).callprop(u'test', var.get(u'str')))
    PyJsHoisted_isJsonLike_.func_name = u'isJsonLike'
    var.put(u'isJsonLike', PyJsHoisted_isJsonLike_)
    @Js
    def PyJsHoisted_jqNextId_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.put(u'jqId',var.get(u'jqId')+Js(1))
    PyJsHoisted_jqNextId_.func_name = u'jqNextId'
    var.put(u'jqNextId', PyJsHoisted_jqNextId_)
    @Js
    def PyJsHoisted_JQLite_(element, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'argIsString', u'element'])
        if var.get(u'element').instanceof(var.get(u'JQLite')):
            return var.get(u'element')
        pass
        if var.get(u'isString')(var.get(u'element')):
            var.put(u'element', var.get(u'trim')(var.get(u'element')))
            var.put(u'argIsString', var.get(u'true'))
        if var.get(u"this").instanceof(var.get(u'JQLite')).neg():
            if (var.get(u'argIsString') and (var.get(u'element').callprop(u'charAt', Js(0.0))!=Js(u'<'))):
                PyJsTempException = JsToPyException(var.get(u'jqLiteMinErr')(Js(u'nosel'), Js(u'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element')))
                raise PyJsTempException
            return var.get(u'JQLite').create(var.get(u'element'))
        if var.get(u'argIsString'):
            var.get(u'jqLiteAddNodes')(var.get(u"this"), var.get(u'jqLiteParseHTML')(var.get(u'element')))
        else:
            var.get(u'jqLiteAddNodes')(var.get(u"this"), var.get(u'element'))
    PyJsHoisted_JQLite_.func_name = u'JQLite'
    var.put(u'JQLite', PyJsHoisted_JQLite_)
    @Js
    def PyJsHoisted_directiveNormalize_(name, this, arguments, var=var):
        var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
        var.registers([u'name'])
        return var.get(u'camelCase')(var.get(u'name').callprop(u'replace', var.get(u'PREFIX_REGEXP'), Js(u'')))
    PyJsHoisted_directiveNormalize_.func_name = u'directiveNormalize'
    var.put(u'directiveNormalize', PyJsHoisted_directiveNormalize_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'debug', u'self'])
        var.put(u'debug', var.get(u'true'))
        var.put(u'self', var.get(u"this"))
        @Js
        def PyJs_anonymous_453_(flag, this, arguments, var=var):
            var = Scope({u'this':this, u'flag':flag, u'arguments':arguments}, var)
            var.registers([u'flag'])
            if var.get(u'isDefined')(var.get(u'flag')):
                var.put(u'debug', var.get(u'flag'))
                return var.get(u"this")
            else:
                return var.get(u'debug')
        PyJs_anonymous_453_._set_name(u'anonymous')
        var.get(u"this").put(u'debugEnabled', PyJs_anonymous_453_)
        @Js
        def PyJs_anonymous_454_(PyJsArg_2477696e646f77_, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'$window':PyJsArg_2477696e646f77_}, var)
            var.registers([u'formatError', u'consoleLog', u'$window'])
            @Js
            def PyJsHoisted_formatError_(arg, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'arg':arg}, var)
                var.registers([u'arg'])
                if var.get(u'arg').instanceof(var.get(u'Error')):
                    if var.get(u'arg').get(u'stack'):
                        var.put(u'arg', ((((Js(u'Error: ')+var.get(u'arg').get(u'message'))+Js(u'\n'))+var.get(u'arg').get(u'stack')) if (var.get(u'arg').get(u'message') and PyJsStrictEq(var.get(u'arg').get(u'stack').callprop(u'indexOf', var.get(u'arg').get(u'message')),(-Js(1.0)))) else var.get(u'arg').get(u'stack')))
                    else:
                        if var.get(u'arg').get(u'sourceURL'):
                            var.put(u'arg', ((((var.get(u'arg').get(u'message')+Js(u'\n'))+var.get(u'arg').get(u'sourceURL'))+Js(u':'))+var.get(u'arg').get(u'line')))
                return var.get(u'arg')
            PyJsHoisted_formatError_.func_name = u'formatError'
            var.put(u'formatError', PyJsHoisted_formatError_)
            @Js
            def PyJsHoisted_consoleLog_(type, this, arguments, var=var):
                var = Scope({u'this':this, u'type':type, u'arguments':arguments}, var)
                var.registers([u'hasApply', u'type', u'console', u'logFn'])
                PyJs_Object_458_ = Js({})
                var.put(u'console', (var.get(u'$window').get(u'console') or PyJs_Object_458_))
                var.put(u'logFn', ((var.get(u'console').get(var.get(u'type')) or var.get(u'console').get(u'log')) or var.get(u'noop')))
                var.put(u'hasApply', Js(False))
                try:
                    var.put(u'hasApply', var.get(u'logFn').get(u'apply').neg().neg())
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_48118449 = var.own.get(u'e')
                    var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                    try:
                        pass
                    finally:
                        if PyJsHolder_65_48118449 is not None:
                            var.own[u'e'] = PyJsHolder_65_48118449
                        else:
                            del var.own[u'e']
                        del PyJsHolder_65_48118449
                if var.get(u'hasApply'):
                    @Js
                    def PyJs_anonymous_459_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([u'args'])
                        var.put(u'args', Js([]))
                        @Js
                        def PyJs_anonymous_460_(arg, this, arguments, var=var):
                            var = Scope({u'this':this, u'arguments':arguments, u'arg':arg}, var)
                            var.registers([u'arg'])
                            var.get(u'args').callprop(u'push', var.get(u'formatError')(var.get(u'arg')))
                        PyJs_anonymous_460_._set_name(u'anonymous')
                        var.get(u'forEach')(var.get(u'arguments'), PyJs_anonymous_460_)
                        return var.get(u'logFn').callprop(u'apply', var.get(u'console'), var.get(u'args'))
                    PyJs_anonymous_459_._set_name(u'anonymous')
                    return PyJs_anonymous_459_
                @Js
                def PyJs_anonymous_461_(arg1, arg2, this, arguments, var=var):
                    var = Scope({u'this':this, u'arg1':arg1, u'arg2':arg2, u'arguments':arguments}, var)
                    var.registers([u'arg1', u'arg2'])
                    var.get(u'logFn')(var.get(u'arg1'), (Js(u'') if (var.get(u'arg2')==var.get(u"null")) else var.get(u'arg2')))
                PyJs_anonymous_461_._set_name(u'anonymous')
                return PyJs_anonymous_461_
            PyJsHoisted_consoleLog_.func_name = u'consoleLog'
            var.put(u'consoleLog', PyJsHoisted_consoleLog_)
            @Js
            def PyJs_anonymous_456_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'fn'])
                var.put(u'fn', var.get(u'consoleLog')(Js(u'debug')))
                @Js
                def PyJs_anonymous_457_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    if var.get(u'debug'):
                        var.get(u'fn').callprop(u'apply', var.get(u'self'), var.get(u'arguments'))
                PyJs_anonymous_457_._set_name(u'anonymous')
                return PyJs_anonymous_457_
            PyJs_anonymous_456_._set_name(u'anonymous')
            PyJs_Object_455_ = Js({u'log':var.get(u'consoleLog')(Js(u'log')),u'info':var.get(u'consoleLog')(Js(u'info')),u'warn':var.get(u'consoleLog')(Js(u'warn')),u'error':var.get(u'consoleLog')(Js(u'error')),u'debug':PyJs_anonymous_456_()})
            return PyJs_Object_455_
            pass
            pass
        PyJs_anonymous_454_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$window'), PyJs_anonymous_454_]))
    PyJsHoistedNonPyName.func_name = u'$LogProvider'
    var.put(u'$LogProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_stringBasedInputType_(ctrl, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'ctrl':ctrl}, var)
        var.registers([u'ctrl'])
        @Js
        def PyJs_anonymous_966_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            return (var.get(u'value') if var.get(u'ctrl').callprop(u'$isEmpty', var.get(u'value')) else var.get(u'value').callprop(u'toString'))
        PyJs_anonymous_966_._set_name(u'anonymous')
        var.get(u'ctrl').get(u'$formatters').callprop(u'push', PyJs_anonymous_966_)
    PyJsHoisted_stringBasedInputType_.func_name = u'stringBasedInputType'
    var.put(u'stringBasedInputType', PyJsHoisted_stringBasedInputType_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_863_(PyJsArg_24726f6f7453636f7065_, PyJsArg_2462726f77736572_, PyJsArg_246c6f636174696f6e_, this, arguments, var=var):
            var = Scope({u'$location':PyJsArg_246c6f636174696f6e_, u'this':this, u'$rootScope':PyJsArg_24726f6f7453636f7065_, u'$browser':PyJsArg_2462726f77736572_, u'arguments':arguments}, var)
            var.registers([u'$location', u'$rootScope', u'$browser', u'testability'])
            PyJs_Object_864_ = Js({})
            var.put(u'testability', PyJs_Object_864_)
            @Js
            def PyJs_anonymous_865_(element, expression, opt_exactMatch, this, arguments, var=var):
                var = Scope({u'this':this, u'opt_exactMatch':opt_exactMatch, u'expression':expression, u'arguments':arguments, u'element':element}, var)
                var.registers([u'matches', u'opt_exactMatch', u'bindings', u'expression', u'element'])
                var.put(u'bindings', var.get(u'element').callprop(u'getElementsByClassName', Js(u'ng-binding')))
                var.put(u'matches', Js([]))
                @Js
                def PyJs_anonymous_866_(binding, this, arguments, var=var):
                    var = Scope({u'this':this, u'binding':binding, u'arguments':arguments}, var)
                    var.registers([u'dataBinding', u'binding'])
                    var.put(u'dataBinding', var.get(u'angular').callprop(u'element', var.get(u'binding')).callprop(u'data', Js(u'$binding')))
                    if var.get(u'dataBinding'):
                        @Js
                        def PyJs_anonymous_867_(bindingName, this, arguments, var=var):
                            var = Scope({u'this':this, u'bindingName':bindingName, u'arguments':arguments}, var)
                            var.registers([u'matcher', u'bindingName'])
                            if var.get(u'opt_exactMatch'):
                                var.put(u'matcher', var.get(u'RegExp').create(((Js(u'(^|\\s)')+var.get(u'escapeForRegexp')(var.get(u'expression')))+Js(u'(\\s|\\||$)'))))
                                if var.get(u'matcher').callprop(u'test', var.get(u'bindingName')):
                                    var.get(u'matches').callprop(u'push', var.get(u'binding'))
                            else:
                                if (var.get(u'bindingName').callprop(u'indexOf', var.get(u'expression'))!=(-Js(1.0))):
                                    var.get(u'matches').callprop(u'push', var.get(u'binding'))
                        PyJs_anonymous_867_._set_name(u'anonymous')
                        var.get(u'forEach')(var.get(u'dataBinding'), PyJs_anonymous_867_)
                PyJs_anonymous_866_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'bindings'), PyJs_anonymous_866_)
                return var.get(u'matches')
            PyJs_anonymous_865_._set_name(u'anonymous')
            var.get(u'testability').put(u'findBindings', PyJs_anonymous_865_)
            @Js
            def PyJs_anonymous_868_(element, expression, opt_exactMatch, this, arguments, var=var):
                var = Scope({u'this':this, u'opt_exactMatch':opt_exactMatch, u'expression':expression, u'arguments':arguments, u'element':element}, var)
                var.registers([u'elements', u'attributeEquals', u'opt_exactMatch', u'element', u'prefixes', u'p', u'selector', u'expression'])
                var.put(u'prefixes', Js([Js(u'ng-'), Js(u'data-ng-'), Js(u'ng\\:')]))
                #for JS loop
                var.put(u'p', Js(0.0))
                while (var.get(u'p')<var.get(u'prefixes').get(u'length')):
                    try:
                        var.put(u'attributeEquals', (Js(u'=') if var.get(u'opt_exactMatch') else Js(u'*=')))
                        var.put(u'selector', ((((((Js(u'[')+var.get(u'prefixes').get(var.get(u'p')))+Js(u'model'))+var.get(u'attributeEquals'))+Js(u'"'))+var.get(u'expression'))+Js(u'"]')))
                        var.put(u'elements', var.get(u'element').callprop(u'querySelectorAll', var.get(u'selector')))
                        if var.get(u'elements').get(u'length'):
                            return var.get(u'elements')
                    finally:
                            var.put(u'p',var.get(u'p')+Js(1))
            PyJs_anonymous_868_._set_name(u'anonymous')
            var.get(u'testability').put(u'findModels', PyJs_anonymous_868_)
            @Js
            def PyJs_anonymous_869_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                return var.get(u'$location').callprop(u'url')
            PyJs_anonymous_869_._set_name(u'anonymous')
            var.get(u'testability').put(u'getLocation', PyJs_anonymous_869_)
            @Js
            def PyJs_anonymous_870_(url, this, arguments, var=var):
                var = Scope({u'url':url, u'this':this, u'arguments':arguments}, var)
                var.registers([u'url'])
                if PyJsStrictNeq(var.get(u'url'),var.get(u'$location').callprop(u'url')):
                    var.get(u'$location').callprop(u'url', var.get(u'url'))
                    var.get(u'$rootScope').callprop(u'$digest')
            PyJs_anonymous_870_._set_name(u'anonymous')
            var.get(u'testability').put(u'setLocation', PyJs_anonymous_870_)
            @Js
            def PyJs_anonymous_871_(callback, this, arguments, var=var):
                var = Scope({u'this':this, u'callback':callback, u'arguments':arguments}, var)
                var.registers([u'callback'])
                var.get(u'$browser').callprop(u'notifyWhenNoOutstandingRequests', var.get(u'callback'))
            PyJs_anonymous_871_._set_name(u'anonymous')
            var.get(u'testability').put(u'whenStable', PyJs_anonymous_871_)
            return var.get(u'testability')
        PyJs_anonymous_863_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$rootScope'), Js(u'$browser'), Js(u'$location'), PyJs_anonymous_863_]))
    PyJsHoistedNonPyName.func_name = u'$$TestabilityProvider'
    var.put(u'$$TestabilityProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_createDateInputType_(type, regexp, parseDate, format, this, arguments, var=var):
        var = Scope({u'parseDate':parseDate, u'arguments':arguments, u'format':format, u'this':this, u'regexp':regexp, u'type':type}, var)
        var.registers([u'parseDate', u'regexp', u'type', u'format'])
        @Js
        def PyJs_dynamicDateInputType_978_(scope, element, attr, ctrl, PyJsArg_24736e6966666572_, PyJsArg_2462726f77736572_, PyJsArg_2466696c746572_, this, arguments, var=var):
            var = Scope({u'$sniffer':PyJsArg_24736e6966666572_, u'attr':attr, u'ctrl':ctrl, u'this':this, u'$filter':PyJsArg_2466696c746572_, u'element':element, u'$browser':PyJsArg_2462726f77736572_, u'arguments':arguments, u'scope':scope, u'dynamicDateInputType':PyJs_dynamicDateInputType_978_}, var)
            var.registers([u'maxVal', u'attr', u'parseObservedDateValue', u'minVal', u'ctrl', u'$filter', u'element', u'isValidDate', u'$browser', u'scope', u'timezone', u'$sniffer', u'previousDate'])
            @Js
            def PyJsHoisted_isValidDate_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                return (var.get(u'value') and (var.get(u'value').get(u'getTime') and PyJsStrictNeq(var.get(u'value').callprop(u'getTime'),var.get(u'value').callprop(u'getTime'))).neg())
            PyJsHoisted_isValidDate_.func_name = u'isValidDate'
            var.put(u'isValidDate', PyJsHoisted_isValidDate_)
            @Js
            def PyJsHoisted_parseObservedDateValue_(val, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'val':val}, var)
                var.registers([u'val'])
                return ((var.get(u'parseDate')(var.get(u'val')) or var.get(u'undefined')) if (var.get(u'isDefined')(var.get(u'val')) and var.get(u'isDate')(var.get(u'val')).neg()) else var.get(u'val'))
            PyJsHoisted_parseObservedDateValue_.func_name = u'parseObservedDateValue'
            var.put(u'parseObservedDateValue', PyJsHoisted_parseObservedDateValue_)
            var.get(u'badInputChecker')(var.get(u'scope'), var.get(u'element'), var.get(u'attr'), var.get(u'ctrl'))
            var.get(u'baseInputType')(var.get(u'scope'), var.get(u'element'), var.get(u'attr'), var.get(u'ctrl'), var.get(u'$sniffer'), var.get(u'$browser'))
            var.put(u'timezone', ((var.get(u'ctrl') and var.get(u'ctrl').get(u'$options')) and var.get(u'ctrl').get(u'$options').get(u'timezone')))
            pass
            var.get(u'ctrl').put(u'$$parserName', var.get(u'type'))
            @Js
            def PyJs_anonymous_979_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'parsedDate', u'value'])
                if var.get(u'ctrl').callprop(u'$isEmpty', var.get(u'value')):
                    return var.get(u"null")
                if var.get(u'regexp').callprop(u'test', var.get(u'value')):
                    var.put(u'parsedDate', var.get(u'parseDate')(var.get(u'value'), var.get(u'previousDate')))
                    if var.get(u'timezone'):
                        var.put(u'parsedDate', var.get(u'convertTimezoneToLocal')(var.get(u'parsedDate'), var.get(u'timezone')))
                    return var.get(u'parsedDate')
                return var.get(u'undefined')
            PyJs_anonymous_979_._set_name(u'anonymous')
            var.get(u'ctrl').get(u'$parsers').callprop(u'push', PyJs_anonymous_979_)
            @Js
            def PyJs_anonymous_980_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                if (var.get(u'value') and var.get(u'isDate')(var.get(u'value')).neg()):
                    PyJsTempException = JsToPyException(var.get(u'ngModelMinErr')(Js(u'datefmt'), Js(u'Expected `{0}` to be a date'), var.get(u'value')))
                    raise PyJsTempException
                if var.get(u'isValidDate')(var.get(u'value')):
                    var.put(u'previousDate', var.get(u'value'))
                    if (var.get(u'previousDate') and var.get(u'timezone')):
                        var.put(u'previousDate', var.get(u'convertTimezoneToLocal')(var.get(u'previousDate'), var.get(u'timezone'), var.get(u'true')))
                    return var.get(u'$filter')(Js(u'date'))(var.get(u'value'), var.get(u'format'), var.get(u'timezone'))
                else:
                    var.put(u'previousDate', var.get(u"null"))
                    return Js(u'')
            PyJs_anonymous_980_._set_name(u'anonymous')
            var.get(u'ctrl').get(u'$formatters').callprop(u'push', PyJs_anonymous_980_)
            if (var.get(u'isDefined')(var.get(u'attr').get(u'min')) or var.get(u'attr').get(u'ngMin')):
                pass
                @Js
                def PyJs_anonymous_981_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    return ((var.get(u'isValidDate')(var.get(u'value')).neg() or var.get(u'isUndefined')(var.get(u'minVal'))) or (var.get(u'parseDate')(var.get(u'value'))>=var.get(u'minVal')))
                PyJs_anonymous_981_._set_name(u'anonymous')
                var.get(u'ctrl').get(u'$validators').put(u'min', PyJs_anonymous_981_)
                @Js
                def PyJs_anonymous_982_(val, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'val':val}, var)
                    var.registers([u'val'])
                    var.put(u'minVal', var.get(u'parseObservedDateValue')(var.get(u'val')))
                    var.get(u'ctrl').callprop(u'$validate')
                PyJs_anonymous_982_._set_name(u'anonymous')
                var.get(u'attr').callprop(u'$observe', Js(u'min'), PyJs_anonymous_982_)
            if (var.get(u'isDefined')(var.get(u'attr').get(u'max')) or var.get(u'attr').get(u'ngMax')):
                pass
                @Js
                def PyJs_anonymous_983_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    return ((var.get(u'isValidDate')(var.get(u'value')).neg() or var.get(u'isUndefined')(var.get(u'maxVal'))) or (var.get(u'parseDate')(var.get(u'value'))<=var.get(u'maxVal')))
                PyJs_anonymous_983_._set_name(u'anonymous')
                var.get(u'ctrl').get(u'$validators').put(u'max', PyJs_anonymous_983_)
                @Js
                def PyJs_anonymous_984_(val, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'val':val}, var)
                    var.registers([u'val'])
                    var.put(u'maxVal', var.get(u'parseObservedDateValue')(var.get(u'val')))
                    var.get(u'ctrl').callprop(u'$validate')
                PyJs_anonymous_984_._set_name(u'anonymous')
                var.get(u'attr').callprop(u'$observe', Js(u'max'), PyJs_anonymous_984_)
            pass
            pass
        PyJs_dynamicDateInputType_978_._set_name(u'dynamicDateInputType')
        return PyJs_dynamicDateInputType_978_
    PyJsHoisted_createDateInputType_.func_name = u'createDateInputType'
    var.put(u'createDateInputType', PyJsHoisted_createDateInputType_)
    @Js
    def PyJsHoisted_jsonFilter_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_897_(object, spacing, this, arguments, var=var):
            var = Scope({u'this':this, u'object':object, u'spacing':spacing, u'arguments':arguments}, var)
            var.registers([u'object', u'spacing'])
            if var.get(u'isUndefined')(var.get(u'spacing')):
                var.put(u'spacing', Js(2.0))
            return var.get(u'toJson')(var.get(u'object'), var.get(u'spacing'))
        PyJs_anonymous_897_._set_name(u'anonymous')
        return PyJs_anonymous_897_
    PyJsHoisted_jsonFilter_.func_name = u'jsonFilter'
    var.put(u'jsonFilter', PyJsHoisted_jsonFilter_)
    @Js
    def PyJsHoisted_ASTCompiler_(astBuilder, PyJsArg_2466696c746572_, this, arguments, var=var):
        var = Scope({u'this':this, u'astBuilder':astBuilder, u'$filter':PyJsArg_2466696c746572_, u'arguments':arguments}, var)
        var.registers([u'astBuilder', u'$filter'])
        var.get(u"this").put(u'astBuilder', var.get(u'astBuilder'))
        var.get(u"this").put(u'$filter', var.get(u'$filter'))
    PyJsHoisted_ASTCompiler_.func_name = u'ASTCompiler'
    var.put(u'ASTCompiler', PyJsHoisted_ASTCompiler_)
    @Js
    def PyJsHoisted_nodesetLinkingFn_(scope, nodeList, rootElement, boundTranscludeFn, this, arguments, var=var):
        var = Scope({u'boundTranscludeFn':boundTranscludeFn, u'nodeList':nodeList, u'arguments':arguments, u'this':this, u'scope':scope, u'rootElement':rootElement}, var)
        var.registers([u'boundTranscludeFn', u'scope', u'rootElement', u'nodeList'])
        pass
    PyJsHoisted_nodesetLinkingFn_.func_name = u'nodesetLinkingFn'
    var.put(u'nodesetLinkingFn', PyJsHoisted_nodesetLinkingFn_)
    @Js
    def PyJsHoisted_dateGetter_(name, size, offset, trim, this, arguments, var=var):
        var = Scope({u'trim':trim, u'name':name, u'offset':offset, u'this':this, u'arguments':arguments, u'size':size}, var)
        var.registers([u'trim', u'offset', u'name', u'size'])
        var.put(u'offset', (var.get(u'offset') or Js(0.0)))
        @Js
        def PyJs_anonymous_891_(date, this, arguments, var=var):
            var = Scope({u'date':date, u'this':this, u'arguments':arguments}, var)
            var.registers([u'date', u'value'])
            var.put(u'value', var.get(u'date').callprop((Js(u'get')+var.get(u'name'))))
            if ((var.get(u'offset')>Js(0.0)) or (var.get(u'value')>(-var.get(u'offset')))):
                var.put(u'value', var.get(u'offset'), u'+')
            if (PyJsStrictEq(var.get(u'value'),Js(0.0)) and (var.get(u'offset')==(-Js(12.0)))):
                var.put(u'value', Js(12.0))
            return var.get(u'padNumber')(var.get(u'value'), var.get(u'size'), var.get(u'trim'))
        PyJs_anonymous_891_._set_name(u'anonymous')
        return PyJs_anonymous_891_
    PyJsHoisted_dateGetter_.func_name = u'dateGetter'
    var.put(u'dateGetter', PyJsHoisted_dateGetter_)
    @Js
    def PyJsHoisted_noop_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        pass
    PyJsHoisted_noop_.func_name = u'noop'
    var.put(u'noop', PyJsHoisted_noop_)
    @Js
    def PyJsHoisted_prepareAnimateOptions_(options, this, arguments, var=var):
        var = Scope({u'this':this, u'options':options, u'arguments':arguments}, var)
        var.registers([u'options'])
        PyJs_Object_178_ = Js({})
        return (var.get(u'options') if var.get(u'isObject')(var.get(u'options')) else PyJs_Object_178_)
    PyJsHoisted_prepareAnimateOptions_.func_name = u'prepareAnimateOptions'
    var.put(u'prepareAnimateOptions', PyJsHoisted_prepareAnimateOptions_)
    @Js
    def PyJsHoisted_encodeUriSegment_(val, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'val':val}, var)
        var.registers([u'val'])
        return var.get(u'encodeUriQuery')(var.get(u'val'), var.get(u'true')).callprop(u'replace', JsRegExp(u'/%26/gi'), Js(u'&')).callprop(u'replace', JsRegExp(u'/%3D/gi'), Js(u'=')).callprop(u'replace', JsRegExp(u'/%2B/gi'), Js(u'+'))
    PyJsHoisted_encodeUriSegment_.func_name = u'encodeUriSegment'
    var.put(u'encodeUriSegment', PyJsHoisted_encodeUriSegment_)
    @Js
    def PyJsHoisted_stripFile_(url, this, arguments, var=var):
        var = Scope({u'url':url, u'this':this, u'arguments':arguments}, var)
        var.registers([u'url'])
        return var.get(u'url').callprop(u'substr', Js(0.0), (var.get(u'stripHash')(var.get(u'url')).callprop(u'lastIndexOf', Js(u'/'))+Js(1.0)))
    PyJsHoisted_stripFile_.func_name = u'stripFile'
    var.put(u'stripFile', PyJsHoisted_stripFile_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_851_(PyJsArg_2477696e646f77_, PyJsArg_24646f63756d656e74_, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'$document':PyJsArg_24646f63756d656e74_, u'$window':PyJsArg_2477696e646f77_}, var)
            var.registers([u'transitions', u'boxee', u'$document', u'eventSupport', u'$window', u'bodyStyle', u'prop', u'vendorRegex', u'vendorPrefix', u'animations', u'android', u'document', u'match'])
            PyJs_Object_852_ = Js({})
            var.put(u'eventSupport', PyJs_Object_852_)
            PyJs_Object_853_ = Js({})
            var.put(u'android', var.get(u'toInt')((JsRegExp(u'/android (\\d+)/').callprop(u'exec', var.get(u'lowercase')((var.get(u'$window').get(u'navigator') or PyJs_Object_853_).get(u'userAgent'))) or Js([])).get(u'1')))
            PyJs_Object_854_ = Js({})
            var.put(u'boxee', JsRegExp(u'/Boxee/i').callprop(u'test', (var.get(u'$window').get(u'navigator') or PyJs_Object_854_).get(u'userAgent')))
            PyJs_Object_855_ = Js({})
            var.put(u'document', (var.get(u'$document').get(u'0') or PyJs_Object_855_))
            var.put(u'vendorRegex', JsRegExp(u'/^(Moz|webkit|ms)(?=[A-Z])/'))
            var.put(u'bodyStyle', (var.get(u'document').get(u'body') and var.get(u'document').get(u'body').get(u'style')))
            var.put(u'transitions', Js(False))
            var.put(u'animations', Js(False))
            if var.get(u'bodyStyle'):
                for PyJsTemp in var.get(u'bodyStyle'):
                    var.put(u'prop', PyJsTemp)
                    if var.put(u'match', var.get(u'vendorRegex').callprop(u'exec', var.get(u'prop'))):
                        var.put(u'vendorPrefix', var.get(u'match').get(u'0'))
                        var.put(u'vendorPrefix', (var.get(u'vendorPrefix').callprop(u'substr', Js(0.0), Js(1.0)).callprop(u'toUpperCase')+var.get(u'vendorPrefix').callprop(u'substr', Js(1.0))))
                        break
                if var.get(u'vendorPrefix').neg():
                    var.put(u'vendorPrefix', (var.get(u'bodyStyle').contains(Js(u'WebkitOpacity')) and Js(u'webkit')))
                var.put(u'transitions', (var.get(u'bodyStyle').contains(Js(u'transition')) or var.get(u'bodyStyle').contains((var.get(u'vendorPrefix')+Js(u'Transition')))).neg().neg())
                var.put(u'animations', (var.get(u'bodyStyle').contains(Js(u'animation')) or var.get(u'bodyStyle').contains((var.get(u'vendorPrefix')+Js(u'Animation')))).neg().neg())
                if (var.get(u'android') and (var.get(u'transitions').neg() or var.get(u'animations').neg())):
                    var.put(u'transitions', var.get(u'isString')(var.get(u'bodyStyle').get(u'webkitTransition')))
                    var.put(u'animations', var.get(u'isString')(var.get(u'bodyStyle').get(u'webkitAnimation')))
            @Js
            def PyJs_anonymous_857_(event, this, arguments, var=var):
                var = Scope({u'this':this, u'event':event, u'arguments':arguments}, var)
                var.registers([u'divElm', u'event'])
                if (PyJsStrictEq(var.get(u'event'),Js(u'input')) and (var.get(u'msie')<=Js(11.0))):
                    return Js(False)
                if var.get(u'isUndefined')(var.get(u'eventSupport').get(var.get(u'event'))):
                    var.put(u'divElm', var.get(u'document').callprop(u'createElement', Js(u'div')))
                    var.get(u'eventSupport').put(var.get(u'event'), var.get(u'divElm').contains((Js(u'on')+var.get(u'event'))))
                return var.get(u'eventSupport').get(var.get(u'event'))
            PyJs_anonymous_857_._set_name(u'anonymous')
            PyJs_Object_856_ = Js({u'history':(((var.get(u'$window').get(u'history') and var.get(u'$window').get(u'history').get(u'pushState')) and (var.get(u'android')<Js(4.0)).neg()) and var.get(u'boxee').neg()).neg().neg(),u'hasEvent':PyJs_anonymous_857_,u'csp':var.get(u'csp')(),u'vendorPrefix':var.get(u'vendorPrefix'),u'transitions':var.get(u'transitions'),u'animations':var.get(u'animations'),u'android':var.get(u'android')})
            return PyJs_Object_856_
        PyJs_anonymous_851_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$window'), Js(u'$document'), PyJs_anonymous_851_]))
    PyJsHoistedNonPyName.func_name = u'$SnifferProvider'
    var.put(u'$SnifferProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_isUndefined_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        return PyJsStrictEq(var.get(u'value',throw=False).typeof(),Js(u'undefined'))
    PyJsHoisted_isUndefined_.func_name = u'isUndefined'
    var.put(u'isUndefined', PyJsHoisted_isUndefined_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        var.get(u"this").put(u'$get', var.get(u'valueFn')(var.get(u'window')))
    PyJsHoistedNonPyName.func_name = u'$WindowProvider'
    var.put(u'$WindowProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_assignableAST_(ast, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'ast':ast}, var)
        var.registers([u'ast'])
        if (PyJsStrictEq(var.get(u'ast').get(u'body').get(u'length'),Js(1.0)) and var.get(u'isAssignable')(var.get(u'ast').get(u'body').get(u'0').get(u'expression'))):
            PyJs_Object_543_ = Js({u'type':var.get(u'AST').get(u'NGValueParameter')})
            PyJs_Object_542_ = Js({u'type':var.get(u'AST').get(u'AssignmentExpression'),u'left':var.get(u'ast').get(u'body').get(u'0').get(u'expression'),u'right':PyJs_Object_543_,u'operator':Js(u'=')})
            return PyJs_Object_542_
    PyJsHoisted_assignableAST_.func_name = u'assignableAST'
    var.put(u'assignableAST', PyJsHoisted_assignableAST_)
    @Js
    def PyJsHoisted_jqLiteEmpty_(element, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'element'])
        var.get(u'jqLiteDealoc')(var.get(u'element'), var.get(u'true'))
        while var.get(u'element').get(u'firstChild'):
            var.get(u'element').callprop(u'removeChild', var.get(u'element').get(u'firstChild'))
    PyJsHoisted_jqLiteEmpty_.func_name = u'jqLiteEmpty'
    var.put(u'jqLiteEmpty', PyJsHoisted_jqLiteEmpty_)
    @Js
    def PyJsHoisted_extend_(dst, this, arguments, var=var):
        var = Scope({u'this':this, u'dst':dst, u'arguments':arguments}, var)
        var.registers([u'dst'])
        return var.get(u'baseExtend')(var.get(u'dst'), var.get(u'slice').callprop(u'call', var.get(u'arguments'), Js(1.0)), Js(False))
    PyJsHoisted_extend_.func_name = u'extend'
    var.put(u'extend', PyJsHoisted_extend_)
    @Js
    def PyJsHoisted_splitClasses_(classes, this, arguments, var=var):
        var = Scope({u'this':this, u'classes':classes, u'arguments':arguments}, var)
        var.registers([u'classes', u'obj'])
        if var.get(u'isString')(var.get(u'classes')):
            var.put(u'classes', var.get(u'classes').callprop(u'split', Js(u' ')))
        var.put(u'obj', var.get(u'createMap')())
        @Js
        def PyJs_anonymous_177_(klass, this, arguments, var=var):
            var = Scope({u'this':this, u'klass':klass, u'arguments':arguments}, var)
            var.registers([u'klass'])
            if var.get(u'klass').get(u'length'):
                var.get(u'obj').put(var.get(u'klass'), var.get(u'true'))
        PyJs_anonymous_177_._set_name(u'anonymous')
        var.get(u'forEach')(var.get(u'classes'), PyJs_anonymous_177_)
        return var.get(u'obj')
    PyJsHoisted_splitClasses_.func_name = u'splitClasses'
    var.put(u'splitClasses', PyJsHoisted_splitClasses_)
    @Js
    def PyJsHoisted_adjustMatchers_(matchers, this, arguments, var=var):
        var = Scope({u'this':this, u'matchers':matchers, u'arguments':arguments}, var)
        var.registers([u'matchers', u'adjustedMatchers'])
        var.put(u'adjustedMatchers', Js([]))
        if var.get(u'isDefined')(var.get(u'matchers')):
            @Js
            def PyJs_anonymous_830_(matcher, this, arguments, var=var):
                var = Scope({u'this':this, u'matcher':matcher, u'arguments':arguments}, var)
                var.registers([u'matcher'])
                var.get(u'adjustedMatchers').callprop(u'push', var.get(u'adjustMatcher')(var.get(u'matcher')))
            PyJs_anonymous_830_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'matchers'), PyJs_anonymous_830_)
        return var.get(u'adjustedMatchers')
    PyJsHoisted_adjustMatchers_.func_name = u'adjustMatchers'
    var.put(u'adjustMatchers', PyJsHoisted_adjustMatchers_)
    @Js
    def PyJsHoisted_defaultHandlerWrapper_(element, event, handler, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'handler':handler, u'event':event, u'element':element}, var)
        var.registers([u'handler', u'event', u'element'])
        var.get(u'handler').callprop(u'call', var.get(u'element'), var.get(u'event'))
    PyJsHoisted_defaultHandlerWrapper_.func_name = u'defaultHandlerWrapper'
    var.put(u'defaultHandlerWrapper', PyJsHoisted_defaultHandlerWrapper_)
    @Js
    def PyJsHoisted_equals_(o1, o2, this, arguments, var=var):
        var = Scope({u'this':this, u'o2':o2, u'o1':o1, u'arguments':arguments}, var)
        var.registers([u't2', u't1', u'keySet', u'length', u'key', u'o2', u'o1'])
        if PyJsStrictEq(var.get(u'o1'),var.get(u'o2')):
            return var.get(u'true')
        if (PyJsStrictEq(var.get(u'o1'),var.get(u"null")) or PyJsStrictEq(var.get(u'o2'),var.get(u"null"))):
            return Js(False)
        if (PyJsStrictNeq(var.get(u'o1'),var.get(u'o1')) and PyJsStrictNeq(var.get(u'o2'),var.get(u'o2'))):
            return var.get(u'true')
        var.put(u't1', var.get(u'o1',throw=False).typeof())
        var.put(u't2', var.get(u'o2',throw=False).typeof())
        if (var.get(u't1')==var.get(u't2')):
            if (var.get(u't1')==Js(u'object')):
                if var.get(u'isArray')(var.get(u'o1')):
                    if var.get(u'isArray')(var.get(u'o2')).neg():
                        return Js(False)
                    if (var.put(u'length', var.get(u'o1').get(u'length'))==var.get(u'o2').get(u'length')):
                        #for JS loop
                        var.put(u'key', Js(0.0))
                        while (var.get(u'key')<var.get(u'length')):
                            try:
                                if var.get(u'equals')(var.get(u'o1').get(var.get(u'key')), var.get(u'o2').get(var.get(u'key'))).neg():
                                    return Js(False)
                            finally:
                                    (var.put(u'key',var.get(u'key')+Js(1))-Js(1))
                        return var.get(u'true')
                else:
                    if var.get(u'isDate')(var.get(u'o1')):
                        if var.get(u'isDate')(var.get(u'o2')).neg():
                            return Js(False)
                        return var.get(u'equals')(var.get(u'o1').callprop(u'getTime'), var.get(u'o2').callprop(u'getTime'))
                    else:
                        if var.get(u'isRegExp')(var.get(u'o1')):
                            return ((var.get(u'o1').callprop(u'toString')==var.get(u'o2').callprop(u'toString')) if var.get(u'isRegExp')(var.get(u'o2')) else Js(False))
                        else:
                            if ((((((var.get(u'isScope')(var.get(u'o1')) or var.get(u'isScope')(var.get(u'o2'))) or var.get(u'isWindow')(var.get(u'o1'))) or var.get(u'isWindow')(var.get(u'o2'))) or var.get(u'isArray')(var.get(u'o2'))) or var.get(u'isDate')(var.get(u'o2'))) or var.get(u'isRegExp')(var.get(u'o2'))):
                                return Js(False)
                            var.put(u'keySet', var.get(u'createMap')())
                            for PyJsTemp in var.get(u'o1'):
                                var.put(u'key', PyJsTemp)
                                if (PyJsStrictEq(var.get(u'key').callprop(u'charAt', Js(0.0)),Js(u'$')) or var.get(u'isFunction')(var.get(u'o1').get(var.get(u'key')))):
                                    continue
                                if var.get(u'equals')(var.get(u'o1').get(var.get(u'key')), var.get(u'o2').get(var.get(u'key'))).neg():
                                    return Js(False)
                                var.get(u'keySet').put(var.get(u'key'), var.get(u'true'))
                            for PyJsTemp in var.get(u'o2'):
                                var.put(u'key', PyJsTemp)
                                if (((var.get(u'keySet').contains(var.get(u'key')).neg() and PyJsStrictNeq(var.get(u'key').callprop(u'charAt', Js(0.0)),Js(u'$'))) and var.get(u'isDefined')(var.get(u'o2').get(var.get(u'key')))) and var.get(u'isFunction')(var.get(u'o2').get(var.get(u'key'))).neg()):
                                    return Js(False)
                            return var.get(u'true')
        return Js(False)
    PyJsHoisted_equals_.func_name = u'equals'
    var.put(u'equals', PyJsHoisted_equals_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_InlineNonPyName_141_(this, arguments, var=var):
            var = Scope({u'this':this, u'$$jqLite':PyJs_InlineNonPyName_141_, u'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_143_(node, classes, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'classes':classes, u'arguments':arguments}, var)
                var.registers([u'node', u'classes'])
                if var.get(u'node').get(u'attr'):
                    var.put(u'node', var.get(u'node').get(u'0'))
                return var.get(u'jqLiteHasClass')(var.get(u'node'), var.get(u'classes'))
            PyJs_anonymous_143_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_144_(node, classes, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'classes':classes, u'arguments':arguments}, var)
                var.registers([u'node', u'classes'])
                if var.get(u'node').get(u'attr'):
                    var.put(u'node', var.get(u'node').get(u'0'))
                return var.get(u'jqLiteAddClass')(var.get(u'node'), var.get(u'classes'))
            PyJs_anonymous_144_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_145_(node, classes, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'classes':classes, u'arguments':arguments}, var)
                var.registers([u'node', u'classes'])
                if var.get(u'node').get(u'attr'):
                    var.put(u'node', var.get(u'node').get(u'0'))
                return var.get(u'jqLiteRemoveClass')(var.get(u'node'), var.get(u'classes'))
            PyJs_anonymous_145_._set_name(u'anonymous')
            PyJs_Object_142_ = Js({u'hasClass':PyJs_anonymous_143_,u'addClass':PyJs_anonymous_144_,u'removeClass':PyJs_anonymous_145_})
            return var.get(u'extend')(var.get(u'JQLite'), PyJs_Object_142_)
        PyJs_InlineNonPyName_141_._set_name(u'$$jqLite')
        var.get(u"this").put(u'$get', PyJs_InlineNonPyName_141_)
    PyJsHoistedNonPyName.func_name = u'$$jqLiteProvider'
    var.put(u'$$jqLiteProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_transformData_(data, headers, status, fns, this, arguments, var=var):
        var = Scope({u'status':status, u'headers':headers, u'fns':fns, u'arguments':arguments, u'this':this, u'data':data}, var)
        var.registers([u'status', u'headers', u'data', u'fns'])
        if var.get(u'isFunction')(var.get(u'fns')):
            return var.get(u'fns')(var.get(u'data'), var.get(u'headers'), var.get(u'status'))
        @Js
        def PyJs_anonymous_360_(fn, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'fn':fn}, var)
            var.registers([u'fn'])
            var.put(u'data', var.get(u'fn')(var.get(u'data'), var.get(u'headers'), var.get(u'status')))
        PyJs_anonymous_360_._set_name(u'anonymous')
        var.get(u'forEach')(var.get(u'fns'), PyJs_anonymous_360_)
        return var.get(u'data')
    PyJsHoisted_transformData_.func_name = u'transformData'
    var.put(u'transformData', PyJsHoisted_transformData_)
    @Js
    def PyJsHoisted_ensureSafeFunction_(obj, fullExpression, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'arguments':arguments, u'fullExpression':fullExpression}, var)
        var.registers([u'obj', u'fullExpression'])
        if var.get(u'obj'):
            if PyJsStrictEq(var.get(u'obj').get(u'constructor'),var.get(u'obj')):
                PyJsTempException = JsToPyException(var.get(u'$parseMinErr')(Js(u'isecfn'), Js(u'Referencing Function in Angular expressions is disallowed! Expression: {0}'), var.get(u'fullExpression')))
                raise PyJsTempException
            else:
                if ((PyJsStrictEq(var.get(u'obj'),var.get(u'CALL')) or PyJsStrictEq(var.get(u'obj'),var.get(u'APPLY'))) or PyJsStrictEq(var.get(u'obj'),var.get(u'BIND'))):
                    PyJsTempException = JsToPyException(var.get(u'$parseMinErr')(Js(u'isecff'), Js(u'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}'), var.get(u'fullExpression')))
                    raise PyJsTempException
    PyJsHoisted_ensureSafeFunction_.func_name = u'ensureSafeFunction'
    var.put(u'ensureSafeFunction', PyJsHoisted_ensureSafeFunction_)
    @Js
    def PyJsHoisted_assertNotHasOwnProperty_(name, context, this, arguments, var=var):
        var = Scope({u'this':this, u'name':name, u'context':context, u'arguments':arguments}, var)
        var.registers([u'name', u'context'])
        if PyJsStrictEq(var.get(u'name'),Js(u'hasOwnProperty')):
            PyJsTempException = JsToPyException(var.get(u'ngMinErr')(Js(u'badname'), Js(u'hasOwnProperty is not a valid {0} name'), var.get(u'context')))
            raise PyJsTempException
    PyJsHoisted_assertNotHasOwnProperty_.func_name = u'assertNotHasOwnProperty'
    var.put(u'assertNotHasOwnProperty', PyJsHoisted_assertNotHasOwnProperty_)
    @Js
    def PyJsHoisted_getTypeForFilter_(val, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'val':val}, var)
        var.registers([u'val'])
        return (Js(u'null') if PyJsStrictEq(var.get(u'val'),var.get(u"null")) else var.get(u'val',throw=False).typeof())
    PyJsHoisted_getTypeForFilter_.func_name = u'getTypeForFilter'
    var.put(u'getTypeForFilter', PyJsHoisted_getTypeForFilter_)
    @Js
    def PyJsHoisted_adjustMatcher_(matcher, this, arguments, var=var):
        var = Scope({u'this':this, u'matcher':matcher, u'arguments':arguments}, var)
        var.registers([u'matcher'])
        if PyJsStrictEq(var.get(u'matcher'),Js(u'self')):
            return var.get(u'matcher')
        else:
            if var.get(u'isString')(var.get(u'matcher')):
                if (var.get(u'matcher').callprop(u'indexOf', Js(u'***'))>(-Js(1.0))):
                    PyJsTempException = JsToPyException(var.get(u'$sceMinErr')(Js(u'iwcard'), Js(u'Illegal sequence *** in string matcher.  String: {0}'), var.get(u'matcher')))
                    raise PyJsTempException
                var.put(u'matcher', var.get(u'escapeForRegexp')(var.get(u'matcher')).callprop(u'replace', Js(u'\\*\\*'), Js(u'.*')).callprop(u'replace', Js(u'\\*'), Js(u'[^:/.?&;]*')))
                return var.get(u'RegExp').create(((Js(u'^')+var.get(u'matcher'))+Js(u'$')))
            else:
                if var.get(u'isRegExp')(var.get(u'matcher')):
                    return var.get(u'RegExp').create(((Js(u'^')+var.get(u'matcher').get(u'source'))+Js(u'$')))
                else:
                    PyJsTempException = JsToPyException(var.get(u'$sceMinErr')(Js(u'imatcher'), Js(u'Matchers may only be "self", string patterns or RegExp objects')))
                    raise PyJsTempException
    PyJsHoisted_adjustMatcher_.func_name = u'adjustMatcher'
    var.put(u'adjustMatcher', PyJsHoisted_adjustMatcher_)
    @Js
    def PyJsHoisted_encodePath_(path, this, arguments, var=var):
        var = Scope({u'this':this, u'path':path, u'arguments':arguments}, var)
        var.registers([u'i', u'path', u'segments'])
        var.put(u'segments', var.get(u'path').callprop(u'split', Js(u'/')))
        var.put(u'i', var.get(u'segments').get(u'length'))
        while (var.put(u'i',var.get(u'i')-Js(1))+Js(1)):
            var.get(u'segments').put(var.get(u'i'), var.get(u'encodeUriSegment')(var.get(u'segments').get(var.get(u'i'))))
        return var.get(u'segments').callprop(u'join', Js(u'/'))
    PyJsHoisted_encodePath_.func_name = u'encodePath'
    var.put(u'encodePath', PyJsHoisted_encodePath_)
    @Js
    def PyJsHoisted_arrayRemove_(array, value, this, arguments, var=var):
        var = Scope({u'this':this, u'array':array, u'arguments':arguments, u'value':value}, var)
        var.registers([u'index', u'array', u'value'])
        var.put(u'index', var.get(u'array').callprop(u'indexOf', var.get(u'value')))
        if (var.get(u'index')>=Js(0.0)):
            var.get(u'array').callprop(u'splice', var.get(u'index'), Js(1.0))
        return var.get(u'index')
    PyJsHoisted_arrayRemove_.func_name = u'arrayRemove'
    var.put(u'arrayRemove', PyJsHoisted_arrayRemove_)
    @Js
    def PyJsHoisted_qFactory_(nextTick, exceptionHandler, this, arguments, var=var):
        var = Scope({u'nextTick':nextTick, u'this':this, u'exceptionHandler':exceptionHandler, u'arguments':arguments}, var)
        var.registers([u'nextTick', u'defer', u'makePromise', u'callOnce', u'resolve', u'all', u'when', u'handleCallback', u'exceptionHandler', u'$qMinErr', u'Deferred', u'scheduleProcessQueue', u'Promise', u'reject', u'simpleBind', u'processQueue', u'$Q'])
        @Js
        def PyJsHoisted_all_(promises, this, arguments, var=var):
            var = Scope({u'this':this, u'promises':promises, u'arguments':arguments}, var)
            var.registers([u'deferred', u'promises', u'counter', u'results'])
            var.put(u'deferred', var.get(u'Deferred').create())
            var.put(u'counter', Js(0.0))
            PyJs_Object_770_ = Js({})
            var.put(u'results', (Js([]) if var.get(u'isArray')(var.get(u'promises')) else PyJs_Object_770_))
            @Js
            def PyJs_anonymous_771_(promise, key, this, arguments, var=var):
                var = Scope({u'this':this, u'promise':promise, u'arguments':arguments, u'key':key}, var)
                var.registers([u'promise', u'key'])
                (var.put(u'counter',var.get(u'counter')+Js(1))-Js(1))
                @Js
                def PyJs_anonymous_772_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    if var.get(u'results').callprop(u'hasOwnProperty', var.get(u'key')):
                        return var.get('undefined')
                    var.get(u'results').put(var.get(u'key'), var.get(u'value'))
                    if var.put(u'counter',var.get(u'counter')-Js(1)).neg():
                        var.get(u'deferred').callprop(u'resolve', var.get(u'results'))
                PyJs_anonymous_772_._set_name(u'anonymous')
                @Js
                def PyJs_anonymous_773_(reason, this, arguments, var=var):
                    var = Scope({u'this':this, u'reason':reason, u'arguments':arguments}, var)
                    var.registers([u'reason'])
                    if var.get(u'results').callprop(u'hasOwnProperty', var.get(u'key')):
                        return var.get('undefined')
                    var.get(u'deferred').callprop(u'reject', var.get(u'reason'))
                PyJs_anonymous_773_._set_name(u'anonymous')
                var.get(u'when')(var.get(u'promise')).callprop(u'then', PyJs_anonymous_772_, PyJs_anonymous_773_)
            PyJs_anonymous_771_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'promises'), PyJs_anonymous_771_)
            if PyJsStrictEq(var.get(u'counter'),Js(0.0)):
                var.get(u'deferred').callprop(u'resolve', var.get(u'results'))
            return var.get(u'deferred').get(u'promise')
        PyJsHoisted_all_.func_name = u'all'
        var.put(u'all', PyJsHoisted_all_)
        @Js
        def PyJsHoisted_callOnce_(self, resolveFn, rejectFn, this, arguments, var=var):
            var = Scope({u'this':this, u'resolveFn':resolveFn, u'self':self, u'arguments':arguments, u'rejectFn':rejectFn}, var)
            var.registers([u'wrap', u'resolveFn', u'self', u'called', u'rejectFn'])
            @Js
            def PyJsHoisted_wrap_(fn, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'fn':fn}, var)
                var.registers([u'fn'])
                @Js
                def PyJs_anonymous_746_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    if var.get(u'called'):
                        return var.get('undefined')
                    var.put(u'called', var.get(u'true'))
                    var.get(u'fn').callprop(u'call', var.get(u'self'), var.get(u'value'))
                PyJs_anonymous_746_._set_name(u'anonymous')
                return PyJs_anonymous_746_
            PyJsHoisted_wrap_.func_name = u'wrap'
            var.put(u'wrap', PyJsHoisted_wrap_)
            var.put(u'called', Js(False))
            pass
            return Js([var.get(u'wrap')(var.get(u'resolveFn')), var.get(u'wrap')(var.get(u'rejectFn'))])
        PyJsHoisted_callOnce_.func_name = u'callOnce'
        var.put(u'callOnce', PyJsHoisted_callOnce_)
        @Js
        def PyJsHoisted_Deferred_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put(u'promise', var.get(u'Promise').create())
            var.get(u"this").put(u'resolve', var.get(u'simpleBind')(var.get(u"this"), var.get(u"this").get(u'resolve')))
            var.get(u"this").put(u'reject', var.get(u'simpleBind')(var.get(u"this"), var.get(u"this").get(u'reject')))
            var.get(u"this").put(u'notify', var.get(u'simpleBind')(var.get(u"this"), var.get(u"this").get(u'notify')))
        PyJsHoisted_Deferred_.func_name = u'Deferred'
        var.put(u'Deferred', PyJsHoisted_Deferred_)
        @Js
        def PyJsHoisted_scheduleProcessQueue_(state, this, arguments, var=var):
            var = Scope({u'this':this, u'state':state, u'arguments':arguments}, var)
            var.registers([u'state'])
            if (var.get(u'state').get(u'processScheduled') or var.get(u'state').get(u'pending').neg()):
                return var.get('undefined')
            var.get(u'state').put(u'processScheduled', var.get(u'true'))
            @Js
            def PyJs_anonymous_756_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                var.get(u'processQueue')(var.get(u'state'))
            PyJs_anonymous_756_._set_name(u'anonymous')
            var.get(u'nextTick')(PyJs_anonymous_756_)
        PyJsHoisted_scheduleProcessQueue_.func_name = u'scheduleProcessQueue'
        var.put(u'scheduleProcessQueue', PyJsHoisted_scheduleProcessQueue_)
        @Js
        def PyJsHoisted_Promise_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            PyJs_Object_748_ = Js({u'status':Js(0.0)})
            var.get(u"this").put(u'$$state', PyJs_Object_748_)
        PyJsHoisted_Promise_.func_name = u'Promise'
        var.put(u'Promise', PyJsHoisted_Promise_)
        @Js
        def PyJsHoisted_simpleBind_(context, fn, this, arguments, var=var):
            var = Scope({u'this':this, u'fn':fn, u'context':context, u'arguments':arguments}, var)
            var.registers([u'fn', u'context'])
            @Js
            def PyJs_anonymous_755_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                var.get(u'fn').callprop(u'call', var.get(u'context'), var.get(u'value'))
            PyJs_anonymous_755_._set_name(u'anonymous')
            return PyJs_anonymous_755_
        PyJsHoisted_simpleBind_.func_name = u'simpleBind'
        var.put(u'simpleBind', PyJsHoisted_simpleBind_)
        @Js
        def PyJsHoisted_processQueue_(state, this, arguments, var=var):
            var = Scope({u'this':this, u'state':state, u'arguments':arguments}, var)
            var.registers([u'i', u'ii', u'deferred', u'state', u'fn', u'pending'])
            pass
            var.put(u'pending', var.get(u'state').get(u'pending'))
            var.get(u'state').put(u'processScheduled', Js(False))
            var.get(u'state').put(u'pending', var.get(u'undefined'))
            #for JS loop
            var.put(u'i', Js(0.0))
            var.put(u'ii', var.get(u'pending').get(u'length'))
            while (var.get(u'i')<var.get(u'ii')):
                try:
                    var.put(u'deferred', var.get(u'pending').get(var.get(u'i')).get(u'0'))
                    var.put(u'fn', var.get(u'pending').get(var.get(u'i')).get(var.get(u'state').get(u'status')))
                    try:
                        if var.get(u'isFunction')(var.get(u'fn')):
                            var.get(u'deferred').callprop(u'resolve', var.get(u'fn')(var.get(u'state').get(u'value')))
                        else:
                            if PyJsStrictEq(var.get(u'state').get(u'status'),Js(1.0)):
                                var.get(u'deferred').callprop(u'resolve', var.get(u'state').get(u'value'))
                            else:
                                var.get(u'deferred').callprop(u'reject', var.get(u'state').get(u'value'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_20060893 = var.own.get(u'e')
                        var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                        try:
                            var.get(u'deferred').callprop(u'reject', var.get(u'e'))
                            var.get(u'exceptionHandler')(var.get(u'e'))
                        finally:
                            if PyJsHolder_65_20060893 is not None:
                                var.own[u'e'] = PyJsHolder_65_20060893
                            else:
                                del var.own[u'e']
                            del PyJsHolder_65_20060893
                finally:
                        var.put(u'i',var.get(u'i')+Js(1))
        PyJsHoisted_processQueue_.func_name = u'processQueue'
        var.put(u'processQueue', PyJsHoisted_processQueue_)
        var.put(u'$qMinErr', var.get(u'minErr')(Js(u'$q'), var.get(u'TypeError')))
        pass
        @Js
        def PyJs_anonymous_747_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            return var.get(u'Deferred').create()
        PyJs_anonymous_747_._set_name(u'anonymous')
        var.put(u'defer', PyJs_anonymous_747_)
        pass
        @Js
        def PyJs_anonymous_750_(onFulfilled, onRejected, progressBack, this, arguments, var=var):
            var = Scope({u'progressBack':progressBack, u'this':this, u'onRejected':onRejected, u'arguments':arguments, u'onFulfilled':onFulfilled}, var)
            var.registers([u'progressBack', u'onRejected', u'result', u'onFulfilled'])
            if ((var.get(u'isUndefined')(var.get(u'onFulfilled')) and var.get(u'isUndefined')(var.get(u'onRejected'))) and var.get(u'isUndefined')(var.get(u'progressBack'))):
                return var.get(u"this")
            var.put(u'result', var.get(u'Deferred').create())
            var.get(u"this").get(u'$$state').put(u'pending', (var.get(u"this").get(u'$$state').get(u'pending') or Js([])))
            var.get(u"this").get(u'$$state').get(u'pending').callprop(u'push', Js([var.get(u'result'), var.get(u'onFulfilled'), var.get(u'onRejected'), var.get(u'progressBack')]))
            if (var.get(u"this").get(u'$$state').get(u'status')>Js(0.0)):
                var.get(u'scheduleProcessQueue')(var.get(u"this").get(u'$$state'))
            return var.get(u'result').get(u'promise')
        PyJs_anonymous_750_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_751_(callback, this, arguments, var=var):
            var = Scope({u'this':this, u'callback':callback, u'arguments':arguments}, var)
            var.registers([u'callback'])
            return var.get(u"this").callprop(u'then', var.get(u"null"), var.get(u'callback'))
        PyJs_anonymous_751_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_752_(callback, progressBack, this, arguments, var=var):
            var = Scope({u'progressBack':progressBack, u'callback':callback, u'this':this, u'arguments':arguments}, var)
            var.registers([u'progressBack', u'callback'])
            @Js
            def PyJs_anonymous_753_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                return var.get(u'handleCallback')(var.get(u'value'), var.get(u'true'), var.get(u'callback'))
            PyJs_anonymous_753_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_754_(error, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'error':error}, var)
                var.registers([u'error'])
                return var.get(u'handleCallback')(var.get(u'error'), Js(False), var.get(u'callback'))
            PyJs_anonymous_754_._set_name(u'anonymous')
            return var.get(u"this").callprop(u'then', PyJs_anonymous_753_, PyJs_anonymous_754_, var.get(u'progressBack'))
        PyJs_anonymous_752_._set_name(u'anonymous')
        PyJs_Object_749_ = Js({u'then':PyJs_anonymous_750_,u'catch':PyJs_anonymous_751_,u'finally':PyJs_anonymous_752_})
        var.get(u'extend')(var.get(u'Promise').get(u'prototype'), PyJs_Object_749_)
        pass
        pass
        pass
        pass
        @Js
        def PyJs_anonymous_758_(val, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'val':val}, var)
            var.registers([u'val'])
            if var.get(u"this").get(u'promise').get(u'$$state').get(u'status'):
                return var.get('undefined')
            if PyJsStrictEq(var.get(u'val'),var.get(u"this").get(u'promise')):
                var.get(u"this").callprop(u'$$reject', var.get(u'$qMinErr')(Js(u'qcycle'), Js(u"Expected promise to be resolved with value other than itself '{0}'"), var.get(u'val')))
            else:
                var.get(u"this").callprop(u'$$resolve', var.get(u'val'))
        PyJs_anonymous_758_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_759_(val, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'val':val}, var)
            var.registers([u'then', u'fns', u'val'])
            pass
            var.put(u'fns', var.get(u'callOnce')(var.get(u"this"), var.get(u"this").get(u'$$resolve'), var.get(u"this").get(u'$$reject')))
            try:
                if (var.get(u'isObject')(var.get(u'val')) or var.get(u'isFunction')(var.get(u'val'))):
                    var.put(u'then', (var.get(u'val') and var.get(u'val').get(u'then')))
                if var.get(u'isFunction')(var.get(u'then')):
                    var.get(u"this").get(u'promise').get(u'$$state').put(u'status', (-Js(1.0)))
                    var.get(u'then').callprop(u'call', var.get(u'val'), var.get(u'fns').get(u'0'), var.get(u'fns').get(u'1'), var.get(u"this").get(u'notify'))
                else:
                    var.get(u"this").get(u'promise').get(u'$$state').put(u'value', var.get(u'val'))
                    var.get(u"this").get(u'promise').get(u'$$state').put(u'status', Js(1.0))
                    var.get(u'scheduleProcessQueue')(var.get(u"this").get(u'promise').get(u'$$state'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_65489806 = var.own.get(u'e')
                var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                try:
                    var.get(u'fns').callprop(u'1', var.get(u'e'))
                    var.get(u'exceptionHandler')(var.get(u'e'))
                finally:
                    if PyJsHolder_65_65489806 is not None:
                        var.own[u'e'] = PyJsHolder_65_65489806
                    else:
                        del var.own[u'e']
                    del PyJsHolder_65_65489806
        PyJs_anonymous_759_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_760_(reason, this, arguments, var=var):
            var = Scope({u'this':this, u'reason':reason, u'arguments':arguments}, var)
            var.registers([u'reason'])
            if var.get(u"this").get(u'promise').get(u'$$state').get(u'status'):
                return var.get('undefined')
            var.get(u"this").callprop(u'$$reject', var.get(u'reason'))
        PyJs_anonymous_760_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_761_(reason, this, arguments, var=var):
            var = Scope({u'this':this, u'reason':reason, u'arguments':arguments}, var)
            var.registers([u'reason'])
            var.get(u"this").get(u'promise').get(u'$$state').put(u'value', var.get(u'reason'))
            var.get(u"this").get(u'promise').get(u'$$state').put(u'status', Js(2.0))
            var.get(u'scheduleProcessQueue')(var.get(u"this").get(u'promise').get(u'$$state'))
        PyJs_anonymous_761_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_762_(progress, this, arguments, var=var):
            var = Scope({u'this':this, u'progress':progress, u'arguments':arguments}, var)
            var.registers([u'callbacks', u'progress'])
            var.put(u'callbacks', var.get(u"this").get(u'promise').get(u'$$state').get(u'pending'))
            if (((var.get(u"this").get(u'promise').get(u'$$state').get(u'status')<=Js(0.0)) and var.get(u'callbacks')) and var.get(u'callbacks').get(u'length')):
                @Js
                def PyJs_anonymous_763_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'i', u'callback', u'ii', u'result'])
                    pass
                    #for JS loop
                    var.put(u'i', Js(0.0))
                    var.put(u'ii', var.get(u'callbacks').get(u'length'))
                    while (var.get(u'i')<var.get(u'ii')):
                        try:
                            var.put(u'result', var.get(u'callbacks').get(var.get(u'i')).get(u'0'))
                            var.put(u'callback', var.get(u'callbacks').get(var.get(u'i')).get(u'3'))
                            try:
                                var.get(u'result').callprop(u'notify', (var.get(u'callback')(var.get(u'progress')) if var.get(u'isFunction')(var.get(u'callback')) else var.get(u'progress')))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_65_6191000 = var.own.get(u'e')
                                var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                                try:
                                    var.get(u'exceptionHandler')(var.get(u'e'))
                                finally:
                                    if PyJsHolder_65_6191000 is not None:
                                        var.own[u'e'] = PyJsHolder_65_6191000
                                    else:
                                        del var.own[u'e']
                                    del PyJsHolder_65_6191000
                        finally:
                                (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                PyJs_anonymous_763_._set_name(u'anonymous')
                var.get(u'nextTick')(PyJs_anonymous_763_)
        PyJs_anonymous_762_._set_name(u'anonymous')
        PyJs_Object_757_ = Js({u'resolve':PyJs_anonymous_758_,u'$$resolve':PyJs_anonymous_759_,u'reject':PyJs_anonymous_760_,u'$$reject':PyJs_anonymous_761_,u'notify':PyJs_anonymous_762_})
        var.get(u'extend')(var.get(u'Deferred').get(u'prototype'), PyJs_Object_757_)
        @Js
        def PyJs_anonymous_764_(reason, this, arguments, var=var):
            var = Scope({u'this':this, u'reason':reason, u'arguments':arguments}, var)
            var.registers([u'reason', u'result'])
            var.put(u'result', var.get(u'Deferred').create())
            var.get(u'result').callprop(u'reject', var.get(u'reason'))
            return var.get(u'result').get(u'promise')
        PyJs_anonymous_764_._set_name(u'anonymous')
        var.put(u'reject', PyJs_anonymous_764_)
        @Js
        def PyJs_makePromise_765_(value, resolved, this, arguments, var=var):
            var = Scope({u'resolved':resolved, u'this':this, u'makePromise':PyJs_makePromise_765_, u'arguments':arguments, u'value':value}, var)
            var.registers([u'resolved', u'result', u'value'])
            var.put(u'result', var.get(u'Deferred').create())
            if var.get(u'resolved'):
                var.get(u'result').callprop(u'resolve', var.get(u'value'))
            else:
                var.get(u'result').callprop(u'reject', var.get(u'value'))
            return var.get(u'result').get(u'promise')
        PyJs_makePromise_765_._set_name(u'makePromise')
        var.put(u'makePromise', PyJs_makePromise_765_)
        @Js
        def PyJs_handleCallback_766_(value, isResolved, callback, this, arguments, var=var):
            var = Scope({u'this':this, u'handleCallback':PyJs_handleCallback_766_, u'value':value, u'callback':callback, u'arguments':arguments, u'isResolved':isResolved}, var)
            var.registers([u'callback', u'isResolved', u'callbackOutput', u'value'])
            var.put(u'callbackOutput', var.get(u"null"))
            try:
                if var.get(u'isFunction')(var.get(u'callback')):
                    var.put(u'callbackOutput', var.get(u'callback')())
            except PyJsException as PyJsTempException:
                PyJsHolder_65_18759676 = var.own.get(u'e')
                var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                try:
                    return var.get(u'makePromise')(var.get(u'e'), Js(False))
                finally:
                    if PyJsHolder_65_18759676 is not None:
                        var.own[u'e'] = PyJsHolder_65_18759676
                    else:
                        del var.own[u'e']
                    del PyJsHolder_65_18759676
            if var.get(u'isPromiseLike')(var.get(u'callbackOutput')):
                @Js
                def PyJs_anonymous_767_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    return var.get(u'makePromise')(var.get(u'value'), var.get(u'isResolved'))
                PyJs_anonymous_767_._set_name(u'anonymous')
                @Js
                def PyJs_anonymous_768_(error, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'error':error}, var)
                    var.registers([u'error'])
                    return var.get(u'makePromise')(var.get(u'error'), Js(False))
                PyJs_anonymous_768_._set_name(u'anonymous')
                return var.get(u'callbackOutput').callprop(u'then', PyJs_anonymous_767_, PyJs_anonymous_768_)
            else:
                return var.get(u'makePromise')(var.get(u'value'), var.get(u'isResolved'))
        PyJs_handleCallback_766_._set_name(u'handleCallback')
        var.put(u'handleCallback', PyJs_handleCallback_766_)
        @Js
        def PyJs_anonymous_769_(value, callback, errback, progressBack, this, arguments, var=var):
            var = Scope({u'callback':callback, u'arguments':arguments, u'progressBack':progressBack, u'this':this, u'value':value, u'errback':errback}, var)
            var.registers([u'progressBack', u'callback', u'result', u'value', u'errback'])
            var.put(u'result', var.get(u'Deferred').create())
            var.get(u'result').callprop(u'resolve', var.get(u'value'))
            return var.get(u'result').get(u'promise').callprop(u'then', var.get(u'callback'), var.get(u'errback'), var.get(u'progressBack'))
        PyJs_anonymous_769_._set_name(u'anonymous')
        var.put(u'when', PyJs_anonymous_769_)
        var.put(u'resolve', var.get(u'when'))
        pass
        @Js
        def PyJs_Q_774_(resolver, this, arguments, var=var):
            var = Scope({u'this':this, u'Q':PyJs_Q_774_, u'arguments':arguments, u'resolver':resolver}, var)
            var.registers([u'deferred', u'rejectFn', u'resolver', u'resolveFn'])
            @Js
            def PyJsHoisted_resolveFn_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                var.get(u'deferred').callprop(u'resolve', var.get(u'value'))
            PyJsHoisted_resolveFn_.func_name = u'resolveFn'
            var.put(u'resolveFn', PyJsHoisted_resolveFn_)
            @Js
            def PyJsHoisted_rejectFn_(reason, this, arguments, var=var):
                var = Scope({u'this':this, u'reason':reason, u'arguments':arguments}, var)
                var.registers([u'reason'])
                var.get(u'deferred').callprop(u'reject', var.get(u'reason'))
            PyJsHoisted_rejectFn_.func_name = u'rejectFn'
            var.put(u'rejectFn', PyJsHoisted_rejectFn_)
            if var.get(u'isFunction')(var.get(u'resolver')).neg():
                PyJsTempException = JsToPyException(var.get(u'$qMinErr')(Js(u'norslvr'), Js(u"Expected resolverFn, got '{0}'"), var.get(u'resolver')))
                raise PyJsTempException
            if var.get(u"this").instanceof(var.get(u'Q')).neg():
                return var.get(u'Q').create(var.get(u'resolver'))
            var.put(u'deferred', var.get(u'Deferred').create())
            pass
            pass
            var.get(u'resolver')(var.get(u'resolveFn'), var.get(u'rejectFn'))
            return var.get(u'deferred').get(u'promise')
        PyJs_Q_774_._set_name(u'Q')
        var.put(u'$Q', PyJs_Q_774_)
        var.get(u'$Q').put(u'defer', var.get(u'defer'))
        var.get(u'$Q').put(u'reject', var.get(u'reject'))
        var.get(u'$Q').put(u'when', var.get(u'when'))
        var.get(u'$Q').put(u'resolve', var.get(u'resolve'))
        var.get(u'$Q').put(u'all', var.get(u'all'))
        return var.get(u'$Q')
    PyJsHoisted_qFactory_.func_name = u'qFactory'
    var.put(u'qFactory', PyJsHoisted_qFactory_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_396_(PyJsArg_2462726f77736572_, PyJsArg_2477696e646f77_, PyJsArg_24646f63756d656e74_, PyJsArg_24786872466163746f7279_, this, arguments, var=var):
            var = Scope({u'$browser':PyJsArg_2462726f77736572_, u'arguments':arguments, u'$document':PyJsArg_24646f63756d656e74_, u'$window':PyJsArg_2477696e646f77_, u'this':this, u'$xhrFactory':PyJsArg_24786872466163746f7279_}, var)
            var.registers([u'$xhrFactory', u'$browser', u'$document', u'$window'])
            return var.get(u'createHttpBackend')(var.get(u'$browser'), var.get(u'$xhrFactory'), var.get(u'$browser').get(u'defer'), var.get(u'$window').get(u'angular').get(u'callbacks'), var.get(u'$document').get(u'0'))
        PyJs_anonymous_396_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$browser'), Js(u'$window'), Js(u'$document'), Js(u'$xhrFactory'), PyJs_anonymous_396_]))
    PyJsHoistedNonPyName.func_name = u'$HttpBackendProvider'
    var.put(u'$HttpBackendProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'enabled'])
        var.put(u'enabled', var.get(u'true'))
        @Js
        def PyJs_anonymous_841_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            if var.get(u'arguments').get(u'length'):
                var.put(u'enabled', var.get(u'value').neg().neg())
            return var.get(u'enabled')
        PyJs_anonymous_841_._set_name(u'anonymous')
        var.get(u"this").put(u'enabled', PyJs_anonymous_841_)
        @Js
        def PyJs_anonymous_842_(PyJsArg_247061727365_, PyJsArg_2473636544656c6567617465_, this, arguments, var=var):
            var = Scope({u'this':this, u'$sceDelegate':PyJsArg_2473636544656c6567617465_, u'arguments':arguments, u'$parse':PyJsArg_247061727365_}, var)
            var.registers([u'trustAs', u'sce', u'$sceDelegate', u'parse', u'getTrusted', u'$parse'])
            if (var.get(u'enabled') and (var.get(u'msie')<Js(8.0))):
                PyJsTempException = JsToPyException(var.get(u'$sceMinErr')(Js(u'iequirks'), ((Js(u'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ')+Js(u'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML '))+Js(u'document.  See http://docs.angularjs.org/api/ng.$sce for more information.'))))
                raise PyJsTempException
            var.put(u'sce', var.get(u'shallowCopy')(var.get(u'SCE_CONTEXTS')))
            @Js
            def PyJs_anonymous_843_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                return var.get(u'enabled')
            PyJs_anonymous_843_._set_name(u'anonymous')
            var.get(u'sce').put(u'isEnabled', PyJs_anonymous_843_)
            var.get(u'sce').put(u'trustAs', var.get(u'$sceDelegate').get(u'trustAs'))
            var.get(u'sce').put(u'getTrusted', var.get(u'$sceDelegate').get(u'getTrusted'))
            var.get(u'sce').put(u'valueOf', var.get(u'$sceDelegate').get(u'valueOf'))
            if var.get(u'enabled').neg():
                @Js
                def PyJs_anonymous_844_(type, value, this, arguments, var=var):
                    var = Scope({u'this':this, u'type':type, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'type', u'value'])
                    return var.get(u'value')
                PyJs_anonymous_844_._set_name(u'anonymous')
                var.get(u'sce').put(u'trustAs', var.get(u'sce').put(u'getTrusted', PyJs_anonymous_844_))
                var.get(u'sce').put(u'valueOf', var.get(u'identity'))
            @Js
            def PyJs_sceParseAs_845_(type, expr, this, arguments, var=var):
                var = Scope({u'this':this, u'expr':expr, u'sceParseAs':PyJs_sceParseAs_845_, u'type':type, u'arguments':arguments}, var)
                var.registers([u'expr', u'type', u'parsed'])
                var.put(u'parsed', var.get(u'$parse')(var.get(u'expr')))
                if (var.get(u'parsed').get(u'literal') and var.get(u'parsed').get(u'constant')):
                    return var.get(u'parsed')
                else:
                    @Js
                    def PyJs_anonymous_846_(value, this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                        var.registers([u'value'])
                        return var.get(u'sce').callprop(u'getTrusted', var.get(u'type'), var.get(u'value'))
                    PyJs_anonymous_846_._set_name(u'anonymous')
                    return var.get(u'$parse')(var.get(u'expr'), PyJs_anonymous_846_)
            PyJs_sceParseAs_845_._set_name(u'sceParseAs')
            var.get(u'sce').put(u'parseAs', PyJs_sceParseAs_845_)
            var.put(u'parse', var.get(u'sce').get(u'parseAs'))
            var.put(u'getTrusted', var.get(u'sce').get(u'getTrusted'))
            var.put(u'trustAs', var.get(u'sce').get(u'trustAs'))
            @Js
            def PyJs_anonymous_847_(enumValue, name, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'enumValue':enumValue}, var)
                var.registers([u'lName', u'name', u'enumValue'])
                var.put(u'lName', var.get(u'lowercase')(var.get(u'name')))
                @Js
                def PyJs_anonymous_848_(expr, this, arguments, var=var):
                    var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                    var.registers([u'expr'])
                    return var.get(u'parse')(var.get(u'enumValue'), var.get(u'expr'))
                PyJs_anonymous_848_._set_name(u'anonymous')
                var.get(u'sce').put(var.get(u'camelCase')((Js(u'parse_as_')+var.get(u'lName'))), PyJs_anonymous_848_)
                @Js
                def PyJs_anonymous_849_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    return var.get(u'getTrusted')(var.get(u'enumValue'), var.get(u'value'))
                PyJs_anonymous_849_._set_name(u'anonymous')
                var.get(u'sce').put(var.get(u'camelCase')((Js(u'get_trusted_')+var.get(u'lName'))), PyJs_anonymous_849_)
                @Js
                def PyJs_anonymous_850_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    return var.get(u'trustAs')(var.get(u'enumValue'), var.get(u'value'))
                PyJs_anonymous_850_._set_name(u'anonymous')
                var.get(u'sce').put(var.get(u'camelCase')((Js(u'trust_as_')+var.get(u'lName'))), PyJs_anonymous_850_)
            PyJs_anonymous_847_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'SCE_CONTEXTS'), PyJs_anonymous_847_)
            return var.get(u'sce')
        PyJs_anonymous_842_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$parse'), Js(u'$sceDelegate'), PyJs_anonymous_842_]))
    PyJsHoistedNonPyName.func_name = u'$SceProvider'
    var.put(u'$SceProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_chromeHack_(optionElement, this, arguments, var=var):
        var = Scope({u'this':this, u'optionElement':optionElement, u'arguments':arguments}, var)
        var.registers([u'optionElement'])
        if var.get(u'optionElement').get(u'0').callprop(u'hasAttribute', Js(u'selected')):
            var.get(u'optionElement').get(u'0').put(u'selected', var.get(u'true'))
    PyJsHoisted_chromeHack_.func_name = u'chromeHack'
    var.put(u'chromeHack', PyJsHoisted_chromeHack_)
    @Js
    def PyJsHoistedNonPyName(PyJsArg_24646f63756d656e74_, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'$document':PyJsArg_24646f63756d656e74_}, var)
        var.registers([u'safeDecodeURIComponent', u'rawDocument', u'lastCookieString', u'lastCookies', u'$document'])
        @Js
        def PyJsHoisted_safeDecodeURIComponent_(str, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'str':str}, var)
            var.registers([u'str'])
            try:
                return var.get(u'decodeURIComponent')(var.get(u'str'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_31711468 = var.own.get(u'e')
                var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                try:
                    return var.get(u'str')
                finally:
                    if PyJsHolder_65_31711468 is not None:
                        var.own[u'e'] = PyJsHolder_65_31711468
                    else:
                        del var.own[u'e']
                    del PyJsHolder_65_31711468
        PyJsHoisted_safeDecodeURIComponent_.func_name = u'safeDecodeURIComponent'
        var.put(u'safeDecodeURIComponent', PyJsHoisted_safeDecodeURIComponent_)
        PyJs_Object_877_ = Js({})
        var.put(u'rawDocument', (var.get(u'$document').get(u'0') or PyJs_Object_877_))
        PyJs_Object_878_ = Js({})
        var.put(u'lastCookies', PyJs_Object_878_)
        var.put(u'lastCookieString', Js(u''))
        pass
        @Js
        def PyJs_anonymous_879_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'index', u'name', u'i', u'currentCookieString', u'cookie', u'cookieArray'])
            pass
            var.put(u'currentCookieString', (var.get(u'rawDocument').get(u'cookie') or Js(u'')))
            if PyJsStrictNeq(var.get(u'currentCookieString'),var.get(u'lastCookieString')):
                var.put(u'lastCookieString', var.get(u'currentCookieString'))
                var.put(u'cookieArray', var.get(u'lastCookieString').callprop(u'split', Js(u'; ')))
                PyJs_Object_880_ = Js({})
                var.put(u'lastCookies', PyJs_Object_880_)
                #for JS loop
                var.put(u'i', Js(0.0))
                while (var.get(u'i')<var.get(u'cookieArray').get(u'length')):
                    try:
                        var.put(u'cookie', var.get(u'cookieArray').get(var.get(u'i')))
                        var.put(u'index', var.get(u'cookie').callprop(u'indexOf', Js(u'=')))
                        if (var.get(u'index')>Js(0.0)):
                            var.put(u'name', var.get(u'safeDecodeURIComponent')(var.get(u'cookie').callprop(u'substring', Js(0.0), var.get(u'index'))))
                            if var.get(u'isUndefined')(var.get(u'lastCookies').get(var.get(u'name'))):
                                var.get(u'lastCookies').put(var.get(u'name'), var.get(u'safeDecodeURIComponent')(var.get(u'cookie').callprop(u'substring', (var.get(u'index')+Js(1.0)))))
                    finally:
                            (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
            return var.get(u'lastCookies')
        PyJs_anonymous_879_._set_name(u'anonymous')
        return PyJs_anonymous_879_
    PyJsHoistedNonPyName.func_name = u'$$CookieReader'
    var.put(u'$$CookieReader', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_jqLiteAddNodes_(root, elements, this, arguments, var=var):
        var = Scope({u'this':this, u'elements':elements, u'root':root, u'arguments':arguments}, var)
        var.registers([u'i', u'length', u'elements', u'root'])
        if var.get(u'elements'):
            if var.get(u'elements').get(u'nodeType'):
                var.get(u'root').put((var.get(u'root').put(u'length',var.get(u'root').get(u'length')+Js(1))-Js(1)), var.get(u'elements'))
            else:
                var.put(u'length', var.get(u'elements').get(u'length'))
                if (PyJsStrictEq(var.get(u'length',throw=False).typeof(),Js(u'number')) and PyJsStrictNeq(var.get(u'elements').get(u'window'),var.get(u'elements'))):
                    if var.get(u'length'):
                        #for JS loop
                        var.put(u'i', Js(0.0))
                        while (var.get(u'i')<var.get(u'length')):
                            try:
                                var.get(u'root').put((var.get(u'root').put(u'length',var.get(u'root').get(u'length')+Js(1))-Js(1)), var.get(u'elements').get(var.get(u'i')))
                            finally:
                                    (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                else:
                    var.get(u'root').put((var.get(u'root').put(u'length',var.get(u'root').get(u'length')+Js(1))-Js(1)), var.get(u'elements'))
    PyJsHoisted_jqLiteAddNodes_.func_name = u'jqLiteAddNodes'
    var.put(u'jqLiteAddNodes', PyJsHoisted_jqLiteAddNodes_)
    @Js
    def PyJsHoisted_publishExternalAPI_(angular, this, arguments, var=var):
        var = Scope({u'this':this, u'angular':angular, u'arguments':arguments}, var)
        var.registers([u'angular'])
        PyJs_Object_57_ = Js({u'counter':Js(0.0)})
        PyJs_Object_56_ = Js({u'bootstrap':var.get(u'bootstrap'),u'copy':var.get(u'copy'),u'extend':var.get(u'extend'),u'merge':var.get(u'merge'),u'equals':var.get(u'equals'),u'element':var.get(u'jqLite'),u'forEach':var.get(u'forEach'),u'injector':var.get(u'createInjector'),u'noop':var.get(u'noop'),u'bind':var.get(u'bind'),u'toJson':var.get(u'toJson'),u'fromJson':var.get(u'fromJson'),u'identity':var.get(u'identity'),u'isUndefined':var.get(u'isUndefined'),u'isDefined':var.get(u'isDefined'),u'isString':var.get(u'isString'),u'isFunction':var.get(u'isFunction'),u'isObject':var.get(u'isObject'),u'isNumber':var.get(u'isNumber'),u'isElement':var.get(u'isElement'),u'isArray':var.get(u'isArray'),u'version':var.get(u'version'),u'isDate':var.get(u'isDate'),u'lowercase':var.get(u'lowercase'),u'uppercase':var.get(u'uppercase'),u'callbacks':PyJs_Object_57_,u'getTestability':var.get(u'getTestability'),u'$$minErr':var.get(u'minErr'),u'$$csp':var.get(u'csp'),u'reloadWithDebugInfo':var.get(u'reloadWithDebugInfo')})
        var.get(u'extend')(var.get(u'angular'), PyJs_Object_56_)
        var.put(u'angularModule', var.get(u'setupModuleLoader')(var.get(u'window')))
        @Js
        def PyJs_ngModule_58_(PyJsArg_2470726f76696465_, this, arguments, var=var):
            var = Scope({u'this':this, u'ngModule':PyJs_ngModule_58_, u'$provide':PyJsArg_2470726f76696465_, u'arguments':arguments}, var)
            var.registers([u'$provide'])
            PyJs_Object_59_ = Js({u'$$sanitizeUri':var.get(u'$$SanitizeUriProvider')})
            var.get(u'$provide').callprop(u'provider', PyJs_Object_59_)
            PyJs_Object_60_ = Js({u'ngInclude':var.get(u'ngIncludeFillContentDirective')})
            PyJs_Object_61_ = Js({u'a':var.get(u'htmlAnchorDirective'),u'input':var.get(u'inputDirective'),u'textarea':var.get(u'inputDirective'),u'form':var.get(u'formDirective'),u'script':var.get(u'scriptDirective'),u'select':var.get(u'selectDirective'),u'style':var.get(u'styleDirective'),u'option':var.get(u'optionDirective'),u'ngBind':var.get(u'ngBindDirective'),u'ngBindHtml':var.get(u'ngBindHtmlDirective'),u'ngBindTemplate':var.get(u'ngBindTemplateDirective'),u'ngClass':var.get(u'ngClassDirective'),u'ngClassEven':var.get(u'ngClassEvenDirective'),u'ngClassOdd':var.get(u'ngClassOddDirective'),u'ngCloak':var.get(u'ngCloakDirective'),u'ngController':var.get(u'ngControllerDirective'),u'ngForm':var.get(u'ngFormDirective'),u'ngHide':var.get(u'ngHideDirective'),u'ngIf':var.get(u'ngIfDirective'),u'ngInclude':var.get(u'ngIncludeDirective'),u'ngInit':var.get(u'ngInitDirective'),u'ngNonBindable':var.get(u'ngNonBindableDirective'),u'ngPluralize':var.get(u'ngPluralizeDirective'),u'ngRepeat':var.get(u'ngRepeatDirective'),u'ngShow':var.get(u'ngShowDirective'),u'ngStyle':var.get(u'ngStyleDirective'),u'ngSwitch':var.get(u'ngSwitchDirective'),u'ngSwitchWhen':var.get(u'ngSwitchWhenDirective'),u'ngSwitchDefault':var.get(u'ngSwitchDefaultDirective'),u'ngOptions':var.get(u'ngOptionsDirective'),u'ngTransclude':var.get(u'ngTranscludeDirective'),u'ngModel':var.get(u'ngModelDirective'),u'ngList':var.get(u'ngListDirective'),u'ngChange':var.get(u'ngChangeDirective'),u'pattern':var.get(u'patternDirective'),u'ngPattern':var.get(u'patternDirective'),u'required':var.get(u'requiredDirective'),u'ngRequired':var.get(u'requiredDirective'),u'minlength':var.get(u'minlengthDirective'),u'ngMinlength':var.get(u'minlengthDirective'),u'maxlength':var.get(u'maxlengthDirective'),u'ngMaxlength':var.get(u'maxlengthDirective'),u'ngValue':var.get(u'ngValueDirective'),u'ngModelOptions':var.get(u'ngModelOptionsDirective')})
            var.get(u'$provide').callprop(u'provider', Js(u'$compile'), var.get(u'$CompileProvider')).callprop(u'directive', PyJs_Object_61_).callprop(u'directive', PyJs_Object_60_).callprop(u'directive', var.get(u'ngAttributeAliasDirectives')).callprop(u'directive', var.get(u'ngEventDirectives'))
            PyJs_Object_62_ = Js({u'$anchorScroll':var.get(u'$AnchorScrollProvider'),u'$animate':var.get(u'$AnimateProvider'),u'$animateCss':var.get(u'$CoreAnimateCssProvider'),u'$$animateQueue':var.get(u'$$CoreAnimateQueueProvider'),u'$$AnimateRunner':var.get(u'$$CoreAnimateRunnerProvider'),u'$browser':var.get(u'$BrowserProvider'),u'$cacheFactory':var.get(u'$CacheFactoryProvider'),u'$controller':var.get(u'$ControllerProvider'),u'$document':var.get(u'$DocumentProvider'),u'$exceptionHandler':var.get(u'$ExceptionHandlerProvider'),u'$filter':var.get(u'$FilterProvider'),u'$$forceReflow':var.get(u'$$ForceReflowProvider'),u'$interpolate':var.get(u'$InterpolateProvider'),u'$interval':var.get(u'$IntervalProvider'),u'$http':var.get(u'$HttpProvider'),u'$httpParamSerializer':var.get(u'$HttpParamSerializerProvider'),u'$httpParamSerializerJQLike':var.get(u'$HttpParamSerializerJQLikeProvider'),u'$httpBackend':var.get(u'$HttpBackendProvider'),u'$xhrFactory':var.get(u'$xhrFactoryProvider'),u'$location':var.get(u'$LocationProvider'),u'$log':var.get(u'$LogProvider'),u'$parse':var.get(u'$ParseProvider'),u'$rootScope':var.get(u'$RootScopeProvider'),u'$q':var.get(u'$QProvider'),u'$$q':var.get(u'$$QProvider'),u'$sce':var.get(u'$SceProvider'),u'$sceDelegate':var.get(u'$SceDelegateProvider'),u'$sniffer':var.get(u'$SnifferProvider'),u'$templateCache':var.get(u'$TemplateCacheProvider'),u'$templateRequest':var.get(u'$TemplateRequestProvider'),u'$$testability':var.get(u'$$TestabilityProvider'),u'$timeout':var.get(u'$TimeoutProvider'),u'$window':var.get(u'$WindowProvider'),u'$$rAF':var.get(u'$$RAFProvider'),u'$$jqLite':var.get(u'$$jqLiteProvider'),u'$$HashMap':var.get(u'$$HashMapProvider'),u'$$cookieReader':var.get(u'$$CookieReaderProvider')})
            var.get(u'$provide').callprop(u'provider', PyJs_Object_62_)
        PyJs_ngModule_58_._set_name(u'ngModule')
        var.get(u'angularModule')(Js(u'ng'), Js([Js(u'ngLocale')]), Js([Js(u'$provide'), PyJs_ngModule_58_]))
    PyJsHoisted_publishExternalAPI_.func_name = u'publishExternalAPI'
    var.put(u'publishExternalAPI', PyJsHoisted_publishExternalAPI_)
    @Js
    def PyJsHoisted_badInputChecker_(scope, element, attr, ctrl, this, arguments, var=var):
        var = Scope({u'arguments':arguments, u'attr':attr, u'ctrl':ctrl, u'this':this, u'scope':scope, u'element':element}, var)
        var.registers([u'node', u'nativeValidation', u'attr', u'ctrl', u'element', u'scope'])
        var.put(u'node', var.get(u'element').get(u'0'))
        var.put(u'nativeValidation', var.get(u'ctrl').put(u'$$hasNativeValidators', var.get(u'isObject')(var.get(u'node').get(u'validity'))))
        if var.get(u'nativeValidation'):
            @Js
            def PyJs_anonymous_985_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value', u'validity'])
                PyJs_Object_986_ = Js({})
                var.put(u'validity', (var.get(u'element').callprop(u'prop', var.get(u'VALIDITY_STATE_PROPERTY')) or PyJs_Object_986_))
                return (var.get(u'undefined') if (var.get(u'validity').get(u'badInput') and var.get(u'validity').get(u'typeMismatch').neg()) else var.get(u'value'))
            PyJs_anonymous_985_._set_name(u'anonymous')
            var.get(u'ctrl').get(u'$parsers').callprop(u'push', PyJs_anonymous_985_)
    PyJsHoisted_badInputChecker_.func_name = u'badInputChecker'
    var.put(u'badInputChecker', PyJsHoisted_badInputChecker_)
    @Js
    def PyJsHoisted_hashKey_(obj, nextUidFn, this, arguments, var=var):
        var = Scope({u'this':this, u'nextUidFn':nextUidFn, u'obj':obj, u'arguments':arguments}, var)
        var.registers([u'objType', u'nextUidFn', u'obj', u'key'])
        var.put(u'key', (var.get(u'obj') and var.get(u'obj').get(u'$$hashKey')))
        if var.get(u'key'):
            if PyJsStrictEq(var.get(u'key',throw=False).typeof(),Js(u'function')):
                var.put(u'key', var.get(u'obj').callprop(u'$$hashKey'))
            return var.get(u'key')
        var.put(u'objType', var.get(u'obj',throw=False).typeof())
        if ((var.get(u'objType')==Js(u'function')) or ((var.get(u'objType')==Js(u'object')) and PyJsStrictNeq(var.get(u'obj'),var.get(u"null")))):
            var.put(u'key', var.get(u'obj').put(u'$$hashKey', ((var.get(u'objType')+Js(u':'))+(var.get(u'nextUidFn') or var.get(u'nextUid'))())))
        else:
            var.put(u'key', ((var.get(u'objType')+Js(u':'))+var.get(u'obj')))
        return var.get(u'key')
    PyJsHoisted_hashKey_.func_name = u'hashKey'
    var.put(u'hashKey', PyJsHoisted_hashKey_)
    @Js
    def PyJsHoisted_timezoneToOffset_(timezone, fallback, this, arguments, var=var):
        var = Scope({u'this':this, u'timezone':timezone, u'fallback':fallback, u'arguments':arguments}, var)
        var.registers([u'timezone', u'fallback', u'requestedTimezoneOffset'])
        var.put(u'requestedTimezoneOffset', (var.get(u'Date').callprop(u'parse', (Js(u'Jan 01, 1970 00:00:00 ')+var.get(u'timezone')))/Js(60000.0)))
        return (var.get(u'fallback') if var.get(u'isNaN')(var.get(u'requestedTimezoneOffset')) else var.get(u'requestedTimezoneOffset'))
    PyJsHoisted_timezoneToOffset_.func_name = u'timezoneToOffset'
    var.put(u'timezoneToOffset', PyJsHoisted_timezoneToOffset_)
    @Js
    def PyJsHoisted_getTestability_(rootElement, this, arguments, var=var):
        var = Scope({u'this':this, u'rootElement':rootElement, u'arguments':arguments}, var)
        var.registers([u'injector', u'rootElement'])
        var.put(u'injector', var.get(u'angular').callprop(u'element', var.get(u'rootElement')).callprop(u'injector'))
        if var.get(u'injector').neg():
            PyJsTempException = JsToPyException(var.get(u'ngMinErr')(Js(u'test'), Js(u'no injector found for element argument to getTestability')))
            raise PyJsTempException
        return var.get(u'injector').callprop(u'get', Js(u'$$testability'))
    PyJsHoisted_getTestability_.func_name = u'getTestability'
    var.put(u'getTestability', PyJsHoisted_getTestability_)
    @Js
    def PyJsHoisted_ampmGetter_(date, formats, this, arguments, var=var):
        var = Scope({u'date':date, u'this':this, u'arguments':arguments, u'formats':formats}, var)
        var.registers([u'date', u'formats'])
        return (var.get(u'formats').get(u'AMPMS').get(u'0') if (var.get(u'date').callprop(u'getHours')<Js(12.0)) else var.get(u'formats').get(u'AMPMS').get(u'1'))
    PyJsHoisted_ampmGetter_.func_name = u'ampmGetter'
    var.put(u'ampmGetter', PyJsHoisted_ampmGetter_)
    @Js
    def PyJsHoisted_jqLiteBuildFragment_(html, context, this, arguments, var=var):
        var = Scope({u'this':this, u'html':html, u'arguments':arguments, u'context':context}, var)
        var.registers([u'tmp', u'i', u'html', u'fragment', u'tag', u'context', u'wrap', u'nodes'])
        var.put(u'fragment', var.get(u'context').callprop(u'createDocumentFragment'))
        var.put(u'nodes', Js([]))
        if var.get(u'jqLiteIsTextNode')(var.get(u'html')):
            var.get(u'nodes').callprop(u'push', var.get(u'context').callprop(u'createTextNode', var.get(u'html')))
        else:
            var.put(u'tmp', (var.get(u'tmp') or var.get(u'fragment').callprop(u'appendChild', var.get(u'context').callprop(u'createElement', Js(u'div')))))
            var.put(u'tag', (var.get(u'TAG_NAME_REGEXP').callprop(u'exec', var.get(u'html')) or Js([Js(u''), Js(u'')])).get(u'1').callprop(u'toLowerCase'))
            var.put(u'wrap', (var.get(u'wrapMap').get(var.get(u'tag')) or var.get(u'wrapMap').get(u'_default')))
            var.get(u'tmp').put(u'innerHTML', ((var.get(u'wrap').get(u'1')+var.get(u'html').callprop(u'replace', var.get(u'XHTML_TAG_REGEXP'), Js(u'<$1></$2>')))+var.get(u'wrap').get(u'2')))
            var.put(u'i', var.get(u'wrap').get(u'0'))
            while (var.put(u'i',var.get(u'i')-Js(1))+Js(1)):
                var.put(u'tmp', var.get(u'tmp').get(u'lastChild'))
            var.put(u'nodes', var.get(u'concat')(var.get(u'nodes'), var.get(u'tmp').get(u'childNodes')))
            var.put(u'tmp', var.get(u'fragment').get(u'firstChild'))
            var.get(u'tmp').put(u'textContent', Js(u''))
        var.get(u'fragment').put(u'textContent', Js(u''))
        var.get(u'fragment').put(u'innerHTML', Js(u''))
        @Js
        def PyJs_anonymous_71_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            var.get(u'fragment').callprop(u'appendChild', var.get(u'node'))
        PyJs_anonymous_71_._set_name(u'anonymous')
        var.get(u'forEach')(var.get(u'nodes'), PyJs_anonymous_71_)
        return var.get(u'fragment')
    PyJsHoisted_jqLiteBuildFragment_.func_name = u'jqLiteBuildFragment'
    var.put(u'jqLiteBuildFragment', PyJsHoisted_jqLiteBuildFragment_)
    @Js
    def PyJsHoisted_isPossiblyDangerousMemberName_(name, this, arguments, var=var):
        var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
        var.registers([u'name'])
        return (var.get(u'name')==Js(u'constructor'))
    PyJsHoisted_isPossiblyDangerousMemberName_.func_name = u'isPossiblyDangerousMemberName'
    var.put(u'isPossiblyDangerousMemberName', PyJsHoisted_isPossiblyDangerousMemberName_)
    @Js
    def PyJsHoisted_toJson_(obj, pretty, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'arguments':arguments, u'pretty':pretty}, var)
        var.registers([u'obj', u'pretty'])
        if PyJsStrictEq(var.get(u'obj',throw=False).typeof(),Js(u'undefined')):
            return var.get(u'undefined')
        if var.get(u'isNumber')(var.get(u'pretty')).neg():
            var.put(u'pretty', (Js(2.0) if var.get(u'pretty') else var.get(u"null")))
        return var.get(u'JSON').callprop(u'stringify', var.get(u'obj'), var.get(u'toJsonReplacer'), var.get(u'pretty'))
    PyJsHoisted_toJson_.func_name = u'toJson'
    var.put(u'toJson', PyJsHoisted_toJson_)
    @Js
    def PyJsHoisted_isFile_(obj, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
        var.registers([u'obj'])
        return PyJsStrictEq(var.get(u'toString').callprop(u'call', var.get(u'obj')),Js(u'[object File]'))
    PyJsHoisted_isFile_.func_name = u'isFile'
    var.put(u'isFile', PyJsHoisted_isFile_)
    @Js
    def PyJsHoisted_getNgAttribute_(element, ngAttr, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'ngAttr':ngAttr, u'element':element}, var)
        var.registers([u'i', u'ii', u'attr', u'ngAttr', u'element'])
        var.put(u'ii', var.get(u'ngAttrPrefixes').get(u'length'))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'ii')):
            try:
                var.put(u'attr', (var.get(u'ngAttrPrefixes').get(var.get(u'i'))+var.get(u'ngAttr')))
                if var.get(u'isString')(var.put(u'attr', var.get(u'element').callprop(u'getAttribute', var.get(u'attr')))):
                    return var.get(u'attr')
            finally:
                    var.put(u'i',var.get(u'i')+Js(1))
        return var.get(u"null")
    PyJsHoisted_getNgAttribute_.func_name = u'getNgAttribute'
    var.put(u'getNgAttribute', PyJsHoisted_getNgAttribute_)
    @Js
    def PyJsHoisted_fromJson_(json, this, arguments, var=var):
        var = Scope({u'this':this, u'json':json, u'arguments':arguments}, var)
        var.registers([u'json'])
        return (var.get(u'JSON').callprop(u'parse', var.get(u'json')) if var.get(u'isString')(var.get(u'json')) else var.get(u'json'))
    PyJsHoisted_fromJson_.func_name = u'fromJson'
    var.put(u'fromJson', PyJsHoisted_fromJson_)
    @Js
    def PyJsHoisted_isBlob_(obj, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
        var.registers([u'obj'])
        return PyJsStrictEq(var.get(u'toString').callprop(u'call', var.get(u'obj')),Js(u'[object Blob]'))
    PyJsHoisted_isBlob_.func_name = u'isBlob'
    var.put(u'isBlob', PyJsHoisted_isBlob_)
    @Js
    def PyJsHoisted_getInputs_(body, this, arguments, var=var):
        var = Scope({u'body':body, u'this':this, u'arguments':arguments}, var)
        var.registers([u'lastExpression', u'body', u'candidate'])
        if (var.get(u'body').get(u'length')!=Js(1.0)):
            return var.get('undefined')
        var.put(u'lastExpression', var.get(u'body').get(u'0').get(u'expression'))
        var.put(u'candidate', var.get(u'lastExpression').get(u'toWatch'))
        if PyJsStrictNeq(var.get(u'candidate').get(u'length'),Js(1.0)):
            return var.get(u'candidate')
        return (var.get(u'candidate') if PyJsStrictNeq(var.get(u'candidate').get(u'0'),var.get(u'lastExpression')) else var.get(u'undefined'))
    PyJsHoisted_getInputs_.func_name = u'getInputs'
    var.put(u'getInputs', PyJsHoisted_getInputs_)
    @Js
    def PyJsHoisted_weekGetter_(size, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'size':size}, var)
        var.registers([u'size'])
        @Js
        def PyJs_anonymous_893_(date, this, arguments, var=var):
            var = Scope({u'date':date, u'this':this, u'arguments':arguments}, var)
            var.registers([u'date', u'diff', u'firstThurs', u'thisThurs', u'result'])
            var.put(u'firstThurs', var.get(u'getFirstThursdayOfYear')(var.get(u'date').callprop(u'getFullYear')))
            var.put(u'thisThurs', var.get(u'getThursdayThisWeek')(var.get(u'date')))
            var.put(u'diff', ((+var.get(u'thisThurs'))-(+var.get(u'firstThurs'))))
            var.put(u'result', (Js(1.0)+var.get(u'Math').callprop(u'round', (var.get(u'diff')/Js(604800000.0)))))
            return var.get(u'padNumber')(var.get(u'result'), var.get(u'size'))
        PyJs_anonymous_893_._set_name(u'anonymous')
        return PyJs_anonymous_893_
    PyJsHoisted_weekGetter_.func_name = u'weekGetter'
    var.put(u'weekGetter', PyJsHoisted_weekGetter_)
    @Js
    def PyJsHoisted_anonFn_(fn, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'fn':fn}, var)
        var.registers([u'args', u'fn', u'fnText'])
        var.put(u'fnText', var.get(u'fn').callprop(u'toString').callprop(u'replace', var.get(u'STRIP_COMMENTS'), Js(u'')))
        var.put(u'args', var.get(u'fnText').callprop(u'match', var.get(u'FN_ARGS')))
        if var.get(u'args'):
            return ((Js(u'function(')+(var.get(u'args').get(u'1') or Js(u'')).callprop(u'replace', JsRegExp(u'/[\\s\r\n]+/'), Js(u' ')))+Js(u')'))
        return Js(u'fn')
    PyJsHoisted_anonFn_.func_name = u'anonFn'
    var.put(u'anonFn', PyJsHoisted_anonFn_)
    @Js
    def PyJsHoisted_formatNumber_(number, pattern, groupSep, decimalSep, fractionSize, this, arguments, var=var):
        var = Scope({u'decimalSep':decimalSep, u'arguments':arguments, u'groupSep':groupSep, u'this':this, u'pattern':pattern, u'fractionSize':fractionSize, u'number':number}, var)
        var.registers([u'numStr', u'group', u'isNegative', u'i', u'pattern', u'groupSep', u'pos', u'hasExponent', u'number', u'fractionLen', u'decimalSep', u'parts', u'fractionSize', u'match', u'fraction', u'lgroup', u'whole', u'isInfinity', u'formatedText'])
        if var.get(u'isObject')(var.get(u'number')):
            return Js(u'')
        var.put(u'isNegative', (var.get(u'number')<Js(0.0)))
        var.put(u'number', var.get(u'Math').callprop(u'abs', var.get(u'number')))
        var.put(u'isInfinity', PyJsStrictEq(var.get(u'number'),var.get(u'Infinity')))
        if (var.get(u'isInfinity').neg() and var.get(u'isFinite')(var.get(u'number')).neg()):
            return Js(u'')
        var.put(u'numStr', (var.get(u'number')+Js(u'')))
        var.put(u'formatedText', Js(u''))
        var.put(u'hasExponent', Js(False))
        var.put(u'parts', Js([]))
        if var.get(u'isInfinity'):
            var.put(u'formatedText', Js(u'\u221e'))
        if (var.get(u'isInfinity').neg() and PyJsStrictNeq(var.get(u'numStr').callprop(u'indexOf', Js(u'e')),(-Js(1.0)))):
            var.put(u'match', var.get(u'numStr').callprop(u'match', JsRegExp(u'/([\\d\\.]+)e(-?)(\\d+)/')))
            if ((var.get(u'match') and (var.get(u'match').get(u'2')==Js(u'-'))) and (var.get(u'match').get(u'3')>(var.get(u'fractionSize')+Js(1.0)))):
                var.put(u'number', Js(0.0))
            else:
                var.put(u'formatedText', var.get(u'numStr'))
                var.put(u'hasExponent', var.get(u'true'))
        if (var.get(u'isInfinity').neg() and var.get(u'hasExponent').neg()):
            var.put(u'fractionLen', (var.get(u'numStr').callprop(u'split', var.get(u'DECIMAL_SEP')).get(u'1') or Js(u'')).get(u'length'))
            if var.get(u'isUndefined')(var.get(u'fractionSize')):
                var.put(u'fractionSize', var.get(u'Math').callprop(u'min', var.get(u'Math').callprop(u'max', var.get(u'pattern').get(u'minFrac'), var.get(u'fractionLen')), var.get(u'pattern').get(u'maxFrac')))
            var.put(u'number', (+((var.get(u'Math').callprop(u'round', (+((var.get(u'number').callprop(u'toString')+Js(u'e'))+var.get(u'fractionSize')))).callprop(u'toString')+Js(u'e'))+(-var.get(u'fractionSize')))))
            var.put(u'fraction', (Js(u'')+var.get(u'number')).callprop(u'split', var.get(u'DECIMAL_SEP')))
            var.put(u'whole', var.get(u'fraction').get(u'0'))
            var.put(u'fraction', (var.get(u'fraction').get(u'1') or Js(u'')))
            var.put(u'pos', Js(0.0))
            var.put(u'lgroup', var.get(u'pattern').get(u'lgSize'))
            var.put(u'group', var.get(u'pattern').get(u'gSize'))
            if (var.get(u'whole').get(u'length')>=(var.get(u'lgroup')+var.get(u'group'))):
                var.put(u'pos', (var.get(u'whole').get(u'length')-var.get(u'lgroup')))
                #for JS loop
                var.put(u'i', Js(0.0))
                while (var.get(u'i')<var.get(u'pos')):
                    try:
                        if (PyJsStrictEq(((var.get(u'pos')-var.get(u'i'))%var.get(u'group')),Js(0.0)) and PyJsStrictNeq(var.get(u'i'),Js(0.0))):
                            var.put(u'formatedText', var.get(u'groupSep'), u'+')
                        var.put(u'formatedText', var.get(u'whole').callprop(u'charAt', var.get(u'i')), u'+')
                    finally:
                            (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
            #for JS loop
            var.put(u'i', var.get(u'pos'))
            while (var.get(u'i')<var.get(u'whole').get(u'length')):
                try:
                    if (PyJsStrictEq(((var.get(u'whole').get(u'length')-var.get(u'i'))%var.get(u'lgroup')),Js(0.0)) and PyJsStrictNeq(var.get(u'i'),Js(0.0))):
                        var.put(u'formatedText', var.get(u'groupSep'), u'+')
                    var.put(u'formatedText', var.get(u'whole').callprop(u'charAt', var.get(u'i')), u'+')
                finally:
                        (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
            while (var.get(u'fraction').get(u'length')<var.get(u'fractionSize')):
                var.put(u'fraction', Js(u'0'), u'+')
            if (var.get(u'fractionSize') and PyJsStrictNeq(var.get(u'fractionSize'),Js(u'0'))):
                var.put(u'formatedText', (var.get(u'decimalSep')+var.get(u'fraction').callprop(u'substr', Js(0.0), var.get(u'fractionSize'))), u'+')
        else:
            if ((var.get(u'fractionSize')>Js(0.0)) and (var.get(u'number')<Js(1.0))):
                var.put(u'formatedText', var.get(u'number').callprop(u'toFixed', var.get(u'fractionSize')))
                var.put(u'number', var.get(u'parseFloat')(var.get(u'formatedText')))
                var.put(u'formatedText', var.get(u'formatedText').callprop(u'replace', var.get(u'DECIMAL_SEP'), var.get(u'decimalSep')))
        if PyJsStrictEq(var.get(u'number'),Js(0.0)):
            var.put(u'isNegative', Js(False))
        var.get(u'parts').callprop(u'push', (var.get(u'pattern').get(u'negPre') if var.get(u'isNegative') else var.get(u'pattern').get(u'posPre')), var.get(u'formatedText'), (var.get(u'pattern').get(u'negSuf') if var.get(u'isNegative') else var.get(u'pattern').get(u'posSuf')))
        return var.get(u'parts').callprop(u'join', Js(u''))
    PyJsHoisted_formatNumber_.func_name = u'formatNumber'
    var.put(u'formatNumber', PyJsHoisted_formatNumber_)
    @Js
    def PyJsHoisted_plusFn_(l, r, this, arguments, var=var):
        var = Scope({u'this':this, u'r':r, u'l':l, u'arguments':arguments}, var)
        var.registers([u'r', u'l'])
        if PyJsStrictEq(var.get(u'l',throw=False).typeof(),Js(u'undefined')):
            return var.get(u'r')
        if PyJsStrictEq(var.get(u'r',throw=False).typeof(),Js(u'undefined')):
            return var.get(u'l')
        return (var.get(u'l')+var.get(u'r'))
    PyJsHoisted_plusFn_.func_name = u'plusFn'
    var.put(u'plusFn', PyJsHoisted_plusFn_)
    @Js
    def PyJsHoisted_radioInputType_(scope, element, attr, ctrl, this, arguments, var=var):
        var = Scope({u'arguments':arguments, u'attr':attr, u'ctrl':ctrl, u'this':this, u'scope':scope, u'element':element}, var)
        var.registers([u'listener', u'scope', u'ctrl', u'attr', u'element'])
        if var.get(u'isUndefined')(var.get(u'attr').get(u'name')):
            var.get(u'element').callprop(u'attr', Js(u'name'), var.get(u'nextUid')())
        @Js
        def PyJs_anonymous_995_(ev, this, arguments, var=var):
            var = Scope({u'this':this, u'ev':ev, u'arguments':arguments}, var)
            var.registers([u'ev'])
            if var.get(u'element').get(u'0').get(u'checked'):
                var.get(u'ctrl').callprop(u'$setViewValue', var.get(u'attr').get(u'value'), (var.get(u'ev') and var.get(u'ev').get(u'type')))
        PyJs_anonymous_995_._set_name(u'anonymous')
        var.put(u'listener', PyJs_anonymous_995_)
        var.get(u'element').callprop(u'on', Js(u'click'), var.get(u'listener'))
        @Js
        def PyJs_anonymous_996_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'value'])
            var.put(u'value', var.get(u'attr').get(u'value'))
            var.get(u'element').get(u'0').put(u'checked', (var.get(u'value')==var.get(u'ctrl').get(u'$viewValue')))
        PyJs_anonymous_996_._set_name(u'anonymous')
        var.get(u'ctrl').put(u'$render', PyJs_anonymous_996_)
        var.get(u'attr').callprop(u'$observe', Js(u'value'), var.get(u'ctrl').get(u'$render'))
    PyJsHoisted_radioInputType_.func_name = u'radioInputType'
    var.put(u'radioInputType', PyJsHoisted_radioInputType_)
    @Js
    def PyJsHoisted_annotate_(fn, strictDi, name, this, arguments, var=var):
        var = Scope({u'this':this, u'strictDi':strictDi, u'name':name, u'fn':fn, u'arguments':arguments}, var)
        var.registers([u'strictDi', u'last', u'name', u'argDecl', u'fnText', u'$inject', u'fn'])
        pass
        if PyJsStrictEq(var.get(u'fn',throw=False).typeof(),Js(u'function')):
            if var.put(u'$inject', var.get(u'fn').get(u'$inject')).neg():
                var.put(u'$inject', Js([]))
                if var.get(u'fn').get(u'length'):
                    if var.get(u'strictDi'):
                        if (var.get(u'isString')(var.get(u'name')).neg() or var.get(u'name').neg()):
                            var.put(u'name', (var.get(u'fn').get(u'name') or var.get(u'anonFn')(var.get(u'fn'))))
                        PyJsTempException = JsToPyException(var.get(u'$injectorMinErr')(Js(u'strictdi'), Js(u'{0} is not using explicit annotation and cannot be invoked in strict mode'), var.get(u'name')))
                        raise PyJsTempException
                    var.put(u'fnText', var.get(u'fn').callprop(u'toString').callprop(u'replace', var.get(u'STRIP_COMMENTS'), Js(u'')))
                    var.put(u'argDecl', var.get(u'fnText').callprop(u'match', var.get(u'FN_ARGS')))
                    @Js
                    def PyJs_anonymous_153_(arg, this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments, u'arg':arg}, var)
                        var.registers([u'arg'])
                        @Js
                        def PyJs_anonymous_154_(all, underscore, name, this, arguments, var=var):
                            var = Scope({u'this':this, u'all':all, u'name':name, u'underscore':underscore, u'arguments':arguments}, var)
                            var.registers([u'all', u'name', u'underscore'])
                            var.get(u'$inject').callprop(u'push', var.get(u'name'))
                        PyJs_anonymous_154_._set_name(u'anonymous')
                        var.get(u'arg').callprop(u'replace', var.get(u'FN_ARG'), PyJs_anonymous_154_)
                    PyJs_anonymous_153_._set_name(u'anonymous')
                    var.get(u'forEach')(var.get(u'argDecl').get(u'1').callprop(u'split', var.get(u'FN_ARG_SPLIT')), PyJs_anonymous_153_)
                var.get(u'fn').put(u'$inject', var.get(u'$inject'))
        else:
            if var.get(u'isArray')(var.get(u'fn')):
                var.put(u'last', (var.get(u'fn').get(u'length')-Js(1.0)))
                var.get(u'assertArgFn')(var.get(u'fn').get(var.get(u'last')), Js(u'fn'))
                var.put(u'$inject', var.get(u'fn').callprop(u'slice', Js(0.0), var.get(u'last')))
            else:
                var.get(u'assertArgFn')(var.get(u'fn'), Js(u'fn'), var.get(u'true'))
        return var.get(u'$inject')
    PyJsHoisted_annotate_.func_name = u'annotate'
    var.put(u'annotate', PyJsHoisted_annotate_)
    @Js
    def PyJsHoisted_createEventHandler_(element, events, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'events':events, u'element':element}, var)
        var.registers([u'eventHandler', u'events', u'element'])
        @Js
        def PyJs_anonymous_107_(event, type, this, arguments, var=var):
            var = Scope({u'this':this, u'type':type, u'event':event, u'arguments':arguments}, var)
            var.registers([u'i', u'eventFnsLength', u'eventFns', u'originalStopImmediatePropagation', u'handlerWrapper', u'type', u'event'])
            @Js
            def PyJs_anonymous_108_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                return var.get(u'event').get(u'defaultPrevented')
            PyJs_anonymous_108_._set_name(u'anonymous')
            var.get(u'event').put(u'isDefaultPrevented', PyJs_anonymous_108_)
            var.put(u'eventFns', var.get(u'events').get((var.get(u'type') or var.get(u'event').get(u'type'))))
            var.put(u'eventFnsLength', (var.get(u'eventFns').get(u'length') if var.get(u'eventFns') else Js(0.0)))
            if var.get(u'eventFnsLength').neg():
                return var.get('undefined')
            if var.get(u'isUndefined')(var.get(u'event').get(u'immediatePropagationStopped')):
                var.put(u'originalStopImmediatePropagation', var.get(u'event').get(u'stopImmediatePropagation'))
                @Js
                def PyJs_anonymous_109_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'event').put(u'immediatePropagationStopped', var.get(u'true'))
                    if var.get(u'event').get(u'stopPropagation'):
                        var.get(u'event').callprop(u'stopPropagation')
                    if var.get(u'originalStopImmediatePropagation'):
                        var.get(u'originalStopImmediatePropagation').callprop(u'call', var.get(u'event'))
                PyJs_anonymous_109_._set_name(u'anonymous')
                var.get(u'event').put(u'stopImmediatePropagation', PyJs_anonymous_109_)
            @Js
            def PyJs_anonymous_110_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                return PyJsStrictEq(var.get(u'event').get(u'immediatePropagationStopped'),var.get(u'true'))
            PyJs_anonymous_110_._set_name(u'anonymous')
            var.get(u'event').put(u'isImmediatePropagationStopped', PyJs_anonymous_110_)
            var.put(u'handlerWrapper', (var.get(u'eventFns').get(u'specialHandlerWrapper') or var.get(u'defaultHandlerWrapper')))
            if (var.get(u'eventFnsLength')>Js(1.0)):
                var.put(u'eventFns', var.get(u'shallowCopy')(var.get(u'eventFns')))
            #for JS loop
            var.put(u'i', Js(0.0))
            while (var.get(u'i')<var.get(u'eventFnsLength')):
                try:
                    if var.get(u'event').callprop(u'isImmediatePropagationStopped').neg():
                        var.get(u'handlerWrapper')(var.get(u'element'), var.get(u'event'), var.get(u'eventFns').get(var.get(u'i')))
                finally:
                        (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
        PyJs_anonymous_107_._set_name(u'anonymous')
        var.put(u'eventHandler', PyJs_anonymous_107_)
        var.get(u'eventHandler').put(u'elem', var.get(u'element'))
        return var.get(u'eventHandler')
    PyJsHoisted_createEventHandler_.func_name = u'createEventHandler'
    var.put(u'createEventHandler', PyJsHoisted_createEventHandler_)
    @Js
    def PyJsHoisted_extractElementNode_(element, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'i', u'element', u'elm'])
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'element').get(u'length')):
            try:
                var.put(u'elm', var.get(u'element').get(var.get(u'i')))
                if PyJsStrictEq(var.get(u'elm').get(u'nodeType'),var.get(u'ELEMENT_NODE')):
                    return var.get(u'elm')
            finally:
                    (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
    PyJsHoisted_extractElementNode_.func_name = u'extractElementNode'
    var.put(u'extractElementNode', PyJsHoisted_extractElementNode_)
    @Js
    def PyJsHoisted_createHttpBackend_(PyJsArg_2462726f77736572_, createXhr, PyJsArg_2462726f777365724465666572_, callbacks, rawDocument, this, arguments, var=var):
        var = Scope({u'callbacks':callbacks, u'rawDocument':rawDocument, u'$browser':PyJsArg_2462726f77736572_, u'$browserDefer':PyJsArg_2462726f777365724465666572_, u'this':this, u'arguments':arguments, u'createXhr':createXhr}, var)
        var.registers([u'jsonpReq', u'rawDocument', u'createXhr', u'callbacks', u'$browser', u'$browserDefer'])
        @Js
        def PyJsHoisted_jsonpReq_(url, callbackId, done, this, arguments, var=var):
            var = Scope({u'url':url, u'callbackId':callbackId, u'this':this, u'done':done, u'arguments':arguments}, var)
            var.registers([u'url', u'callback', u'callbackId', u'done', u'script'])
            var.put(u'script', var.get(u'rawDocument').callprop(u'createElement', Js(u'script')))
            var.put(u'callback', var.get(u"null"))
            var.get(u'script').put(u'type', Js(u'text/javascript'))
            var.get(u'script').put(u'src', var.get(u'url'))
            var.get(u'script').put(u'async', var.get(u'true'))
            @Js
            def PyJs_anonymous_403_(event, this, arguments, var=var):
                var = Scope({u'this':this, u'event':event, u'arguments':arguments}, var)
                var.registers([u'status', u'text', u'event'])
                var.get(u'removeEventListenerFn')(var.get(u'script'), Js(u'load'), var.get(u'callback'))
                var.get(u'removeEventListenerFn')(var.get(u'script'), Js(u'error'), var.get(u'callback'))
                var.get(u'rawDocument').get(u'body').callprop(u'removeChild', var.get(u'script'))
                var.put(u'script', var.get(u"null"))
                var.put(u'status', (-Js(1.0)))
                var.put(u'text', Js(u'unknown'))
                if var.get(u'event'):
                    if (PyJsStrictEq(var.get(u'event').get(u'type'),Js(u'load')) and var.get(u'callbacks').get(var.get(u'callbackId')).get(u'called').neg()):
                        PyJs_Object_404_ = Js({u'type':Js(u'error')})
                        var.put(u'event', PyJs_Object_404_)
                    var.put(u'text', var.get(u'event').get(u'type'))
                    var.put(u'status', (Js(404.0) if PyJsStrictEq(var.get(u'event').get(u'type'),Js(u'error')) else Js(200.0)))
                if var.get(u'done'):
                    var.get(u'done')(var.get(u'status'), var.get(u'text'))
            PyJs_anonymous_403_._set_name(u'anonymous')
            var.put(u'callback', PyJs_anonymous_403_)
            var.get(u'addEventListenerFn')(var.get(u'script'), Js(u'load'), var.get(u'callback'))
            var.get(u'addEventListenerFn')(var.get(u'script'), Js(u'error'), var.get(u'callback'))
            var.get(u'rawDocument').get(u'body').callprop(u'appendChild', var.get(u'script'))
            return var.get(u'callback')
        PyJsHoisted_jsonpReq_.func_name = u'jsonpReq'
        var.put(u'jsonpReq', PyJsHoisted_jsonpReq_)
        @Js
        def PyJs_anonymous_397_(method, url, post, callback, headers, timeout, withCredentials, responseType, this, arguments, var=var):
            var = Scope({u'responseType':responseType, u'withCredentials':withCredentials, u'headers':headers, u'url':url, u'this':this, u'callback':callback, u'arguments':arguments, u'timeout':timeout, u'post':post, u'method':method}, var)
            var.registers([u'responseType', u'jsonpDone', u'withCredentials', u'callback', u'callbackId', u'xhr', u'post', u'timeoutId', u'url', u'timeout', u'completeRequest', u'timeoutRequest', u'requestError', u'method', u'headers'])
            @Js
            def PyJsHoisted_timeoutRequest_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                (var.get(u'jsonpDone') and var.get(u'jsonpDone')())
                (var.get(u'xhr') and var.get(u'xhr').callprop(u'abort'))
            PyJsHoisted_timeoutRequest_.func_name = u'timeoutRequest'
            var.put(u'timeoutRequest', PyJsHoisted_timeoutRequest_)
            @Js
            def PyJsHoisted_completeRequest_(callback, status, response, headersString, statusText, this, arguments, var=var):
                var = Scope({u'status':status, u'callback':callback, u'headersString':headersString, u'arguments':arguments, u'this':this, u'statusText':statusText, u'response':response}, var)
                var.registers([u'status', u'callback', u'headersString', u'response', u'statusText'])
                if var.get(u'isDefined')(var.get(u'timeoutId')):
                    var.get(u'$browserDefer').callprop(u'cancel', var.get(u'timeoutId'))
                var.put(u'jsonpDone', var.put(u'xhr', var.get(u"null")))
                var.get(u'callback')(var.get(u'status'), var.get(u'response'), var.get(u'headersString'), var.get(u'statusText'))
                var.get(u'$browser').callprop(u'$$completeOutstandingRequest', var.get(u'noop'))
            PyJsHoisted_completeRequest_.func_name = u'completeRequest'
            var.put(u'completeRequest', PyJsHoisted_completeRequest_)
            var.get(u'$browser').callprop(u'$$incOutstandingRequestCount')
            var.put(u'url', (var.get(u'url') or var.get(u'$browser').callprop(u'url')))
            if (var.get(u'lowercase')(var.get(u'method'))==Js(u'jsonp')):
                var.put(u'callbackId', (Js(u'_')+(var.get(u'callbacks').put(u'counter',var.get(u'callbacks').get(u'counter')+Js(1))-Js(1)).callprop(u'toString', Js(36.0))))
                @Js
                def PyJs_anonymous_398_(data, this, arguments, var=var):
                    var = Scope({u'this':this, u'data':data, u'arguments':arguments}, var)
                    var.registers([u'data'])
                    var.get(u'callbacks').get(var.get(u'callbackId')).put(u'data', var.get(u'data'))
                    var.get(u'callbacks').get(var.get(u'callbackId')).put(u'called', var.get(u'true'))
                PyJs_anonymous_398_._set_name(u'anonymous')
                var.get(u'callbacks').put(var.get(u'callbackId'), PyJs_anonymous_398_)
                @Js
                def PyJs_anonymous_399_(status, text, this, arguments, var=var):
                    var = Scope({u'status':status, u'text':text, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'status', u'text'])
                    var.get(u'completeRequest')(var.get(u'callback'), var.get(u'status'), var.get(u'callbacks').get(var.get(u'callbackId')).get(u'data'), Js(u''), var.get(u'text'))
                    var.get(u'callbacks').put(var.get(u'callbackId'), var.get(u'noop'))
                PyJs_anonymous_399_._set_name(u'anonymous')
                var.put(u'jsonpDone', var.get(u'jsonpReq')(var.get(u'url').callprop(u'replace', Js(u'JSON_CALLBACK'), (Js(u'angular.callbacks.')+var.get(u'callbackId'))), var.get(u'callbackId'), PyJs_anonymous_399_))
            else:
                var.put(u'xhr', var.get(u'createXhr')(var.get(u'method'), var.get(u'url')))
                var.get(u'xhr').callprop(u'open', var.get(u'method'), var.get(u'url'), var.get(u'true'))
                @Js
                def PyJs_anonymous_400_(value, key, this, arguments, var=var):
                    var = Scope({u'this':this, u'key':key, u'value':value, u'arguments':arguments}, var)
                    var.registers([u'key', u'value'])
                    if var.get(u'isDefined')(var.get(u'value')):
                        var.get(u'xhr').callprop(u'setRequestHeader', var.get(u'key'), var.get(u'value'))
                PyJs_anonymous_400_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'headers'), PyJs_anonymous_400_)
                @Js
                def PyJs_requestLoaded_401_(this, arguments, var=var):
                    var = Scope({u'this':this, u'requestLoaded':PyJs_requestLoaded_401_, u'arguments':arguments}, var)
                    var.registers([u'status', u'statusText', u'response'])
                    var.put(u'statusText', (var.get(u'xhr').get(u'statusText') or Js(u'')))
                    var.put(u'response', (var.get(u'xhr').get(u'response') if var.get(u'xhr').contains(Js(u'response')) else var.get(u'xhr').get(u'responseText')))
                    var.put(u'status', (Js(204.0) if PyJsStrictEq(var.get(u'xhr').get(u'status'),Js(1223.0)) else var.get(u'xhr').get(u'status')))
                    if PyJsStrictEq(var.get(u'status'),Js(0.0)):
                        var.put(u'status', (Js(200.0) if var.get(u'response') else (Js(404.0) if (var.get(u'urlResolve')(var.get(u'url')).get(u'protocol')==Js(u'file')) else Js(0.0))))
                    var.get(u'completeRequest')(var.get(u'callback'), var.get(u'status'), var.get(u'response'), var.get(u'xhr').callprop(u'getAllResponseHeaders'), var.get(u'statusText'))
                PyJs_requestLoaded_401_._set_name(u'requestLoaded')
                var.get(u'xhr').put(u'onload', PyJs_requestLoaded_401_)
                @Js
                def PyJs_anonymous_402_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'completeRequest')(var.get(u'callback'), (-Js(1.0)), var.get(u"null"), var.get(u"null"), Js(u''))
                PyJs_anonymous_402_._set_name(u'anonymous')
                var.put(u'requestError', PyJs_anonymous_402_)
                var.get(u'xhr').put(u'onerror', var.get(u'requestError'))
                var.get(u'xhr').put(u'onabort', var.get(u'requestError'))
                if var.get(u'withCredentials'):
                    var.get(u'xhr').put(u'withCredentials', var.get(u'true'))
                if var.get(u'responseType'):
                    try:
                        var.get(u'xhr').put(u'responseType', var.get(u'responseType'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_6443974 = var.own.get(u'e')
                        var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                        try:
                            if PyJsStrictNeq(var.get(u'responseType'),Js(u'json')):
                                PyJsTempException = JsToPyException(var.get(u'e'))
                                raise PyJsTempException
                        finally:
                            if PyJsHolder_65_6443974 is not None:
                                var.own[u'e'] = PyJsHolder_65_6443974
                            else:
                                del var.own[u'e']
                            del PyJsHolder_65_6443974
                var.get(u'xhr').callprop(u'send', (var.get(u"null") if var.get(u'isUndefined')(var.get(u'post')) else var.get(u'post')))
            if (var.get(u'timeout')>Js(0.0)):
                var.put(u'timeoutId', var.get(u'$browserDefer')(var.get(u'timeoutRequest'), var.get(u'timeout')))
            else:
                if var.get(u'isPromiseLike')(var.get(u'timeout')):
                    var.get(u'timeout').callprop(u'then', var.get(u'timeoutRequest'))
            pass
            pass
        PyJs_anonymous_397_._set_name(u'anonymous')
        return PyJs_anonymous_397_
        pass
    PyJsHoisted_createHttpBackend_.func_name = u'createHttpBackend'
    var.put(u'createHttpBackend', PyJsHoisted_createHttpBackend_)
    @Js
    def PyJsHoisted_createMap_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u'Object').callprop(u'create', var.get(u"null"))
    PyJsHoisted_createMap_.func_name = u'createMap'
    var.put(u'createMap', PyJsHoisted_createMap_)
    @Js
    def PyJsHoisted_baseExtend_(dst, objs, deep, this, arguments, var=var):
        var = Scope({u'this':this, u'dst':dst, u'objs':objs, u'deep':deep, u'arguments':arguments}, var)
        var.registers([u'src', u'objs', u'obj', u'key', u'i', u'h', u'dst', u'j', u'deep', u'ii', u'keys', u'jj'])
        var.put(u'h', var.get(u'dst').get(u'$$hashKey'))
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'ii', var.get(u'objs').get(u'length'))
        while (var.get(u'i')<var.get(u'ii')):
            try:
                var.put(u'obj', var.get(u'objs').get(var.get(u'i')))
                if (var.get(u'isObject')(var.get(u'obj')).neg() and var.get(u'isFunction')(var.get(u'obj')).neg()):
                    continue
                var.put(u'keys', var.get(u'Object').callprop(u'keys', var.get(u'obj')))
                #for JS loop
                var.put(u'j', Js(0.0))
                var.put(u'jj', var.get(u'keys').get(u'length'))
                while (var.get(u'j')<var.get(u'jj')):
                    try:
                        var.put(u'key', var.get(u'keys').get(var.get(u'j')))
                        var.put(u'src', var.get(u'obj').get(var.get(u'key')))
                        if (var.get(u'deep') and var.get(u'isObject')(var.get(u'src'))):
                            if var.get(u'isDate')(var.get(u'src')):
                                var.get(u'dst').put(var.get(u'key'), var.get(u'Date').create(var.get(u'src').callprop(u'valueOf')))
                            else:
                                if var.get(u'isRegExp')(var.get(u'src')):
                                    var.get(u'dst').put(var.get(u'key'), var.get(u'RegExp').create(var.get(u'src')))
                                else:
                                    if var.get(u'src').get(u'nodeName'):
                                        var.get(u'dst').put(var.get(u'key'), var.get(u'src').callprop(u'cloneNode', var.get(u'true')))
                                    else:
                                        if var.get(u'isElement')(var.get(u'src')):
                                            var.get(u'dst').put(var.get(u'key'), var.get(u'src').callprop(u'clone'))
                                        else:
                                            if var.get(u'isObject')(var.get(u'dst').get(var.get(u'key'))).neg():
                                                PyJs_Object_11_ = Js({})
                                                var.get(u'dst').put(var.get(u'key'), (Js([]) if var.get(u'isArray')(var.get(u'src')) else PyJs_Object_11_))
                                            var.get(u'baseExtend')(var.get(u'dst').get(var.get(u'key')), Js([var.get(u'src')]), var.get(u'true'))
                        else:
                            var.get(u'dst').put(var.get(u'key'), var.get(u'src'))
                    finally:
                            (var.put(u'j',var.get(u'j')+Js(1))-Js(1))
            finally:
                    var.put(u'i',var.get(u'i')+Js(1))
        var.get(u'setHashKey')(var.get(u'dst'), var.get(u'h'))
        return var.get(u'dst')
    PyJsHoisted_baseExtend_.func_name = u'baseExtend'
    var.put(u'baseExtend', PyJsHoisted_baseExtend_)
    @Js
    def PyJsHoisted_jqLiteRemoveData_(element, name, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'element':element}, var)
        var.registers([u'expandoId', u'name', u'expandoStore', u'element'])
        var.put(u'expandoId', var.get(u'element').get(u'ng339'))
        var.put(u'expandoStore', (var.get(u'expandoId') and var.get(u'jqCache').get(var.get(u'expandoId'))))
        if var.get(u'expandoStore'):
            if var.get(u'name'):
                var.get(u'expandoStore').get(u'data').delete(var.get(u'name'))
                return var.get('undefined')
            if var.get(u'expandoStore').get(u'handle'):
                if var.get(u'expandoStore').get(u'events').get(u'$destroy'):
                    PyJs_Object_75_ = Js({})
                    var.get(u'expandoStore').callprop(u'handle', PyJs_Object_75_, Js(u'$destroy'))
                var.get(u'jqLiteOff')(var.get(u'element'))
            var.get(u'jqCache').delete(var.get(u'expandoId'))
            var.get(u'element').put(u'ng339', var.get(u'undefined'))
    PyJsHoisted_jqLiteRemoveData_.func_name = u'jqLiteRemoveData'
    var.put(u'jqLiteRemoveData', PyJsHoisted_jqLiteRemoveData_)
    @Js
    def PyJsHoisted_jqLiteAddClass_(element, cssClasses, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'cssClasses':cssClasses, u'element':element}, var)
        var.registers([u'existingClasses', u'cssClasses', u'element'])
        if (var.get(u'cssClasses') and var.get(u'element').get(u'setAttribute')):
            var.put(u'existingClasses', ((Js(u' ')+(var.get(u'element').callprop(u'getAttribute', Js(u'class')) or Js(u'')))+Js(u' ')).callprop(u'replace', JsRegExp(u'/[\n\t]/g'), Js(u' ')))
            @Js
            def PyJs_anonymous_80_(cssClass, this, arguments, var=var):
                var = Scope({u'this':this, u'cssClass':cssClass, u'arguments':arguments}, var)
                var.registers([u'cssClass'])
                var.put(u'cssClass', var.get(u'trim')(var.get(u'cssClass')))
                if PyJsStrictEq(var.get(u'existingClasses').callprop(u'indexOf', ((Js(u' ')+var.get(u'cssClass'))+Js(u' '))),(-Js(1.0))):
                    var.put(u'existingClasses', (var.get(u'cssClass')+Js(u' ')), u'+')
            PyJs_anonymous_80_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'cssClasses').callprop(u'split', Js(u' ')), PyJs_anonymous_80_)
            var.get(u'element').callprop(u'setAttribute', Js(u'class'), var.get(u'trim')(var.get(u'existingClasses')))
    PyJsHoisted_jqLiteAddClass_.func_name = u'jqLiteAddClass'
    var.put(u'jqLiteAddClass', PyJsHoisted_jqLiteAddClass_)
    @Js
    def PyJsHoisted_jqLiteOff_(element, type, fn, unsupported, this, arguments, var=var):
        var = Scope({u'fn':fn, u'this':this, u'arguments':arguments, u'type':type, u'unsupported':unsupported, u'element':element}, var)
        var.registers([u'handle', u'expandoStore', u'unsupported', u'element', u'removeHandler', u'type', u'events', u'fn'])
        if var.get(u'isDefined')(var.get(u'unsupported')):
            PyJsTempException = JsToPyException(var.get(u'jqLiteMinErr')(Js(u'offargs'), Js(u'jqLite#off() does not support the `selector` argument')))
            raise PyJsTempException
        var.put(u'expandoStore', var.get(u'jqLiteExpandoStore')(var.get(u'element')))
        var.put(u'events', (var.get(u'expandoStore') and var.get(u'expandoStore').get(u'events')))
        var.put(u'handle', (var.get(u'expandoStore') and var.get(u'expandoStore').get(u'handle')))
        if var.get(u'handle').neg():
            return var.get('undefined')
        if var.get(u'type').neg():
            for PyJsTemp in var.get(u'events'):
                var.put(u'type', PyJsTemp)
                if PyJsStrictNeq(var.get(u'type'),Js(u'$destroy')):
                    var.get(u'removeEventListenerFn')(var.get(u'element'), var.get(u'type'), var.get(u'handle'))
                var.get(u'events').delete(var.get(u'type'))
        else:
            @Js
            def PyJs_anonymous_73_(type, this, arguments, var=var):
                var = Scope({u'this':this, u'type':type, u'arguments':arguments}, var)
                var.registers([u'type', u'listenerFns'])
                var.put(u'listenerFns', var.get(u'events').get(var.get(u'type')))
                if var.get(u'isDefined')(var.get(u'fn')):
                    var.get(u'arrayRemove')((var.get(u'listenerFns') or Js([])), var.get(u'fn'))
                if ((var.get(u'isDefined')(var.get(u'fn')) and var.get(u'listenerFns')) and (var.get(u'listenerFns').get(u'length')>Js(0.0))).neg():
                    var.get(u'removeEventListenerFn')(var.get(u'element'), var.get(u'type'), var.get(u'handle'))
                    var.get(u'events').delete(var.get(u'type'))
            PyJs_anonymous_73_._set_name(u'anonymous')
            var.put(u'removeHandler', PyJs_anonymous_73_)
            @Js
            def PyJs_anonymous_74_(type, this, arguments, var=var):
                var = Scope({u'this':this, u'type':type, u'arguments':arguments}, var)
                var.registers([u'type'])
                var.get(u'removeHandler')(var.get(u'type'))
                if var.get(u'MOUSE_EVENT_MAP').get(var.get(u'type')):
                    var.get(u'removeHandler')(var.get(u'MOUSE_EVENT_MAP').get(var.get(u'type')))
            PyJs_anonymous_74_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'type').callprop(u'split', Js(u' ')), PyJs_anonymous_74_)
    PyJsHoisted_jqLiteOff_.func_name = u'jqLiteOff'
    var.put(u'jqLiteOff', PyJsHoisted_jqLiteOff_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_775_(PyJsArg_2477696e646f77_, PyJsArg_2474696d656f7574_, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'$timeout':PyJsArg_2474696d656f7574_, u'$window':PyJsArg_2477696e646f77_}, var)
            var.registers([u'raf', u'cancelAnimationFrame', u'$timeout', u'requestAnimationFrame', u'rafSupported', u'$window'])
            var.put(u'requestAnimationFrame', (var.get(u'$window').get(u'requestAnimationFrame') or var.get(u'$window').get(u'webkitRequestAnimationFrame')))
            var.put(u'cancelAnimationFrame', ((var.get(u'$window').get(u'cancelAnimationFrame') or var.get(u'$window').get(u'webkitCancelAnimationFrame')) or var.get(u'$window').get(u'webkitCancelRequestAnimationFrame')))
            var.put(u'rafSupported', var.get(u'requestAnimationFrame').neg().neg())
            @Js
            def PyJs_anonymous_776_(fn, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'fn':fn}, var)
                var.registers([u'id', u'fn'])
                var.put(u'id', var.get(u'requestAnimationFrame')(var.get(u'fn')))
                @Js
                def PyJs_anonymous_777_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'cancelAnimationFrame')(var.get(u'id'))
                PyJs_anonymous_777_._set_name(u'anonymous')
                return PyJs_anonymous_777_
            PyJs_anonymous_776_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_778_(fn, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'fn':fn}, var)
                var.registers([u'fn', u'timer'])
                var.put(u'timer', var.get(u'$timeout')(var.get(u'fn'), Js(16.66), Js(False)))
                @Js
                def PyJs_anonymous_779_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'$timeout').callprop(u'cancel', var.get(u'timer'))
                PyJs_anonymous_779_._set_name(u'anonymous')
                return PyJs_anonymous_779_
            PyJs_anonymous_778_._set_name(u'anonymous')
            var.put(u'raf', (PyJs_anonymous_776_ if var.get(u'rafSupported') else PyJs_anonymous_778_))
            var.get(u'raf').put(u'supported', var.get(u'rafSupported'))
            return var.get(u'raf')
        PyJs_anonymous_775_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$window'), Js(u'$timeout'), PyJs_anonymous_775_]))
    PyJsHoistedNonPyName.func_name = u'$$RAFProvider'
    var.put(u'$$RAFProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_858_(PyJsArg_2474656d706c6174654361636865_, PyJsArg_2468747470_, PyJsArg_2471_, PyJsArg_24736365_, this, arguments, var=var):
            var = Scope({u'$http':PyJsArg_2468747470_, u'$templateCache':PyJsArg_2474656d706c6174654361636865_, u'arguments':arguments, u'this':this, u'$sce':PyJsArg_24736365_, u'$q':PyJsArg_2471_}, var)
            var.registers([u'$http', u'$templateCache', u'$sce', u'handleRequestFn', u'$q'])
            @Js
            def PyJsHoisted_handleRequestFn_(tpl, ignoreRequestError, this, arguments, var=var):
                var = Scope({u'this':this, u'tpl':tpl, u'arguments':arguments, u'ignoreRequestError':ignoreRequestError}, var)
                var.registers([u'transformResponse', u'httpOptions', u'handleError', u'ignoreRequestError', u'tpl'])
                @Js
                def PyJsHoisted_handleError_(resp, this, arguments, var=var):
                    var = Scope({u'this':this, u'resp':resp, u'arguments':arguments}, var)
                    var.registers([u'resp'])
                    if var.get(u'ignoreRequestError').neg():
                        PyJsTempException = JsToPyException(var.get(u'$compileMinErr')(Js(u'tpload'), Js(u'Failed to load template: {0} (HTTP status: {1} {2})'), var.get(u'tpl'), var.get(u'resp').get(u'status'), var.get(u'resp').get(u'statusText')))
                        raise PyJsTempException
                    return var.get(u'$q').callprop(u'reject', var.get(u'resp'))
                PyJsHoisted_handleError_.func_name = u'handleError'
                var.put(u'handleError', PyJsHoisted_handleError_)
                (var.get(u'handleRequestFn').put(u'totalPendingRequests',var.get(u'handleRequestFn').get(u'totalPendingRequests')+Js(1))-Js(1))
                if (var.get(u'isString')(var.get(u'tpl')).neg() or var.get(u'$templateCache').callprop(u'get', var.get(u'tpl')).neg()):
                    var.put(u'tpl', var.get(u'$sce').callprop(u'getTrustedResourceUrl', var.get(u'tpl')))
                var.put(u'transformResponse', (var.get(u'$http').get(u'defaults') and var.get(u'$http').get(u'defaults').get(u'transformResponse')))
                if var.get(u'isArray')(var.get(u'transformResponse')):
                    @Js
                    def PyJs_anonymous_859_(transformer, this, arguments, var=var):
                        var = Scope({u'this':this, u'transformer':transformer, u'arguments':arguments}, var)
                        var.registers([u'transformer'])
                        return PyJsStrictNeq(var.get(u'transformer'),var.get(u'defaultHttpResponseTransform'))
                    PyJs_anonymous_859_._set_name(u'anonymous')
                    var.put(u'transformResponse', var.get(u'transformResponse').callprop(u'filter', PyJs_anonymous_859_))
                else:
                    if PyJsStrictEq(var.get(u'transformResponse'),var.get(u'defaultHttpResponseTransform')):
                        var.put(u'transformResponse', var.get(u"null"))
                PyJs_Object_860_ = Js({u'cache':var.get(u'$templateCache'),u'transformResponse':var.get(u'transformResponse')})
                var.put(u'httpOptions', PyJs_Object_860_)
                @Js
                def PyJs_anonymous_861_(response, this, arguments, var=var):
                    var = Scope({u'this':this, u'response':response, u'arguments':arguments}, var)
                    var.registers([u'response'])
                    var.get(u'$templateCache').callprop(u'put', var.get(u'tpl'), var.get(u'response').get(u'data'))
                    return var.get(u'response').get(u'data')
                PyJs_anonymous_861_._set_name(u'anonymous')
                @Js
                def PyJs_anonymous_862_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    (var.get(u'handleRequestFn').put(u'totalPendingRequests',var.get(u'handleRequestFn').get(u'totalPendingRequests')-Js(1))+Js(1))
                PyJs_anonymous_862_._set_name(u'anonymous')
                return var.get(u'$http').callprop(u'get', var.get(u'tpl'), var.get(u'httpOptions')).callprop(u'finally', PyJs_anonymous_862_).callprop(u'then', PyJs_anonymous_861_, var.get(u'handleError'))
                pass
            PyJsHoisted_handleRequestFn_.func_name = u'handleRequestFn'
            var.put(u'handleRequestFn', PyJsHoisted_handleRequestFn_)
            pass
            var.get(u'handleRequestFn').put(u'totalPendingRequests', Js(0.0))
            return var.get(u'handleRequestFn')
        PyJs_anonymous_858_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$templateCache'), Js(u'$http'), Js(u'$q'), Js(u'$sce'), PyJs_anonymous_858_]))
    PyJsHoistedNonPyName.func_name = u'$TemplateRequestProvider'
    var.put(u'$TemplateRequestProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_assertArgFn_(arg, name, acceptArrayAnnotation, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'acceptArrayAnnotation':acceptArrayAnnotation, u'name':name, u'arg':arg}, var)
        var.registers([u'acceptArrayAnnotation', u'name', u'arg'])
        if (var.get(u'acceptArrayAnnotation') and var.get(u'isArray')(var.get(u'arg'))):
            var.put(u'arg', var.get(u'arg').get((var.get(u'arg').get(u'length')-Js(1.0))))
        var.get(u'assertArg')(var.get(u'isFunction')(var.get(u'arg')), var.get(u'name'), (Js(u'not a function, got ')+((var.get(u'arg').get(u'constructor').get(u'name') or Js(u'Object')) if (var.get(u'arg') and PyJsStrictEq(var.get(u'arg',throw=False).typeof(),Js(u'object'))) else var.get(u'arg',throw=False).typeof())))
        return var.get(u'arg')
    PyJsHoisted_assertArgFn_.func_name = u'assertArgFn'
    var.put(u'assertArgFn', PyJsHoisted_assertArgFn_)
    @Js
    def PyJsHoisted_parseAppUrl_(relativeUrl, locationObj, this, arguments, var=var):
        var = Scope({u'relativeUrl':relativeUrl, u'this':this, u'arguments':arguments, u'locationObj':locationObj}, var)
        var.registers([u'relativeUrl', u'locationObj', u'match', u'prefixed'])
        var.put(u'prefixed', PyJsStrictNeq(var.get(u'relativeUrl').callprop(u'charAt', Js(0.0)),Js(u'/')))
        if var.get(u'prefixed'):
            var.put(u'relativeUrl', (Js(u'/')+var.get(u'relativeUrl')))
        var.put(u'match', var.get(u'urlResolve')(var.get(u'relativeUrl')))
        var.get(u'locationObj').put(u'$$path', var.get(u'decodeURIComponent')((var.get(u'match').get(u'pathname').callprop(u'substring', Js(1.0)) if (var.get(u'prefixed') and PyJsStrictEq(var.get(u'match').get(u'pathname').callprop(u'charAt', Js(0.0)),Js(u'/'))) else var.get(u'match').get(u'pathname'))))
        var.get(u'locationObj').put(u'$$search', var.get(u'parseKeyValue')(var.get(u'match').get(u'search')))
        var.get(u'locationObj').put(u'$$hash', var.get(u'decodeURIComponent')(var.get(u'match').get(u'hash')))
        if (var.get(u'locationObj').get(u'$$path') and (var.get(u'locationObj').get(u'$$path').callprop(u'charAt', Js(0.0))!=Js(u'/'))):
            var.get(u'locationObj').put(u'$$path', (Js(u'/')+var.get(u'locationObj').get(u'$$path')))
    PyJsHoisted_parseAppUrl_.func_name = u'parseAppUrl'
    var.put(u'parseAppUrl', PyJsHoisted_parseAppUrl_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_340_(PyJsArg_246c6f67_, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'$log':PyJsArg_246c6f67_}, var)
            var.registers([u'$log'])
            @Js
            def PyJs_anonymous_341_(exception, cause, this, arguments, var=var):
                var = Scope({u'this':this, u'exception':exception, u'cause':cause, u'arguments':arguments}, var)
                var.registers([u'exception', u'cause'])
                var.get(u'$log').get(u'error').callprop(u'apply', var.get(u'$log'), var.get(u'arguments'))
            PyJs_anonymous_341_._set_name(u'anonymous')
            return PyJs_anonymous_341_
        PyJs_anonymous_340_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$log'), PyJs_anonymous_340_]))
    PyJsHoistedNonPyName.func_name = u'$ExceptionHandlerProvider'
    var.put(u'$ExceptionHandlerProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_numberFilter_(PyJsArg_246c6f63616c65_, this, arguments, var=var):
        var = Scope({u'this':this, u'$locale':PyJsArg_246c6f63616c65_, u'arguments':arguments}, var)
        var.registers([u'$locale', u'formats'])
        var.put(u'formats', var.get(u'$locale').get(u'NUMBER_FORMATS'))
        @Js
        def PyJs_anonymous_890_(number, fractionSize, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'number':number, u'fractionSize':fractionSize}, var)
            var.registers([u'number', u'fractionSize'])
            return (var.get(u'number') if (var.get(u'number')==var.get(u"null")) else var.get(u'formatNumber')(var.get(u'number'), var.get(u'formats').get(u'PATTERNS').get(u'0'), var.get(u'formats').get(u'GROUP_SEP'), var.get(u'formats').get(u'DECIMAL_SEP'), var.get(u'fractionSize')))
        PyJs_anonymous_890_._set_name(u'anonymous')
        return PyJs_anonymous_890_
    PyJsHoisted_numberFilter_.func_name = u'numberFilter'
    var.put(u'numberFilter', PyJsHoisted_numberFilter_)
    @Js
    def PyJsHoisted_sliceArgs_(args, startIndex, this, arguments, var=var):
        var = Scope({u'this':this, u'startIndex':startIndex, u'args':args, u'arguments':arguments}, var)
        var.registers([u'startIndex', u'args'])
        return var.get(u'slice').callprop(u'call', var.get(u'args'), (var.get(u'startIndex') or Js(0.0)))
    PyJsHoisted_sliceArgs_.func_name = u'sliceArgs'
    var.put(u'sliceArgs', PyJsHoisted_sliceArgs_)
    @Js
    def PyJsHoisted_identity_(PyJsArg_24_, this, arguments, var=var):
        var = Scope({u'this':this, u'$':PyJsArg_24_, u'arguments':arguments}, var)
        var.registers([u'$'])
        return var.get(u'$')
    PyJsHoisted_identity_.func_name = u'identity'
    var.put(u'identity', PyJsHoisted_identity_)
    @Js
    def PyJsHoisted_angularInit_(element, bootstrap, this, arguments, var=var):
        var = Scope({u'this':this, u'bootstrap':bootstrap, u'arguments':arguments, u'element':element}, var)
        var.registers([u'bootstrap', u'config', u'appElement', u'module', u'element'])
        PyJs_Object_30_ = Js({})
        var.put(u'config', PyJs_Object_30_)
        @Js
        def PyJs_anonymous_31_(prefix, this, arguments, var=var):
            var = Scope({u'this':this, u'prefix':prefix, u'arguments':arguments}, var)
            var.registers([u'prefix', u'name'])
            var.put(u'name', (var.get(u'prefix')+Js(u'app')))
            if ((var.get(u'appElement').neg() and var.get(u'element').get(u'hasAttribute')) and var.get(u'element').callprop(u'hasAttribute', var.get(u'name'))):
                var.put(u'appElement', var.get(u'element'))
                var.put(u'module', var.get(u'element').callprop(u'getAttribute', var.get(u'name')))
        PyJs_anonymous_31_._set_name(u'anonymous')
        var.get(u'forEach')(var.get(u'ngAttrPrefixes'), PyJs_anonymous_31_)
        @Js
        def PyJs_anonymous_32_(prefix, this, arguments, var=var):
            var = Scope({u'this':this, u'prefix':prefix, u'arguments':arguments}, var)
            var.registers([u'prefix', u'name', u'candidate'])
            var.put(u'name', (var.get(u'prefix')+Js(u'app')))
            pass
            if (var.get(u'appElement').neg() and var.put(u'candidate', var.get(u'element').callprop(u'querySelector', ((Js(u'[')+var.get(u'name').callprop(u'replace', Js(u':'), Js(u'\\:')))+Js(u']'))))):
                var.put(u'appElement', var.get(u'candidate'))
                var.put(u'module', var.get(u'candidate').callprop(u'getAttribute', var.get(u'name')))
        PyJs_anonymous_32_._set_name(u'anonymous')
        var.get(u'forEach')(var.get(u'ngAttrPrefixes'), PyJs_anonymous_32_)
        if var.get(u'appElement'):
            var.get(u'config').put(u'strictDi', PyJsStrictNeq(var.get(u'getNgAttribute')(var.get(u'appElement'), Js(u'strict-di')),var.get(u"null")))
            var.get(u'bootstrap')(var.get(u'appElement'), (Js([var.get(u'module')]) if var.get(u'module') else Js([])), var.get(u'config'))
    PyJsHoisted_angularInit_.func_name = u'angularInit'
    var.put(u'angularInit', PyJsHoisted_angularInit_)
    @Js
    def PyJsHoisted_jqLiteRemoveClass_(element, cssClasses, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'cssClasses':cssClasses, u'element':element}, var)
        var.registers([u'cssClasses', u'element'])
        if (var.get(u'cssClasses') and var.get(u'element').get(u'setAttribute')):
            @Js
            def PyJs_anonymous_79_(cssClass, this, arguments, var=var):
                var = Scope({u'this':this, u'cssClass':cssClass, u'arguments':arguments}, var)
                var.registers([u'cssClass'])
                var.get(u'element').callprop(u'setAttribute', Js(u'class'), var.get(u'trim')(((Js(u' ')+(var.get(u'element').callprop(u'getAttribute', Js(u'class')) or Js(u'')))+Js(u' ')).callprop(u'replace', JsRegExp(u'/[\n\t]/g'), Js(u' ')).callprop(u'replace', ((Js(u' ')+var.get(u'trim')(var.get(u'cssClass')))+Js(u' ')), Js(u' '))))
            PyJs_anonymous_79_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'cssClasses').callprop(u'split', Js(u' ')), PyJs_anonymous_79_)
    PyJsHoisted_jqLiteRemoveClass_.func_name = u'jqLiteRemoveClass'
    var.put(u'jqLiteRemoveClass', PyJsHoisted_jqLiteRemoveClass_)
    @Js
    def PyJsHoisted_isElement_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node'])
        return (var.get(u'node') and (var.get(u'node').get(u'nodeName') or ((var.get(u'node').get(u'prop') and var.get(u'node').get(u'attr')) and var.get(u'node').get(u'find')))).neg().neg()
    PyJsHoisted_isElement_.func_name = u'isElement'
    var.put(u'isElement', PyJsHoisted_isElement_)
    @Js
    def PyJsHoisted_urlResolve_(url, this, arguments, var=var):
        var = Scope({u'url':url, u'this':this, u'arguments':arguments}, var)
        var.registers([u'url', u'href'])
        var.put(u'href', var.get(u'url'))
        if var.get(u'msie'):
            var.get(u'urlParsingNode').callprop(u'setAttribute', Js(u'href'), var.get(u'href'))
            var.put(u'href', var.get(u'urlParsingNode').get(u'href'))
        var.get(u'urlParsingNode').callprop(u'setAttribute', Js(u'href'), var.get(u'href'))
        PyJs_Object_876_ = Js({u'href':var.get(u'urlParsingNode').get(u'href'),u'protocol':(var.get(u'urlParsingNode').get(u'protocol').callprop(u'replace', JsRegExp(u'/:$/'), Js(u'')) if var.get(u'urlParsingNode').get(u'protocol') else Js(u'')),u'host':var.get(u'urlParsingNode').get(u'host'),u'search':(var.get(u'urlParsingNode').get(u'search').callprop(u'replace', JsRegExp(u'/^\\?/'), Js(u'')) if var.get(u'urlParsingNode').get(u'search') else Js(u'')),u'hash':(var.get(u'urlParsingNode').get(u'hash').callprop(u'replace', JsRegExp(u'/^#/'), Js(u'')) if var.get(u'urlParsingNode').get(u'hash') else Js(u'')),u'hostname':var.get(u'urlParsingNode').get(u'hostname'),u'port':var.get(u'urlParsingNode').get(u'port'),u'pathname':(var.get(u'urlParsingNode').get(u'pathname') if PyJsStrictEq(var.get(u'urlParsingNode').get(u'pathname').callprop(u'charAt', Js(0.0)),Js(u'/')) else (Js(u'/')+var.get(u'urlParsingNode').get(u'pathname')))})
        return PyJs_Object_876_
    PyJsHoisted_urlResolve_.func_name = u'urlResolve'
    var.put(u'urlResolve', PyJsHoisted_urlResolve_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_254_(PyJsArg_246361636865466163746f7279_, this, arguments, var=var):
            var = Scope({u'this':this, u'$cacheFactory':PyJsArg_246361636865466163746f7279_, u'arguments':arguments}, var)
            var.registers([u'$cacheFactory'])
            return var.get(u'$cacheFactory')(Js(u'templates'))
        PyJs_anonymous_254_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$cacheFactory'), PyJs_anonymous_254_]))
    PyJsHoistedNonPyName.func_name = u'$TemplateCacheProvider'
    var.put(u'$TemplateCacheProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_isRegExp_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        return PyJsStrictEq(var.get(u'toString').callprop(u'call', var.get(u'value')),Js(u'[object RegExp]'))
    PyJsHoisted_isRegExp_.func_name = u'isRegExp'
    var.put(u'isRegExp', PyJsHoisted_isRegExp_)
    @Js
    def PyJsHoisted_removeComments_(jqNodes, this, arguments, var=var):
        var = Scope({u'this':this, u'jqNodes':jqNodes, u'arguments':arguments}, var)
        var.registers([u'i', u'node', u'jqNodes'])
        var.put(u'jqNodes', var.get(u'jqLite')(var.get(u'jqNodes')))
        var.put(u'i', var.get(u'jqNodes').get(u'length'))
        if (var.get(u'i')<=Js(1.0)):
            return var.get(u'jqNodes')
        while (var.put(u'i',var.get(u'i')-Js(1))+Js(1)):
            var.put(u'node', var.get(u'jqNodes').get(var.get(u'i')))
            if PyJsStrictEq(var.get(u'node').get(u'nodeType'),var.get(u'NODE_TYPE_COMMENT')):
                var.get(u'splice').callprop(u'call', var.get(u'jqNodes'), var.get(u'i'), Js(1.0))
        return var.get(u'jqNodes')
    PyJsHoisted_removeComments_.func_name = u'removeComments'
    var.put(u'removeComments', PyJsHoisted_removeComments_)
    @Js
    def PyJsHoisted_ifDefined_(v, d, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'd':d, u'v':v}, var)
        var.registers([u'd', u'v'])
        return (var.get(u'v') if PyJsStrictNeq(var.get(u'v',throw=False).typeof(),Js(u'undefined')) else var.get(u'd'))
    PyJsHoisted_ifDefined_.func_name = u'ifDefined'
    var.put(u'ifDefined', PyJsHoisted_ifDefined_)
    @Js
    def PyJsHoisted_isScope_(obj, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
        var.registers([u'obj'])
        return ((var.get(u'obj') and var.get(u'obj').get(u'$evalAsync')) and var.get(u'obj').get(u'$watch'))
    PyJsHoisted_isScope_.func_name = u'isScope'
    var.put(u'isScope', PyJsHoisted_isScope_)
    @Js
    def PyJsHoisted_identifierForController_(controller, ident, this, arguments, var=var):
        var = Scope({u'this':this, u'controller':controller, u'ident':ident, u'arguments':arguments}, var)
        var.registers([u'controller', u'ident', u'match'])
        if (var.get(u'ident') and var.get(u'isString')(var.get(u'ident'))):
            return var.get(u'ident')
        if var.get(u'isString')(var.get(u'controller')):
            var.put(u'match', var.get(u'CNTRL_REG').callprop(u'exec', var.get(u'controller')))
            if var.get(u'match'):
                return var.get(u'match').get(u'3')
    PyJsHoisted_identifierForController_.func_name = u'identifierForController'
    var.put(u'identifierForController', PyJsHoisted_identifierForController_)
    @Js
    def PyJsHoisted_toDebugString_(obj, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
        var.registers([u'obj'])
        if PyJsStrictEq(var.get(u'obj',throw=False).typeof(),Js(u'function')):
            return var.get(u'obj').callprop(u'toString').callprop(u'replace', JsRegExp(u'/ \\{[\\s\\S]*$/'), Js(u''))
        else:
            if var.get(u'isUndefined')(var.get(u'obj')):
                return Js(u'undefined')
            else:
                if PyJsStrictNeq(var.get(u'obj',throw=False).typeof(),Js(u'string')):
                    return var.get(u'serializeObject')(var.get(u'obj'))
        return var.get(u'obj')
    PyJsHoisted_toDebugString_.func_name = u'toDebugString'
    var.put(u'toDebugString', PyJsHoisted_toDebugString_)
    @Js
    def PyJsHoisted_isTypedArray_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        return ((var.get(u'value') and var.get(u'isNumber')(var.get(u'value').get(u'length'))) and var.get(u'TYPED_ARRAY_REGEXP').callprop(u'test', var.get(u'toString').callprop(u'call', var.get(u'value'))))
    PyJsHoisted_isTypedArray_.func_name = u'isTypedArray'
    var.put(u'isTypedArray', PyJsHoisted_isTypedArray_)
    @Js
    def PyJsHoisted_headersGetter_(headers, this, arguments, var=var):
        var = Scope({u'this':this, u'headers':headers, u'arguments':arguments}, var)
        var.registers([u'headers', u'headersObj'])
        pass
        @Js
        def PyJs_anonymous_359_(name, this, arguments, var=var):
            var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
            var.registers([u'name', u'value'])
            if var.get(u'headersObj').neg():
                var.put(u'headersObj', var.get(u'parseHeaders')(var.get(u'headers')))
            if var.get(u'name'):
                var.put(u'value', var.get(u'headersObj').get(var.get(u'lowercase')(var.get(u'name'))))
                if PyJsStrictEq(var.get(u'value'),PyJsComma(Js(0.0), Js(None))):
                    var.put(u'value', var.get(u"null"))
                return var.get(u'value')
            return var.get(u'headersObj')
        PyJs_anonymous_359_._set_name(u'anonymous')
        return PyJs_anonymous_359_
    PyJsHoisted_headersGetter_.func_name = u'headersGetter'
    var.put(u'headersGetter', PyJsHoisted_headersGetter_)
    @Js
    def PyJsHoisted_isAssignable_(ast, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'ast':ast}, var)
        var.registers([u'ast'])
        return (PyJsStrictEq(var.get(u'ast').get(u'type'),var.get(u'AST').get(u'Identifier')) or PyJsStrictEq(var.get(u'ast').get(u'type'),var.get(u'AST').get(u'MemberExpression')))
    PyJsHoisted_isAssignable_.func_name = u'isAssignable'
    var.put(u'isAssignable', PyJsHoisted_isAssignable_)
    @Js
    def PyJsHoisted_getter_(obj, path, bindFnToScope, this, arguments, var=var):
        var = Scope({u'this':this, u'path':path, u'obj':obj, u'arguments':arguments, u'bindFnToScope':bindFnToScope}, var)
        var.registers([u'obj', u'keys', u'len', u'bindFnToScope', u'i', u'lastInstance', u'key', u'path'])
        if var.get(u'path').neg():
            return var.get(u'obj')
        var.put(u'keys', var.get(u'path').callprop(u'split', Js(u'.')))
        pass
        var.put(u'lastInstance', var.get(u'obj'))
        var.put(u'len', var.get(u'keys').get(u'length'))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'len')):
            try:
                var.put(u'key', var.get(u'keys').get(var.get(u'i')))
                if var.get(u'obj'):
                    var.put(u'obj', var.put(u'lastInstance', var.get(u'obj')).get(var.get(u'key')))
            finally:
                    (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
        if (var.get(u'bindFnToScope').neg() and var.get(u'isFunction')(var.get(u'obj'))):
            return var.get(u'bind')(var.get(u'lastInstance'), var.get(u'obj'))
        return var.get(u'obj')
    PyJsHoisted_getter_.func_name = u'getter'
    var.put(u'getter', PyJsHoisted_getter_)
    @Js
    def PyJsHoisted_tokenDifference_(str1, str2, this, arguments, var=var):
        var = Scope({u'this':this, u'str2':str2, u'str1':str1, u'arguments':arguments}, var)
        var.registers([u'i', u'str2', u'str1', u'j', u'token', u'tokens1', u'tokens2', u'values'])
        var.put(u'values', Js(u''))
        var.put(u'tokens1', var.get(u'str1').callprop(u'split', JsRegExp(u'/\\s+/')))
        var.put(u'tokens2', var.get(u'str2').callprop(u'split', JsRegExp(u'/\\s+/')))
        class JS_CONTINUE_LABEL_6f75746572(Exception): pass
        class JS_BREAK_LABEL_6f75746572(Exception): pass
        try:
            #for JS loop
            var.put(u'i', Js(0.0))
            while (var.get(u'i')<var.get(u'tokens1').get(u'length')):
                try:
                    try:
                        var.put(u'token', var.get(u'tokens1').get(var.get(u'i')))
                        #for JS loop
                        var.put(u'j', Js(0.0))
                        while (var.get(u'j')<var.get(u'tokens2').get(u'length')):
                            try:
                                if (var.get(u'token')==var.get(u'tokens2').get(var.get(u'j'))):
                                    raise JS_CONTINUE_LABEL_6f75746572("Continued")
                            finally:
                                    (var.put(u'j',var.get(u'j')+Js(1))-Js(1))
                        var.put(u'values', ((Js(u' ') if (var.get(u'values').get(u'length')>Js(0.0)) else Js(u''))+var.get(u'token')), u'+')
                    finally:
                            (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                except JS_CONTINUE_LABEL_6f75746572:
                    pass
        except JS_BREAK_LABEL_6f75746572:
            pass
        return var.get(u'values')
    PyJsHoisted_tokenDifference_.func_name = u'tokenDifference'
    var.put(u'tokenDifference', PyJsHoisted_tokenDifference_)
    @Js
    def PyJsHoisted_parseHeaders_(headers, this, arguments, var=var):
        var = Scope({u'this':this, u'headers':headers, u'arguments':arguments}, var)
        var.registers([u'i', u'headers', u'parsed', u'fillInParsed'])
        @Js
        def PyJsHoisted_fillInParsed_(key, val, this, arguments, var=var):
            var = Scope({u'this':this, u'val':val, u'key':key, u'arguments':arguments}, var)
            var.registers([u'val', u'key'])
            if var.get(u'key'):
                var.get(u'parsed').put(var.get(u'key'), (((var.get(u'parsed').get(var.get(u'key'))+Js(u', '))+var.get(u'val')) if var.get(u'parsed').get(var.get(u'key')) else var.get(u'val')))
        PyJsHoisted_fillInParsed_.func_name = u'fillInParsed'
        var.put(u'fillInParsed', PyJsHoisted_fillInParsed_)
        var.put(u'parsed', var.get(u'createMap')())
        pass
        if var.get(u'isString')(var.get(u'headers')):
            @Js
            def PyJs_anonymous_357_(line, this, arguments, var=var):
                var = Scope({u'this':this, u'line':line, u'arguments':arguments}, var)
                var.registers([u'line'])
                var.put(u'i', var.get(u'line').callprop(u'indexOf', Js(u':')))
                var.get(u'fillInParsed')(var.get(u'lowercase')(var.get(u'trim')(var.get(u'line').callprop(u'substr', Js(0.0), var.get(u'i')))), var.get(u'trim')(var.get(u'line').callprop(u'substr', (var.get(u'i')+Js(1.0)))))
            PyJs_anonymous_357_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'headers').callprop(u'split', Js(u'\n')), PyJs_anonymous_357_)
        else:
            if var.get(u'isObject')(var.get(u'headers')):
                @Js
                def PyJs_anonymous_358_(headerVal, headerKey, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'headerVal':headerVal, u'headerKey':headerKey}, var)
                    var.registers([u'headerVal', u'headerKey'])
                    var.get(u'fillInParsed')(var.get(u'lowercase')(var.get(u'headerKey')), var.get(u'trim')(var.get(u'headerVal')))
                PyJs_anonymous_358_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'headers'), PyJs_anonymous_358_)
        return var.get(u'parsed')
    PyJsHoisted_parseHeaders_.func_name = u'parseHeaders'
    var.put(u'parseHeaders', PyJsHoisted_parseHeaders_)
    @Js
    def PyJsHoisted_copy_(source, destination, this, arguments, var=var):
        var = Scope({u'this':this, u'source':source, u'destination':destination, u'arguments':arguments}, var)
        var.registers([u'destination', u'stackDest', u'copyElement', u'source', u'stackSource', u'copyRecurse'])
        @Js
        def PyJsHoisted_copyRecurse_(source, destination, this, arguments, var=var):
            var = Scope({u'this':this, u'source':source, u'destination':destination, u'arguments':arguments}, var)
            var.registers([u'i', u'h', u'destination', u'ii', u'source', u'result', u'key'])
            var.put(u'h', var.get(u'destination').get(u'$$hashKey'))
            pass
            if var.get(u'isArray')(var.get(u'source')):
                #for JS loop
                var.put(u'i', Js(0.0))
                var.put(u'ii', var.get(u'source').get(u'length'))
                while (var.get(u'i')<var.get(u'ii')):
                    try:
                        var.get(u'destination').callprop(u'push', var.get(u'copyElement')(var.get(u'source').get(var.get(u'i'))))
                    finally:
                            (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
            else:
                if var.get(u'isBlankObject')(var.get(u'source')):
                    for PyJsTemp in var.get(u'source'):
                        var.put(u'key', PyJsTemp)
                        var.get(u'destination').put(var.get(u'key'), var.get(u'copyElement')(var.get(u'source').get(var.get(u'key'))))
                else:
                    if (var.get(u'source') and PyJsStrictEq(var.get(u'source').get(u'hasOwnProperty').typeof(),Js(u'function'))):
                        for PyJsTemp in var.get(u'source'):
                            var.put(u'key', PyJsTemp)
                            if var.get(u'source').callprop(u'hasOwnProperty', var.get(u'key')):
                                var.get(u'destination').put(var.get(u'key'), var.get(u'copyElement')(var.get(u'source').get(var.get(u'key'))))
                    else:
                        for PyJsTemp in var.get(u'source'):
                            var.put(u'key', PyJsTemp)
                            if var.get(u'hasOwnProperty').callprop(u'call', var.get(u'source'), var.get(u'key')):
                                var.get(u'destination').put(var.get(u'key'), var.get(u'copyElement')(var.get(u'source').get(var.get(u'key'))))
            var.get(u'setHashKey')(var.get(u'destination'), var.get(u'h'))
            return var.get(u'destination')
        PyJsHoisted_copyRecurse_.func_name = u'copyRecurse'
        var.put(u'copyRecurse', PyJsHoisted_copyRecurse_)
        @Js
        def PyJsHoisted_copyElement_(source, this, arguments, var=var):
            var = Scope({u'this':this, u'source':source, u'arguments':arguments}, var)
            var.registers([u'index', u'needsRecurse', u'destination', u'source'])
            if var.get(u'isObject')(var.get(u'source')).neg():
                return var.get(u'source')
            var.put(u'index', var.get(u'stackSource').callprop(u'indexOf', var.get(u'source')))
            if PyJsStrictNeq(var.get(u'index'),(-Js(1.0))):
                return var.get(u'stackDest').get(var.get(u'index'))
            if (var.get(u'isWindow')(var.get(u'source')) or var.get(u'isScope')(var.get(u'source'))):
                PyJsTempException = JsToPyException(var.get(u'ngMinErr')(Js(u'cpws'), Js(u"Can't copy! Making copies of Window or Scope instances is not supported.")))
                raise PyJsTempException
            var.put(u'needsRecurse', Js(False))
            pass
            if var.get(u'isArray')(var.get(u'source')):
                var.put(u'destination', Js([]))
                var.put(u'needsRecurse', var.get(u'true'))
            else:
                if var.get(u'isTypedArray')(var.get(u'source')):
                    var.put(u'destination', var.get(u'source').get(u'constructor').create(var.get(u'source')))
                else:
                    if var.get(u'isDate')(var.get(u'source')):
                        var.put(u'destination', var.get(u'Date').create(var.get(u'source').callprop(u'getTime')))
                    else:
                        if var.get(u'isRegExp')(var.get(u'source')):
                            var.put(u'destination', var.get(u'RegExp').create(var.get(u'source').get(u'source'), var.get(u'source').callprop(u'toString').callprop(u'match', JsRegExp(u'/[^\\/]*$/')).get(u'0')))
                            var.get(u'destination').put(u'lastIndex', var.get(u'source').get(u'lastIndex'))
                        else:
                            if var.get(u'isFunction')(var.get(u'source').get(u'cloneNode')):
                                var.put(u'destination', var.get(u'source').callprop(u'cloneNode', var.get(u'true')))
                            else:
                                var.put(u'destination', var.get(u'Object').callprop(u'create', var.get(u'getPrototypeOf')(var.get(u'source'))))
                                var.put(u'needsRecurse', var.get(u'true'))
            var.get(u'stackSource').callprop(u'push', var.get(u'source'))
            var.get(u'stackDest').callprop(u'push', var.get(u'destination'))
            return (var.get(u'copyRecurse')(var.get(u'source'), var.get(u'destination')) if var.get(u'needsRecurse') else var.get(u'destination'))
        PyJsHoisted_copyElement_.func_name = u'copyElement'
        var.put(u'copyElement', PyJsHoisted_copyElement_)
        var.put(u'stackSource', Js([]))
        var.put(u'stackDest', Js([]))
        if var.get(u'destination'):
            if var.get(u'isTypedArray')(var.get(u'destination')):
                PyJsTempException = JsToPyException(var.get(u'ngMinErr')(Js(u'cpta'), Js(u"Can't copy! TypedArray destination cannot be mutated.")))
                raise PyJsTempException
            if PyJsStrictEq(var.get(u'source'),var.get(u'destination')):
                PyJsTempException = JsToPyException(var.get(u'ngMinErr')(Js(u'cpi'), Js(u"Can't copy! Source and destination are identical.")))
                raise PyJsTempException
            if var.get(u'isArray')(var.get(u'destination')):
                var.get(u'destination').put(u'length', Js(0.0))
            else:
                @Js
                def PyJs_anonymous_16_(value, key, this, arguments, var=var):
                    var = Scope({u'this':this, u'key':key, u'value':value, u'arguments':arguments}, var)
                    var.registers([u'key', u'value'])
                    if PyJsStrictNeq(var.get(u'key'),Js(u'$$hashKey')):
                        var.get(u'destination').delete(var.get(u'key'))
                PyJs_anonymous_16_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'destination'), PyJs_anonymous_16_)
            var.get(u'stackSource').callprop(u'push', var.get(u'source'))
            var.get(u'stackDest').callprop(u'push', var.get(u'destination'))
            return var.get(u'copyRecurse')(var.get(u'source'), var.get(u'destination'))
        return var.get(u'copyElement')(var.get(u'source'))
        pass
        pass
    PyJsHoisted_copy_.func_name = u'copy'
    var.put(u'copy', PyJsHoisted_copy_)
    @Js
    def PyJsHoisted_nextUid_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.put(u'uid',var.get(u'uid')+Js(1))
    PyJsHoisted_nextUid_.func_name = u'nextUid'
    var.put(u'nextUid', PyJsHoisted_nextUid_)
    @Js
    def PyJsHoisted_Browser_(window, document, PyJsArg_246c6f67_, PyJsArg_24736e6966666572_, this, arguments, var=var):
        var = Scope({u'$sniffer':PyJsArg_24736e6966666572_, u'window':window, u'arguments':arguments, u'this':this, u'document':document, u'$log':PyJsArg_246c6f67_}, var)
        var.registers([u'rawDocument', u'lastHistoryState', u'outstandingRequestCount', u'outstandingRequestCallbacks', u'setTimeout', u'completeOutstandingRequest', u'self', u'clearTimeout', u'lastBrowserUrl', u'window', u'getHash', u'location', u'baseElement', u'pendingLocation', u'$sniffer', u'cacheStateAndFireUrlChange', u'lastCachedState', u'cachedState', u'cacheState', u'getCurrentState', u'document', u'pendingDeferIds', u'urlChangeInit', u'$log', u'urlChangeListeners', u'fireUrlChange', u'history'])
        @Js
        def PyJsHoisted_getCurrentState_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            try:
                return var.get(u'history').get(u'state')
            except PyJsException as PyJsTempException:
                PyJsHolder_65_68786186 = var.own.get(u'e')
                var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_68786186 is not None:
                        var.own[u'e'] = PyJsHolder_65_68786186
                    else:
                        del var.own[u'e']
                    del PyJsHolder_65_68786186
        PyJsHoisted_getCurrentState_.func_name = u'getCurrentState'
        var.put(u'getCurrentState', PyJsHoisted_getCurrentState_)
        @Js
        def PyJsHoisted_cacheStateAndFireUrlChange_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.put(u'pendingLocation', var.get(u"null"))
            var.get(u'cacheState')()
            var.get(u'fireUrlChange')()
        PyJsHoisted_cacheStateAndFireUrlChange_.func_name = u'cacheStateAndFireUrlChange'
        var.put(u'cacheStateAndFireUrlChange', PyJsHoisted_cacheStateAndFireUrlChange_)
        @Js
        def PyJsHoisted_completeOutstandingRequest_(fn, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'fn':fn}, var)
            var.registers([u'fn'])
            try:
                var.get(u'fn').callprop(u'apply', var.get(u"null"), var.get(u'sliceArgs')(var.get(u'arguments'), Js(1.0)))
            finally:
                (var.put(u'outstandingRequestCount',var.get(u'outstandingRequestCount')-Js(1))+Js(1))
                if PyJsStrictEq(var.get(u'outstandingRequestCount'),Js(0.0)):
                    while var.get(u'outstandingRequestCallbacks').get(u'length'):
                        try:
                            var.get(u'outstandingRequestCallbacks').callprop(u'pop')()
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65_80796953 = var.own.get(u'e')
                            var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                            try:
                                var.get(u'$log').callprop(u'error', var.get(u'e'))
                            finally:
                                if PyJsHolder_65_80796953 is not None:
                                    var.own[u'e'] = PyJsHolder_65_80796953
                                else:
                                    del var.own[u'e']
                                del PyJsHolder_65_80796953
        PyJsHoisted_completeOutstandingRequest_.func_name = u'completeOutstandingRequest'
        var.put(u'completeOutstandingRequest', PyJsHoisted_completeOutstandingRequest_)
        @Js
        def PyJsHoisted_fireUrlChange_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            if (PyJsStrictEq(var.get(u'lastBrowserUrl'),var.get(u'self').callprop(u'url')) and PyJsStrictEq(var.get(u'lastHistoryState'),var.get(u'cachedState'))):
                return var.get('undefined')
            var.put(u'lastBrowserUrl', var.get(u'self').callprop(u'url'))
            var.put(u'lastHistoryState', var.get(u'cachedState'))
            @Js
            def PyJs_anonymous_228_(listener, this, arguments, var=var):
                var = Scope({u'listener':listener, u'this':this, u'arguments':arguments}, var)
                var.registers([u'listener'])
                var.get(u'listener')(var.get(u'self').callprop(u'url'), var.get(u'cachedState'))
            PyJs_anonymous_228_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'urlChangeListeners'), PyJs_anonymous_228_)
        PyJsHoisted_fireUrlChange_.func_name = u'fireUrlChange'
        var.put(u'fireUrlChange', PyJsHoisted_fireUrlChange_)
        @Js
        def PyJsHoisted_cacheState_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.put(u'cachedState', var.get(u'getCurrentState')())
            var.put(u'cachedState', (var.get(u"null") if var.get(u'isUndefined')(var.get(u'cachedState')) else var.get(u'cachedState')))
            if var.get(u'equals')(var.get(u'cachedState'), var.get(u'lastCachedState')):
                var.put(u'cachedState', var.get(u'lastCachedState'))
            var.put(u'lastCachedState', var.get(u'cachedState'))
        PyJsHoisted_cacheState_.func_name = u'cacheState'
        var.put(u'cacheState', PyJsHoisted_cacheState_)
        @Js
        def PyJsHoisted_getHash_(url, this, arguments, var=var):
            var = Scope({u'url':url, u'this':this, u'arguments':arguments}, var)
            var.registers([u'url', u'index'])
            var.put(u'index', var.get(u'url').callprop(u'indexOf', Js(u'#')))
            return (Js(u'') if PyJsStrictEq(var.get(u'index'),(-Js(1.0))) else var.get(u'url').callprop(u'substr', var.get(u'index')))
        PyJsHoisted_getHash_.func_name = u'getHash'
        var.put(u'getHash', PyJsHoisted_getHash_)
        var.put(u'self', var.get(u"this"))
        var.put(u'rawDocument', var.get(u'document').get(u'0'))
        var.put(u'location', var.get(u'window').get(u'location'))
        var.put(u'history', var.get(u'window').get(u'history'))
        var.put(u'setTimeout', var.get(u'window').get(u'setTimeout'))
        var.put(u'clearTimeout', var.get(u'window').get(u'clearTimeout'))
        PyJs_Object_223_ = Js({})
        var.put(u'pendingDeferIds', PyJs_Object_223_)
        var.get(u'self').put(u'isMock', Js(False))
        var.put(u'outstandingRequestCount', Js(0.0))
        var.put(u'outstandingRequestCallbacks', Js([]))
        var.get(u'self').put(u'$$completeOutstandingRequest', var.get(u'completeOutstandingRequest'))
        @Js
        def PyJs_anonymous_224_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            (var.put(u'outstandingRequestCount',var.get(u'outstandingRequestCount')+Js(1))-Js(1))
        PyJs_anonymous_224_._set_name(u'anonymous')
        var.get(u'self').put(u'$$incOutstandingRequestCount', PyJs_anonymous_224_)
        pass
        pass
        @Js
        def PyJs_anonymous_225_(callback, this, arguments, var=var):
            var = Scope({u'this':this, u'callback':callback, u'arguments':arguments}, var)
            var.registers([u'callback'])
            if PyJsStrictEq(var.get(u'outstandingRequestCount'),Js(0.0)):
                var.get(u'callback')()
            else:
                var.get(u'outstandingRequestCallbacks').callprop(u'push', var.get(u'callback'))
        PyJs_anonymous_225_._set_name(u'anonymous')
        var.get(u'self').put(u'notifyWhenNoOutstandingRequests', PyJs_anonymous_225_)
        var.put(u'lastBrowserUrl', var.get(u'location').get(u'href'))
        var.put(u'baseElement', var.get(u'document').callprop(u'find', Js(u'base')))
        var.put(u'pendingLocation', var.get(u"null"))
        var.get(u'cacheState')()
        var.put(u'lastHistoryState', var.get(u'cachedState'))
        @Js
        def PyJs_anonymous_226_(url, replace, state, this, arguments, var=var):
            var = Scope({u'url':url, u'this':this, u'state':state, u'arguments':arguments, u'replace':replace}, var)
            var.registers([u'sameState', u'sameBase', u'state', u'url', u'replace'])
            if var.get(u'isUndefined')(var.get(u'state')):
                var.put(u'state', var.get(u"null"))
            if PyJsStrictNeq(var.get(u'location'),var.get(u'window').get(u'location')):
                var.put(u'location', var.get(u'window').get(u'location'))
            if PyJsStrictNeq(var.get(u'history'),var.get(u'window').get(u'history')):
                var.put(u'history', var.get(u'window').get(u'history'))
            if var.get(u'url'):
                var.put(u'sameState', PyJsStrictEq(var.get(u'lastHistoryState'),var.get(u'state')))
                if (PyJsStrictEq(var.get(u'lastBrowserUrl'),var.get(u'url')) and (var.get(u'$sniffer').get(u'history').neg() or var.get(u'sameState'))):
                    return var.get(u'self')
                var.put(u'sameBase', (var.get(u'lastBrowserUrl') and PyJsStrictEq(var.get(u'stripHash')(var.get(u'lastBrowserUrl')),var.get(u'stripHash')(var.get(u'url')))))
                var.put(u'lastBrowserUrl', var.get(u'url'))
                var.put(u'lastHistoryState', var.get(u'state'))
                if (var.get(u'$sniffer').get(u'history') and (var.get(u'sameBase').neg() or var.get(u'sameState').neg())):
                    var.get(u'history').callprop((Js(u'replaceState') if var.get(u'replace') else Js(u'pushState')), var.get(u'state'), Js(u''), var.get(u'url'))
                    var.get(u'cacheState')()
                    var.put(u'lastHistoryState', var.get(u'cachedState'))
                else:
                    if (var.get(u'sameBase').neg() or var.get(u'pendingLocation')):
                        var.put(u'pendingLocation', var.get(u'url'))
                    if var.get(u'replace'):
                        var.get(u'location').callprop(u'replace', var.get(u'url'))
                    else:
                        if var.get(u'sameBase').neg():
                            var.get(u'location').put(u'href', var.get(u'url'))
                        else:
                            var.get(u'location').put(u'hash', var.get(u'getHash')(var.get(u'url')))
                    if PyJsStrictNeq(var.get(u'location').get(u'href'),var.get(u'url')):
                        var.put(u'pendingLocation', var.get(u'url'))
                return var.get(u'self')
            else:
                return (var.get(u'pendingLocation') or var.get(u'location').get(u'href').callprop(u'replace', JsRegExp(u'/%27/g'), Js(u"'")))
        PyJs_anonymous_226_._set_name(u'anonymous')
        var.get(u'self').put(u'url', PyJs_anonymous_226_)
        @Js
        def PyJs_anonymous_227_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            return var.get(u'cachedState')
        PyJs_anonymous_227_._set_name(u'anonymous')
        var.get(u'self').put(u'state', PyJs_anonymous_227_)
        var.put(u'urlChangeListeners', Js([]))
        var.put(u'urlChangeInit', Js(False))
        pass
        pass
        var.put(u'lastCachedState', var.get(u"null"))
        pass
        pass
        @Js
        def PyJs_anonymous_229_(callback, this, arguments, var=var):
            var = Scope({u'this':this, u'callback':callback, u'arguments':arguments}, var)
            var.registers([u'callback'])
            if var.get(u'urlChangeInit').neg():
                if var.get(u'$sniffer').get(u'history'):
                    var.get(u'jqLite')(var.get(u'window')).callprop(u'on', Js(u'popstate'), var.get(u'cacheStateAndFireUrlChange'))
                var.get(u'jqLite')(var.get(u'window')).callprop(u'on', Js(u'hashchange'), var.get(u'cacheStateAndFireUrlChange'))
                var.put(u'urlChangeInit', var.get(u'true'))
            var.get(u'urlChangeListeners').callprop(u'push', var.get(u'callback'))
            return var.get(u'callback')
        PyJs_anonymous_229_._set_name(u'anonymous')
        var.get(u'self').put(u'onUrlChange', PyJs_anonymous_229_)
        @Js
        def PyJs_anonymous_230_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u'jqLite')(var.get(u'window')).callprop(u'off', Js(u'hashchange popstate'), var.get(u'cacheStateAndFireUrlChange'))
        PyJs_anonymous_230_._set_name(u'anonymous')
        var.get(u'self').put(u'$$applicationDestroyed', PyJs_anonymous_230_)
        var.get(u'self').put(u'$$checkUrlChange', var.get(u'fireUrlChange'))
        @Js
        def PyJs_anonymous_231_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'href'])
            var.put(u'href', var.get(u'baseElement').callprop(u'attr', Js(u'href')))
            return (var.get(u'href').callprop(u'replace', JsRegExp(u'/^(https?\\:)?\\/\\/[^\\/]*/'), Js(u'')) if var.get(u'href') else Js(u''))
        PyJs_anonymous_231_._set_name(u'anonymous')
        var.get(u'self').put(u'baseHref', PyJs_anonymous_231_)
        @Js
        def PyJs_anonymous_232_(fn, delay, this, arguments, var=var):
            var = Scope({u'delay':delay, u'this':this, u'arguments':arguments, u'fn':fn}, var)
            var.registers([u'delay', u'timeoutId', u'fn'])
            pass
            (var.put(u'outstandingRequestCount',var.get(u'outstandingRequestCount')+Js(1))-Js(1))
            @Js
            def PyJs_anonymous_233_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                var.get(u'pendingDeferIds').delete(var.get(u'timeoutId'))
                var.get(u'completeOutstandingRequest')(var.get(u'fn'))
            PyJs_anonymous_233_._set_name(u'anonymous')
            var.put(u'timeoutId', var.get(u'setTimeout')(PyJs_anonymous_233_, (var.get(u'delay') or Js(0.0))))
            var.get(u'pendingDeferIds').put(var.get(u'timeoutId'), var.get(u'true'))
            return var.get(u'timeoutId')
        PyJs_anonymous_232_._set_name(u'anonymous')
        var.get(u'self').put(u'defer', PyJs_anonymous_232_)
        @Js
        def PyJs_anonymous_234_(deferId, this, arguments, var=var):
            var = Scope({u'this':this, u'deferId':deferId, u'arguments':arguments}, var)
            var.registers([u'deferId'])
            if var.get(u'pendingDeferIds').get(var.get(u'deferId')):
                var.get(u'pendingDeferIds').delete(var.get(u'deferId'))
                var.get(u'clearTimeout')(var.get(u'deferId'))
                var.get(u'completeOutstandingRequest')(var.get(u'noop'))
                return var.get(u'true')
            return Js(False)
        PyJs_anonymous_234_._set_name(u'anonymous')
        var.get(u'self').get(u'defer').put(u'cancel', PyJs_anonymous_234_)
    PyJsHoisted_Browser_.func_name = u'Browser'
    var.put(u'Browser', PyJsHoisted_Browser_)
    @Js
    def PyJsHoisted_isFormData_(obj, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
        var.registers([u'obj'])
        return PyJsStrictEq(var.get(u'toString').callprop(u'call', var.get(u'obj')),Js(u'[object FormData]'))
    PyJsHoisted_isFormData_.func_name = u'isFormData'
    var.put(u'isFormData', PyJsHoisted_isFormData_)
    @Js
    def PyJsHoisted_locationGetterSetter_(property, preprocess, this, arguments, var=var):
        var = Scope({u'preprocess':preprocess, u'this':this, u'property':property, u'arguments':arguments}, var)
        var.registers([u'preprocess', u'property'])
        @Js
        def PyJs_anonymous_443_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            if var.get(u'isUndefined')(var.get(u'value')):
                return var.get(u"this").get(var.get(u'property'))
            var.get(u"this").put(var.get(u'property'), var.get(u'preprocess')(var.get(u'value')))
            var.get(u"this").callprop(u'$$compose')
            return var.get(u"this")
        PyJs_anonymous_443_._set_name(u'anonymous')
        return PyJs_anonymous_443_
    PyJsHoisted_locationGetterSetter_.func_name = u'locationGetterSetter'
    var.put(u'locationGetterSetter', PyJsHoisted_locationGetterSetter_)
    @Js
    def PyJsHoisted_isDate_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        return PyJsStrictEq(var.get(u'toString').callprop(u'call', var.get(u'value')),Js(u'[object Date]'))
    PyJsHoisted_isDate_.func_name = u'isDate'
    var.put(u'isDate', PyJsHoisted_isDate_)
    @Js
    def PyJsHoisted_getAliasedAttrName_(name, this, arguments, var=var):
        var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
        var.registers([u'name'])
        return var.get(u'ALIASED_ATTR').get(var.get(u'name'))
    PyJsHoisted_getAliasedAttrName_.func_name = u'getAliasedAttrName'
    var.put(u'getAliasedAttrName', PyJsHoisted_getAliasedAttrName_)
    @Js
    def PyJsHoisted_currencyFilter_(PyJsArg_246c6f63616c65_, this, arguments, var=var):
        var = Scope({u'this':this, u'$locale':PyJsArg_246c6f63616c65_, u'arguments':arguments}, var)
        var.registers([u'$locale', u'formats'])
        var.put(u'formats', var.get(u'$locale').get(u'NUMBER_FORMATS'))
        @Js
        def PyJs_anonymous_889_(amount, currencySymbol, fractionSize, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'amount':amount, u'fractionSize':fractionSize, u'currencySymbol':currencySymbol}, var)
            var.registers([u'amount', u'fractionSize', u'currencySymbol'])
            if var.get(u'isUndefined')(var.get(u'currencySymbol')):
                var.put(u'currencySymbol', var.get(u'formats').get(u'CURRENCY_SYM'))
            if var.get(u'isUndefined')(var.get(u'fractionSize')):
                var.put(u'fractionSize', var.get(u'formats').get(u'PATTERNS').get(u'1').get(u'maxFrac'))
            return (var.get(u'amount') if (var.get(u'amount')==var.get(u"null")) else var.get(u'formatNumber')(var.get(u'amount'), var.get(u'formats').get(u'PATTERNS').get(u'1'), var.get(u'formats').get(u'GROUP_SEP'), var.get(u'formats').get(u'DECIMAL_SEP'), var.get(u'fractionSize')).callprop(u'replace', JsRegExp(u'/\xa4/g'), var.get(u'currencySymbol')))
        PyJs_anonymous_889_._set_name(u'anonymous')
        return PyJs_anonymous_889_
    PyJsHoisted_currencyFilter_.func_name = u'currencyFilter'
    var.put(u'currencyFilter', PyJsHoisted_currencyFilter_)
    @Js
    def PyJsHoisted_mergeClasses_(a, b, this, arguments, var=var):
        var = Scope({u'a':a, u'this':this, u'b':b, u'arguments':arguments}, var)
        var.registers([u'a', u'b'])
        if (var.get(u'a').neg() and var.get(u'b').neg()):
            return Js(u'')
        if var.get(u'a').neg():
            return var.get(u'b')
        if var.get(u'b').neg():
            return var.get(u'a')
        if var.get(u'isArray')(var.get(u'a')):
            var.put(u'a', var.get(u'a').callprop(u'join', Js(u' ')))
        if var.get(u'isArray')(var.get(u'b')):
            var.put(u'b', var.get(u'b').callprop(u'join', Js(u' ')))
        return ((var.get(u'a')+Js(u' '))+var.get(u'b'))
    PyJsHoisted_mergeClasses_.func_name = u'mergeClasses'
    var.put(u'mergeClasses', PyJsHoisted_mergeClasses_)
    @Js
    def PyJsHoisted_orderByFilter_(PyJsArg_247061727365_, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'$parse':PyJsArg_247061727365_}, var)
        var.registers([u'compare', u'isPrimitive', u'getPredicateValue', u'processPredicates', u'objectValue', u'$parse'])
        @Js
        def PyJsHoisted_isPrimitive_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            while 1:
                SWITCHED = False
                CONDITION = (var.get(u'value',throw=False).typeof())
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'number')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'boolean')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'string')):
                    SWITCHED = True
                    return var.get(u'true')
                if True:
                    SWITCHED = True
                    return Js(False)
                SWITCHED = True
                break
        PyJsHoisted_isPrimitive_.func_name = u'isPrimitive'
        var.put(u'isPrimitive', PyJsHoisted_isPrimitive_)
        @Js
        def PyJsHoisted_compare_(v1, v2, this, arguments, var=var):
            var = Scope({u'this':this, u'v1':v1, u'v2':v2, u'arguments':arguments}, var)
            var.registers([u'v1', u'v2', u'result'])
            var.put(u'result', Js(0.0))
            if PyJsStrictEq(var.get(u'v1').get(u'type'),var.get(u'v2').get(u'type')):
                if PyJsStrictNeq(var.get(u'v1').get(u'value'),var.get(u'v2').get(u'value')):
                    var.put(u'result', ((-Js(1.0)) if (var.get(u'v1').get(u'value')<var.get(u'v2').get(u'value')) else Js(1.0)))
            else:
                var.put(u'result', ((-Js(1.0)) if (var.get(u'v1').get(u'type')<var.get(u'v2').get(u'type')) else Js(1.0)))
            return var.get(u'result')
        PyJsHoisted_compare_.func_name = u'compare'
        var.put(u'compare', PyJsHoisted_compare_)
        @Js
        def PyJsHoisted_getPredicateValue_(value, index, this, arguments, var=var):
            var = Scope({u'this':this, u'index':index, u'arguments':arguments, u'value':value}, var)
            var.registers([u'index', u'type', u'value'])
            var.put(u'type', var.get(u'value',throw=False).typeof())
            if PyJsStrictEq(var.get(u'value'),var.get(u"null")):
                var.put(u'type', Js(u'string'))
                var.put(u'value', Js(u'null'))
            else:
                if PyJsStrictEq(var.get(u'type'),Js(u'string')):
                    var.put(u'value', var.get(u'value').callprop(u'toLowerCase'))
                else:
                    if PyJsStrictEq(var.get(u'type'),Js(u'object')):
                        var.put(u'value', var.get(u'objectValue')(var.get(u'value'), var.get(u'index')))
            PyJs_Object_909_ = Js({u'value':var.get(u'value'),u'type':var.get(u'type')})
            return PyJs_Object_909_
        PyJsHoisted_getPredicateValue_.func_name = u'getPredicateValue'
        var.put(u'getPredicateValue', PyJsHoisted_getPredicateValue_)
        @Js
        def PyJsHoisted_processPredicates_(sortPredicate, reverseOrder, this, arguments, var=var):
            var = Scope({u'this':this, u'sortPredicate':sortPredicate, u'arguments':arguments, u'reverseOrder':reverseOrder}, var)
            var.registers([u'sortPredicate', u'reverseOrder'])
            var.put(u'reverseOrder', ((-Js(1.0)) if var.get(u'reverseOrder') else Js(1.0)))
            @Js
            def PyJs_anonymous_906_(predicate, this, arguments, var=var):
                var = Scope({u'this':this, u'predicate':predicate, u'arguments':arguments}, var)
                var.registers([u'predicate', u'descending', u'key', u'get'])
                var.put(u'descending', Js(1.0))
                var.put(u'get', var.get(u'identity'))
                if var.get(u'isFunction')(var.get(u'predicate')):
                    var.put(u'get', var.get(u'predicate'))
                else:
                    if var.get(u'isString')(var.get(u'predicate')):
                        if ((var.get(u'predicate').callprop(u'charAt', Js(0.0))==Js(u'+')) or (var.get(u'predicate').callprop(u'charAt', Js(0.0))==Js(u'-'))):
                            var.put(u'descending', ((-Js(1.0)) if (var.get(u'predicate').callprop(u'charAt', Js(0.0))==Js(u'-')) else Js(1.0)))
                            var.put(u'predicate', var.get(u'predicate').callprop(u'substring', Js(1.0)))
                        if PyJsStrictNeq(var.get(u'predicate'),Js(u'')):
                            var.put(u'get', var.get(u'$parse')(var.get(u'predicate')))
                            if var.get(u'get').get(u'constant'):
                                var.put(u'key', var.get(u'get')())
                                @Js
                                def PyJs_anonymous_907_(value, this, arguments, var=var):
                                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                                    var.registers([u'value'])
                                    return var.get(u'value').get(var.get(u'key'))
                                PyJs_anonymous_907_._set_name(u'anonymous')
                                var.put(u'get', PyJs_anonymous_907_)
                PyJs_Object_908_ = Js({u'get':var.get(u'get'),u'descending':(var.get(u'descending')*var.get(u'reverseOrder'))})
                return PyJs_Object_908_
            PyJs_anonymous_906_._set_name(u'anonymous')
            return var.get(u'sortPredicate').callprop(u'map', PyJs_anonymous_906_)
        PyJsHoisted_processPredicates_.func_name = u'processPredicates'
        var.put(u'processPredicates', PyJsHoisted_processPredicates_)
        @Js
        def PyJsHoisted_objectValue_(value, index, this, arguments, var=var):
            var = Scope({u'this':this, u'index':index, u'arguments':arguments, u'value':value}, var)
            var.registers([u'index', u'value'])
            if PyJsStrictEq(var.get(u'value').get(u'valueOf').typeof(),Js(u'function')):
                var.put(u'value', var.get(u'value').callprop(u'valueOf'))
                if var.get(u'isPrimitive')(var.get(u'value')):
                    return var.get(u'value')
            if var.get(u'hasCustomToString')(var.get(u'value')):
                var.put(u'value', var.get(u'value').callprop(u'toString'))
                if var.get(u'isPrimitive')(var.get(u'value')):
                    return var.get(u'value')
            return var.get(u'index')
        PyJsHoisted_objectValue_.func_name = u'objectValue'
        var.put(u'objectValue', PyJsHoisted_objectValue_)
        @Js
        def PyJs_anonymous_899_(array, sortPredicate, reverseOrder, this, arguments, var=var):
            var = Scope({u'this':this, u'array':array, u'sortPredicate':sortPredicate, u'reverseOrder':reverseOrder, u'arguments':arguments}, var)
            var.registers([u'getComparisonObject', u'sortPredicate', u'doComparison', u'reverseOrder', u'predicates', u'compareValues', u'array'])
            @Js
            def PyJsHoisted_doComparison_(v1, v2, this, arguments, var=var):
                var = Scope({u'this':this, u'v1':v1, u'v2':v2, u'arguments':arguments}, var)
                var.registers([u'v2', u'index', u'length', u'result', u'v1'])
                var.put(u'result', Js(0.0))
                #for JS loop
                var.put(u'index', Js(0.0))
                var.put(u'length', var.get(u'predicates').get(u'length'))
                while (var.get(u'index')<var.get(u'length')):
                    try:
                        var.put(u'result', (var.get(u'compare')(var.get(u'v1').get(u'predicateValues').get(var.get(u'index')), var.get(u'v2').get(u'predicateValues').get(var.get(u'index')))*var.get(u'predicates').get(var.get(u'index')).get(u'descending')))
                        if var.get(u'result'):
                            break
                    finally:
                            var.put(u'index',var.get(u'index')+Js(1))
                return var.get(u'result')
            PyJsHoisted_doComparison_.func_name = u'doComparison'
            var.put(u'doComparison', PyJsHoisted_doComparison_)
            @Js
            def PyJsHoisted_getComparisonObject_(value, index, this, arguments, var=var):
                var = Scope({u'this':this, u'index':index, u'arguments':arguments, u'value':value}, var)
                var.registers([u'index', u'value'])
                @Js
                def PyJs_anonymous_905_(predicate, this, arguments, var=var):
                    var = Scope({u'this':this, u'predicate':predicate, u'arguments':arguments}, var)
                    var.registers([u'predicate'])
                    return var.get(u'getPredicateValue')(var.get(u'predicate').callprop(u'get', var.get(u'value')), var.get(u'index'))
                PyJs_anonymous_905_._set_name(u'anonymous')
                PyJs_Object_904_ = Js({u'value':var.get(u'value'),u'predicateValues':var.get(u'predicates').callprop(u'map', PyJs_anonymous_905_)})
                return PyJs_Object_904_
            PyJsHoisted_getComparisonObject_.func_name = u'getComparisonObject'
            var.put(u'getComparisonObject', PyJsHoisted_getComparisonObject_)
            if var.get(u'isArrayLike')(var.get(u'array')).neg():
                return var.get(u'array')
            if var.get(u'isArray')(var.get(u'sortPredicate')).neg():
                var.put(u'sortPredicate', Js([var.get(u'sortPredicate')]))
            if PyJsStrictEq(var.get(u'sortPredicate').get(u'length'),Js(0.0)):
                var.put(u'sortPredicate', Js([Js(u'+')]))
            var.put(u'predicates', var.get(u'processPredicates')(var.get(u'sortPredicate'), var.get(u'reverseOrder')))
            @Js
            def PyJs_anonymous_901_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                PyJs_Object_902_ = Js({})
                return PyJs_Object_902_
            PyJs_anonymous_901_._set_name(u'anonymous')
            PyJs_Object_900_ = Js({u'get':PyJs_anonymous_901_,u'descending':((-Js(1.0)) if var.get(u'reverseOrder') else Js(1.0))})
            var.get(u'predicates').callprop(u'push', PyJs_Object_900_)
            var.put(u'compareValues', var.get(u'Array').get(u'prototype').get(u'map').callprop(u'call', var.get(u'array'), var.get(u'getComparisonObject')))
            var.get(u'compareValues').callprop(u'sort', var.get(u'doComparison'))
            @Js
            def PyJs_anonymous_903_(item, this, arguments, var=var):
                var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
                var.registers([u'item'])
                return var.get(u'item').get(u'value')
            PyJs_anonymous_903_._set_name(u'anonymous')
            var.put(u'array', var.get(u'compareValues').callprop(u'map', PyJs_anonymous_903_))
            return var.get(u'array')
            pass
            pass
        PyJs_anonymous_899_._set_name(u'anonymous')
        return PyJs_anonymous_899_
        pass
        pass
        pass
        pass
        pass
    PyJsHoisted_orderByFilter_.func_name = u'orderByFilter'
    var.put(u'orderByFilter', PyJsHoisted_orderByFilter_)
    @Js
    def PyJsHoisted_jqLiteDocumentLoaded_(action, win, this, arguments, var=var):
        var = Scope({u'action':action, u'win':win, u'this':this, u'arguments':arguments}, var)
        var.registers([u'action', u'win'])
        var.put(u'win', (var.get(u'win') or var.get(u'window')))
        if PyJsStrictEq(var.get(u'win').get(u'document').get(u'readyState'),Js(u'complete')):
            var.get(u'win').callprop(u'setTimeout', var.get(u'action'))
        else:
            var.get(u'jqLite')(var.get(u'win')).callprop(u'on', Js(u'load'), var.get(u'action'))
    PyJsHoisted_jqLiteDocumentLoaded_.func_name = u'jqLiteDocumentLoaded'
    var.put(u'jqLiteDocumentLoaded', PyJsHoisted_jqLiteDocumentLoaded_)
    @Js
    def PyJsHoisted_isLiteral_(ast, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'ast':ast}, var)
        var.registers([u'ast'])
        def PyJs_LONG_544_(var=var):
            return (PyJsStrictEq(var.get(u'ast').get(u'body').get(u'length'),Js(1.0)) and ((PyJsStrictEq(var.get(u'ast').get(u'body').get(u'0').get(u'expression').get(u'type'),var.get(u'AST').get(u'Literal')) or PyJsStrictEq(var.get(u'ast').get(u'body').get(u'0').get(u'expression').get(u'type'),var.get(u'AST').get(u'ArrayExpression'))) or PyJsStrictEq(var.get(u'ast').get(u'body').get(u'0').get(u'expression').get(u'type'),var.get(u'AST').get(u'ObjectExpression'))))
        return (PyJsStrictEq(var.get(u'ast').get(u'body').get(u'length'),Js(0.0)) or PyJs_LONG_544_())
    PyJsHoisted_isLiteral_.func_name = u'isLiteral'
    var.put(u'isLiteral', PyJsHoisted_isLiteral_)
    @Js
    def PyJsHoisted_urlInputType_(scope, element, attr, ctrl, PyJsArg_24736e6966666572_, PyJsArg_2462726f77736572_, this, arguments, var=var):
        var = Scope({u'$sniffer':PyJsArg_24736e6966666572_, u'attr':attr, u'ctrl':ctrl, u'this':this, u'element':element, u'$browser':PyJsArg_2462726f77736572_, u'arguments':arguments, u'scope':scope}, var)
        var.registers([u'$sniffer', u'attr', u'ctrl', u'element', u'$browser', u'scope'])
        var.get(u'baseInputType')(var.get(u'scope'), var.get(u'element'), var.get(u'attr'), var.get(u'ctrl'), var.get(u'$sniffer'), var.get(u'$browser'))
        var.get(u'stringBasedInputType')(var.get(u'ctrl'))
        var.get(u'ctrl').put(u'$$parserName', Js(u'url'))
        @Js
        def PyJs_anonymous_993_(modelValue, viewValue, this, arguments, var=var):
            var = Scope({u'this':this, u'viewValue':viewValue, u'modelValue':modelValue, u'arguments':arguments}, var)
            var.registers([u'viewValue', u'modelValue', u'value'])
            var.put(u'value', (var.get(u'modelValue') or var.get(u'viewValue')))
            return (var.get(u'ctrl').callprop(u'$isEmpty', var.get(u'value')) or var.get(u'URL_REGEXP').callprop(u'test', var.get(u'value')))
        PyJs_anonymous_993_._set_name(u'anonymous')
        var.get(u'ctrl').get(u'$validators').put(u'url', PyJs_anonymous_993_)
    PyJsHoisted_urlInputType_.func_name = u'urlInputType'
    var.put(u'urlInputType', PyJsHoisted_urlInputType_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'endSymbol', u'startSymbol'])
        var.put(u'startSymbol', Js(u'{{'))
        var.put(u'endSymbol', Js(u'}}'))
        @Js
        def PyJs_anonymous_407_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            if var.get(u'value'):
                var.put(u'startSymbol', var.get(u'value'))
                return var.get(u"this")
            else:
                return var.get(u'startSymbol')
        PyJs_anonymous_407_._set_name(u'anonymous')
        var.get(u"this").put(u'startSymbol', PyJs_anonymous_407_)
        @Js
        def PyJs_anonymous_408_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            if var.get(u'value'):
                var.put(u'endSymbol', var.get(u'value'))
                return var.get(u"this")
            else:
                return var.get(u'endSymbol')
        PyJs_anonymous_408_._set_name(u'anonymous')
        var.get(u"this").put(u'endSymbol', PyJs_anonymous_408_)
        @Js
        def PyJs_anonymous_409_(PyJsArg_247061727365_, PyJsArg_24657863657074696f6e48616e646c6572_, PyJsArg_24736365_, this, arguments, var=var):
            var = Scope({u'$exceptionHandler':PyJsArg_24657863657074696f6e48616e646c6572_, u'this':this, u'$sce':PyJsArg_24736365_, u'arguments':arguments, u'$parse':PyJsArg_247061727365_}, var)
            var.registers([u'stringify', u'$sce', u'escapedEndRegexp', u'$exceptionHandler', u'endSymbolLength', u'escapedStartRegexp', u'startSymbolLength', u'unescapeText', u'escape', u'$parse', u'$interpolate'])
            @Js
            def PyJsHoisted_stringify_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                if (var.get(u'value')==var.get(u"null")):
                    return Js(u'')
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get(u'value',throw=False).typeof())
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(u'string')):
                        SWITCHED = True
                        break
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(u'number')):
                        SWITCHED = True
                        var.put(u'value', (Js(u'')+var.get(u'value')))
                        break
                    if True:
                        SWITCHED = True
                        var.put(u'value', var.get(u'toJson')(var.get(u'value')))
                    SWITCHED = True
                    break
                return var.get(u'value')
            PyJsHoisted_stringify_.func_name = u'stringify'
            var.put(u'stringify', PyJsHoisted_stringify_)
            @Js
            def PyJsHoistedNonPyName(text, mustHaveExpression, trustedContext, allOrNothing, this, arguments, var=var):
                var = Scope({u'mustHaveExpression':mustHaveExpression, u'allOrNothing':allOrNothing, u'trustedContext':trustedContext, u'text':text, u'this':this, u'arguments':arguments}, var)
                var.registers([u'endIndex', u'compute', u'textLength', u'index', u'expressionPositions', u'getValue', u'startIndex', u'parseFns', u'allOrNothing', u'exp', u'text', u'trustedContext', u'parseStringifyInterceptor', u'expressions', u'mustHaveExpression', u'concat'])
                @Js
                def PyJsHoisted_parseStringifyInterceptor_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    try:
                        var.put(u'value', var.get(u'getValue')(var.get(u'value')))
                        return (var.get(u'value') if (var.get(u'allOrNothing') and var.get(u'isDefined')(var.get(u'value')).neg()) else var.get(u'stringify')(var.get(u'value')))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_657272_23293066 = var.own.get(u'err')
                        var.force_own_put(u'err', PyExceptionToJs(PyJsTempException))
                        try:
                            var.get(u'$exceptionHandler')(var.get(u'$interpolateMinErr').callprop(u'interr', var.get(u'text'), var.get(u'err')))
                        finally:
                            if PyJsHolder_657272_23293066 is not None:
                                var.own[u'err'] = PyJsHolder_657272_23293066
                            else:
                                del var.own[u'err']
                            del PyJsHolder_657272_23293066
                PyJsHoisted_parseStringifyInterceptor_.func_name = u'parseStringifyInterceptor'
                var.put(u'parseStringifyInterceptor', PyJsHoisted_parseStringifyInterceptor_)
                var.put(u'allOrNothing', var.get(u'allOrNothing').neg().neg())
                var.put(u'index', Js(0.0))
                var.put(u'expressions', Js([]))
                var.put(u'parseFns', Js([]))
                var.put(u'textLength', var.get(u'text').get(u'length'))
                var.put(u'concat', Js([]))
                var.put(u'expressionPositions', Js([]))
                while (var.get(u'index')<var.get(u'textLength')):
                    if ((var.put(u'startIndex', var.get(u'text').callprop(u'indexOf', var.get(u'startSymbol'), var.get(u'index')))!=(-Js(1.0))) and (var.put(u'endIndex', var.get(u'text').callprop(u'indexOf', var.get(u'endSymbol'), (var.get(u'startIndex')+var.get(u'startSymbolLength'))))!=(-Js(1.0)))):
                        if PyJsStrictNeq(var.get(u'index'),var.get(u'startIndex')):
                            var.get(u'concat').callprop(u'push', var.get(u'unescapeText')(var.get(u'text').callprop(u'substring', var.get(u'index'), var.get(u'startIndex'))))
                        var.put(u'exp', var.get(u'text').callprop(u'substring', (var.get(u'startIndex')+var.get(u'startSymbolLength')), var.get(u'endIndex')))
                        var.get(u'expressions').callprop(u'push', var.get(u'exp'))
                        var.get(u'parseFns').callprop(u'push', var.get(u'$parse')(var.get(u'exp'), var.get(u'parseStringifyInterceptor')))
                        var.put(u'index', (var.get(u'endIndex')+var.get(u'endSymbolLength')))
                        var.get(u'expressionPositions').callprop(u'push', var.get(u'concat').get(u'length'))
                        var.get(u'concat').callprop(u'push', Js(u''))
                    else:
                        if PyJsStrictNeq(var.get(u'index'),var.get(u'textLength')):
                            var.get(u'concat').callprop(u'push', var.get(u'unescapeText')(var.get(u'text').callprop(u'substring', var.get(u'index'))))
                        break
                if (var.get(u'trustedContext') and (var.get(u'concat').get(u'length')>Js(1.0))):
                    var.get(u'$interpolateMinErr').callprop(u'throwNoconcat', var.get(u'text'))
                if (var.get(u'mustHaveExpression').neg() or var.get(u'expressions').get(u'length')):
                    @Js
                    def PyJs_anonymous_410_(values, this, arguments, var=var):
                        var = Scope({u'this':this, u'values':values, u'arguments':arguments}, var)
                        var.registers([u'i', u'ii', u'values'])
                        #for JS loop
                        var.put(u'i', Js(0.0))
                        var.put(u'ii', var.get(u'expressions').get(u'length'))
                        while (var.get(u'i')<var.get(u'ii')):
                            try:
                                if (var.get(u'allOrNothing') and var.get(u'isUndefined')(var.get(u'values').get(var.get(u'i')))):
                                    return var.get('undefined')
                                var.get(u'concat').put(var.get(u'expressionPositions').get(var.get(u'i')), var.get(u'values').get(var.get(u'i')))
                            finally:
                                    (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                        return var.get(u'concat').callprop(u'join', Js(u''))
                    PyJs_anonymous_410_._set_name(u'anonymous')
                    var.put(u'compute', PyJs_anonymous_410_)
                    @Js
                    def PyJs_anonymous_411_(value, this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                        var.registers([u'value'])
                        return (var.get(u'$sce').callprop(u'getTrusted', var.get(u'trustedContext'), var.get(u'value')) if var.get(u'trustedContext') else var.get(u'$sce').callprop(u'valueOf', var.get(u'value')))
                    PyJs_anonymous_411_._set_name(u'anonymous')
                    var.put(u'getValue', PyJs_anonymous_411_)
                    @Js
                    def PyJs_interpolationFn_412_(context, this, arguments, var=var):
                        var = Scope({u'this':this, u'interpolationFn':PyJs_interpolationFn_412_, u'arguments':arguments, u'context':context}, var)
                        var.registers([u'i', u'ii', u'values', u'context'])
                        var.put(u'i', Js(0.0))
                        var.put(u'ii', var.get(u'expressions').get(u'length'))
                        var.put(u'values', var.get(u'Array').create(var.get(u'ii')))
                        try:
                            #for JS loop
                            
                            while (var.get(u'i')<var.get(u'ii')):
                                try:
                                    var.get(u'values').put(var.get(u'i'), var.get(u'parseFns').callprop(var.get(u'i'), var.get(u'context')))
                                finally:
                                        (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                            return var.get(u'compute')(var.get(u'values'))
                        except PyJsException as PyJsTempException:
                            PyJsHolder_657272_78938862 = var.own.get(u'err')
                            var.force_own_put(u'err', PyExceptionToJs(PyJsTempException))
                            try:
                                var.get(u'$exceptionHandler')(var.get(u'$interpolateMinErr').callprop(u'interr', var.get(u'text'), var.get(u'err')))
                            finally:
                                if PyJsHolder_657272_78938862 is not None:
                                    var.own[u'err'] = PyJsHolder_657272_78938862
                                else:
                                    del var.own[u'err']
                                del PyJsHolder_657272_78938862
                    PyJs_interpolationFn_412_._set_name(u'interpolationFn')
                    @Js
                    def PyJs_anonymous_414_(scope, listener, this, arguments, var=var):
                        var = Scope({u'listener':listener, u'scope':scope, u'this':this, u'arguments':arguments}, var)
                        var.registers([u'listener', u'scope', u'lastValue'])
                        pass
                        @Js
                        def PyJs_interpolateFnWatcher_415_(values, oldValues, this, arguments, var=var):
                            var = Scope({u'oldValues':oldValues, u'this':this, u'values':values, u'arguments':arguments, u'interpolateFnWatcher':PyJs_interpolateFnWatcher_415_}, var)
                            var.registers([u'oldValues', u'currValue', u'values'])
                            var.put(u'currValue', var.get(u'compute')(var.get(u'values')))
                            if var.get(u'isFunction')(var.get(u'listener')):
                                var.get(u'listener').callprop(u'call', var.get(u"this"), var.get(u'currValue'), (var.get(u'lastValue') if PyJsStrictNeq(var.get(u'values'),var.get(u'oldValues')) else var.get(u'currValue')), var.get(u'scope'))
                            var.put(u'lastValue', var.get(u'currValue'))
                        PyJs_interpolateFnWatcher_415_._set_name(u'interpolateFnWatcher')
                        return var.get(u'scope').callprop(u'$watchGroup', var.get(u'parseFns'), PyJs_interpolateFnWatcher_415_)
                    PyJs_anonymous_414_._set_name(u'anonymous')
                    PyJs_Object_413_ = Js({u'exp':var.get(u'text'),u'expressions':var.get(u'expressions'),u'$$watchDelegate':PyJs_anonymous_414_})
                    return var.get(u'extend')(PyJs_interpolationFn_412_, PyJs_Object_413_)
                pass
            PyJsHoistedNonPyName.func_name = u'$interpolate'
            var.put(u'$interpolate', PyJsHoistedNonPyName)
            @Js
            def PyJsHoisted_unescapeText_(text, this, arguments, var=var):
                var = Scope({u'this':this, u'text':text, u'arguments':arguments}, var)
                var.registers([u'text'])
                return var.get(u'text').callprop(u'replace', var.get(u'escapedStartRegexp'), var.get(u'startSymbol')).callprop(u'replace', var.get(u'escapedEndRegexp'), var.get(u'endSymbol'))
            PyJsHoisted_unescapeText_.func_name = u'unescapeText'
            var.put(u'unescapeText', PyJsHoisted_unescapeText_)
            @Js
            def PyJsHoisted_escape_(ch, this, arguments, var=var):
                var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
                var.registers([u'ch'])
                return (Js(u'\\\\\\')+var.get(u'ch'))
            PyJsHoisted_escape_.func_name = u'escape'
            var.put(u'escape', PyJsHoisted_escape_)
            var.put(u'startSymbolLength', var.get(u'startSymbol').get(u'length'))
            var.put(u'endSymbolLength', var.get(u'endSymbol').get(u'length'))
            var.put(u'escapedStartRegexp', var.get(u'RegExp').create(var.get(u'startSymbol').callprop(u'replace', JsRegExp(u'/./g'), var.get(u'escape')), Js(u'g')))
            var.put(u'escapedEndRegexp', var.get(u'RegExp').create(var.get(u'endSymbol').callprop(u'replace', JsRegExp(u'/./g'), var.get(u'escape')), Js(u'g')))
            pass
            pass
            pass
            pass
            @Js
            def PyJs_anonymous_416_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                return var.get(u'startSymbol')
            PyJs_anonymous_416_._set_name(u'anonymous')
            var.get(u'$interpolate').put(u'startSymbol', PyJs_anonymous_416_)
            @Js
            def PyJs_anonymous_417_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                return var.get(u'endSymbol')
            PyJs_anonymous_417_._set_name(u'anonymous')
            var.get(u'$interpolate').put(u'endSymbol', PyJs_anonymous_417_)
            return var.get(u'$interpolate')
        PyJs_anonymous_409_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$parse'), Js(u'$exceptionHandler'), Js(u'$sce'), PyJs_anonymous_409_]))
    PyJsHoistedNonPyName.func_name = u'$InterpolateProvider'
    var.put(u'$InterpolateProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'html5Mode', u'hashPrefix'])
        var.put(u'hashPrefix', Js(u''))
        PyJs_Object_444_ = Js({u'enabled':Js(False),u'requireBase':var.get(u'true'),u'rewriteLinks':var.get(u'true')})
        var.put(u'html5Mode', PyJs_Object_444_)
        @Js
        def PyJs_anonymous_445_(prefix, this, arguments, var=var):
            var = Scope({u'this':this, u'prefix':prefix, u'arguments':arguments}, var)
            var.registers([u'prefix'])
            if var.get(u'isDefined')(var.get(u'prefix')):
                var.put(u'hashPrefix', var.get(u'prefix'))
                return var.get(u"this")
            else:
                return var.get(u'hashPrefix')
        PyJs_anonymous_445_._set_name(u'anonymous')
        var.get(u"this").put(u'hashPrefix', PyJs_anonymous_445_)
        @Js
        def PyJs_anonymous_446_(mode, this, arguments, var=var):
            var = Scope({u'this':this, u'mode':mode, u'arguments':arguments}, var)
            var.registers([u'mode'])
            if var.get(u'isBoolean')(var.get(u'mode')):
                var.get(u'html5Mode').put(u'enabled', var.get(u'mode'))
                return var.get(u"this")
            else:
                if var.get(u'isObject')(var.get(u'mode')):
                    if var.get(u'isBoolean')(var.get(u'mode').get(u'enabled')):
                        var.get(u'html5Mode').put(u'enabled', var.get(u'mode').get(u'enabled'))
                    if var.get(u'isBoolean')(var.get(u'mode').get(u'requireBase')):
                        var.get(u'html5Mode').put(u'requireBase', var.get(u'mode').get(u'requireBase'))
                    if var.get(u'isBoolean')(var.get(u'mode').get(u'rewriteLinks')):
                        var.get(u'html5Mode').put(u'rewriteLinks', var.get(u'mode').get(u'rewriteLinks'))
                    return var.get(u"this")
                else:
                    return var.get(u'html5Mode')
        PyJs_anonymous_446_._set_name(u'anonymous')
        var.get(u"this").put(u'html5Mode', PyJs_anonymous_446_)
        @Js
        def PyJs_anonymous_447_(PyJsArg_24726f6f7453636f7065_, PyJsArg_2462726f77736572_, PyJsArg_24736e6966666572_, PyJsArg_24726f6f74456c656d656e74_, PyJsArg_2477696e646f77_, this, arguments, var=var):
            var = Scope({u'$rootElement':PyJsArg_24726f6f74456c656d656e74_, u'$sniffer':PyJsArg_24736e6966666572_, u'$rootScope':PyJsArg_24726f6f7453636f7065_, u'$browser':PyJsArg_2462726f77736572_, u'arguments':arguments, u'$window':PyJsArg_2477696e646f77_, u'this':this}, var)
            var.registers([u'$location', u'baseHref', u'$rootScope', u'initialUrl', u'$sniffer', u'$window', u'appBaseNoFile', u'IGNORE_URI_REGEXP', u'$rootElement', u'$browser', u'initializing', u'setBrowserUrlWithFallback', u'LocationMode', u'afterLocationChange', u'appBase'])
            @Js
            def PyJsHoisted_setBrowserUrlWithFallback_(url, replace, state, this, arguments, var=var):
                var = Scope({u'url':url, u'this':this, u'state':state, u'arguments':arguments, u'replace':replace}, var)
                var.registers([u'url', u'oldState', u'oldUrl', u'state', u'replace'])
                var.put(u'oldUrl', var.get(u'$location').callprop(u'url'))
                var.put(u'oldState', var.get(u'$location').get(u'$$state'))
                try:
                    var.get(u'$browser').callprop(u'url', var.get(u'url'), var.get(u'replace'), var.get(u'state'))
                    var.get(u'$location').put(u'$$state', var.get(u'$browser').callprop(u'state'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_62172123 = var.own.get(u'e')
                    var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                    try:
                        var.get(u'$location').callprop(u'url', var.get(u'oldUrl'))
                        var.get(u'$location').put(u'$$state', var.get(u'oldState'))
                        PyJsTempException = JsToPyException(var.get(u'e'))
                        raise PyJsTempException
                    finally:
                        if PyJsHolder_65_62172123 is not None:
                            var.own[u'e'] = PyJsHolder_65_62172123
                        else:
                            del var.own[u'e']
                        del PyJsHolder_65_62172123
            PyJsHoisted_setBrowserUrlWithFallback_.func_name = u'setBrowserUrlWithFallback'
            var.put(u'setBrowserUrlWithFallback', PyJsHoisted_setBrowserUrlWithFallback_)
            @Js
            def PyJsHoisted_afterLocationChange_(oldUrl, oldState, this, arguments, var=var):
                var = Scope({u'this':this, u'oldState':oldState, u'oldUrl':oldUrl, u'arguments':arguments}, var)
                var.registers([u'oldState', u'oldUrl'])
                var.get(u'$rootScope').callprop(u'$broadcast', Js(u'$locationChangeSuccess'), var.get(u'$location').callprop(u'absUrl'), var.get(u'oldUrl'), var.get(u'$location').get(u'$$state'), var.get(u'oldState'))
            PyJsHoisted_afterLocationChange_.func_name = u'afterLocationChange'
            var.put(u'afterLocationChange', PyJsHoisted_afterLocationChange_)
            var.put(u'baseHref', var.get(u'$browser').callprop(u'baseHref'))
            var.put(u'initialUrl', var.get(u'$browser').callprop(u'url'))
            if var.get(u'html5Mode').get(u'enabled'):
                if (var.get(u'baseHref').neg() and var.get(u'html5Mode').get(u'requireBase')):
                    PyJsTempException = JsToPyException(var.get(u'$locationMinErr')(Js(u'nobase'), Js(u'$location in HTML5 mode requires a <base> tag to be present!')))
                    raise PyJsTempException
                var.put(u'appBase', (var.get(u'serverBase')(var.get(u'initialUrl'))+(var.get(u'baseHref') or Js(u'/'))))
                var.put(u'LocationMode', (var.get(u'LocationHtml5Url') if var.get(u'$sniffer').get(u'history') else var.get(u'LocationHashbangInHtml5Url')))
            else:
                var.put(u'appBase', var.get(u'stripHash')(var.get(u'initialUrl')))
                var.put(u'LocationMode', var.get(u'LocationHashbangUrl'))
            var.put(u'appBaseNoFile', var.get(u'stripFile')(var.get(u'appBase')))
            var.put(u'$location', var.get(u'LocationMode').create(var.get(u'appBase'), var.get(u'appBaseNoFile'), (Js(u'#')+var.get(u'hashPrefix'))))
            var.get(u'$location').callprop(u'$$parseLinkUrl', var.get(u'initialUrl'), var.get(u'initialUrl'))
            var.get(u'$location').put(u'$$state', var.get(u'$browser').callprop(u'state'))
            var.put(u'IGNORE_URI_REGEXP', JsRegExp(u'/^\\s*(javascript|mailto):/i'))
            pass
            @Js
            def PyJs_anonymous_448_(event, this, arguments, var=var):
                var = Scope({u'this':this, u'event':event, u'arguments':arguments}, var)
                var.registers([u'absHref', u'relHref', u'event', u'elm'])
                if (((((var.get(u'html5Mode').get(u'rewriteLinks').neg() or var.get(u'event').get(u'ctrlKey')) or var.get(u'event').get(u'metaKey')) or var.get(u'event').get(u'shiftKey')) or (var.get(u'event').get(u'which')==Js(2.0))) or (var.get(u'event').get(u'button')==Js(2.0))):
                    return var.get('undefined')
                var.put(u'elm', var.get(u'jqLite')(var.get(u'event').get(u'target')))
                while PyJsStrictNeq(var.get(u'nodeName_')(var.get(u'elm').get(u'0')),Js(u'a')):
                    if (PyJsStrictEq(var.get(u'elm').get(u'0'),var.get(u'$rootElement').get(u'0')) or var.put(u'elm', var.get(u'elm').callprop(u'parent')).get(u'0').neg()):
                        return var.get('undefined')
                var.put(u'absHref', var.get(u'elm').callprop(u'prop', Js(u'href')))
                var.put(u'relHref', (var.get(u'elm').callprop(u'attr', Js(u'href')) or var.get(u'elm').callprop(u'attr', Js(u'xlink:href'))))
                if (var.get(u'isObject')(var.get(u'absHref')) and PyJsStrictEq(var.get(u'absHref').callprop(u'toString'),Js(u'[object SVGAnimatedString]'))):
                    var.put(u'absHref', var.get(u'urlResolve')(var.get(u'absHref').get(u'animVal')).get(u'href'))
                if var.get(u'IGNORE_URI_REGEXP').callprop(u'test', var.get(u'absHref')):
                    return var.get('undefined')
                if ((var.get(u'absHref') and var.get(u'elm').callprop(u'attr', Js(u'target')).neg()) and var.get(u'event').callprop(u'isDefaultPrevented').neg()):
                    if var.get(u'$location').callprop(u'$$parseLinkUrl', var.get(u'absHref'), var.get(u'relHref')):
                        var.get(u'event').callprop(u'preventDefault')
                        if (var.get(u'$location').callprop(u'absUrl')!=var.get(u'$browser').callprop(u'url')):
                            var.get(u'$rootScope').callprop(u'$apply')
                            var.get(u'$window').get(u'angular').put(u'ff-684208-preventDefault', var.get(u'true'))
            PyJs_anonymous_448_._set_name(u'anonymous')
            var.get(u'$rootElement').callprop(u'on', Js(u'click'), PyJs_anonymous_448_)
            if (var.get(u'trimEmptyHash')(var.get(u'$location').callprop(u'absUrl'))!=var.get(u'trimEmptyHash')(var.get(u'initialUrl'))):
                var.get(u'$browser').callprop(u'url', var.get(u'$location').callprop(u'absUrl'), var.get(u'true'))
            var.put(u'initializing', var.get(u'true'))
            @Js
            def PyJs_anonymous_449_(newUrl, newState, this, arguments, var=var):
                var = Scope({u'this':this, u'newState':newState, u'newUrl':newUrl, u'arguments':arguments}, var)
                var.registers([u'newState', u'newUrl'])
                if var.get(u'isUndefined')(var.get(u'beginsWith')(var.get(u'appBaseNoFile'), var.get(u'newUrl'))):
                    var.get(u'$window').get(u'location').put(u'href', var.get(u'newUrl'))
                    return var.get('undefined')
                @Js
                def PyJs_anonymous_450_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'defaultPrevented', u'oldState', u'oldUrl'])
                    var.put(u'oldUrl', var.get(u'$location').callprop(u'absUrl'))
                    var.put(u'oldState', var.get(u'$location').get(u'$$state'))
                    pass
                    var.put(u'newUrl', var.get(u'trimEmptyHash')(var.get(u'newUrl')))
                    var.get(u'$location').callprop(u'$$parse', var.get(u'newUrl'))
                    var.get(u'$location').put(u'$$state', var.get(u'newState'))
                    var.put(u'defaultPrevented', var.get(u'$rootScope').callprop(u'$broadcast', Js(u'$locationChangeStart'), var.get(u'newUrl'), var.get(u'oldUrl'), var.get(u'newState'), var.get(u'oldState')).get(u'defaultPrevented'))
                    if PyJsStrictNeq(var.get(u'$location').callprop(u'absUrl'),var.get(u'newUrl')):
                        return var.get('undefined')
                    if var.get(u'defaultPrevented'):
                        var.get(u'$location').callprop(u'$$parse', var.get(u'oldUrl'))
                        var.get(u'$location').put(u'$$state', var.get(u'oldState'))
                        var.get(u'setBrowserUrlWithFallback')(var.get(u'oldUrl'), Js(False), var.get(u'oldState'))
                    else:
                        var.put(u'initializing', Js(False))
                        var.get(u'afterLocationChange')(var.get(u'oldUrl'), var.get(u'oldState'))
                PyJs_anonymous_450_._set_name(u'anonymous')
                var.get(u'$rootScope').callprop(u'$evalAsync', PyJs_anonymous_450_)
                if var.get(u'$rootScope').get(u'$$phase').neg():
                    var.get(u'$rootScope').callprop(u'$digest')
            PyJs_anonymous_449_._set_name(u'anonymous')
            var.get(u'$browser').callprop(u'onUrlChange', PyJs_anonymous_449_)
            @Js
            def PyJs_InlineNonPyName_451_(this, arguments, var=var):
                var = Scope({u'this':this, u'$locationWatch':PyJs_InlineNonPyName_451_, u'arguments':arguments}, var)
                var.registers([u'urlOrStateChanged', u'oldState', u'newUrl', u'oldUrl', u'currentReplace'])
                var.put(u'oldUrl', var.get(u'trimEmptyHash')(var.get(u'$browser').callprop(u'url')))
                var.put(u'newUrl', var.get(u'trimEmptyHash')(var.get(u'$location').callprop(u'absUrl')))
                var.put(u'oldState', var.get(u'$browser').callprop(u'state'))
                var.put(u'currentReplace', var.get(u'$location').get(u'$$replace'))
                var.put(u'urlOrStateChanged', (PyJsStrictNeq(var.get(u'oldUrl'),var.get(u'newUrl')) or ((var.get(u'$location').get(u'$$html5') and var.get(u'$sniffer').get(u'history')) and PyJsStrictNeq(var.get(u'oldState'),var.get(u'$location').get(u'$$state')))))
                if (var.get(u'initializing') or var.get(u'urlOrStateChanged')):
                    var.put(u'initializing', Js(False))
                    @Js
                    def PyJs_anonymous_452_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([u'newUrl', u'defaultPrevented'])
                        var.put(u'newUrl', var.get(u'$location').callprop(u'absUrl'))
                        var.put(u'defaultPrevented', var.get(u'$rootScope').callprop(u'$broadcast', Js(u'$locationChangeStart'), var.get(u'newUrl'), var.get(u'oldUrl'), var.get(u'$location').get(u'$$state'), var.get(u'oldState')).get(u'defaultPrevented'))
                        if PyJsStrictNeq(var.get(u'$location').callprop(u'absUrl'),var.get(u'newUrl')):
                            return var.get('undefined')
                        if var.get(u'defaultPrevented'):
                            var.get(u'$location').callprop(u'$$parse', var.get(u'oldUrl'))
                            var.get(u'$location').put(u'$$state', var.get(u'oldState'))
                        else:
                            if var.get(u'urlOrStateChanged'):
                                var.get(u'setBrowserUrlWithFallback')(var.get(u'newUrl'), var.get(u'currentReplace'), (var.get(u"null") if PyJsStrictEq(var.get(u'oldState'),var.get(u'$location').get(u'$$state')) else var.get(u'$location').get(u'$$state')))
                            var.get(u'afterLocationChange')(var.get(u'oldUrl'), var.get(u'oldState'))
                    PyJs_anonymous_452_._set_name(u'anonymous')
                    var.get(u'$rootScope').callprop(u'$evalAsync', PyJs_anonymous_452_)
                var.get(u'$location').put(u'$$replace', Js(False))
            PyJs_InlineNonPyName_451_._set_name(u'$locationWatch')
            var.get(u'$rootScope').callprop(u'$watch', PyJs_InlineNonPyName_451_)
            return var.get(u'$location')
            pass
        PyJs_anonymous_447_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$rootScope'), Js(u'$browser'), Js(u'$sniffer'), Js(u'$rootElement'), Js(u'$window'), PyJs_anonymous_447_]))
    PyJsHoistedNonPyName.func_name = u'$LocationProvider'
    var.put(u'$LocationProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(PyJsArg_2470726f76696465_, PyJsArg_242473616e6974697a6555726950726f7669646572_, this, arguments, var=var):
        var = Scope({u'this':this, u'$provide':PyJsArg_2470726f76696465_, u'arguments':arguments, u'$$sanitizeUriProvider':PyJsArg_242473616e6974697a6555726950726f7669646572_}, var)
        var.registers([u'$provide', u'Suffix', u'REQUIRE_PREFIX_REGEXP', u'CLASS_DIRECTIVE_REGEXP', u'COMMENT_DIRECTIVE_REGEXP', u'parseIsolateBindings', u'parseDirectiveBindings', u'ALL_OR_NOTHING_ATTRS', u'assertValidDirectiveName', u'$$sanitizeUriProvider', u'hasDirectives', u'EVENT_HANDLER_ATTR_REGEXP', u'debugInfoEnabled'])
        @Js
        def PyJsHoisted_parseDirectiveBindings_(directive, directiveName, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'directive':directive, u'directiveName':directiveName}, var)
            var.registers([u'bindings', u'controllerAs', u'controller', u'directive', u'directiveName'])
            PyJs_Object_259_ = Js({u'isolateScope':var.get(u"null"),u'bindToController':var.get(u"null")})
            var.put(u'bindings', PyJs_Object_259_)
            if var.get(u'isObject')(var.get(u'directive').get(u'scope')):
                if PyJsStrictEq(var.get(u'directive').get(u'bindToController'),var.get(u'true')):
                    var.get(u'bindings').put(u'bindToController', var.get(u'parseIsolateBindings')(var.get(u'directive').get(u'scope'), var.get(u'directiveName'), var.get(u'true')))
                    PyJs_Object_260_ = Js({})
                    var.get(u'bindings').put(u'isolateScope', PyJs_Object_260_)
                else:
                    var.get(u'bindings').put(u'isolateScope', var.get(u'parseIsolateBindings')(var.get(u'directive').get(u'scope'), var.get(u'directiveName'), Js(False)))
            if var.get(u'isObject')(var.get(u'directive').get(u'bindToController')):
                var.get(u'bindings').put(u'bindToController', var.get(u'parseIsolateBindings')(var.get(u'directive').get(u'bindToController'), var.get(u'directiveName'), var.get(u'true')))
            if var.get(u'isObject')(var.get(u'bindings').get(u'bindToController')):
                var.put(u'controller', var.get(u'directive').get(u'controller'))
                var.put(u'controllerAs', var.get(u'directive').get(u'controllerAs'))
                if var.get(u'controller').neg():
                    PyJsTempException = JsToPyException(var.get(u'$compileMinErr')(Js(u'noctrl'), Js(u"Cannot bind to controller without directive '{0}'s controller."), var.get(u'directiveName')))
                    raise PyJsTempException
                else:
                    if var.get(u'identifierForController')(var.get(u'controller'), var.get(u'controllerAs')).neg():
                        PyJsTempException = JsToPyException(var.get(u'$compileMinErr')(Js(u'noident'), Js(u"Cannot bind to controller without identifier for directive '{0}'."), var.get(u'directiveName')))
                        raise PyJsTempException
            return var.get(u'bindings')
        PyJsHoisted_parseDirectiveBindings_.func_name = u'parseDirectiveBindings'
        var.put(u'parseDirectiveBindings', PyJsHoisted_parseDirectiveBindings_)
        @Js
        def PyJsHoisted_assertValidDirectiveName_(name, this, arguments, var=var):
            var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
            var.registers([u'name', u'letter'])
            var.put(u'letter', var.get(u'name').callprop(u'charAt', Js(0.0)))
            if (var.get(u'letter').neg() or PyJsStrictNeq(var.get(u'letter'),var.get(u'lowercase')(var.get(u'letter')))):
                PyJsTempException = JsToPyException(var.get(u'$compileMinErr')(Js(u'baddir'), Js(u"Directive name '{0}' is invalid. The first character must be a lowercase letter"), var.get(u'name')))
                raise PyJsTempException
            if PyJsStrictNeq(var.get(u'name'),var.get(u'name').callprop(u'trim')):
                PyJsTempException = JsToPyException(var.get(u'$compileMinErr')(Js(u'baddir'), Js(u"Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces"), var.get(u'name')))
                raise PyJsTempException
        PyJsHoisted_assertValidDirectiveName_.func_name = u'assertValidDirectiveName'
        var.put(u'assertValidDirectiveName', PyJsHoisted_assertValidDirectiveName_)
        @Js
        def PyJsHoisted_parseIsolateBindings_(scope, directiveName, isController, this, arguments, var=var):
            var = Scope({u'this':this, u'scope':scope, u'isController':isController, u'arguments':arguments, u'directiveName':directiveName}, var)
            var.registers([u'scope', u'bindings', u'directiveName', u'isController', u'LOCAL_REGEXP'])
            var.put(u'LOCAL_REGEXP', JsRegExp(u'/^\\s*([@&]|=(\\*?))(\\??)\\s*(\\w*)\\s*$/'))
            PyJs_Object_256_ = Js({})
            var.put(u'bindings', PyJs_Object_256_)
            @Js
            def PyJs_anonymous_257_(definition, scopeName, this, arguments, var=var):
                var = Scope({u'this':this, u'definition':definition, u'scopeName':scopeName, u'arguments':arguments}, var)
                var.registers([u'definition', u'scopeName', u'match'])
                var.put(u'match', var.get(u'definition').callprop(u'match', var.get(u'LOCAL_REGEXP')))
                if var.get(u'match').neg():
                    PyJsTempException = JsToPyException(var.get(u'$compileMinErr')(Js(u'iscp'), (Js(u"Invalid {3} for directive '{0}'.")+Js(u" Definition: {... {1}: '{2}' ...}")), var.get(u'directiveName'), var.get(u'scopeName'), var.get(u'definition'), (Js(u'controller bindings definition') if var.get(u'isController') else Js(u'isolate scope definition'))))
                    raise PyJsTempException
                PyJs_Object_258_ = Js({u'mode':var.get(u'match').get(u'1').get(u'0'),u'collection':PyJsStrictEq(var.get(u'match').get(u'2'),Js(u'*')),u'optional':PyJsStrictEq(var.get(u'match').get(u'3'),Js(u'?')),u'attrName':(var.get(u'match').get(u'4') or var.get(u'scopeName'))})
                var.get(u'bindings').put(var.get(u'scopeName'), PyJs_Object_258_)
            PyJs_anonymous_257_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'scope'), PyJs_anonymous_257_)
            return var.get(u'bindings')
        PyJsHoisted_parseIsolateBindings_.func_name = u'parseIsolateBindings'
        var.put(u'parseIsolateBindings', PyJsHoisted_parseIsolateBindings_)
        PyJs_Object_255_ = Js({})
        var.put(u'hasDirectives', PyJs_Object_255_)
        var.put(u'Suffix', Js(u'Directive'))
        var.put(u'COMMENT_DIRECTIVE_REGEXP', JsRegExp(u'/^\\s*directive\\:\\s*([\\w\\-]+)\\s+(.*)$/'))
        var.put(u'CLASS_DIRECTIVE_REGEXP', JsRegExp(u'/(([\\w\\-]+)(?:\\:([^;]+))?;?)/'))
        var.put(u'ALL_OR_NOTHING_ATTRS', var.get(u'makeMap')(Js(u'ngSrc,ngSrcset,src,srcset')))
        var.put(u'REQUIRE_PREFIX_REGEXP', JsRegExp(u'/^(?:(\\^\\^?)?(\\?)?(\\^\\^?)?)?/'))
        var.put(u'EVENT_HANDLER_ATTR_REGEXP', JsRegExp(u'/^(on[a-z]+|formaction)$/'))
        pass
        pass
        pass
        @Js
        def PyJs_registerDirective_261_(name, directiveFactory, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'registerDirective':PyJs_registerDirective_261_, u'name':name, u'directiveFactory':directiveFactory}, var)
            var.registers([u'name', u'directiveFactory'])
            var.get(u'assertNotHasOwnProperty')(var.get(u'name'), Js(u'directive'))
            if var.get(u'isString')(var.get(u'name')):
                var.get(u'assertValidDirectiveName')(var.get(u'name'))
                var.get(u'assertArg')(var.get(u'directiveFactory'), Js(u'directiveFactory'))
                if var.get(u'hasDirectives').callprop(u'hasOwnProperty', var.get(u'name')).neg():
                    var.get(u'hasDirectives').put(var.get(u'name'), Js([]))
                    @Js
                    def PyJs_anonymous_262_(PyJsArg_24696e6a6563746f72_, PyJsArg_24657863657074696f6e48616e646c6572_, this, arguments, var=var):
                        var = Scope({u'$exceptionHandler':PyJsArg_24657863657074696f6e48616e646c6572_, u'this':this, u'$injector':PyJsArg_24696e6a6563746f72_, u'arguments':arguments}, var)
                        var.registers([u'$exceptionHandler', u'directives', u'$injector'])
                        var.put(u'directives', Js([]))
                        @Js
                        def PyJs_anonymous_263_(directiveFactory, index, this, arguments, var=var):
                            var = Scope({u'this':this, u'index':index, u'arguments':arguments, u'directiveFactory':directiveFactory}, var)
                            var.registers([u'index', u'bindings', u'directive', u'directiveFactory'])
                            try:
                                var.put(u'directive', var.get(u'$injector').callprop(u'invoke', var.get(u'directiveFactory')))
                                if var.get(u'isFunction')(var.get(u'directive')):
                                    PyJs_Object_264_ = Js({u'compile':var.get(u'valueFn')(var.get(u'directive'))})
                                    var.put(u'directive', PyJs_Object_264_)
                                else:
                                    if (var.get(u'directive').get(u'compile').neg() and var.get(u'directive').get(u'link')):
                                        var.get(u'directive').put(u'compile', var.get(u'valueFn')(var.get(u'directive').get(u'link')))
                                var.get(u'directive').put(u'priority', (var.get(u'directive').get(u'priority') or Js(0.0)))
                                var.get(u'directive').put(u'index', var.get(u'index'))
                                var.get(u'directive').put(u'name', (var.get(u'directive').get(u'name') or var.get(u'name')))
                                var.get(u'directive').put(u'require', (var.get(u'directive').get(u'require') or (var.get(u'directive').get(u'controller') and var.get(u'directive').get(u'name'))))
                                var.get(u'directive').put(u'restrict', (var.get(u'directive').get(u'restrict') or Js(u'EA')))
                                var.put(u'bindings', var.get(u'directive').put(u'$$bindings', var.get(u'parseDirectiveBindings')(var.get(u'directive'), var.get(u'directive').get(u'name'))))
                                if var.get(u'isObject')(var.get(u'bindings').get(u'isolateScope')):
                                    var.get(u'directive').put(u'$$isolateBindings', var.get(u'bindings').get(u'isolateScope'))
                                var.get(u'directive').put(u'$$moduleName', var.get(u'directiveFactory').get(u'$$moduleName'))
                                var.get(u'directives').callprop(u'push', var.get(u'directive'))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_65_90030575 = var.own.get(u'e')
                                var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                                try:
                                    var.get(u'$exceptionHandler')(var.get(u'e'))
                                finally:
                                    if PyJsHolder_65_90030575 is not None:
                                        var.own[u'e'] = PyJsHolder_65_90030575
                                    else:
                                        del var.own[u'e']
                                    del PyJsHolder_65_90030575
                        PyJs_anonymous_263_._set_name(u'anonymous')
                        var.get(u'forEach')(var.get(u'hasDirectives').get(var.get(u'name')), PyJs_anonymous_263_)
                        return var.get(u'directives')
                    PyJs_anonymous_262_._set_name(u'anonymous')
                    var.get(u'$provide').callprop(u'factory', (var.get(u'name')+var.get(u'Suffix')), Js([Js(u'$injector'), Js(u'$exceptionHandler'), PyJs_anonymous_262_]))
                var.get(u'hasDirectives').get(var.get(u'name')).callprop(u'push', var.get(u'directiveFactory'))
            else:
                var.get(u'forEach')(var.get(u'name'), var.get(u'reverseParams')(var.get(u'registerDirective')))
            return var.get(u"this")
        PyJs_registerDirective_261_._set_name(u'registerDirective')
        var.get(u"this").put(u'directive', PyJs_registerDirective_261_)
        @Js
        def PyJs_anonymous_265_(regexp, this, arguments, var=var):
            var = Scope({u'this':this, u'regexp':regexp, u'arguments':arguments}, var)
            var.registers([u'regexp'])
            if var.get(u'isDefined')(var.get(u'regexp')):
                var.get(u'$$sanitizeUriProvider').callprop(u'aHrefSanitizationWhitelist', var.get(u'regexp'))
                return var.get(u"this")
            else:
                return var.get(u'$$sanitizeUriProvider').callprop(u'aHrefSanitizationWhitelist')
        PyJs_anonymous_265_._set_name(u'anonymous')
        var.get(u"this").put(u'aHrefSanitizationWhitelist', PyJs_anonymous_265_)
        @Js
        def PyJs_anonymous_266_(regexp, this, arguments, var=var):
            var = Scope({u'this':this, u'regexp':regexp, u'arguments':arguments}, var)
            var.registers([u'regexp'])
            if var.get(u'isDefined')(var.get(u'regexp')):
                var.get(u'$$sanitizeUriProvider').callprop(u'imgSrcSanitizationWhitelist', var.get(u'regexp'))
                return var.get(u"this")
            else:
                return var.get(u'$$sanitizeUriProvider').callprop(u'imgSrcSanitizationWhitelist')
        PyJs_anonymous_266_._set_name(u'anonymous')
        var.get(u"this").put(u'imgSrcSanitizationWhitelist', PyJs_anonymous_266_)
        var.put(u'debugInfoEnabled', var.get(u'true'))
        @Js
        def PyJs_anonymous_267_(enabled, this, arguments, var=var):
            var = Scope({u'this':this, u'enabled':enabled, u'arguments':arguments}, var)
            var.registers([u'enabled'])
            if var.get(u'isDefined')(var.get(u'enabled')):
                var.put(u'debugInfoEnabled', var.get(u'enabled'))
                return var.get(u"this")
            return var.get(u'debugInfoEnabled')
        PyJs_anonymous_267_._set_name(u'anonymous')
        var.get(u"this").put(u'debugInfoEnabled', PyJs_anonymous_267_)
        @Js
        def PyJs_anonymous_268_(PyJsArg_24696e6a6563746f72_, PyJsArg_24696e746572706f6c617465_, PyJsArg_24657863657074696f6e48616e646c6572_, PyJsArg_2474656d706c61746552657175657374_, PyJsArg_247061727365_, PyJsArg_24636f6e74726f6c6c6572_, PyJsArg_24726f6f7453636f7065_, PyJsArg_24646f63756d656e74_, PyJsArg_24736365_, PyJsArg_24616e696d617465_, PyJsArg_242473616e6974697a65557269_, this, arguments, var=var):
            var = Scope({u'$animate':PyJsArg_24616e696d617465_, u'$rootScope':PyJsArg_24726f6f7453636f7065_, u'$sce':PyJsArg_24736365_, u'$interpolate':PyJsArg_24696e746572706f6c617465_, u'$document':PyJsArg_24646f63756d656e74_, u'$exceptionHandler':PyJsArg_24657863657074696f6e48616e646c6572_, u'$templateRequest':PyJsArg_2474656d706c61746552657175657374_, u'$injector':PyJsArg_24696e6a6563746f72_, u'$$sanitizeUri':PyJsArg_242473616e6974697a65557269_, u'this':this, u'arguments':arguments, u'$controller':PyJsArg_24636f6e74726f6c6c6572_, u'$parse':PyJsArg_247061727365_}, var)
            var.registers([u'createBoundTranscludeFn', u'markDirectiveScope', u'$interpolate', u'MULTI_ELEMENT_DIR_RE', u'$templateRequest', u'addDirective', u'$injector', u'$$sanitizeUri', u'cloneAndAnnotateFn', u'compileTemplateUrl', u'groupElementsLinkFnWrapper', u'$sce', u'$controller', u'invokeLinkFn', u'$document', u'mergeTemplateAttributes', u'$exceptionHandler', u'addTextInterpolateDirective', u'applyDirectivesToNode', u'startSymbol', u'collectDirectives', u'denormalizeTemplate', u'safeAddClass', u'directiveIsMultiElement', u'replaceWith', u'groupScan', u'endSymbol', u'wrapTemplate', u'assertNoDuplicate', u'NG_ATTR_BINDING', u'Attributes', u'detectNamespaceForChildElements', u'$animate', u'$rootScope', u'getTrustedContext', u'initializeDirectiveBindings', u'compile', u'byPriority', u'compileNodes', u'addAttrInterpolateDirective', u'$parse'])
            @Js
            def PyJsHoisted_createBoundTranscludeFn_(scope, transcludeFn, previousBoundTranscludeFn, this, arguments, var=var):
                var = Scope({u'this':this, u'scope':scope, u'transcludeFn':transcludeFn, u'arguments':arguments, u'previousBoundTranscludeFn':previousBoundTranscludeFn}, var)
                var.registers([u'boundTranscludeFn', u'scope', u'transcludeFn', u'previousBoundTranscludeFn'])
                @Js
                def PyJs_anonymous_289_(transcludedScope, cloneFn, controllers, futureParentElement, containingScope, this, arguments, var=var):
                    var = Scope({u'controllers':controllers, u'transcludedScope':transcludedScope, u'futureParentElement':futureParentElement, u'arguments':arguments, u'cloneFn':cloneFn, u'containingScope':containingScope, u'this':this}, var)
                    var.registers([u'cloneFn', u'transcludedScope', u'containingScope', u'futureParentElement', u'controllers'])
                    if var.get(u'transcludedScope').neg():
                        var.put(u'transcludedScope', var.get(u'scope').callprop(u'$new', Js(False), var.get(u'containingScope')))
                        var.get(u'transcludedScope').put(u'$$transcluded', var.get(u'true'))
                    PyJs_Object_290_ = Js({u'parentBoundTranscludeFn':var.get(u'previousBoundTranscludeFn'),u'transcludeControllers':var.get(u'controllers'),u'futureParentElement':var.get(u'futureParentElement')})
                    return var.get(u'transcludeFn')(var.get(u'transcludedScope'), var.get(u'cloneFn'), PyJs_Object_290_)
                PyJs_anonymous_289_._set_name(u'anonymous')
                var.put(u'boundTranscludeFn', PyJs_anonymous_289_)
                return var.get(u'boundTranscludeFn')
            PyJsHoisted_createBoundTranscludeFn_.func_name = u'createBoundTranscludeFn'
            var.put(u'createBoundTranscludeFn', PyJsHoisted_createBoundTranscludeFn_)
            @Js
            def PyJsHoisted_markDirectiveScope_(directives, isolateScope, newScope, this, arguments, var=var):
                var = Scope({u'this':this, u'isolateScope':isolateScope, u'directives':directives, u'arguments':arguments, u'newScope':newScope}, var)
                var.registers([u'isolateScope', u'j', u'directives', u'newScope', u'jj'])
                #for JS loop
                var.put(u'j', Js(0.0))
                var.put(u'jj', var.get(u'directives').get(u'length'))
                while (var.get(u'j')<var.get(u'jj')):
                    try:
                        PyJs_Object_304_ = Js({u'$$isolateScope':var.get(u'isolateScope'),u'$$newScope':var.get(u'newScope')})
                        var.get(u'directives').put(var.get(u'j'), var.get(u'inherit')(var.get(u'directives').get(var.get(u'j')), PyJs_Object_304_))
                    finally:
                            (var.put(u'j',var.get(u'j')+Js(1))-Js(1))
            PyJsHoisted_markDirectiveScope_.func_name = u'markDirectiveScope'
            var.put(u'markDirectiveScope', PyJsHoisted_markDirectiveScope_)
            @Js
            def PyJsHoisted_addDirective_(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName, endAttrName, this, arguments, var=var):
                var = Scope({u'tDirectives':tDirectives, u'name':name, u'endAttrName':endAttrName, u'startAttrName':startAttrName, u'maxPriority':maxPriority, u'this':this, u'ignoreDirective':ignoreDirective, u'location':location, u'arguments':arguments}, var)
                var.registers([u'tDirectives', u'name', u'directive', u'i', u'startAttrName', u'maxPriority', u'ii', u'endAttrName', u'ignoreDirective', u'directives', u'location', u'match'])
                if PyJsStrictEq(var.get(u'name'),var.get(u'ignoreDirective')):
                    return var.get(u"null")
                var.put(u'match', var.get(u"null"))
                if var.get(u'hasDirectives').callprop(u'hasOwnProperty', var.get(u'name')):
                    #for JS loop
                    var.put(u'directives', var.get(u'$injector').callprop(u'get', (var.get(u'name')+var.get(u'Suffix'))))
                    var.put(u'i', Js(0.0))
                    var.put(u'ii', var.get(u'directives').get(u'length'))
                    while (var.get(u'i')<var.get(u'ii')):
                        try:
                            try:
                                var.put(u'directive', var.get(u'directives').get(var.get(u'i')))
                                if ((var.get(u'isUndefined')(var.get(u'maxPriority')) or (var.get(u'maxPriority')>var.get(u'directive').get(u'priority'))) and (var.get(u'directive').get(u'restrict').callprop(u'indexOf', var.get(u'location'))!=(-Js(1.0)))):
                                    if var.get(u'startAttrName'):
                                        PyJs_Object_305_ = Js({u'$$start':var.get(u'startAttrName'),u'$$end':var.get(u'endAttrName')})
                                        var.put(u'directive', var.get(u'inherit')(var.get(u'directive'), PyJs_Object_305_))
                                    var.get(u'tDirectives').callprop(u'push', var.get(u'directive'))
                                    var.put(u'match', var.get(u'directive'))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_65_93302693 = var.own.get(u'e')
                                var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                                try:
                                    var.get(u'$exceptionHandler')(var.get(u'e'))
                                finally:
                                    if PyJsHolder_65_93302693 is not None:
                                        var.own[u'e'] = PyJsHolder_65_93302693
                                    else:
                                        del var.own[u'e']
                                    del PyJsHolder_65_93302693
                        finally:
                                (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                return var.get(u'match')
            PyJsHoisted_addDirective_.func_name = u'addDirective'
            var.put(u'addDirective', PyJsHoisted_addDirective_)
            @Js
            def PyJsHoisted_compileTemplateUrl_(directives, PyJsArg_24636f6d70696c654e6f6465_, tAttrs, PyJsArg_24726f6f74456c656d656e74_, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext, this, arguments, var=var):
                var = Scope({u'$rootElement':PyJsArg_24726f6f74456c656d656e74_, u'childTranscludeFn':childTranscludeFn, u'preLinkFns':preLinkFns, u'previousCompileContext':previousCompileContext, u'this':this, u'postLinkFns':postLinkFns, u'directives':directives, u'arguments':arguments, u'$compileNode':PyJsArg_24636f6d70696c654e6f6465_, u'tAttrs':tAttrs}, var)
                var.registers([u'$rootElement', u'childTranscludeFn', u'preLinkFns', u'derivedSyncDirective', u'origAsyncDirective', u'beforeTemplateCompileNode', u'linkQueue', u'postLinkFns', u'templateNamespace', u'afterTemplateNodeLinkFn', u'directives', u'tAttrs', u'$compileNode', u'afterTemplateChildLinkFn', u'templateUrl', u'previousCompileContext'])
                var.put(u'linkQueue', Js([]))
                var.put(u'beforeTemplateCompileNode', var.get(u'$compileNode').get(u'0'))
                var.put(u'origAsyncDirective', var.get(u'directives').callprop(u'shift'))
                PyJs_Object_308_ = Js({u'templateUrl':var.get(u"null"),u'transclude':var.get(u"null"),u'replace':var.get(u"null"),u'$$originalDirective':var.get(u'origAsyncDirective')})
                var.put(u'derivedSyncDirective', var.get(u'inherit')(var.get(u'origAsyncDirective'), PyJs_Object_308_))
                var.put(u'templateUrl', (var.get(u'origAsyncDirective').callprop(u'templateUrl', var.get(u'$compileNode'), var.get(u'tAttrs')) if var.get(u'isFunction')(var.get(u'origAsyncDirective').get(u'templateUrl')) else var.get(u'origAsyncDirective').get(u'templateUrl')))
                var.put(u'templateNamespace', var.get(u'origAsyncDirective').get(u'templateNamespace'))
                var.get(u'$compileNode').callprop(u'empty')
                @Js
                def PyJs_anonymous_309_(content, this, arguments, var=var):
                    var = Scope({u'content':content, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'boundTranscludeFn', u'beforeTemplateLinkNode', u'compileNode', u'oldClasses', u'tempTemplateAttrs', u'$template', u'content', u'scope', u'linkNode', u'childBoundTranscludeFn', u'templateDirectives', u'linkRootElement'])
                    pass
                    var.put(u'content', var.get(u'denormalizeTemplate')(var.get(u'content')))
                    if var.get(u'origAsyncDirective').get(u'replace'):
                        if var.get(u'jqLiteIsTextNode')(var.get(u'content')):
                            var.put(u'$template', Js([]))
                        else:
                            var.put(u'$template', var.get(u'removeComments')(var.get(u'wrapTemplate')(var.get(u'templateNamespace'), var.get(u'trim')(var.get(u'content')))))
                        var.put(u'compileNode', var.get(u'$template').get(u'0'))
                        if ((var.get(u'$template').get(u'length')!=Js(1.0)) or PyJsStrictNeq(var.get(u'compileNode').get(u'nodeType'),var.get(u'NODE_TYPE_ELEMENT'))):
                            PyJsTempException = JsToPyException(var.get(u'$compileMinErr')(Js(u'tplrt'), Js(u"Template for directive '{0}' must have exactly one root element. {1}"), var.get(u'origAsyncDirective').get(u'name'), var.get(u'templateUrl')))
                            raise PyJsTempException
                        PyJs_Object_311_ = Js({})
                        PyJs_Object_310_ = Js({u'$attr':PyJs_Object_311_})
                        var.put(u'tempTemplateAttrs', PyJs_Object_310_)
                        var.get(u'replaceWith')(var.get(u'$rootElement'), var.get(u'$compileNode'), var.get(u'compileNode'))
                        var.put(u'templateDirectives', var.get(u'collectDirectives')(var.get(u'compileNode'), Js([]), var.get(u'tempTemplateAttrs')))
                        if var.get(u'isObject')(var.get(u'origAsyncDirective').get(u'scope')):
                            var.get(u'markDirectiveScope')(var.get(u'templateDirectives'), var.get(u'true'))
                        var.put(u'directives', var.get(u'templateDirectives').callprop(u'concat', var.get(u'directives')))
                        var.get(u'mergeTemplateAttributes')(var.get(u'tAttrs'), var.get(u'tempTemplateAttrs'))
                    else:
                        var.put(u'compileNode', var.get(u'beforeTemplateCompileNode'))
                        var.get(u'$compileNode').callprop(u'html', var.get(u'content'))
                    var.get(u'directives').callprop(u'unshift', var.get(u'derivedSyncDirective'))
                    var.put(u'afterTemplateNodeLinkFn', var.get(u'applyDirectivesToNode')(var.get(u'directives'), var.get(u'compileNode'), var.get(u'tAttrs'), var.get(u'childTranscludeFn'), var.get(u'$compileNode'), var.get(u'origAsyncDirective'), var.get(u'preLinkFns'), var.get(u'postLinkFns'), var.get(u'previousCompileContext')))
                    @Js
                    def PyJs_anonymous_312_(node, i, this, arguments, var=var):
                        var = Scope({u'node':node, u'i':i, u'this':this, u'arguments':arguments}, var)
                        var.registers([u'node', u'i'])
                        if (var.get(u'node')==var.get(u'compileNode')):
                            var.get(u'$rootElement').put(var.get(u'i'), var.get(u'$compileNode').get(u'0'))
                    PyJs_anonymous_312_._set_name(u'anonymous')
                    var.get(u'forEach')(var.get(u'$rootElement'), PyJs_anonymous_312_)
                    var.put(u'afterTemplateChildLinkFn', var.get(u'compileNodes')(var.get(u'$compileNode').get(u'0').get(u'childNodes'), var.get(u'childTranscludeFn')))
                    while var.get(u'linkQueue').get(u'length'):
                        var.put(u'scope', var.get(u'linkQueue').callprop(u'shift'))
                        var.put(u'beforeTemplateLinkNode', var.get(u'linkQueue').callprop(u'shift'))
                        var.put(u'linkRootElement', var.get(u'linkQueue').callprop(u'shift'))
                        var.put(u'boundTranscludeFn', var.get(u'linkQueue').callprop(u'shift'))
                        var.put(u'linkNode', var.get(u'$compileNode').get(u'0'))
                        if var.get(u'scope').get(u'$$destroyed'):
                            continue
                        if PyJsStrictNeq(var.get(u'beforeTemplateLinkNode'),var.get(u'beforeTemplateCompileNode')):
                            var.put(u'oldClasses', var.get(u'beforeTemplateLinkNode').get(u'className'))
                            if (var.get(u'previousCompileContext').get(u'hasElementTranscludeDirective') and var.get(u'origAsyncDirective').get(u'replace')).neg():
                                var.put(u'linkNode', var.get(u'jqLiteClone')(var.get(u'compileNode')))
                            var.get(u'replaceWith')(var.get(u'linkRootElement'), var.get(u'jqLite')(var.get(u'beforeTemplateLinkNode')), var.get(u'linkNode'))
                            var.get(u'safeAddClass')(var.get(u'jqLite')(var.get(u'linkNode')), var.get(u'oldClasses'))
                        if var.get(u'afterTemplateNodeLinkFn').get(u'transcludeOnThisElement'):
                            var.put(u'childBoundTranscludeFn', var.get(u'createBoundTranscludeFn')(var.get(u'scope'), var.get(u'afterTemplateNodeLinkFn').get(u'transclude'), var.get(u'boundTranscludeFn')))
                        else:
                            var.put(u'childBoundTranscludeFn', var.get(u'boundTranscludeFn'))
                        var.get(u'afterTemplateNodeLinkFn')(var.get(u'afterTemplateChildLinkFn'), var.get(u'scope'), var.get(u'linkNode'), var.get(u'$rootElement'), var.get(u'childBoundTranscludeFn'))
                    var.put(u'linkQueue', var.get(u"null"))
                PyJs_anonymous_309_._set_name(u'anonymous')
                var.get(u'$templateRequest')(var.get(u'templateUrl')).callprop(u'then', PyJs_anonymous_309_)
                @Js
                def PyJs_delayedNodeLinkFn_313_(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn, this, arguments, var=var):
                    var = Scope({u'node':node, u'boundTranscludeFn':boundTranscludeFn, u'delayedNodeLinkFn':PyJs_delayedNodeLinkFn_313_, u'ignoreChildLinkFn':ignoreChildLinkFn, u'this':this, u'scope':scope, u'rootElement':rootElement, u'arguments':arguments}, var)
                    var.registers([u'node', u'boundTranscludeFn', u'ignoreChildLinkFn', u'rootElement', u'scope', u'childBoundTranscludeFn'])
                    var.put(u'childBoundTranscludeFn', var.get(u'boundTranscludeFn'))
                    if var.get(u'scope').get(u'$$destroyed'):
                        return var.get('undefined')
                    if var.get(u'linkQueue'):
                        var.get(u'linkQueue').callprop(u'push', var.get(u'scope'), var.get(u'node'), var.get(u'rootElement'), var.get(u'childBoundTranscludeFn'))
                    else:
                        if var.get(u'afterTemplateNodeLinkFn').get(u'transcludeOnThisElement'):
                            var.put(u'childBoundTranscludeFn', var.get(u'createBoundTranscludeFn')(var.get(u'scope'), var.get(u'afterTemplateNodeLinkFn').get(u'transclude'), var.get(u'boundTranscludeFn')))
                        var.get(u'afterTemplateNodeLinkFn')(var.get(u'afterTemplateChildLinkFn'), var.get(u'scope'), var.get(u'node'), var.get(u'rootElement'), var.get(u'childBoundTranscludeFn'))
                PyJs_delayedNodeLinkFn_313_._set_name(u'delayedNodeLinkFn')
                return PyJs_delayedNodeLinkFn_313_
            PyJsHoisted_compileTemplateUrl_.func_name = u'compileTemplateUrl'
            var.put(u'compileTemplateUrl', PyJsHoisted_compileTemplateUrl_)
            @Js
            def PyJsHoisted_groupElementsLinkFnWrapper_(linkFn, attrStart, attrEnd, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'linkFn':linkFn, u'attrStart':attrStart, u'attrEnd':attrEnd}, var)
                var.registers([u'linkFn', u'attrStart', u'attrEnd'])
                @Js
                def PyJs_anonymous_292_(scope, element, attrs, controllers, transcludeFn, this, arguments, var=var):
                    var = Scope({u'controllers':controllers, u'arguments':arguments, u'transcludeFn':transcludeFn, u'this':this, u'scope':scope, u'element':element, u'attrs':attrs}, var)
                    var.registers([u'controllers', u'scope', u'transcludeFn', u'attrs', u'element'])
                    var.put(u'element', var.get(u'groupScan')(var.get(u'element').get(u'0'), var.get(u'attrStart'), var.get(u'attrEnd')))
                    return var.get(u'linkFn')(var.get(u'scope'), var.get(u'element'), var.get(u'attrs'), var.get(u'controllers'), var.get(u'transcludeFn'))
                PyJs_anonymous_292_._set_name(u'anonymous')
                return PyJs_anonymous_292_
            PyJsHoisted_groupElementsLinkFnWrapper_.func_name = u'groupElementsLinkFnWrapper'
            var.put(u'groupElementsLinkFnWrapper', PyJsHoisted_groupElementsLinkFnWrapper_)
            @Js
            def PyJsHoisted_invokeLinkFn_(linkFn, scope, PyJsArg_24656c656d656e74_, attrs, controllers, transcludeFn, this, arguments, var=var):
                var = Scope({u'$element':PyJsArg_24656c656d656e74_, u'this':this, u'arguments':arguments, u'linkFn':linkFn, u'controllers':controllers, u'attrs':attrs, u'scope':scope, u'transcludeFn':transcludeFn}, var)
                var.registers([u'$element', u'linkFn', u'controllers', u'attrs', u'scope', u'transcludeFn'])
                try:
                    var.get(u'linkFn')(var.get(u'scope'), var.get(u'$element'), var.get(u'attrs'), var.get(u'controllers'), var.get(u'transcludeFn'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_22154831 = var.own.get(u'e')
                    var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                    try:
                        var.get(u'$exceptionHandler')(var.get(u'e'), var.get(u'startingTag')(var.get(u'$element')))
                    finally:
                        if PyJsHolder_65_22154831 is not None:
                            var.own[u'e'] = PyJsHolder_65_22154831
                        else:
                            del var.own[u'e']
                        del PyJsHolder_65_22154831
            PyJsHoisted_invokeLinkFn_.func_name = u'invokeLinkFn'
            var.put(u'invokeLinkFn', PyJsHoisted_invokeLinkFn_)
            @Js
            def PyJsHoisted_mergeTemplateAttributes_(dst, src, this, arguments, var=var):
                var = Scope({u'this':this, u'src':src, u'dst':dst, u'arguments':arguments}, var)
                var.registers([u'srcAttr', u'src', u'dst', u'dstAttr', u'$element'])
                var.put(u'srcAttr', var.get(u'src').get(u'$attr'))
                var.put(u'dstAttr', var.get(u'dst').get(u'$attr'))
                var.put(u'$element', var.get(u'dst').get(u'$$element'))
                @Js
                def PyJs_anonymous_306_(value, key, this, arguments, var=var):
                    var = Scope({u'this':this, u'key':key, u'value':value, u'arguments':arguments}, var)
                    var.registers([u'key', u'value'])
                    if (var.get(u'key').callprop(u'charAt', Js(0.0))!=Js(u'$')):
                        if (var.get(u'src').get(var.get(u'key')) and PyJsStrictNeq(var.get(u'src').get(var.get(u'key')),var.get(u'value'))):
                            var.put(u'value', ((Js(u';') if PyJsStrictEq(var.get(u'key'),Js(u'style')) else Js(u' '))+var.get(u'src').get(var.get(u'key'))), u'+')
                        var.get(u'dst').callprop(u'$set', var.get(u'key'), var.get(u'value'), var.get(u'true'), var.get(u'srcAttr').get(var.get(u'key')))
                PyJs_anonymous_306_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'dst'), PyJs_anonymous_306_)
                @Js
                def PyJs_anonymous_307_(value, key, this, arguments, var=var):
                    var = Scope({u'this':this, u'key':key, u'value':value, u'arguments':arguments}, var)
                    var.registers([u'key', u'value'])
                    if (var.get(u'key')==Js(u'class')):
                        var.get(u'safeAddClass')(var.get(u'$element'), var.get(u'value'))
                        var.get(u'dst').put(u'class', (((var.get(u'dst').get(u'class')+Js(u' ')) if var.get(u'dst').get(u'class') else Js(u''))+var.get(u'value')))
                    else:
                        if (var.get(u'key')==Js(u'style')):
                            var.get(u'$element').callprop(u'attr', Js(u'style'), ((var.get(u'$element').callprop(u'attr', Js(u'style'))+Js(u';'))+var.get(u'value')))
                            var.get(u'dst').put(u'style', (((var.get(u'dst').get(u'style')+Js(u';')) if var.get(u'dst').get(u'style') else Js(u''))+var.get(u'value')))
                        else:
                            if ((var.get(u'key').callprop(u'charAt', Js(0.0))!=Js(u'$')) and var.get(u'dst').callprop(u'hasOwnProperty', var.get(u'key')).neg()):
                                var.get(u'dst').put(var.get(u'key'), var.get(u'value'))
                                var.get(u'dstAttr').put(var.get(u'key'), var.get(u'srcAttr').get(var.get(u'key')))
                PyJs_anonymous_307_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'src'), PyJs_anonymous_307_)
            PyJsHoisted_mergeTemplateAttributes_.func_name = u'mergeTemplateAttributes'
            var.put(u'mergeTemplateAttributes', PyJsHoisted_mergeTemplateAttributes_)
            @Js
            def PyJsHoisted_addTextInterpolateDirective_(directives, text, this, arguments, var=var):
                var = Scope({u'this':this, u'text':text, u'directives':directives, u'arguments':arguments}, var)
                var.registers([u'interpolateFn', u'text', u'directives'])
                var.put(u'interpolateFn', var.get(u'$interpolate')(var.get(u'text'), var.get(u'true')))
                if var.get(u'interpolateFn'):
                    @Js
                    def PyJs_textInterpolateCompileFn_316_(templateNode, this, arguments, var=var):
                        var = Scope({u'this':this, u'textInterpolateCompileFn':PyJs_textInterpolateCompileFn_316_, u'arguments':arguments, u'templateNode':templateNode}, var)
                        var.registers([u'templateNodeParent', u'templateNode', u'hasCompileParent'])
                        var.put(u'templateNodeParent', var.get(u'templateNode').callprop(u'parent'))
                        var.put(u'hasCompileParent', var.get(u'templateNodeParent').get(u'length').neg().neg())
                        if var.get(u'hasCompileParent'):
                            var.get(u'compile').callprop(u'$$addBindingClass', var.get(u'templateNodeParent'))
                        @Js
                        def PyJs_textInterpolateLinkFn_317_(scope, node, this, arguments, var=var):
                            var = Scope({u'node':node, u'scope':scope, u'this':this, u'arguments':arguments, u'textInterpolateLinkFn':PyJs_textInterpolateLinkFn_317_}, var)
                            var.registers([u'node', u'scope', u'parent'])
                            var.put(u'parent', var.get(u'node').callprop(u'parent'))
                            if var.get(u'hasCompileParent').neg():
                                var.get(u'compile').callprop(u'$$addBindingClass', var.get(u'parent'))
                            var.get(u'compile').callprop(u'$$addBindingInfo', var.get(u'parent'), var.get(u'interpolateFn').get(u'expressions'))
                            @Js
                            def PyJs_interpolateFnWatchAction_318_(value, this, arguments, var=var):
                                var = Scope({u'this':this, u'interpolateFnWatchAction':PyJs_interpolateFnWatchAction_318_, u'arguments':arguments, u'value':value}, var)
                                var.registers([u'value'])
                                var.get(u'node').get(u'0').put(u'nodeValue', var.get(u'value'))
                            PyJs_interpolateFnWatchAction_318_._set_name(u'interpolateFnWatchAction')
                            var.get(u'scope').callprop(u'$watch', var.get(u'interpolateFn'), PyJs_interpolateFnWatchAction_318_)
                        PyJs_textInterpolateLinkFn_317_._set_name(u'textInterpolateLinkFn')
                        return PyJs_textInterpolateLinkFn_317_
                    PyJs_textInterpolateCompileFn_316_._set_name(u'textInterpolateCompileFn')
                    PyJs_Object_315_ = Js({u'priority':Js(0.0),u'compile':PyJs_textInterpolateCompileFn_316_})
                    var.get(u'directives').callprop(u'push', PyJs_Object_315_)
            PyJsHoisted_addTextInterpolateDirective_.func_name = u'addTextInterpolateDirective'
            var.put(u'addTextInterpolateDirective', PyJsHoisted_addTextInterpolateDirective_)
            @Js
            def PyJsHoisted_applyDirectivesToNode_(directives, compileNode, templateAttrs, transcludeFn, jqCollection, originalReplaceDirective, preLinkFns, postLinkFns, previousCompileContext, this, arguments, var=var):
                var = Scope({u'originalReplaceDirective':originalReplaceDirective, u'compileNode':compileNode, u'previousCompileContext':previousCompileContext, u'this':this, u'postLinkFns':postLinkFns, u'jqCollection':jqCollection, u'directives':directives, u'transcludeFn':transcludeFn, u'templateAttrs':templateAttrs, u'preLinkFns':preLinkFns, u'arguments':arguments}, var)
                var.registers([u'terminalPriority', u'previousCompileContext', u'unprocessedDirectives', u'nodeLinkFn', u'$compileNode', u'ii', u'hasElementTranscludeDirective', u'directiveName', u'setupControllers', u'controllerDirectives', u'directive', u'nonTlbTranscludeDirective', u'$template', u'compileNode', u'directives', u'transcludeFn', u'attrEnd', u'hasTemplate', u'getControllers', u'attrStart', u'linkFn', u'originalReplaceDirective', u'addLinkFns', u'jqCollection', u'newTemplateAttrs', u'replaceDirective', u'newScopeDirective', u'newIsolateScopeDirective', u'childTranscludeFn', u'templateDirective', u'hasTranscludeDirective', u'i', u'postLinkFns', u'directiveValue', u'templateAttrs', u'preLinkFns', u'templateDirectives'])
                @Js
                def PyJsHoisted_getControllers_(directiveName, require, PyJsArg_24656c656d656e74_, elementControllers, this, arguments, var=var):
                    var = Scope({u'elementControllers':elementControllers, u'$element':PyJsArg_24656c656d656e74_, u'arguments':arguments, u'directiveName':directiveName, u'this':this, u'require':require}, var)
                    var.registers([u'$element', u'name', u'elementControllers', u'i', u'inheritType', u'value', u'ii', u'dataName', u'directiveName', u'optional', u'require', u'match'])
                    pass
                    if var.get(u'isString')(var.get(u'require')):
                        var.put(u'match', var.get(u'require').callprop(u'match', var.get(u'REQUIRE_PREFIX_REGEXP')))
                        var.put(u'name', var.get(u'require').callprop(u'substring', var.get(u'match').get(u'0').get(u'length')))
                        var.put(u'inheritType', (var.get(u'match').get(u'1') or var.get(u'match').get(u'3')))
                        var.put(u'optional', PyJsStrictEq(var.get(u'match').get(u'2'),Js(u'?')))
                        if PyJsStrictEq(var.get(u'inheritType'),Js(u'^^')):
                            var.put(u'$element', var.get(u'$element').callprop(u'parent'))
                        else:
                            var.put(u'value', (var.get(u'elementControllers') and var.get(u'elementControllers').get(var.get(u'name'))))
                            var.put(u'value', (var.get(u'value') and var.get(u'value').get(u'instance')))
                        if var.get(u'value').neg():
                            var.put(u'dataName', ((Js(u'$')+var.get(u'name'))+Js(u'Controller')))
                            var.put(u'value', (var.get(u'$element').callprop(u'inheritedData', var.get(u'dataName')) if var.get(u'inheritType') else var.get(u'$element').callprop(u'data', var.get(u'dataName'))))
                        if (var.get(u'value').neg() and var.get(u'optional').neg()):
                            PyJsTempException = JsToPyException(var.get(u'$compileMinErr')(Js(u'ctreq'), Js(u"Controller '{0}', required by directive '{1}', can't be found!"), var.get(u'name'), var.get(u'directiveName')))
                            raise PyJsTempException
                    else:
                        if var.get(u'isArray')(var.get(u'require')):
                            var.put(u'value', Js([]))
                            #for JS loop
                            var.put(u'i', Js(0.0))
                            var.put(u'ii', var.get(u'require').get(u'length'))
                            while (var.get(u'i')<var.get(u'ii')):
                                try:
                                    var.get(u'value').put(var.get(u'i'), var.get(u'getControllers')(var.get(u'directiveName'), var.get(u'require').get(var.get(u'i')), var.get(u'$element'), var.get(u'elementControllers')))
                                finally:
                                        (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                    return (var.get(u'value') or var.get(u"null"))
                PyJsHoisted_getControllers_.func_name = u'getControllers'
                var.put(u'getControllers', PyJsHoisted_getControllers_)
                @Js
                def PyJsHoisted_setupControllers_(PyJsArg_24656c656d656e74_, attrs, transcludeFn, controllerDirectives, isolateScope, scope, this, arguments, var=var):
                    var = Scope({u'arguments':arguments, u'controllerDirectives':controllerDirectives, u'$element':PyJsArg_24656c656d656e74_, u'this':this, u'isolateScope':isolateScope, u'attrs':attrs, u'scope':scope, u'transcludeFn':transcludeFn}, var)
                    var.registers([u'controllerDirectives', u'$element', u'directive', u'isolateScope', u'controllerKey', u'elementControllers', u'controller', u'controllerInstance', u'attrs', u'scope', u'locals', u'transcludeFn'])
                    var.put(u'elementControllers', var.get(u'createMap')())
                    for PyJsTemp in var.get(u'controllerDirectives'):
                        var.put(u'controllerKey', PyJsTemp)
                        var.put(u'directive', var.get(u'controllerDirectives').get(var.get(u'controllerKey')))
                        PyJs_Object_301_ = Js({u'$scope':(var.get(u'isolateScope') if (PyJsStrictEq(var.get(u'directive'),var.get(u'newIsolateScopeDirective')) or var.get(u'directive').get(u'$$isolateScope')) else var.get(u'scope')),u'$element':var.get(u'$element'),u'$attrs':var.get(u'attrs'),u'$transclude':var.get(u'transcludeFn')})
                        var.put(u'locals', PyJs_Object_301_)
                        var.put(u'controller', var.get(u'directive').get(u'controller'))
                        if (var.get(u'controller')==Js(u'@')):
                            var.put(u'controller', var.get(u'attrs').get(var.get(u'directive').get(u'name')))
                        var.put(u'controllerInstance', var.get(u'$controller')(var.get(u'controller'), var.get(u'locals'), var.get(u'true'), var.get(u'directive').get(u'controllerAs')))
                        var.get(u'elementControllers').put(var.get(u'directive').get(u'name'), var.get(u'controllerInstance'))
                        if var.get(u'hasElementTranscludeDirective').neg():
                            var.get(u'$element').callprop(u'data', ((Js(u'$')+var.get(u'directive').get(u'name'))+Js(u'Controller')), var.get(u'controllerInstance').get(u'instance'))
                    return var.get(u'elementControllers')
                PyJsHoisted_setupControllers_.func_name = u'setupControllers'
                var.put(u'setupControllers', PyJsHoisted_setupControllers_)
                @Js
                def PyJsHoisted_nodeLinkFn_(childLinkFn, scope, linkNode, PyJsArg_24726f6f74456c656d656e74_, boundTranscludeFn, this, arguments, var=var):
                    var = Scope({u'$rootElement':PyJsArg_24726f6f74456c656d656e74_, u'boundTranscludeFn':boundTranscludeFn, u'arguments':arguments, u'this':this, u'scope':scope, u'linkNode':linkNode, u'childLinkFn':childLinkFn}, var)
                    var.registers([u'controllersBoundTransclude', u'$rootElement', u'scopeToChild', u'$element', u'name', u'isolateScope', u'linkFn', u'controllerResult', u'childLinkFn', u'elementControllers', u'controller', u'transcludeFn', u'removeControllerBindingWatches', u'scope', u'controllerDirective', u'bindings', u'controllerScope', u'linkNode', u'removeScopeBindingWatches', u'boundTranscludeFn', u'attrs'])
                    @Js
                    def PyJsHoisted_controllersBoundTransclude_(scope, cloneAttachFn, futureParentElement, this, arguments, var=var):
                        var = Scope({u'futureParentElement':futureParentElement, u'scope':scope, u'this':this, u'cloneAttachFn':cloneAttachFn, u'arguments':arguments}, var)
                        var.registers([u'futureParentElement', u'transcludeControllers', u'cloneAttachFn', u'scope'])
                        pass
                        if var.get(u'isScope')(var.get(u'scope')).neg():
                            var.put(u'futureParentElement', var.get(u'cloneAttachFn'))
                            var.put(u'cloneAttachFn', var.get(u'scope'))
                            var.put(u'scope', var.get(u'undefined'))
                        if var.get(u'hasElementTranscludeDirective'):
                            var.put(u'transcludeControllers', var.get(u'elementControllers'))
                        if var.get(u'futureParentElement').neg():
                            var.put(u'futureParentElement', (var.get(u'$element').callprop(u'parent') if var.get(u'hasElementTranscludeDirective') else var.get(u'$element')))
                        return var.get(u'boundTranscludeFn')(var.get(u'scope'), var.get(u'cloneAttachFn'), var.get(u'transcludeControllers'), var.get(u'futureParentElement'), var.get(u'scopeToChild'))
                    PyJsHoisted_controllersBoundTransclude_.func_name = u'controllersBoundTransclude'
                    var.put(u'controllersBoundTransclude', PyJsHoisted_controllersBoundTransclude_)
                    pass
                    if PyJsStrictEq(var.get(u'compileNode'),var.get(u'linkNode')):
                        var.put(u'attrs', var.get(u'templateAttrs'))
                        var.put(u'$element', var.get(u'templateAttrs').get(u'$$element'))
                    else:
                        var.put(u'$element', var.get(u'jqLite')(var.get(u'linkNode')))
                        var.put(u'attrs', var.get(u'Attributes').create(var.get(u'$element'), var.get(u'templateAttrs')))
                    var.put(u'controllerScope', var.get(u'scope'))
                    if var.get(u'newIsolateScopeDirective'):
                        var.put(u'isolateScope', var.get(u'scope').callprop(u'$new', var.get(u'true')))
                    else:
                        if var.get(u'newScopeDirective'):
                            var.put(u'controllerScope', var.get(u'scope').get(u'$parent'))
                    if var.get(u'boundTranscludeFn'):
                        var.put(u'transcludeFn', var.get(u'controllersBoundTransclude'))
                        var.get(u'transcludeFn').put(u'$$boundTransclude', var.get(u'boundTranscludeFn'))
                    if var.get(u'controllerDirectives'):
                        var.put(u'elementControllers', var.get(u'setupControllers')(var.get(u'$element'), var.get(u'attrs'), var.get(u'transcludeFn'), var.get(u'controllerDirectives'), var.get(u'isolateScope'), var.get(u'scope')))
                    if var.get(u'newIsolateScopeDirective'):
                        var.get(u'compile').callprop(u'$$addScopeInfo', var.get(u'$element'), var.get(u'isolateScope'), var.get(u'true'), (var.get(u'templateDirective') and (PyJsStrictEq(var.get(u'templateDirective'),var.get(u'newIsolateScopeDirective')) or PyJsStrictEq(var.get(u'templateDirective'),var.get(u'newIsolateScopeDirective').get(u'$$originalDirective')))).neg())
                        var.get(u'compile').callprop(u'$$addScopeClass', var.get(u'$element'), var.get(u'true'))
                        var.get(u'isolateScope').put(u'$$isolateBindings', var.get(u'newIsolateScopeDirective').get(u'$$isolateBindings'))
                        var.put(u'removeScopeBindingWatches', var.get(u'initializeDirectiveBindings')(var.get(u'scope'), var.get(u'attrs'), var.get(u'isolateScope'), var.get(u'isolateScope').get(u'$$isolateBindings'), var.get(u'newIsolateScopeDirective')))
                        if var.get(u'removeScopeBindingWatches'):
                            var.get(u'isolateScope').callprop(u'$on', Js(u'$destroy'), var.get(u'removeScopeBindingWatches'))
                    for PyJsTemp in var.get(u'elementControllers'):
                        var.put(u'name', PyJsTemp)
                        var.put(u'controllerDirective', var.get(u'controllerDirectives').get(var.get(u'name')))
                        var.put(u'controller', var.get(u'elementControllers').get(var.get(u'name')))
                        var.put(u'bindings', var.get(u'controllerDirective').get(u'$$bindings').get(u'bindToController'))
                        if (var.get(u'controller').get(u'identifier') and var.get(u'bindings')):
                            var.put(u'removeControllerBindingWatches', var.get(u'initializeDirectiveBindings')(var.get(u'controllerScope'), var.get(u'attrs'), var.get(u'controller').get(u'instance'), var.get(u'bindings'), var.get(u'controllerDirective')))
                        var.put(u'controllerResult', var.get(u'controller')())
                        if PyJsStrictNeq(var.get(u'controllerResult'),var.get(u'controller').get(u'instance')):
                            var.get(u'controller').put(u'instance', var.get(u'controllerResult'))
                            var.get(u'$element').callprop(u'data', ((Js(u'$')+var.get(u'controllerDirective').get(u'name'))+Js(u'Controller')), var.get(u'controllerResult'))
                            (var.get(u'removeControllerBindingWatches') and var.get(u'removeControllerBindingWatches')())
                            var.put(u'removeControllerBindingWatches', var.get(u'initializeDirectiveBindings')(var.get(u'controllerScope'), var.get(u'attrs'), var.get(u'controller').get(u'instance'), var.get(u'bindings'), var.get(u'controllerDirective')))
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'ii', var.get(u'preLinkFns').get(u'length')))
                    while (var.get(u'i')<var.get(u'ii')):
                        try:
                            var.put(u'linkFn', var.get(u'preLinkFns').get(var.get(u'i')))
                            def PyJs_LONG_302_(var=var):
                                return var.get(u'invokeLinkFn')(var.get(u'linkFn'), (var.get(u'isolateScope') if var.get(u'linkFn').get(u'isolateScope') else var.get(u'scope')), var.get(u'$element'), var.get(u'attrs'), (var.get(u'linkFn').get(u'require') and var.get(u'getControllers')(var.get(u'linkFn').get(u'directiveName'), var.get(u'linkFn').get(u'require'), var.get(u'$element'), var.get(u'elementControllers'))), var.get(u'transcludeFn'))
                            PyJs_LONG_302_()
                        finally:
                                (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                    var.put(u'scopeToChild', var.get(u'scope'))
                    if (var.get(u'newIsolateScopeDirective') and (var.get(u'newIsolateScopeDirective').get(u'template') or PyJsStrictEq(var.get(u'newIsolateScopeDirective').get(u'templateUrl'),var.get(u"null")))):
                        var.put(u'scopeToChild', var.get(u'isolateScope'))
                    (var.get(u'childLinkFn') and var.get(u'childLinkFn')(var.get(u'scopeToChild'), var.get(u'linkNode').get(u'childNodes'), var.get(u'undefined'), var.get(u'boundTranscludeFn')))
                    #for JS loop
                    var.put(u'i', (var.get(u'postLinkFns').get(u'length')-Js(1.0)))
                    while (var.get(u'i')>=Js(0.0)):
                        try:
                            var.put(u'linkFn', var.get(u'postLinkFns').get(var.get(u'i')))
                            def PyJs_LONG_303_(var=var):
                                return var.get(u'invokeLinkFn')(var.get(u'linkFn'), (var.get(u'isolateScope') if var.get(u'linkFn').get(u'isolateScope') else var.get(u'scope')), var.get(u'$element'), var.get(u'attrs'), (var.get(u'linkFn').get(u'require') and var.get(u'getControllers')(var.get(u'linkFn').get(u'directiveName'), var.get(u'linkFn').get(u'require'), var.get(u'$element'), var.get(u'elementControllers'))), var.get(u'transcludeFn'))
                            PyJs_LONG_303_()
                        finally:
                                (var.put(u'i',var.get(u'i')-Js(1))+Js(1))
                    pass
                PyJsHoisted_nodeLinkFn_.func_name = u'nodeLinkFn'
                var.put(u'nodeLinkFn', PyJsHoisted_nodeLinkFn_)
                @Js
                def PyJsHoisted_addLinkFns_(pre, post, attrStart, attrEnd, this, arguments, var=var):
                    var = Scope({u'pre':pre, u'attrStart':attrStart, u'arguments':arguments, u'attrEnd':attrEnd, u'this':this, u'post':post}, var)
                    var.registers([u'pre', u'post', u'attrStart', u'attrEnd'])
                    if var.get(u'pre'):
                        if var.get(u'attrStart'):
                            var.put(u'pre', var.get(u'groupElementsLinkFnWrapper')(var.get(u'pre'), var.get(u'attrStart'), var.get(u'attrEnd')))
                        var.get(u'pre').put(u'require', var.get(u'directive').get(u'require'))
                        var.get(u'pre').put(u'directiveName', var.get(u'directiveName'))
                        if (PyJsStrictEq(var.get(u'newIsolateScopeDirective'),var.get(u'directive')) or var.get(u'directive').get(u'$$isolateScope')):
                            PyJs_Object_299_ = Js({u'isolateScope':var.get(u'true')})
                            var.put(u'pre', var.get(u'cloneAndAnnotateFn')(var.get(u'pre'), PyJs_Object_299_))
                        var.get(u'preLinkFns').callprop(u'push', var.get(u'pre'))
                    if var.get(u'post'):
                        if var.get(u'attrStart'):
                            var.put(u'post', var.get(u'groupElementsLinkFnWrapper')(var.get(u'post'), var.get(u'attrStart'), var.get(u'attrEnd')))
                        var.get(u'post').put(u'require', var.get(u'directive').get(u'require'))
                        var.get(u'post').put(u'directiveName', var.get(u'directiveName'))
                        if (PyJsStrictEq(var.get(u'newIsolateScopeDirective'),var.get(u'directive')) or var.get(u'directive').get(u'$$isolateScope')):
                            PyJs_Object_300_ = Js({u'isolateScope':var.get(u'true')})
                            var.put(u'post', var.get(u'cloneAndAnnotateFn')(var.get(u'post'), PyJs_Object_300_))
                        var.get(u'postLinkFns').callprop(u'push', var.get(u'post'))
                PyJsHoisted_addLinkFns_.func_name = u'addLinkFns'
                var.put(u'addLinkFns', PyJsHoisted_addLinkFns_)
                PyJs_Object_293_ = Js({})
                var.put(u'previousCompileContext', (var.get(u'previousCompileContext') or PyJs_Object_293_))
                var.put(u'terminalPriority', (-var.get(u'Number').get(u'MAX_VALUE')))
                var.put(u'newScopeDirective', var.get(u'previousCompileContext').get(u'newScopeDirective'))
                var.put(u'controllerDirectives', var.get(u'previousCompileContext').get(u'controllerDirectives'))
                var.put(u'newIsolateScopeDirective', var.get(u'previousCompileContext').get(u'newIsolateScopeDirective'))
                var.put(u'templateDirective', var.get(u'previousCompileContext').get(u'templateDirective'))
                var.put(u'nonTlbTranscludeDirective', var.get(u'previousCompileContext').get(u'nonTlbTranscludeDirective'))
                var.put(u'hasTranscludeDirective', Js(False))
                var.put(u'hasTemplate', Js(False))
                var.put(u'hasElementTranscludeDirective', var.get(u'previousCompileContext').get(u'hasElementTranscludeDirective'))
                var.put(u'$compileNode', var.get(u'templateAttrs').put(u'$$element', var.get(u'jqLite')(var.get(u'compileNode'))))
                var.put(u'replaceDirective', var.get(u'originalReplaceDirective'))
                var.put(u'childTranscludeFn', var.get(u'transcludeFn'))
                #for JS loop
                var.put(u'i', Js(0.0))
                var.put(u'ii', var.get(u'directives').get(u'length'))
                while (var.get(u'i')<var.get(u'ii')):
                    try:
                        var.put(u'directive', var.get(u'directives').get(var.get(u'i')))
                        var.put(u'attrStart', var.get(u'directive').get(u'$$start'))
                        var.put(u'attrEnd', var.get(u'directive').get(u'$$end'))
                        if var.get(u'attrStart'):
                            var.put(u'$compileNode', var.get(u'groupScan')(var.get(u'compileNode'), var.get(u'attrStart'), var.get(u'attrEnd')))
                        var.put(u'$template', var.get(u'undefined'))
                        if (var.get(u'terminalPriority')>var.get(u'directive').get(u'priority')):
                            break
                        if var.put(u'directiveValue', var.get(u'directive').get(u'scope')):
                            if var.get(u'directive').get(u'templateUrl').neg():
                                if var.get(u'isObject')(var.get(u'directiveValue')):
                                    var.get(u'assertNoDuplicate')(Js(u'new/isolated scope'), (var.get(u'newIsolateScopeDirective') or var.get(u'newScopeDirective')), var.get(u'directive'), var.get(u'$compileNode'))
                                    var.put(u'newIsolateScopeDirective', var.get(u'directive'))
                                else:
                                    var.get(u'assertNoDuplicate')(Js(u'new/isolated scope'), var.get(u'newIsolateScopeDirective'), var.get(u'directive'), var.get(u'$compileNode'))
                            var.put(u'newScopeDirective', (var.get(u'newScopeDirective') or var.get(u'directive')))
                        var.put(u'directiveName', var.get(u'directive').get(u'name'))
                        if (var.get(u'directive').get(u'templateUrl').neg() and var.get(u'directive').get(u'controller')):
                            var.put(u'directiveValue', var.get(u'directive').get(u'controller'))
                            var.put(u'controllerDirectives', (var.get(u'controllerDirectives') or var.get(u'createMap')()))
                            var.get(u'assertNoDuplicate')(((Js(u"'")+var.get(u'directiveName'))+Js(u"' controller")), var.get(u'controllerDirectives').get(var.get(u'directiveName')), var.get(u'directive'), var.get(u'$compileNode'))
                            var.get(u'controllerDirectives').put(var.get(u'directiveName'), var.get(u'directive'))
                        if var.put(u'directiveValue', var.get(u'directive').get(u'transclude')):
                            var.put(u'hasTranscludeDirective', var.get(u'true'))
                            if var.get(u'directive').get(u'$$tlb').neg():
                                var.get(u'assertNoDuplicate')(Js(u'transclusion'), var.get(u'nonTlbTranscludeDirective'), var.get(u'directive'), var.get(u'$compileNode'))
                                var.put(u'nonTlbTranscludeDirective', var.get(u'directive'))
                            if (var.get(u'directiveValue')==Js(u'element')):
                                var.put(u'hasElementTranscludeDirective', var.get(u'true'))
                                var.put(u'terminalPriority', var.get(u'directive').get(u'priority'))
                                var.put(u'$template', var.get(u'$compileNode'))
                                var.put(u'$compileNode', var.get(u'templateAttrs').put(u'$$element', var.get(u'jqLite')(var.get(u'document').callprop(u'createComment', ((((Js(u' ')+var.get(u'directiveName'))+Js(u': '))+var.get(u'templateAttrs').get(var.get(u'directiveName')))+Js(u' '))))))
                                var.put(u'compileNode', var.get(u'$compileNode').get(u'0'))
                                var.get(u'replaceWith')(var.get(u'jqCollection'), var.get(u'sliceArgs')(var.get(u'$template')), var.get(u'compileNode'))
                                PyJs_Object_294_ = Js({u'nonTlbTranscludeDirective':var.get(u'nonTlbTranscludeDirective')})
                                var.put(u'childTranscludeFn', var.get(u'compile')(var.get(u'$template'), var.get(u'transcludeFn'), var.get(u'terminalPriority'), (var.get(u'replaceDirective') and var.get(u'replaceDirective').get(u'name')), PyJs_Object_294_))
                            else:
                                var.put(u'$template', var.get(u'jqLite')(var.get(u'jqLiteClone')(var.get(u'compileNode'))).callprop(u'contents'))
                                var.get(u'$compileNode').callprop(u'empty')
                                PyJs_Object_295_ = Js({u'needsNewScope':(var.get(u'directive').get(u'$$isolateScope') or var.get(u'directive').get(u'$$newScope'))})
                                var.put(u'childTranscludeFn', var.get(u'compile')(var.get(u'$template'), var.get(u'transcludeFn'), var.get(u'undefined'), var.get(u'undefined'), PyJs_Object_295_))
                        if var.get(u'directive').get(u'template'):
                            var.put(u'hasTemplate', var.get(u'true'))
                            var.get(u'assertNoDuplicate')(Js(u'template'), var.get(u'templateDirective'), var.get(u'directive'), var.get(u'$compileNode'))
                            var.put(u'templateDirective', var.get(u'directive'))
                            var.put(u'directiveValue', (var.get(u'directive').callprop(u'template', var.get(u'$compileNode'), var.get(u'templateAttrs')) if var.get(u'isFunction')(var.get(u'directive').get(u'template')) else var.get(u'directive').get(u'template')))
                            var.put(u'directiveValue', var.get(u'denormalizeTemplate')(var.get(u'directiveValue')))
                            if var.get(u'directive').get(u'replace'):
                                var.put(u'replaceDirective', var.get(u'directive'))
                                if var.get(u'jqLiteIsTextNode')(var.get(u'directiveValue')):
                                    var.put(u'$template', Js([]))
                                else:
                                    var.put(u'$template', var.get(u'removeComments')(var.get(u'wrapTemplate')(var.get(u'directive').get(u'templateNamespace'), var.get(u'trim')(var.get(u'directiveValue')))))
                                var.put(u'compileNode', var.get(u'$template').get(u'0'))
                                if ((var.get(u'$template').get(u'length')!=Js(1.0)) or PyJsStrictNeq(var.get(u'compileNode').get(u'nodeType'),var.get(u'NODE_TYPE_ELEMENT'))):
                                    PyJsTempException = JsToPyException(var.get(u'$compileMinErr')(Js(u'tplrt'), Js(u"Template for directive '{0}' must have exactly one root element. {1}"), var.get(u'directiveName'), Js(u'')))
                                    raise PyJsTempException
                                var.get(u'replaceWith')(var.get(u'jqCollection'), var.get(u'$compileNode'), var.get(u'compileNode'))
                                PyJs_Object_297_ = Js({})
                                PyJs_Object_296_ = Js({u'$attr':PyJs_Object_297_})
                                var.put(u'newTemplateAttrs', PyJs_Object_296_)
                                var.put(u'templateDirectives', var.get(u'collectDirectives')(var.get(u'compileNode'), Js([]), var.get(u'newTemplateAttrs')))
                                var.put(u'unprocessedDirectives', var.get(u'directives').callprop(u'splice', (var.get(u'i')+Js(1.0)), (var.get(u'directives').get(u'length')-(var.get(u'i')+Js(1.0)))))
                                if (var.get(u'newIsolateScopeDirective') or var.get(u'newScopeDirective')):
                                    var.get(u'markDirectiveScope')(var.get(u'templateDirectives'), var.get(u'newIsolateScopeDirective'), var.get(u'newScopeDirective'))
                                var.put(u'directives', var.get(u'directives').callprop(u'concat', var.get(u'templateDirectives')).callprop(u'concat', var.get(u'unprocessedDirectives')))
                                var.get(u'mergeTemplateAttributes')(var.get(u'templateAttrs'), var.get(u'newTemplateAttrs'))
                                var.put(u'ii', var.get(u'directives').get(u'length'))
                            else:
                                var.get(u'$compileNode').callprop(u'html', var.get(u'directiveValue'))
                        if var.get(u'directive').get(u'templateUrl'):
                            var.put(u'hasTemplate', var.get(u'true'))
                            var.get(u'assertNoDuplicate')(Js(u'template'), var.get(u'templateDirective'), var.get(u'directive'), var.get(u'$compileNode'))
                            var.put(u'templateDirective', var.get(u'directive'))
                            if var.get(u'directive').get(u'replace'):
                                var.put(u'replaceDirective', var.get(u'directive'))
                            PyJs_Object_298_ = Js({u'controllerDirectives':var.get(u'controllerDirectives'),u'newScopeDirective':(PyJsStrictNeq(var.get(u'newScopeDirective'),var.get(u'directive')) and var.get(u'newScopeDirective')),u'newIsolateScopeDirective':var.get(u'newIsolateScopeDirective'),u'templateDirective':var.get(u'templateDirective'),u'nonTlbTranscludeDirective':var.get(u'nonTlbTranscludeDirective')})
                            var.put(u'nodeLinkFn', var.get(u'compileTemplateUrl')(var.get(u'directives').callprop(u'splice', var.get(u'i'), (var.get(u'directives').get(u'length')-var.get(u'i'))), var.get(u'$compileNode'), var.get(u'templateAttrs'), var.get(u'jqCollection'), (var.get(u'hasTranscludeDirective') and var.get(u'childTranscludeFn')), var.get(u'preLinkFns'), var.get(u'postLinkFns'), PyJs_Object_298_))
                            var.put(u'ii', var.get(u'directives').get(u'length'))
                        else:
                            if var.get(u'directive').get(u'compile'):
                                try:
                                    var.put(u'linkFn', var.get(u'directive').callprop(u'compile', var.get(u'$compileNode'), var.get(u'templateAttrs'), var.get(u'childTranscludeFn')))
                                    if var.get(u'isFunction')(var.get(u'linkFn')):
                                        var.get(u'addLinkFns')(var.get(u"null"), var.get(u'linkFn'), var.get(u'attrStart'), var.get(u'attrEnd'))
                                    else:
                                        if var.get(u'linkFn'):
                                            var.get(u'addLinkFns')(var.get(u'linkFn').get(u'pre'), var.get(u'linkFn').get(u'post'), var.get(u'attrStart'), var.get(u'attrEnd'))
                                except PyJsException as PyJsTempException:
                                    PyJsHolder_65_39731579 = var.own.get(u'e')
                                    var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                                    try:
                                        var.get(u'$exceptionHandler')(var.get(u'e'), var.get(u'startingTag')(var.get(u'$compileNode')))
                                    finally:
                                        if PyJsHolder_65_39731579 is not None:
                                            var.own[u'e'] = PyJsHolder_65_39731579
                                        else:
                                            del var.own[u'e']
                                        del PyJsHolder_65_39731579
                        if var.get(u'directive').get(u'terminal'):
                            var.get(u'nodeLinkFn').put(u'terminal', var.get(u'true'))
                            var.put(u'terminalPriority', var.get(u'Math').callprop(u'max', var.get(u'terminalPriority'), var.get(u'directive').get(u'priority')))
                    finally:
                            (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                var.get(u'nodeLinkFn').put(u'scope', (var.get(u'newScopeDirective') and PyJsStrictEq(var.get(u'newScopeDirective').get(u'scope'),var.get(u'true'))))
                var.get(u'nodeLinkFn').put(u'transcludeOnThisElement', var.get(u'hasTranscludeDirective'))
                var.get(u'nodeLinkFn').put(u'templateOnThisElement', var.get(u'hasTemplate'))
                var.get(u'nodeLinkFn').put(u'transclude', var.get(u'childTranscludeFn'))
                var.get(u'previousCompileContext').put(u'hasElementTranscludeDirective', var.get(u'hasElementTranscludeDirective'))
                return var.get(u'nodeLinkFn')
                pass
                pass
                pass
                pass
            PyJsHoisted_applyDirectivesToNode_.func_name = u'applyDirectivesToNode'
            var.put(u'applyDirectivesToNode', PyJsHoisted_applyDirectivesToNode_)
            @Js
            def PyJsHoisted_collectDirectives_(node, directives, attrs, maxPriority, ignoreDirective, this, arguments, var=var):
                var = Scope({u'node':node, u'ignoreDirective':ignoreDirective, u'directives':directives, u'attrs':attrs, u'this':this, u'maxPriority':maxPriority, u'arguments':arguments}, var)
                var.registers([u'node', u'isNgAttr', u'j', u'nodeType', u'attr', u'ngAttrName', u'nAttrs', u'maxPriority', u'value', u'className', u'multiElementMatch', u'ignoreDirective', u'attrStartName', u'directives', u'nName', u'jj', u'attrsMap', u'attrs', u'attrEndName', u'match', u'name'])
                var.put(u'nodeType', var.get(u'node').get(u'nodeType'))
                var.put(u'attrsMap', var.get(u'attrs').get(u'$attr'))
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get(u'nodeType'))
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'NODE_TYPE_ELEMENT')):
                        SWITCHED = True
                        var.get(u'addDirective')(var.get(u'directives'), var.get(u'directiveNormalize')(var.get(u'nodeName_')(var.get(u'node'))), Js(u'E'), var.get(u'maxPriority'), var.get(u'ignoreDirective'))
                        #for JS loop
                        var.put(u'nAttrs', var.get(u'node').get(u'attributes'))
                        var.put(u'j', Js(0.0))
                        var.put(u'jj', (var.get(u'nAttrs') and var.get(u'nAttrs').get(u'length')))
                        while (var.get(u'j')<var.get(u'jj')):
                            try:
                                var.put(u'attrStartName', Js(False))
                                var.put(u'attrEndName', Js(False))
                                var.put(u'attr', var.get(u'nAttrs').get(var.get(u'j')))
                                var.put(u'name', var.get(u'attr').get(u'name'))
                                var.put(u'value', var.get(u'trim')(var.get(u'attr').get(u'value')))
                                var.put(u'ngAttrName', var.get(u'directiveNormalize')(var.get(u'name')))
                                if var.put(u'isNgAttr', var.get(u'NG_ATTR_BINDING').callprop(u'test', var.get(u'ngAttrName'))):
                                    @Js
                                    def PyJs_anonymous_291_(match, letter, this, arguments, var=var):
                                        var = Scope({u'this':this, u'letter':letter, u'match':match, u'arguments':arguments}, var)
                                        var.registers([u'letter', u'match'])
                                        return var.get(u'letter').callprop(u'toUpperCase')
                                    PyJs_anonymous_291_._set_name(u'anonymous')
                                    var.put(u'name', var.get(u'name').callprop(u'replace', var.get(u'PREFIX_REGEXP'), Js(u'')).callprop(u'substr', Js(8.0)).callprop(u'replace', JsRegExp(u'/_(.)/g'), PyJs_anonymous_291_))
                                var.put(u'multiElementMatch', var.get(u'ngAttrName').callprop(u'match', var.get(u'MULTI_ELEMENT_DIR_RE')))
                                if (var.get(u'multiElementMatch') and var.get(u'directiveIsMultiElement')(var.get(u'multiElementMatch').get(u'1'))):
                                    var.put(u'attrStartName', var.get(u'name'))
                                    var.put(u'attrEndName', (var.get(u'name').callprop(u'substr', Js(0.0), (var.get(u'name').get(u'length')-Js(5.0)))+Js(u'end')))
                                    var.put(u'name', var.get(u'name').callprop(u'substr', Js(0.0), (var.get(u'name').get(u'length')-Js(6.0))))
                                var.put(u'nName', var.get(u'directiveNormalize')(var.get(u'name').callprop(u'toLowerCase')))
                                var.get(u'attrsMap').put(var.get(u'nName'), var.get(u'name'))
                                if (var.get(u'isNgAttr') or var.get(u'attrs').callprop(u'hasOwnProperty', var.get(u'nName')).neg()):
                                    var.get(u'attrs').put(var.get(u'nName'), var.get(u'value'))
                                    if var.get(u'getBooleanAttrName')(var.get(u'node'), var.get(u'nName')):
                                        var.get(u'attrs').put(var.get(u'nName'), var.get(u'true'))
                                var.get(u'addAttrInterpolateDirective')(var.get(u'node'), var.get(u'directives'), var.get(u'value'), var.get(u'nName'), var.get(u'isNgAttr'))
                                var.get(u'addDirective')(var.get(u'directives'), var.get(u'nName'), Js(u'A'), var.get(u'maxPriority'), var.get(u'ignoreDirective'), var.get(u'attrStartName'), var.get(u'attrEndName'))
                            finally:
                                    (var.put(u'j',var.get(u'j')+Js(1))-Js(1))
                        var.put(u'className', var.get(u'node').get(u'className'))
                        if var.get(u'isObject')(var.get(u'className')):
                            var.put(u'className', var.get(u'className').get(u'animVal'))
                        if (var.get(u'isString')(var.get(u'className')) and PyJsStrictNeq(var.get(u'className'),Js(u''))):
                            while var.put(u'match', var.get(u'CLASS_DIRECTIVE_REGEXP').callprop(u'exec', var.get(u'className'))):
                                var.put(u'nName', var.get(u'directiveNormalize')(var.get(u'match').get(u'2')))
                                if var.get(u'addDirective')(var.get(u'directives'), var.get(u'nName'), Js(u'C'), var.get(u'maxPriority'), var.get(u'ignoreDirective')):
                                    var.get(u'attrs').put(var.get(u'nName'), var.get(u'trim')(var.get(u'match').get(u'3')))
                                var.put(u'className', var.get(u'className').callprop(u'substr', (var.get(u'match').get(u'index')+var.get(u'match').get(u'0').get(u'length'))))
                        break
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'NODE_TYPE_TEXT')):
                        SWITCHED = True
                        if PyJsStrictEq(var.get(u'msie'),Js(11.0)):
                            while ((var.get(u'node').get(u'parentNode') and var.get(u'node').get(u'nextSibling')) and PyJsStrictEq(var.get(u'node').get(u'nextSibling').get(u'nodeType'),var.get(u'NODE_TYPE_TEXT'))):
                                var.get(u'node').put(u'nodeValue', (var.get(u'node').get(u'nodeValue')+var.get(u'node').get(u'nextSibling').get(u'nodeValue')))
                                var.get(u'node').get(u'parentNode').callprop(u'removeChild', var.get(u'node').get(u'nextSibling'))
                        var.get(u'addTextInterpolateDirective')(var.get(u'directives'), var.get(u'node').get(u'nodeValue'))
                        break
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'NODE_TYPE_COMMENT')):
                        SWITCHED = True
                        try:
                            var.put(u'match', var.get(u'COMMENT_DIRECTIVE_REGEXP').callprop(u'exec', var.get(u'node').get(u'nodeValue')))
                            if var.get(u'match'):
                                var.put(u'nName', var.get(u'directiveNormalize')(var.get(u'match').get(u'1')))
                                if var.get(u'addDirective')(var.get(u'directives'), var.get(u'nName'), Js(u'M'), var.get(u'maxPriority'), var.get(u'ignoreDirective')):
                                    var.get(u'attrs').put(var.get(u'nName'), var.get(u'trim')(var.get(u'match').get(u'2')))
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65_80955189 = var.own.get(u'e')
                            var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                            try:
                                pass
                            finally:
                                if PyJsHolder_65_80955189 is not None:
                                    var.own[u'e'] = PyJsHolder_65_80955189
                                else:
                                    del var.own[u'e']
                                del PyJsHolder_65_80955189
                        break
                    SWITCHED = True
                    break
                var.get(u'directives').callprop(u'sort', var.get(u'byPriority'))
                return var.get(u'directives')
            PyJsHoisted_collectDirectives_.func_name = u'collectDirectives'
            var.put(u'collectDirectives', PyJsHoisted_collectDirectives_)
            @Js
            def PyJsHoisted_safeAddClass_(PyJsArg_24656c656d656e74_, className, this, arguments, var=var):
                var = Scope({u'className':className, u'this':this, u'$element':PyJsArg_24656c656d656e74_, u'arguments':arguments}, var)
                var.registers([u'className', u'$element'])
                try:
                    var.get(u'$element').callprop(u'addClass', var.get(u'className'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_46638088 = var.own.get(u'e')
                    var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                    try:
                        pass
                    finally:
                        if PyJsHolder_65_46638088 is not None:
                            var.own[u'e'] = PyJsHolder_65_46638088
                        else:
                            del var.own[u'e']
                        del PyJsHolder_65_46638088
            PyJsHoisted_safeAddClass_.func_name = u'safeAddClass'
            var.put(u'safeAddClass', PyJsHoisted_safeAddClass_)
            @Js
            def PyJsHoisted_directiveIsMultiElement_(name, this, arguments, var=var):
                var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
                var.registers([u'i', u'ii', u'directives', u'name', u'directive'])
                if var.get(u'hasDirectives').callprop(u'hasOwnProperty', var.get(u'name')):
                    #for JS loop
                    var.put(u'directives', var.get(u'$injector').callprop(u'get', (var.get(u'name')+var.get(u'Suffix'))))
                    var.put(u'i', Js(0.0))
                    var.put(u'ii', var.get(u'directives').get(u'length'))
                    while (var.get(u'i')<var.get(u'ii')):
                        try:
                            var.put(u'directive', var.get(u'directives').get(var.get(u'i')))
                            if var.get(u'directive').get(u'multiElement'):
                                return var.get(u'true')
                        finally:
                                (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                return Js(False)
            PyJsHoisted_directiveIsMultiElement_.func_name = u'directiveIsMultiElement'
            var.put(u'directiveIsMultiElement', PyJsHoisted_directiveIsMultiElement_)
            @Js
            def PyJsHoisted_replaceWith_(PyJsArg_24726f6f74456c656d656e74_, elementsToRemove, newNode, this, arguments, var=var):
                var = Scope({u'$rootElement':PyJsArg_24726f6f74456c656d656e74_, u'elementsToRemove':elementsToRemove, u'this':this, u'arguments':arguments, u'newNode':newNode}, var)
                var.registers([u'$rootElement', u'jj', u'parent', u'i', u'firstElementToRemove', u'k', u'j', u'j2', u'element', u'ii', u'fragment', u'kk', u'removeCount', u'newNode', u'elementsToRemove'])
                var.put(u'firstElementToRemove', var.get(u'elementsToRemove').get(u'0'))
                var.put(u'removeCount', var.get(u'elementsToRemove').get(u'length'))
                var.put(u'parent', var.get(u'firstElementToRemove').get(u'parentNode'))
                if var.get(u'$rootElement'):
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'ii', var.get(u'$rootElement').get(u'length')))
                    while (var.get(u'i')<var.get(u'ii')):
                        try:
                            if (var.get(u'$rootElement').get(var.get(u'i'))==var.get(u'firstElementToRemove')):
                                var.get(u'$rootElement').put((var.put(u'i',var.get(u'i')+Js(1))-Js(1)), var.get(u'newNode'))
                                #for JS loop
                                var.put(u'j', var.get(u'i'))
                                var.put(u'j2', ((var.get(u'j')+var.get(u'removeCount'))-Js(1.0)))
                                var.put(u'jj', var.get(u'$rootElement').get(u'length'))
                                while (var.get(u'j')<var.get(u'jj')):
                                    try:
                                        if (var.get(u'j2')<var.get(u'jj')):
                                            var.get(u'$rootElement').put(var.get(u'j'), var.get(u'$rootElement').get(var.get(u'j2')))
                                        else:
                                            var.get(u'$rootElement').delete(var.get(u'j'))
                                    finally:
                                            PyJsComma((var.put(u'j',var.get(u'j')+Js(1))-Js(1)),(var.put(u'j2',var.get(u'j2')+Js(1))-Js(1)))
                                var.get(u'$rootElement').put(u'length', (var.get(u'removeCount')-Js(1.0)), u'-')
                                if PyJsStrictEq(var.get(u'$rootElement').get(u'context'),var.get(u'firstElementToRemove')):
                                    var.get(u'$rootElement').put(u'context', var.get(u'newNode'))
                                break
                        finally:
                                (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                if var.get(u'parent'):
                    var.get(u'parent').callprop(u'replaceChild', var.get(u'newNode'), var.get(u'firstElementToRemove'))
                var.put(u'fragment', var.get(u'document').callprop(u'createDocumentFragment'))
                var.get(u'fragment').callprop(u'appendChild', var.get(u'firstElementToRemove'))
                if var.get(u'jqLite').callprop(u'hasData', var.get(u'firstElementToRemove')):
                    var.get(u'jqLite').callprop(u'data', var.get(u'newNode'), var.get(u'jqLite').callprop(u'data', var.get(u'firstElementToRemove')))
                    if var.get(u'jQuery').neg():
                        var.get(u'jqLite').get(u'cache').delete(var.get(u'firstElementToRemove').get(var.get(u'jqLite').get(u'expando')))
                    else:
                        var.put(u'skipDestroyOnNextJQueryCleanData', var.get(u'true'))
                        var.get(u'jQuery').callprop(u'cleanData', Js([var.get(u'firstElementToRemove')]))
                #for JS loop
                var.put(u'k', Js(1.0))
                var.put(u'kk', var.get(u'elementsToRemove').get(u'length'))
                while (var.get(u'k')<var.get(u'kk')):
                    try:
                        var.put(u'element', var.get(u'elementsToRemove').get(var.get(u'k')))
                        var.get(u'jqLite')(var.get(u'element')).callprop(u'remove')
                        var.get(u'fragment').callprop(u'appendChild', var.get(u'element'))
                        var.get(u'elementsToRemove').delete(var.get(u'k'))
                    finally:
                            (var.put(u'k',var.get(u'k')+Js(1))-Js(1))
                var.get(u'elementsToRemove').put(u'0', var.get(u'newNode'))
                var.get(u'elementsToRemove').put(u'length', Js(1.0))
            PyJsHoisted_replaceWith_.func_name = u'replaceWith'
            var.put(u'replaceWith', PyJsHoisted_replaceWith_)
            @Js
            def PyJsHoisted_groupScan_(node, attrStart, attrEnd, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'attrStart':attrStart, u'arguments':arguments, u'attrEnd':attrEnd}, var)
                var.registers([u'node', u'attrStart', u'nodes', u'depth', u'attrEnd'])
                var.put(u'nodes', Js([]))
                var.put(u'depth', Js(0.0))
                if ((var.get(u'attrStart') and var.get(u'node').get(u'hasAttribute')) and var.get(u'node').callprop(u'hasAttribute', var.get(u'attrStart'))):
                    while 1:
                        if var.get(u'node').neg():
                            PyJsTempException = JsToPyException(var.get(u'$compileMinErr')(Js(u'uterdir'), Js(u"Unterminated attribute, found '{0}' but no matching '{1}' found."), var.get(u'attrStart'), var.get(u'attrEnd')))
                            raise PyJsTempException
                        if (var.get(u'node').get(u'nodeType')==var.get(u'NODE_TYPE_ELEMENT')):
                            if var.get(u'node').callprop(u'hasAttribute', var.get(u'attrStart')):
                                (var.put(u'depth',var.get(u'depth')+Js(1))-Js(1))
                            if var.get(u'node').callprop(u'hasAttribute', var.get(u'attrEnd')):
                                (var.put(u'depth',var.get(u'depth')-Js(1))+Js(1))
                        var.get(u'nodes').callprop(u'push', var.get(u'node'))
                        var.put(u'node', var.get(u'node').get(u'nextSibling'))
                        if not (var.get(u'depth')>Js(0.0)):
                            break
                else:
                    var.get(u'nodes').callprop(u'push', var.get(u'node'))
                return var.get(u'jqLite')(var.get(u'nodes'))
            PyJsHoisted_groupScan_.func_name = u'groupScan'
            var.put(u'groupScan', PyJsHoisted_groupScan_)
            @Js
            def PyJsHoisted_wrapTemplate_(type, template, this, arguments, var=var):
                var = Scope({u'this':this, u'type':type, u'arguments':arguments, u'template':template}, var)
                var.registers([u'type', u'template', u'wrapper'])
                var.put(u'type', var.get(u'lowercase')((var.get(u'type') or Js(u'html'))))
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get(u'type'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(u'svg')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(u'math')):
                        SWITCHED = True
                        var.put(u'wrapper', var.get(u'document').callprop(u'createElement', Js(u'div')))
                        var.get(u'wrapper').put(u'innerHTML', ((((((Js(u'<')+var.get(u'type'))+Js(u'>'))+var.get(u'template'))+Js(u'</'))+var.get(u'type'))+Js(u'>')))
                        return var.get(u'wrapper').get(u'childNodes').get(u'0').get(u'childNodes')
                    if True:
                        SWITCHED = True
                        return var.get(u'template')
                    SWITCHED = True
                    break
            PyJsHoisted_wrapTemplate_.func_name = u'wrapTemplate'
            var.put(u'wrapTemplate', PyJsHoisted_wrapTemplate_)
            @Js
            def PyJsHoisted_assertNoDuplicate_(what, previousDirective, directive, element, this, arguments, var=var):
                var = Scope({u'what':what, u'arguments':arguments, u'directive':directive, u'this':this, u'previousDirective':previousDirective, u'element':element}, var)
                var.registers([u'what', u'element', u'wrapModuleNameIfDefined', u'directive', u'previousDirective'])
                @Js
                def PyJsHoisted_wrapModuleNameIfDefined_(moduleName, this, arguments, var=var):
                    var = Scope({u'this':this, u'moduleName':moduleName, u'arguments':arguments}, var)
                    var.registers([u'moduleName'])
                    return (((Js(u' (module: ')+var.get(u'moduleName'))+Js(u')')) if var.get(u'moduleName') else Js(u''))
                PyJsHoisted_wrapModuleNameIfDefined_.func_name = u'wrapModuleNameIfDefined'
                var.put(u'wrapModuleNameIfDefined', PyJsHoisted_wrapModuleNameIfDefined_)
                pass
                if var.get(u'previousDirective'):
                    def PyJs_LONG_314_(var=var):
                        return var.get(u'$compileMinErr')(Js(u'multidir'), Js(u'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}'), var.get(u'previousDirective').get(u'name'), var.get(u'wrapModuleNameIfDefined')(var.get(u'previousDirective').get(u'$$moduleName')), var.get(u'directive').get(u'name'), var.get(u'wrapModuleNameIfDefined')(var.get(u'directive').get(u'$$moduleName')), var.get(u'what'), var.get(u'startingTag')(var.get(u'element')))
                    PyJsTempException = JsToPyException(PyJs_LONG_314_())
                    raise PyJsTempException
            PyJsHoisted_assertNoDuplicate_.func_name = u'assertNoDuplicate'
            var.put(u'assertNoDuplicate', PyJsHoisted_assertNoDuplicate_)
            @Js
            def PyJsHoisted_cloneAndAnnotateFn_(fn, annotation, this, arguments, var=var):
                var = Scope({u'this':this, u'annotation':annotation, u'fn':fn, u'arguments':arguments}, var)
                var.registers([u'annotation', u'fn'])
                @Js
                def PyJs_anonymous_324_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    return var.get(u'fn').callprop(u'apply', var.get(u"null"), var.get(u'arguments'))
                PyJs_anonymous_324_._set_name(u'anonymous')
                return var.get(u'extend')(PyJs_anonymous_324_, var.get(u'fn'), var.get(u'annotation'))
            PyJsHoisted_cloneAndAnnotateFn_.func_name = u'cloneAndAnnotateFn'
            var.put(u'cloneAndAnnotateFn', PyJsHoisted_cloneAndAnnotateFn_)
            @Js
            def PyJsHoisted_detectNamespaceForChildElements_(parentElement, this, arguments, var=var):
                var = Scope({u'this':this, u'parentElement':parentElement, u'arguments':arguments}, var)
                var.registers([u'node', u'parentElement'])
                var.put(u'node', (var.get(u'parentElement') and var.get(u'parentElement').get(u'0')))
                if var.get(u'node').neg():
                    return Js(u'html')
                else:
                    return (Js(u'svg') if (PyJsStrictNeq(var.get(u'nodeName_')(var.get(u'node')),Js(u'foreignobject')) and var.get(u'node').callprop(u'toString').callprop(u'match', JsRegExp(u'/SVG/'))) else Js(u'html'))
            PyJsHoisted_detectNamespaceForChildElements_.func_name = u'detectNamespaceForChildElements'
            var.put(u'detectNamespaceForChildElements', PyJsHoisted_detectNamespaceForChildElements_)
            @Js
            def PyJsHoisted_getTrustedContext_(node, attrNormalizedName, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'attrNormalizedName':attrNormalizedName, u'arguments':arguments}, var)
                var.registers([u'node', u'tag', u'attrNormalizedName'])
                if (var.get(u'attrNormalizedName')==Js(u'srcdoc')):
                    return var.get(u'$sce').get(u'HTML')
                var.put(u'tag', var.get(u'nodeName_')(var.get(u'node')))
                if (((var.get(u'attrNormalizedName')==Js(u'xlinkHref')) or ((var.get(u'tag')==Js(u'form')) and (var.get(u'attrNormalizedName')==Js(u'action')))) or ((var.get(u'tag')!=Js(u'img')) and ((var.get(u'attrNormalizedName')==Js(u'src')) or (var.get(u'attrNormalizedName')==Js(u'ngSrc'))))):
                    return var.get(u'$sce').get(u'RESOURCE_URL')
            PyJsHoisted_getTrustedContext_.func_name = u'getTrustedContext'
            var.put(u'getTrustedContext', PyJsHoisted_getTrustedContext_)
            @Js
            def PyJsHoisted_initializeDirectiveBindings_(scope, attrs, destination, bindings, directive, this, arguments, var=var):
                var = Scope({u'attrs':attrs, u'directive':directive, u'this':this, u'scope':scope, u'bindings':bindings, u'destination':destination, u'arguments':arguments}, var)
                var.registers([u'directive', u'destination', u'attrs', u'scope', u'bindings', u'removeWatchCollection'])
                var.put(u'removeWatchCollection', Js([]))
                @Js
                def PyJs_anonymous_325_(definition, scopeName, this, arguments, var=var):
                    var = Scope({u'this':this, u'definition':definition, u'scopeName':scopeName, u'arguments':arguments}, var)
                    var.registers([u'definition', u'lastValue', u'parentValueWatch', u'parentSet', u'scopeName', u'parentGet', u'compare', u'attrName', u'mode', u'removeWatch', u'optional'])
                    var.put(u'attrName', var.get(u'definition').get(u'attrName'))
                    var.put(u'optional', var.get(u'definition').get(u'optional'))
                    var.put(u'mode', var.get(u'definition').get(u'mode'))
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u'mode'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'@')):
                            SWITCHED = True
                            if (var.get(u'optional').neg() and var.get(u'hasOwnProperty').callprop(u'call', var.get(u'attrs'), var.get(u'attrName')).neg()):
                                var.get(u'destination').put(var.get(u'scopeName'), var.get(u'attrs').put(var.get(u'attrName'), PyJsComma(Js(0.0), Js(None))))
                            @Js
                            def PyJs_anonymous_326_(value, this, arguments, var=var):
                                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                                var.registers([u'value'])
                                if var.get(u'isString')(var.get(u'value')):
                                    var.get(u'destination').put(var.get(u'scopeName'), var.get(u'value'))
                            PyJs_anonymous_326_._set_name(u'anonymous')
                            var.get(u'attrs').callprop(u'$observe', var.get(u'attrName'), PyJs_anonymous_326_)
                            var.get(u'attrs').get(u'$$observers').get(var.get(u'attrName')).put(u'$$scope', var.get(u'scope'))
                            if var.get(u'isString')(var.get(u'attrs').get(var.get(u'attrName'))):
                                var.get(u'destination').put(var.get(u'scopeName'), var.get(u'$interpolate')(var.get(u'attrs').get(var.get(u'attrName')))(var.get(u'scope')))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'=')):
                            SWITCHED = True
                            if var.get(u'hasOwnProperty').callprop(u'call', var.get(u'attrs'), var.get(u'attrName')).neg():
                                if var.get(u'optional'):
                                    break
                                var.get(u'attrs').put(var.get(u'attrName'), PyJsComma(Js(0.0), Js(None)))
                            if (var.get(u'optional') and var.get(u'attrs').get(var.get(u'attrName')).neg()):
                                break
                            var.put(u'parentGet', var.get(u'$parse')(var.get(u'attrs').get(var.get(u'attrName'))))
                            if var.get(u'parentGet').get(u'literal'):
                                var.put(u'compare', var.get(u'equals'))
                            else:
                                @Js
                                def PyJs_anonymous_327_(a, b, this, arguments, var=var):
                                    var = Scope({u'a':a, u'this':this, u'b':b, u'arguments':arguments}, var)
                                    var.registers([u'a', u'b'])
                                    return (PyJsStrictEq(var.get(u'a'),var.get(u'b')) or (PyJsStrictNeq(var.get(u'a'),var.get(u'a')) and PyJsStrictNeq(var.get(u'b'),var.get(u'b'))))
                                PyJs_anonymous_327_._set_name(u'anonymous')
                                var.put(u'compare', PyJs_anonymous_327_)
                            @Js
                            def PyJs_anonymous_328_(this, arguments, var=var):
                                var = Scope({u'this':this, u'arguments':arguments}, var)
                                var.registers([])
                                var.put(u'lastValue', var.get(u'destination').put(var.get(u'scopeName'), var.get(u'parentGet')(var.get(u'scope'))))
                                PyJsTempException = JsToPyException(var.get(u'$compileMinErr')(Js(u'nonassign'), Js(u"Expression '{0}' used with directive '{1}' is non-assignable!"), var.get(u'attrs').get(var.get(u'attrName')), var.get(u'directive').get(u'name')))
                                raise PyJsTempException
                            PyJs_anonymous_328_._set_name(u'anonymous')
                            var.put(u'parentSet', (var.get(u'parentGet').get(u'assign') or PyJs_anonymous_328_))
                            var.put(u'lastValue', var.get(u'destination').put(var.get(u'scopeName'), var.get(u'parentGet')(var.get(u'scope'))))
                            @Js
                            def PyJs_parentValueWatch_329_(parentValue, this, arguments, var=var):
                                var = Scope({u'parentValue':parentValue, u'this':this, u'parentValueWatch':PyJs_parentValueWatch_329_, u'arguments':arguments}, var)
                                var.registers([u'parentValue'])
                                if var.get(u'compare')(var.get(u'parentValue'), var.get(u'destination').get(var.get(u'scopeName'))).neg():
                                    if var.get(u'compare')(var.get(u'parentValue'), var.get(u'lastValue')).neg():
                                        var.get(u'destination').put(var.get(u'scopeName'), var.get(u'parentValue'))
                                    else:
                                        var.get(u'parentSet')(var.get(u'scope'), var.put(u'parentValue', var.get(u'destination').get(var.get(u'scopeName'))))
                                return var.put(u'lastValue', var.get(u'parentValue'))
                            PyJs_parentValueWatch_329_._set_name(u'parentValueWatch')
                            var.put(u'parentValueWatch', PyJs_parentValueWatch_329_)
                            var.get(u'parentValueWatch').put(u'$stateful', var.get(u'true'))
                            pass
                            if var.get(u'definition').get(u'collection'):
                                var.put(u'removeWatch', var.get(u'scope').callprop(u'$watchCollection', var.get(u'attrs').get(var.get(u'attrName')), var.get(u'parentValueWatch')))
                            else:
                                var.put(u'removeWatch', var.get(u'scope').callprop(u'$watch', var.get(u'$parse')(var.get(u'attrs').get(var.get(u'attrName')), var.get(u'parentValueWatch')), var.get(u"null"), var.get(u'parentGet').get(u'literal')))
                            var.get(u'removeWatchCollection').callprop(u'push', var.get(u'removeWatch'))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'&')):
                            SWITCHED = True
                            var.put(u'parentGet', (var.get(u'$parse')(var.get(u'attrs').get(var.get(u'attrName'))) if var.get(u'attrs').callprop(u'hasOwnProperty', var.get(u'attrName')) else var.get(u'noop')))
                            if (PyJsStrictEq(var.get(u'parentGet'),var.get(u'noop')) and var.get(u'optional')):
                                break
                            @Js
                            def PyJs_anonymous_330_(locals, this, arguments, var=var):
                                var = Scope({u'this':this, u'arguments':arguments, u'locals':locals}, var)
                                var.registers([u'locals'])
                                return var.get(u'parentGet')(var.get(u'scope'), var.get(u'locals'))
                            PyJs_anonymous_330_._set_name(u'anonymous')
                            var.get(u'destination').put(var.get(u'scopeName'), PyJs_anonymous_330_)
                            break
                        SWITCHED = True
                        break
                PyJs_anonymous_325_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'bindings'), PyJs_anonymous_325_)
                @Js
                def PyJs_removeWatches_331_(this, arguments, var=var):
                    var = Scope({u'this':this, u'removeWatches':PyJs_removeWatches_331_, u'arguments':arguments}, var)
                    var.registers([u'i', u'ii'])
                    #for JS loop
                    var.put(u'i', Js(0.0))
                    var.put(u'ii', var.get(u'removeWatchCollection').get(u'length'))
                    while (var.get(u'i')<var.get(u'ii')):
                        try:
                            var.get(u'removeWatchCollection').callprop(var.get(u'i'))
                        finally:
                                var.put(u'i',var.get(u'i')+Js(1))
                PyJs_removeWatches_331_._set_name(u'removeWatches')
                return (var.get(u'removeWatchCollection').get(u'length') and PyJs_removeWatches_331_)
            PyJsHoisted_initializeDirectiveBindings_.func_name = u'initializeDirectiveBindings'
            var.put(u'initializeDirectiveBindings', PyJsHoisted_initializeDirectiveBindings_)
            @Js
            def PyJsHoisted_compile_(PyJsArg_24636f6d70696c654e6f646573_, transcludeFn, maxPriority, ignoreDirective, previousCompileContext, this, arguments, var=var):
                var = Scope({u'ignoreDirective':ignoreDirective, u'previousCompileContext':previousCompileContext, u'this':this, u'arguments':arguments, u'$compileNodes':PyJsArg_24636f6d70696c654e6f646573_, u'maxPriority':maxPriority, u'transcludeFn':transcludeFn}, var)
                var.registers([u'compositeLinkFn', u'previousCompileContext', u'namespace', u'maxPriority', u'$compileNodes', u'ignoreDirective', u'transcludeFn'])
                if var.get(u'$compileNodes').instanceof(var.get(u'jqLite')).neg():
                    var.put(u'$compileNodes', var.get(u'jqLite')(var.get(u'$compileNodes')))
                @Js
                def PyJs_anonymous_285_(node, index, this, arguments, var=var):
                    var = Scope({u'node':node, u'index':index, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'index'])
                    if ((var.get(u'node').get(u'nodeType')==var.get(u'NODE_TYPE_TEXT')) and var.get(u'node').get(u'nodeValue').callprop(u'match', JsRegExp(u'/\\S+/'))):
                        var.get(u'$compileNodes').put(var.get(u'index'), var.get(u'jqLite')(var.get(u'node')).callprop(u'wrap', Js(u'<span></span>')).callprop(u'parent').get(u'0'))
                PyJs_anonymous_285_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'$compileNodes'), PyJs_anonymous_285_)
                var.put(u'compositeLinkFn', var.get(u'compileNodes')(var.get(u'$compileNodes'), var.get(u'transcludeFn'), var.get(u'$compileNodes'), var.get(u'maxPriority'), var.get(u'ignoreDirective'), var.get(u'previousCompileContext')))
                var.get(u'compile').callprop(u'$$addScopeClass', var.get(u'$compileNodes'))
                var.put(u'namespace', var.get(u"null"))
                @Js
                def PyJs_publicLinkFn_286_(scope, cloneConnectFn, options, this, arguments, var=var):
                    var = Scope({u'cloneConnectFn':cloneConnectFn, u'this':this, u'publicLinkFn':PyJs_publicLinkFn_286_, u'arguments':arguments, u'scope':scope, u'options':options}, var)
                    var.registers([u'$linkNode', u'cloneConnectFn', u'parentBoundTranscludeFn', u'futureParentElement', u'transcludeControllers', u'controllerName', u'scope', u'options'])
                    var.get(u'assertArg')(var.get(u'scope'), Js(u'scope'))
                    if (var.get(u'previousCompileContext') and var.get(u'previousCompileContext').get(u'needsNewScope')):
                        var.put(u'scope', var.get(u'scope').get(u'$parent').callprop(u'$new'))
                    PyJs_Object_287_ = Js({})
                    var.put(u'options', (var.get(u'options') or PyJs_Object_287_))
                    var.put(u'parentBoundTranscludeFn', var.get(u'options').get(u'parentBoundTranscludeFn'))
                    var.put(u'transcludeControllers', var.get(u'options').get(u'transcludeControllers'))
                    var.put(u'futureParentElement', var.get(u'options').get(u'futureParentElement'))
                    if (var.get(u'parentBoundTranscludeFn') and var.get(u'parentBoundTranscludeFn').get(u'$$boundTransclude')):
                        var.put(u'parentBoundTranscludeFn', var.get(u'parentBoundTranscludeFn').get(u'$$boundTransclude'))
                    if var.get(u'namespace').neg():
                        var.put(u'namespace', var.get(u'detectNamespaceForChildElements')(var.get(u'futureParentElement')))
                    pass
                    if PyJsStrictNeq(var.get(u'namespace'),Js(u'html')):
                        var.put(u'$linkNode', var.get(u'jqLite')(var.get(u'wrapTemplate')(var.get(u'namespace'), var.get(u'jqLite')(Js(u'<div>')).callprop(u'append', var.get(u'$compileNodes')).callprop(u'html'))))
                    else:
                        if var.get(u'cloneConnectFn'):
                            var.put(u'$linkNode', var.get(u'JQLitePrototype').get(u'clone').callprop(u'call', var.get(u'$compileNodes')))
                        else:
                            var.put(u'$linkNode', var.get(u'$compileNodes'))
                    if var.get(u'transcludeControllers'):
                        for PyJsTemp in var.get(u'transcludeControllers'):
                            var.put(u'controllerName', PyJsTemp)
                            var.get(u'$linkNode').callprop(u'data', ((Js(u'$')+var.get(u'controllerName'))+Js(u'Controller')), var.get(u'transcludeControllers').get(var.get(u'controllerName')).get(u'instance'))
                    var.get(u'compile').callprop(u'$$addScopeInfo', var.get(u'$linkNode'), var.get(u'scope'))
                    if var.get(u'cloneConnectFn'):
                        var.get(u'cloneConnectFn')(var.get(u'$linkNode'), var.get(u'scope'))
                    if var.get(u'compositeLinkFn'):
                        var.get(u'compositeLinkFn')(var.get(u'scope'), var.get(u'$linkNode'), var.get(u'$linkNode'), var.get(u'parentBoundTranscludeFn'))
                    return var.get(u'$linkNode')
                PyJs_publicLinkFn_286_._set_name(u'publicLinkFn')
                return PyJs_publicLinkFn_286_
            PyJsHoisted_compile_.func_name = u'compile'
            var.put(u'compile', PyJsHoisted_compile_)
            @Js
            def PyJsHoisted_byPriority_(a, b, this, arguments, var=var):
                var = Scope({u'a':a, u'this':this, u'b':b, u'arguments':arguments}, var)
                var.registers([u'a', u'diff', u'b'])
                var.put(u'diff', (var.get(u'b').get(u'priority')-var.get(u'a').get(u'priority')))
                if PyJsStrictNeq(var.get(u'diff'),Js(0.0)):
                    return var.get(u'diff')
                if PyJsStrictNeq(var.get(u'a').get(u'name'),var.get(u'b').get(u'name')):
                    return ((-Js(1.0)) if (var.get(u'a').get(u'name')<var.get(u'b').get(u'name')) else Js(1.0))
                return (var.get(u'a').get(u'index')-var.get(u'b').get(u'index'))
            PyJsHoisted_byPriority_.func_name = u'byPriority'
            var.put(u'byPriority', PyJsHoisted_byPriority_)
            @Js
            def PyJsHoisted_compileNodes_(nodeList, transcludeFn, PyJsArg_24726f6f74456c656d656e74_, maxPriority, ignoreDirective, previousCompileContext, this, arguments, var=var):
                var = Scope({u'$rootElement':PyJsArg_24726f6f74456c656d656e74_, u'nodeList':nodeList, u'previousCompileContext':previousCompileContext, u'this':this, u'maxPriority':maxPriority, u'ignoreDirective':ignoreDirective, u'transcludeFn':transcludeFn, u'arguments':arguments}, var)
                var.registers([u'$rootElement', u'compositeLinkFn', u'linkFnFound', u'nodeList', u'previousCompileContext', u'i', u'nodeLinkFn', u'maxPriority', u'linkFns', u'ignoreDirective', u'nodeLinkFnFound', u'directives', u'attrs', u'childNodes', u'childLinkFn', u'transcludeFn'])
                @Js
                def PyJsHoisted_compositeLinkFn_(scope, nodeList, PyJsArg_24726f6f74456c656d656e74_, parentBoundTranscludeFn, this, arguments, var=var):
                    var = Scope({u'$rootElement':PyJsArg_24726f6f74456c656d656e74_, u'nodeList':nodeList, u'arguments':arguments, u'parentBoundTranscludeFn':parentBoundTranscludeFn, u'this':this, u'scope':scope}, var)
                    var.registers([u'node', u'$rootElement', u'nodeList', u'parentBoundTranscludeFn', u'idx', u'stableNodeList', u'i', u'nodeLinkFn', u'childBoundTranscludeFn', u'ii', u'nodeListLength', u'scope', u'childScope', u'childLinkFn'])
                    pass
                    pass
                    if var.get(u'nodeLinkFnFound'):
                        var.put(u'nodeListLength', var.get(u'nodeList').get(u'length'))
                        var.put(u'stableNodeList', var.get(u'Array').create(var.get(u'nodeListLength')))
                        #for JS loop
                        var.put(u'i', Js(0.0))
                        while (var.get(u'i')<var.get(u'linkFns').get(u'length')):
                            try:
                                var.put(u'idx', var.get(u'linkFns').get(var.get(u'i')))
                                var.get(u'stableNodeList').put(var.get(u'idx'), var.get(u'nodeList').get(var.get(u'idx')))
                            finally:
                                    var.put(u'i', Js(3.0), u'+')
                    else:
                        var.put(u'stableNodeList', var.get(u'nodeList'))
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'ii', var.get(u'linkFns').get(u'length')))
                    while (var.get(u'i')<var.get(u'ii')):
                        var.put(u'node', var.get(u'stableNodeList').get(var.get(u'linkFns').get((var.put(u'i',var.get(u'i')+Js(1))-Js(1)))))
                        var.put(u'nodeLinkFn', var.get(u'linkFns').get((var.put(u'i',var.get(u'i')+Js(1))-Js(1))))
                        var.put(u'childLinkFn', var.get(u'linkFns').get((var.put(u'i',var.get(u'i')+Js(1))-Js(1))))
                        if var.get(u'nodeLinkFn'):
                            if var.get(u'nodeLinkFn').get(u'scope'):
                                var.put(u'childScope', var.get(u'scope').callprop(u'$new'))
                                var.get(u'compile').callprop(u'$$addScopeInfo', var.get(u'jqLite')(var.get(u'node')), var.get(u'childScope'))
                            else:
                                var.put(u'childScope', var.get(u'scope'))
                            if var.get(u'nodeLinkFn').get(u'transcludeOnThisElement'):
                                var.put(u'childBoundTranscludeFn', var.get(u'createBoundTranscludeFn')(var.get(u'scope'), var.get(u'nodeLinkFn').get(u'transclude'), var.get(u'parentBoundTranscludeFn')))
                            else:
                                if (var.get(u'nodeLinkFn').get(u'templateOnThisElement').neg() and var.get(u'parentBoundTranscludeFn')):
                                    var.put(u'childBoundTranscludeFn', var.get(u'parentBoundTranscludeFn'))
                                else:
                                    if (var.get(u'parentBoundTranscludeFn').neg() and var.get(u'transcludeFn')):
                                        var.put(u'childBoundTranscludeFn', var.get(u'createBoundTranscludeFn')(var.get(u'scope'), var.get(u'transcludeFn')))
                                    else:
                                        var.put(u'childBoundTranscludeFn', var.get(u"null"))
                            var.get(u'nodeLinkFn')(var.get(u'childLinkFn'), var.get(u'childScope'), var.get(u'node'), var.get(u'$rootElement'), var.get(u'childBoundTranscludeFn'))
                        else:
                            if var.get(u'childLinkFn'):
                                var.get(u'childLinkFn')(var.get(u'scope'), var.get(u'node').get(u'childNodes'), var.get(u'undefined'), var.get(u'parentBoundTranscludeFn'))
                    
                PyJsHoisted_compositeLinkFn_.func_name = u'compositeLinkFn'
                var.put(u'compositeLinkFn', PyJsHoisted_compositeLinkFn_)
                var.put(u'linkFns', Js([]))
                #for JS loop
                var.put(u'i', Js(0.0))
                while (var.get(u'i')<var.get(u'nodeList').get(u'length')):
                    try:
                        var.put(u'attrs', var.get(u'Attributes').create())
                        var.put(u'directives', var.get(u'collectDirectives')(var.get(u'nodeList').get(var.get(u'i')), Js([]), var.get(u'attrs'), (var.get(u'maxPriority') if PyJsStrictEq(var.get(u'i'),Js(0.0)) else var.get(u'undefined')), var.get(u'ignoreDirective')))
                        var.put(u'nodeLinkFn', (var.get(u'applyDirectivesToNode')(var.get(u'directives'), var.get(u'nodeList').get(var.get(u'i')), var.get(u'attrs'), var.get(u'transcludeFn'), var.get(u'$rootElement'), var.get(u"null"), Js([]), Js([]), var.get(u'previousCompileContext')) if var.get(u'directives').get(u'length') else var.get(u"null")))
                        if (var.get(u'nodeLinkFn') and var.get(u'nodeLinkFn').get(u'scope')):
                            var.get(u'compile').callprop(u'$$addScopeClass', var.get(u'attrs').get(u'$$element'))
                        def PyJs_LONG_288_(var=var):
                            return (var.get(u"null") if (((var.get(u'nodeLinkFn') and var.get(u'nodeLinkFn').get(u'terminal')) or var.put(u'childNodes', var.get(u'nodeList').get(var.get(u'i')).get(u'childNodes')).neg()) or var.get(u'childNodes').get(u'length').neg()) else var.get(u'compileNodes')(var.get(u'childNodes'), (((var.get(u'nodeLinkFn').get(u'transcludeOnThisElement') or var.get(u'nodeLinkFn').get(u'templateOnThisElement').neg()) and var.get(u'nodeLinkFn').get(u'transclude')) if var.get(u'nodeLinkFn') else var.get(u'transcludeFn'))))
                        var.put(u'childLinkFn', PyJs_LONG_288_())
                        if (var.get(u'nodeLinkFn') or var.get(u'childLinkFn')):
                            var.get(u'linkFns').callprop(u'push', var.get(u'i'), var.get(u'nodeLinkFn'), var.get(u'childLinkFn'))
                            var.put(u'linkFnFound', var.get(u'true'))
                            var.put(u'nodeLinkFnFound', (var.get(u'nodeLinkFnFound') or var.get(u'nodeLinkFn')))
                        var.put(u'previousCompileContext', var.get(u"null"))
                    finally:
                            (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                return (var.get(u'compositeLinkFn') if var.get(u'linkFnFound') else var.get(u"null"))
                pass
            PyJsHoisted_compileNodes_.func_name = u'compileNodes'
            var.put(u'compileNodes', PyJsHoisted_compileNodes_)
            @Js
            def PyJsHoisted_addAttrInterpolateDirective_(node, directives, value, name, allOrNothing, this, arguments, var=var):
                var = Scope({u'node':node, u'directives':directives, u'name':name, u'this':this, u'arguments':arguments, u'value':value, u'allOrNothing':allOrNothing}, var)
                var.registers([u'node', u'name', u'value', u'interpolateFn', u'directives', u'allOrNothing', u'trustedContext'])
                var.put(u'trustedContext', var.get(u'getTrustedContext')(var.get(u'node'), var.get(u'name')))
                var.put(u'allOrNothing', (var.get(u'ALL_OR_NOTHING_ATTRS').get(var.get(u'name')) or var.get(u'allOrNothing')))
                var.put(u'interpolateFn', var.get(u'$interpolate')(var.get(u'value'), var.get(u'true'), var.get(u'trustedContext'), var.get(u'allOrNothing')))
                if var.get(u'interpolateFn').neg():
                    return var.get('undefined')
                if (PyJsStrictEq(var.get(u'name'),Js(u'multiple')) and PyJsStrictEq(var.get(u'nodeName_')(var.get(u'node')),Js(u'select'))):
                    PyJsTempException = JsToPyException(var.get(u'$compileMinErr')(Js(u'selmulti'), Js(u"Binding to the 'multiple' attribute is not supported. Element: {0}"), var.get(u'startingTag')(var.get(u'node'))))
                    raise PyJsTempException
                @Js
                def PyJs_anonymous_320_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    @Js
                    def PyJs_attrInterpolatePreLinkFn_322_(scope, element, attr, this, arguments, var=var):
                        var = Scope({u'attr':attr, u'this':this, u'attrInterpolatePreLinkFn':PyJs_attrInterpolatePreLinkFn_322_, u'element':element, u'arguments':arguments, u'scope':scope}, var)
                        var.registers([u'attr', u'scope', u'$$observers', u'newValue', u'element'])
                        var.put(u'$$observers', (var.get(u'attr').get(u'$$observers') or var.get(u'attr').put(u'$$observers', var.get(u'createMap')())))
                        if var.get(u'EVENT_HANDLER_ATTR_REGEXP').callprop(u'test', var.get(u'name')):
                            PyJsTempException = JsToPyException(var.get(u'$compileMinErr')(Js(u'nodomevents'), (Js(u'Interpolations for HTML DOM event attributes are disallowed.  Please use the ')+Js(u'ng- versions (such as ng-click instead of onclick) instead.'))))
                            raise PyJsTempException
                        var.put(u'newValue', var.get(u'attr').get(var.get(u'name')))
                        if PyJsStrictNeq(var.get(u'newValue'),var.get(u'value')):
                            var.put(u'interpolateFn', (var.get(u'newValue') and var.get(u'$interpolate')(var.get(u'newValue'), var.get(u'true'), var.get(u'trustedContext'), var.get(u'allOrNothing'))))
                            var.put(u'value', var.get(u'newValue'))
                        if var.get(u'interpolateFn').neg():
                            return var.get('undefined')
                        var.get(u'attr').put(var.get(u'name'), var.get(u'interpolateFn')(var.get(u'scope')))
                        (var.get(u'$$observers').get(var.get(u'name')) or var.get(u'$$observers').put(var.get(u'name'), Js([]))).put(u'$$inter', var.get(u'true'))
                        @Js
                        def PyJs_interpolateFnWatchAction_323_(newValue, oldValue, this, arguments, var=var):
                            var = Scope({u'this':this, u'interpolateFnWatchAction':PyJs_interpolateFnWatchAction_323_, u'newValue':newValue, u'oldValue':oldValue, u'arguments':arguments}, var)
                            var.registers([u'newValue', u'oldValue'])
                            if (PyJsStrictEq(var.get(u'name'),Js(u'class')) and (var.get(u'newValue')!=var.get(u'oldValue'))):
                                var.get(u'attr').callprop(u'$updateClass', var.get(u'newValue'), var.get(u'oldValue'))
                            else:
                                var.get(u'attr').callprop(u'$set', var.get(u'name'), var.get(u'newValue'))
                        PyJs_interpolateFnWatchAction_323_._set_name(u'interpolateFnWatchAction')
                        ((var.get(u'attr').get(u'$$observers') and var.get(u'attr').get(u'$$observers').get(var.get(u'name')).get(u'$$scope')) or var.get(u'scope')).callprop(u'$watch', var.get(u'interpolateFn'), PyJs_interpolateFnWatchAction_323_)
                    PyJs_attrInterpolatePreLinkFn_322_._set_name(u'attrInterpolatePreLinkFn')
                    PyJs_Object_321_ = Js({u'pre':PyJs_attrInterpolatePreLinkFn_322_})
                    return PyJs_Object_321_
                PyJs_anonymous_320_._set_name(u'anonymous')
                PyJs_Object_319_ = Js({u'priority':Js(100.0),u'compile':PyJs_anonymous_320_})
                var.get(u'directives').callprop(u'push', PyJs_Object_319_)
            PyJsHoisted_addAttrInterpolateDirective_.func_name = u'addAttrInterpolateDirective'
            var.put(u'addAttrInterpolateDirective', PyJsHoisted_addAttrInterpolateDirective_)
            @Js
            def PyJs_anonymous_269_(element, attributesToCopy, this, arguments, var=var):
                var = Scope({u'this':this, u'attributesToCopy':attributesToCopy, u'arguments':arguments, u'element':element}, var)
                var.registers([u'keys', u'l', u'element', u'i', u'key', u'attributesToCopy'])
                if var.get(u'attributesToCopy'):
                    var.put(u'keys', var.get(u'Object').callprop(u'keys', var.get(u'attributesToCopy')))
                    pass
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'l', var.get(u'keys').get(u'length')))
                    while (var.get(u'i')<var.get(u'l')):
                        try:
                            var.put(u'key', var.get(u'keys').get(var.get(u'i')))
                            var.get(u"this").put(var.get(u'key'), var.get(u'attributesToCopy').get(var.get(u'key')))
                        finally:
                                (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                else:
                    PyJs_Object_270_ = Js({})
                    var.get(u"this").put(u'$attr', PyJs_Object_270_)
                var.get(u"this").put(u'$$element', var.get(u'element'))
            PyJs_anonymous_269_._set_name(u'anonymous')
            var.put(u'Attributes', PyJs_anonymous_269_)
            @Js
            def PyJs_anonymous_272_(classVal, this, arguments, var=var):
                var = Scope({u'this':this, u'classVal':classVal, u'arguments':arguments}, var)
                var.registers([u'classVal'])
                if (var.get(u'classVal') and (var.get(u'classVal').get(u'length')>Js(0.0))):
                    var.get(u'$animate').callprop(u'addClass', var.get(u"this").get(u'$$element'), var.get(u'classVal'))
            PyJs_anonymous_272_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_273_(classVal, this, arguments, var=var):
                var = Scope({u'this':this, u'classVal':classVal, u'arguments':arguments}, var)
                var.registers([u'classVal'])
                if (var.get(u'classVal') and (var.get(u'classVal').get(u'length')>Js(0.0))):
                    var.get(u'$animate').callprop(u'removeClass', var.get(u"this").get(u'$$element'), var.get(u'classVal'))
            PyJs_anonymous_273_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_274_(newClasses, oldClasses, this, arguments, var=var):
                var = Scope({u'newClasses':newClasses, u'this':this, u'arguments':arguments, u'oldClasses':oldClasses}, var)
                var.registers([u'newClasses', u'toRemove', u'toAdd', u'oldClasses'])
                var.put(u'toAdd', var.get(u'tokenDifference')(var.get(u'newClasses'), var.get(u'oldClasses')))
                if (var.get(u'toAdd') and var.get(u'toAdd').get(u'length')):
                    var.get(u'$animate').callprop(u'addClass', var.get(u"this").get(u'$$element'), var.get(u'toAdd'))
                var.put(u'toRemove', var.get(u'tokenDifference')(var.get(u'oldClasses'), var.get(u'newClasses')))
                if (var.get(u'toRemove') and var.get(u'toRemove').get(u'length')):
                    var.get(u'$animate').callprop(u'removeClass', var.get(u"this").get(u'$$element'), var.get(u'toRemove'))
            PyJs_anonymous_274_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_275_(key, value, writeAttr, attrName, this, arguments, var=var):
                var = Scope({u'attrName':attrName, u'writeAttr':writeAttr, u'arguments':arguments, u'key':key, u'this':this, u'value':value}, var)
                var.registers([u'node', u'writeAttr', u'nodeName', u'observer', u'i', u'pattern', u'$$observers', u'lastTuple', u'trimmedSrcset', u'value', u'key', u'srcPattern', u'booleanKey', u'result', u'aliasedKey', u'attrName', u'rawUris', u'innerIdx', u'nbrUrisWith2parts'])
                var.put(u'node', var.get(u"this").get(u'$$element').get(u'0'))
                var.put(u'booleanKey', var.get(u'getBooleanAttrName')(var.get(u'node'), var.get(u'key')))
                var.put(u'aliasedKey', var.get(u'getAliasedAttrName')(var.get(u'key')))
                var.put(u'observer', var.get(u'key'))
                if var.get(u'booleanKey'):
                    var.get(u"this").get(u'$$element').callprop(u'prop', var.get(u'key'), var.get(u'value'))
                    var.put(u'attrName', var.get(u'booleanKey'))
                else:
                    if var.get(u'aliasedKey'):
                        var.get(u"this").put(var.get(u'aliasedKey'), var.get(u'value'))
                        var.put(u'observer', var.get(u'aliasedKey'))
                var.get(u"this").put(var.get(u'key'), var.get(u'value'))
                if var.get(u'attrName'):
                    var.get(u"this").get(u'$attr').put(var.get(u'key'), var.get(u'attrName'))
                else:
                    var.put(u'attrName', var.get(u"this").get(u'$attr').get(var.get(u'key')))
                    if var.get(u'attrName').neg():
                        var.get(u"this").get(u'$attr').put(var.get(u'key'), var.put(u'attrName', var.get(u'snake_case')(var.get(u'key'), Js(u'-'))))
                var.put(u'nodeName', var.get(u'nodeName_')(var.get(u"this").get(u'$$element')))
                if ((PyJsStrictEq(var.get(u'nodeName'),Js(u'a')) and PyJsStrictEq(var.get(u'key'),Js(u'href'))) or (PyJsStrictEq(var.get(u'nodeName'),Js(u'img')) and PyJsStrictEq(var.get(u'key'),Js(u'src')))):
                    var.get(u"this").put(var.get(u'key'), var.put(u'value', var.get(u'$$sanitizeUri')(var.get(u'value'), PyJsStrictEq(var.get(u'key'),Js(u'src')))))
                else:
                    if (PyJsStrictEq(var.get(u'nodeName'),Js(u'img')) and PyJsStrictEq(var.get(u'key'),Js(u'srcset'))):
                        var.put(u'result', Js(u''))
                        var.put(u'trimmedSrcset', var.get(u'trim')(var.get(u'value')))
                        var.put(u'srcPattern', JsRegExp(u'/(\\s+\\d+x\\s*,|\\s+\\d+w\\s*,|\\s+,|,\\s+)/'))
                        var.put(u'pattern', (var.get(u'srcPattern') if JsRegExp(u'/\\s/').callprop(u'test', var.get(u'trimmedSrcset')) else JsRegExp(u'/(,)/')))
                        var.put(u'rawUris', var.get(u'trimmedSrcset').callprop(u'split', var.get(u'pattern')))
                        var.put(u'nbrUrisWith2parts', var.get(u'Math').callprop(u'floor', (var.get(u'rawUris').get(u'length')/Js(2.0))))
                        #for JS loop
                        var.put(u'i', Js(0.0))
                        while (var.get(u'i')<var.get(u'nbrUrisWith2parts')):
                            try:
                                var.put(u'innerIdx', (var.get(u'i')*Js(2.0)))
                                var.put(u'result', var.get(u'$$sanitizeUri')(var.get(u'trim')(var.get(u'rawUris').get(var.get(u'innerIdx'))), var.get(u'true')), u'+')
                                var.put(u'result', (Js(u' ')+var.get(u'trim')(var.get(u'rawUris').get((var.get(u'innerIdx')+Js(1.0))))), u'+')
                            finally:
                                    (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                        var.put(u'lastTuple', var.get(u'trim')(var.get(u'rawUris').get((var.get(u'i')*Js(2.0)))).callprop(u'split', JsRegExp(u'/\\s/')))
                        var.put(u'result', var.get(u'$$sanitizeUri')(var.get(u'trim')(var.get(u'lastTuple').get(u'0')), var.get(u'true')), u'+')
                        if PyJsStrictEq(var.get(u'lastTuple').get(u'length'),Js(2.0)):
                            var.put(u'result', (Js(u' ')+var.get(u'trim')(var.get(u'lastTuple').get(u'1'))), u'+')
                        var.get(u"this").put(var.get(u'key'), var.put(u'value', var.get(u'result')))
                if PyJsStrictNeq(var.get(u'writeAttr'),Js(False)):
                    if (PyJsStrictEq(var.get(u'value'),var.get(u"null")) or var.get(u'isUndefined')(var.get(u'value'))):
                        var.get(u"this").get(u'$$element').callprop(u'removeAttr', var.get(u'attrName'))
                    else:
                        var.get(u"this").get(u'$$element').callprop(u'attr', var.get(u'attrName'), var.get(u'value'))
                var.put(u'$$observers', var.get(u"this").get(u'$$observers'))
                @Js
                def PyJs_anonymous_276_(fn, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'fn':fn}, var)
                    var.registers([u'fn'])
                    try:
                        var.get(u'fn')(var.get(u'value'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_87348675 = var.own.get(u'e')
                        var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                        try:
                            var.get(u'$exceptionHandler')(var.get(u'e'))
                        finally:
                            if PyJsHolder_65_87348675 is not None:
                                var.own[u'e'] = PyJsHolder_65_87348675
                            else:
                                del var.own[u'e']
                            del PyJsHolder_65_87348675
                PyJs_anonymous_276_._set_name(u'anonymous')
                (var.get(u'$$observers') and var.get(u'forEach')(var.get(u'$$observers').get(var.get(u'observer')), PyJs_anonymous_276_))
            PyJs_anonymous_275_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_277_(key, fn, this, arguments, var=var):
                var = Scope({u'this':this, u'fn':fn, u'key':key, u'arguments':arguments}, var)
                var.registers([u'listeners', u'$$observers', u'attrs', u'key', u'fn'])
                var.put(u'attrs', var.get(u"this"))
                var.put(u'$$observers', (var.get(u'attrs').get(u'$$observers') or var.get(u'attrs').put(u'$$observers', var.get(u'createMap')())))
                var.put(u'listeners', (var.get(u'$$observers').get(var.get(u'key')) or var.get(u'$$observers').put(var.get(u'key'), Js([]))))
                var.get(u'listeners').callprop(u'push', var.get(u'fn'))
                @Js
                def PyJs_anonymous_278_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    if ((var.get(u'listeners').get(u'$$inter').neg() and var.get(u'attrs').callprop(u'hasOwnProperty', var.get(u'key'))) and var.get(u'isUndefined')(var.get(u'attrs').get(var.get(u'key'))).neg()):
                        var.get(u'fn')(var.get(u'attrs').get(var.get(u'key')))
                PyJs_anonymous_278_._set_name(u'anonymous')
                var.get(u'$rootScope').callprop(u'$evalAsync', PyJs_anonymous_278_)
                @Js
                def PyJs_anonymous_279_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'arrayRemove')(var.get(u'listeners'), var.get(u'fn'))
                PyJs_anonymous_279_._set_name(u'anonymous')
                return PyJs_anonymous_279_
            PyJs_anonymous_277_._set_name(u'anonymous')
            PyJs_Object_271_ = Js({u'$normalize':var.get(u'directiveNormalize'),u'$addClass':PyJs_anonymous_272_,u'$removeClass':PyJs_anonymous_273_,u'$updateClass':PyJs_anonymous_274_,u'$set':PyJs_anonymous_275_,u'$observe':PyJs_anonymous_277_})
            var.get(u'Attributes').put(u'prototype', PyJs_Object_271_)
            pass
            var.put(u'startSymbol', var.get(u'$interpolate').callprop(u'startSymbol'))
            var.put(u'endSymbol', var.get(u'$interpolate').callprop(u'endSymbol'))
            @Js
            def PyJs_denormalizeTemplate_280_(template, this, arguments, var=var):
                var = Scope({u'this':this, u'denormalizeTemplate':PyJs_denormalizeTemplate_280_, u'arguments':arguments, u'template':template}, var)
                var.registers([u'template'])
                return var.get(u'template').callprop(u'replace', JsRegExp(u'/\\{\\{/g'), var.get(u'startSymbol')).callprop(u'replace', JsRegExp(u'/}}/g'), var.get(u'endSymbol'))
            PyJs_denormalizeTemplate_280_._set_name(u'denormalizeTemplate')
            var.put(u'denormalizeTemplate', (var.get(u'identity') if ((var.get(u'startSymbol')==Js(u'{{')) or (var.get(u'endSymbol')==Js(u'}}'))) else PyJs_denormalizeTemplate_280_))
            var.put(u'NG_ATTR_BINDING', JsRegExp(u'/^ngAttr[A-Z]/'))
            var.put(u'MULTI_ELEMENT_DIR_RE', JsRegExp(u'/^(.+)Start$/'))
            @Js
            def PyJs_InlineNonPyName_281_(PyJsArg_24656c656d656e74_, binding, this, arguments, var=var):
                var = Scope({u'this':this, u'binding':binding, u'$$addBindingInfo':PyJs_InlineNonPyName_281_, u'$element':PyJsArg_24656c656d656e74_, u'arguments':arguments}, var)
                var.registers([u'binding', u'bindings', u'$element'])
                var.put(u'bindings', (var.get(u'$element').callprop(u'data', Js(u'$binding')) or Js([])))
                if var.get(u'isArray')(var.get(u'binding')):
                    var.put(u'bindings', var.get(u'bindings').callprop(u'concat', var.get(u'binding')))
                else:
                    var.get(u'bindings').callprop(u'push', var.get(u'binding'))
                var.get(u'$element').callprop(u'data', Js(u'$binding'), var.get(u'bindings'))
            PyJs_InlineNonPyName_281_._set_name(u'$$addBindingInfo')
            var.get(u'compile').put(u'$$addBindingInfo', (PyJs_InlineNonPyName_281_ if var.get(u'debugInfoEnabled') else var.get(u'noop')))
            @Js
            def PyJs_InlineNonPyName_282_(PyJsArg_24656c656d656e74_, this, arguments, var=var):
                var = Scope({u'this':this, u'$element':PyJsArg_24656c656d656e74_, u'arguments':arguments, u'$$addBindingClass':PyJs_InlineNonPyName_282_}, var)
                var.registers([u'$element'])
                var.get(u'safeAddClass')(var.get(u'$element'), Js(u'ng-binding'))
            PyJs_InlineNonPyName_282_._set_name(u'$$addBindingClass')
            var.get(u'compile').put(u'$$addBindingClass', (PyJs_InlineNonPyName_282_ if var.get(u'debugInfoEnabled') else var.get(u'noop')))
            @Js
            def PyJs_InlineNonPyName_283_(PyJsArg_24656c656d656e74_, scope, isolated, noTemplate, this, arguments, var=var):
                var = Scope({u'$$addScopeInfo':PyJs_InlineNonPyName_283_, u'$element':PyJsArg_24656c656d656e74_, u'noTemplate':noTemplate, u'this':this, u'scope':scope, u'isolated':isolated, u'arguments':arguments}, var)
                var.registers([u'dataName', u'noTemplate', u'$element', u'isolated', u'scope'])
                var.put(u'dataName', ((Js(u'$isolateScopeNoTemplate') if var.get(u'noTemplate') else Js(u'$isolateScope')) if var.get(u'isolated') else Js(u'$scope')))
                var.get(u'$element').callprop(u'data', var.get(u'dataName'), var.get(u'scope'))
            PyJs_InlineNonPyName_283_._set_name(u'$$addScopeInfo')
            var.get(u'compile').put(u'$$addScopeInfo', (PyJs_InlineNonPyName_283_ if var.get(u'debugInfoEnabled') else var.get(u'noop')))
            @Js
            def PyJs_InlineNonPyName_284_(PyJsArg_24656c656d656e74_, isolated, this, arguments, var=var):
                var = Scope({u'this':this, u'$element':PyJsArg_24656c656d656e74_, u'isolated':isolated, u'$$addScopeClass':PyJs_InlineNonPyName_284_, u'arguments':arguments}, var)
                var.registers([u'$element', u'isolated'])
                var.get(u'safeAddClass')(var.get(u'$element'), (Js(u'ng-isolate-scope') if var.get(u'isolated') else Js(u'ng-scope')))
            PyJs_InlineNonPyName_284_._set_name(u'$$addScopeClass')
            var.get(u'compile').put(u'$$addScopeClass', (PyJs_InlineNonPyName_284_ if var.get(u'debugInfoEnabled') else var.get(u'noop')))
            return var.get(u'compile')
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
        PyJs_anonymous_268_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$injector'), Js(u'$interpolate'), Js(u'$exceptionHandler'), Js(u'$templateRequest'), Js(u'$parse'), Js(u'$controller'), Js(u'$rootScope'), Js(u'$document'), Js(u'$sce'), Js(u'$animate'), Js(u'$$sanitizeUri'), PyJs_anonymous_268_]))
    PyJsHoistedNonPyName.func_name = u'$CompileProvider'
    var.put(u'$CompileProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_toKeyValue_(obj, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
        var.registers([u'parts', u'obj'])
        var.put(u'parts', Js([]))
        @Js
        def PyJs_anonymous_27_(value, key, this, arguments, var=var):
            var = Scope({u'this':this, u'key':key, u'value':value, u'arguments':arguments}, var)
            var.registers([u'key', u'value'])
            if var.get(u'isArray')(var.get(u'value')):
                @Js
                def PyJs_anonymous_28_(arrayValue, this, arguments, var=var):
                    var = Scope({u'this':this, u'arrayValue':arrayValue, u'arguments':arguments}, var)
                    var.registers([u'arrayValue'])
                    var.get(u'parts').callprop(u'push', (var.get(u'encodeUriQuery')(var.get(u'key'), var.get(u'true'))+(Js(u'') if PyJsStrictEq(var.get(u'arrayValue'),var.get(u'true')) else (Js(u'=')+var.get(u'encodeUriQuery')(var.get(u'arrayValue'), var.get(u'true'))))))
                PyJs_anonymous_28_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'value'), PyJs_anonymous_28_)
            else:
                var.get(u'parts').callprop(u'push', (var.get(u'encodeUriQuery')(var.get(u'key'), var.get(u'true'))+(Js(u'') if PyJsStrictEq(var.get(u'value'),var.get(u'true')) else (Js(u'=')+var.get(u'encodeUriQuery')(var.get(u'value'), var.get(u'true'))))))
        PyJs_anonymous_27_._set_name(u'anonymous')
        var.get(u'forEach')(var.get(u'obj'), PyJs_anonymous_27_)
        return (var.get(u'parts').callprop(u'join', Js(u'&')) if var.get(u'parts').get(u'length') else Js(u''))
    PyJsHoisted_toKeyValue_.func_name = u'toKeyValue'
    var.put(u'toKeyValue', PyJsHoisted_toKeyValue_)
    @Js
    def PyJsHoisted_toInt_(str, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'str':str}, var)
        var.registers([u'str'])
        return var.get(u'parseInt')(var.get(u'str'), Js(10.0))
    PyJsHoisted_toInt_.func_name = u'toInt'
    var.put(u'toInt', PyJsHoisted_toInt_)
    @Js
    def PyJsHoisted_isWindow_(obj, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
        var.registers([u'obj'])
        return (var.get(u'obj') and PyJsStrictEq(var.get(u'obj').get(u'window'),var.get(u'obj')))
    PyJsHoisted_isWindow_.func_name = u'isWindow'
    var.put(u'isWindow', PyJsHoisted_isWindow_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_744_(PyJsArg_2462726f77736572_, PyJsArg_24657863657074696f6e48616e646c6572_, this, arguments, var=var):
            var = Scope({u'$exceptionHandler':PyJsArg_24657863657074696f6e48616e646c6572_, u'this':this, u'$browser':PyJsArg_2462726f77736572_, u'arguments':arguments}, var)
            var.registers([u'$exceptionHandler', u'$browser'])
            @Js
            def PyJs_anonymous_745_(callback, this, arguments, var=var):
                var = Scope({u'this':this, u'callback':callback, u'arguments':arguments}, var)
                var.registers([u'callback'])
                var.get(u'$browser').callprop(u'defer', var.get(u'callback'))
            PyJs_anonymous_745_._set_name(u'anonymous')
            return var.get(u'qFactory')(PyJs_anonymous_745_, var.get(u'$exceptionHandler'))
        PyJs_anonymous_744_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$browser'), Js(u'$exceptionHandler'), PyJs_anonymous_744_]))
    PyJsHoistedNonPyName.func_name = u'$$QProvider'
    var.put(u'$$QProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_numberInputType_(scope, element, attr, ctrl, PyJsArg_24736e6966666572_, PyJsArg_2462726f77736572_, this, arguments, var=var):
        var = Scope({u'$sniffer':PyJsArg_24736e6966666572_, u'attr':attr, u'ctrl':ctrl, u'this':this, u'element':element, u'$browser':PyJsArg_2462726f77736572_, u'arguments':arguments, u'scope':scope}, var)
        var.registers([u'maxVal', u'attr', u'ctrl', u'minVal', u'element', u'$browser', u'scope', u'$sniffer'])
        var.get(u'badInputChecker')(var.get(u'scope'), var.get(u'element'), var.get(u'attr'), var.get(u'ctrl'))
        var.get(u'baseInputType')(var.get(u'scope'), var.get(u'element'), var.get(u'attr'), var.get(u'ctrl'), var.get(u'$sniffer'), var.get(u'$browser'))
        var.get(u'ctrl').put(u'$$parserName', Js(u'number'))
        @Js
        def PyJs_anonymous_987_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            if var.get(u'ctrl').callprop(u'$isEmpty', var.get(u'value')):
                return var.get(u"null")
            if var.get(u'NUMBER_REGEXP').callprop(u'test', var.get(u'value')):
                return var.get(u'parseFloat')(var.get(u'value'))
            return var.get(u'undefined')
        PyJs_anonymous_987_._set_name(u'anonymous')
        var.get(u'ctrl').get(u'$parsers').callprop(u'push', PyJs_anonymous_987_)
        @Js
        def PyJs_anonymous_988_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            if var.get(u'ctrl').callprop(u'$isEmpty', var.get(u'value')).neg():
                if var.get(u'isNumber')(var.get(u'value')).neg():
                    PyJsTempException = JsToPyException(var.get(u'ngModelMinErr')(Js(u'numfmt'), Js(u'Expected `{0}` to be a number'), var.get(u'value')))
                    raise PyJsTempException
                var.put(u'value', var.get(u'value').callprop(u'toString'))
            return var.get(u'value')
        PyJs_anonymous_988_._set_name(u'anonymous')
        var.get(u'ctrl').get(u'$formatters').callprop(u'push', PyJs_anonymous_988_)
        if (var.get(u'isDefined')(var.get(u'attr').get(u'min')) or var.get(u'attr').get(u'ngMin')):
            pass
            @Js
            def PyJs_anonymous_989_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                return ((var.get(u'ctrl').callprop(u'$isEmpty', var.get(u'value')) or var.get(u'isUndefined')(var.get(u'minVal'))) or (var.get(u'value')>=var.get(u'minVal')))
            PyJs_anonymous_989_._set_name(u'anonymous')
            var.get(u'ctrl').get(u'$validators').put(u'min', PyJs_anonymous_989_)
            @Js
            def PyJs_anonymous_990_(val, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'val':val}, var)
                var.registers([u'val'])
                if (var.get(u'isDefined')(var.get(u'val')) and var.get(u'isNumber')(var.get(u'val')).neg()):
                    var.put(u'val', var.get(u'parseFloat')(var.get(u'val'), Js(10.0)))
                var.put(u'minVal', (var.get(u'val') if (var.get(u'isNumber')(var.get(u'val')) and var.get(u'isNaN')(var.get(u'val')).neg()) else var.get(u'undefined')))
                var.get(u'ctrl').callprop(u'$validate')
            PyJs_anonymous_990_._set_name(u'anonymous')
            var.get(u'attr').callprop(u'$observe', Js(u'min'), PyJs_anonymous_990_)
        if (var.get(u'isDefined')(var.get(u'attr').get(u'max')) or var.get(u'attr').get(u'ngMax')):
            pass
            @Js
            def PyJs_anonymous_991_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                return ((var.get(u'ctrl').callprop(u'$isEmpty', var.get(u'value')) or var.get(u'isUndefined')(var.get(u'maxVal'))) or (var.get(u'value')<=var.get(u'maxVal')))
            PyJs_anonymous_991_._set_name(u'anonymous')
            var.get(u'ctrl').get(u'$validators').put(u'max', PyJs_anonymous_991_)
            @Js
            def PyJs_anonymous_992_(val, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'val':val}, var)
                var.registers([u'val'])
                if (var.get(u'isDefined')(var.get(u'val')) and var.get(u'isNumber')(var.get(u'val')).neg()):
                    var.put(u'val', var.get(u'parseFloat')(var.get(u'val'), Js(10.0)))
                var.put(u'maxVal', (var.get(u'val') if (var.get(u'isNumber')(var.get(u'val')) and var.get(u'isNaN')(var.get(u'val')).neg()) else var.get(u'undefined')))
                var.get(u'ctrl').callprop(u'$validate')
            PyJs_anonymous_992_._set_name(u'anonymous')
            var.get(u'attr').callprop(u'$observe', Js(u'max'), PyJs_anonymous_992_)
    PyJsHoisted_numberInputType_.func_name = u'numberInputType'
    var.put(u'numberInputType', PyJsHoisted_numberInputType_)
    @Js
    def PyJsHoisted_camelCase_(name, this, arguments, var=var):
        var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
        var.registers([u'name'])
        @Js
        def PyJs_anonymous_69_(_, separator, letter, offset, this, arguments, var=var):
            var = Scope({u'separator':separator, u'arguments':arguments, u'letter':letter, u'offset':offset, u'this':this, u'_':_}, var)
            var.registers([u'separator', u'letter', u'_', u'offset'])
            return (var.get(u'letter').callprop(u'toUpperCase') if var.get(u'offset') else var.get(u'letter'))
        PyJs_anonymous_69_._set_name(u'anonymous')
        return var.get(u'name').callprop(u'replace', var.get(u'SPECIAL_CHARS_REGEXP'), PyJs_anonymous_69_).callprop(u'replace', var.get(u'MOZ_HACK_REGEXP'), Js(u'Moz$1'))
    PyJsHoisted_camelCase_.func_name = u'camelCase'
    var.put(u'camelCase', PyJsHoisted_camelCase_)
    @Js
    def PyJsHoisted_ensureSafeObject_(obj, fullExpression, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'arguments':arguments, u'fullExpression':fullExpression}, var)
        var.registers([u'obj', u'fullExpression'])
        if var.get(u'obj'):
            if PyJsStrictEq(var.get(u'obj').get(u'constructor'),var.get(u'obj')):
                PyJsTempException = JsToPyException(var.get(u'$parseMinErr')(Js(u'isecfn'), Js(u'Referencing Function in Angular expressions is disallowed! Expression: {0}'), var.get(u'fullExpression')))
                raise PyJsTempException
            else:
                if PyJsStrictEq(var.get(u'obj').get(u'window'),var.get(u'obj')):
                    PyJsTempException = JsToPyException(var.get(u'$parseMinErr')(Js(u'isecwindow'), Js(u'Referencing the Window in Angular expressions is disallowed! Expression: {0}'), var.get(u'fullExpression')))
                    raise PyJsTempException
                else:
                    if (var.get(u'obj').get(u'children') and (var.get(u'obj').get(u'nodeName') or ((var.get(u'obj').get(u'prop') and var.get(u'obj').get(u'attr')) and var.get(u'obj').get(u'find')))):
                        PyJsTempException = JsToPyException(var.get(u'$parseMinErr')(Js(u'isecdom'), Js(u'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}'), var.get(u'fullExpression')))
                        raise PyJsTempException
                    else:
                        if PyJsStrictEq(var.get(u'obj'),var.get(u'Object')):
                            PyJsTempException = JsToPyException(var.get(u'$parseMinErr')(Js(u'isecobj'), Js(u'Referencing Object in Angular expressions is disallowed! Expression: {0}'), var.get(u'fullExpression')))
                            raise PyJsTempException
        return var.get(u'obj')
    PyJsHoisted_ensureSafeObject_.func_name = u'ensureSafeObject'
    var.put(u'ensureSafeObject', PyJsHoisted_ensureSafeObject_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'aHrefSanitizationWhitelist', u'imgSrcSanitizationWhitelist'])
        var.put(u'aHrefSanitizationWhitelist', JsRegExp(u'/^\\s*(https?|ftp|mailto|tel|file):/'))
        var.put(u'imgSrcSanitizationWhitelist', JsRegExp(u'/^\\s*((https?|ftp|file|blob):|data:image\\/)/'))
        @Js
        def PyJs_anonymous_825_(regexp, this, arguments, var=var):
            var = Scope({u'this':this, u'regexp':regexp, u'arguments':arguments}, var)
            var.registers([u'regexp'])
            if var.get(u'isDefined')(var.get(u'regexp')):
                var.put(u'aHrefSanitizationWhitelist', var.get(u'regexp'))
                return var.get(u"this")
            return var.get(u'aHrefSanitizationWhitelist')
        PyJs_anonymous_825_._set_name(u'anonymous')
        var.get(u"this").put(u'aHrefSanitizationWhitelist', PyJs_anonymous_825_)
        @Js
        def PyJs_anonymous_826_(regexp, this, arguments, var=var):
            var = Scope({u'this':this, u'regexp':regexp, u'arguments':arguments}, var)
            var.registers([u'regexp'])
            if var.get(u'isDefined')(var.get(u'regexp')):
                var.put(u'imgSrcSanitizationWhitelist', var.get(u'regexp'))
                return var.get(u"this")
            return var.get(u'imgSrcSanitizationWhitelist')
        PyJs_anonymous_826_._set_name(u'anonymous')
        var.get(u"this").put(u'imgSrcSanitizationWhitelist', PyJs_anonymous_826_)
        @Js
        def PyJs_anonymous_827_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_sanitizeUri_828_(uri, isImage, this, arguments, var=var):
                var = Scope({u'isImage':isImage, u'this':this, u'uri':uri, u'sanitizeUri':PyJs_sanitizeUri_828_, u'arguments':arguments}, var)
                var.registers([u'regex', u'normalizedVal', u'uri', u'isImage'])
                var.put(u'regex', (var.get(u'imgSrcSanitizationWhitelist') if var.get(u'isImage') else var.get(u'aHrefSanitizationWhitelist')))
                pass
                var.put(u'normalizedVal', var.get(u'urlResolve')(var.get(u'uri')).get(u'href'))
                if (PyJsStrictNeq(var.get(u'normalizedVal'),Js(u'')) and var.get(u'normalizedVal').callprop(u'match', var.get(u'regex')).neg()):
                    return (Js(u'unsafe:')+var.get(u'normalizedVal'))
                return var.get(u'uri')
            PyJs_sanitizeUri_828_._set_name(u'sanitizeUri')
            return PyJs_sanitizeUri_828_
        PyJs_anonymous_827_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', PyJs_anonymous_827_)
    PyJsHoistedNonPyName.func_name = u'$$SanitizeUriProvider'
    var.put(u'$$SanitizeUriProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'controllers', u'globals'])
        PyJs_Object_332_ = Js({})
        var.put(u'controllers', PyJs_Object_332_)
        var.put(u'globals', Js(False))
        @Js
        def PyJs_anonymous_333_(name, constructor, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'constructor':constructor}, var)
            var.registers([u'name', u'constructor'])
            var.get(u'assertNotHasOwnProperty')(var.get(u'name'), Js(u'controller'))
            if var.get(u'isObject')(var.get(u'name')):
                var.get(u'extend')(var.get(u'controllers'), var.get(u'name'))
            else:
                var.get(u'controllers').put(var.get(u'name'), var.get(u'constructor'))
        PyJs_anonymous_333_._set_name(u'anonymous')
        var.get(u"this").put(u'register', PyJs_anonymous_333_)
        @Js
        def PyJs_anonymous_334_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.put(u'globals', var.get(u'true'))
        PyJs_anonymous_334_._set_name(u'anonymous')
        var.get(u"this").put(u'allowGlobals', PyJs_anonymous_334_)
        @Js
        def PyJs_anonymous_335_(PyJsArg_24696e6a6563746f72_, PyJsArg_2477696e646f77_, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'$injector':PyJsArg_24696e6a6563746f72_, u'$window':PyJsArg_2477696e646f77_}, var)
            var.registers([u'$window', u'addIdentifier', u'$injector'])
            @Js
            def PyJsHoisted_addIdentifier_(locals, identifier, instance, name, this, arguments, var=var):
                var = Scope({u'instance':instance, u'name':name, u'this':this, u'identifier':identifier, u'locals':locals, u'arguments':arguments}, var)
                var.registers([u'instance', u'identifier', u'name', u'locals'])
                if (var.get(u'locals') and var.get(u'isObject')(var.get(u'locals').get(u'$scope'))).neg():
                    PyJsTempException = JsToPyException(var.get(u'minErr')(Js(u'$controller'))(Js(u'noscp'), Js(u"Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`."), var.get(u'name'), var.get(u'identifier')))
                    raise PyJsTempException
                var.get(u'locals').get(u'$scope').put(var.get(u'identifier'), var.get(u'instance'))
            PyJsHoisted_addIdentifier_.func_name = u'addIdentifier'
            var.put(u'addIdentifier', PyJsHoisted_addIdentifier_)
            @Js
            def PyJs_anonymous_336_(expression, locals, later, ident, this, arguments, var=var):
                var = Scope({u'ident':ident, u'arguments':arguments, u'this':this, u'later':later, u'expression':expression, u'locals':locals}, var)
                var.registers([u'later', u'instantiate', u'instance', u'ident', u'locals', u'constructor', u'controllerPrototype', u'identifier', u'expression', u'match'])
                pass
                var.put(u'later', PyJsStrictEq(var.get(u'later'),var.get(u'true')))
                if (var.get(u'ident') and var.get(u'isString')(var.get(u'ident'))):
                    var.put(u'identifier', var.get(u'ident'))
                if var.get(u'isString')(var.get(u'expression')):
                    var.put(u'match', var.get(u'expression').callprop(u'match', var.get(u'CNTRL_REG')))
                    if var.get(u'match').neg():
                        PyJsTempException = JsToPyException(var.get(u'$controllerMinErr')(Js(u'ctrlfmt'), (Js(u"Badly formed controller string '{0}'. ")+Js(u'Must match `__name__ as __id__` or `__name__`.')), var.get(u'expression')))
                        raise PyJsTempException
                    PyJsComma(var.put(u'constructor', var.get(u'match').get(u'1')),var.put(u'identifier', (var.get(u'identifier') or var.get(u'match').get(u'3'))))
                    var.put(u'expression', (var.get(u'controllers').get(var.get(u'constructor')) if var.get(u'controllers').callprop(u'hasOwnProperty', var.get(u'constructor')) else (var.get(u'getter')(var.get(u'locals').get(u'$scope'), var.get(u'constructor'), var.get(u'true')) or (var.get(u'getter')(var.get(u'$window'), var.get(u'constructor'), var.get(u'true')) if var.get(u'globals') else var.get(u'undefined')))))
                    var.get(u'assertArgFn')(var.get(u'expression'), var.get(u'constructor'), var.get(u'true'))
                if var.get(u'later'):
                    var.put(u'controllerPrototype', (var.get(u'expression').get((var.get(u'expression').get(u'length')-Js(1.0))) if var.get(u'isArray')(var.get(u'expression')) else var.get(u'expression')).get(u'prototype'))
                    var.put(u'instance', var.get(u'Object').callprop(u'create', (var.get(u'controllerPrototype') or var.get(u"null"))))
                    if var.get(u'identifier'):
                        var.get(u'addIdentifier')(var.get(u'locals'), var.get(u'identifier'), var.get(u'instance'), (var.get(u'constructor') or var.get(u'expression').get(u'name')))
                    pass
                    @Js
                    def PyJs_anonymous_337_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([u'result'])
                        var.put(u'result', var.get(u'$injector').callprop(u'invoke', var.get(u'expression'), var.get(u'instance'), var.get(u'locals'), var.get(u'constructor')))
                        if (PyJsStrictNeq(var.get(u'result'),var.get(u'instance')) and (var.get(u'isObject')(var.get(u'result')) or var.get(u'isFunction')(var.get(u'result')))):
                            var.put(u'instance', var.get(u'result'))
                            if var.get(u'identifier'):
                                var.get(u'addIdentifier')(var.get(u'locals'), var.get(u'identifier'), var.get(u'instance'), (var.get(u'constructor') or var.get(u'expression').get(u'name')))
                        return var.get(u'instance')
                    PyJs_anonymous_337_._set_name(u'anonymous')
                    PyJs_Object_338_ = Js({u'instance':var.get(u'instance'),u'identifier':var.get(u'identifier')})
                    return var.put(u'instantiate', var.get(u'extend')(PyJs_anonymous_337_, PyJs_Object_338_))
                var.put(u'instance', var.get(u'$injector').callprop(u'instantiate', var.get(u'expression'), var.get(u'locals'), var.get(u'constructor')))
                if var.get(u'identifier'):
                    var.get(u'addIdentifier')(var.get(u'locals'), var.get(u'identifier'), var.get(u'instance'), (var.get(u'constructor') or var.get(u'expression').get(u'name')))
                return var.get(u'instance')
            PyJs_anonymous_336_._set_name(u'anonymous')
            return PyJs_anonymous_336_
            pass
        PyJs_anonymous_335_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$injector'), Js(u'$window'), PyJs_anonymous_335_]))
    PyJsHoistedNonPyName.func_name = u'$ControllerProvider'
    var.put(u'$ControllerProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_nodeName__(element, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'element'])
        return var.get(u'lowercase')((var.get(u'element').get(u'nodeName') or (var.get(u'element').get(u'0') and var.get(u'element').get(u'0').get(u'nodeName'))))
    PyJsHoisted_nodeName__.func_name = u'nodeName_'
    var.put(u'nodeName_', PyJsHoisted_nodeName__)
    @Js
    def PyJsHoisted_locationGetter_(property, this, arguments, var=var):
        var = Scope({u'this':this, u'property':property, u'arguments':arguments}, var)
        var.registers([u'property'])
        @Js
        def PyJs_anonymous_442_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            return var.get(u"this").get(var.get(u'property'))
        PyJs_anonymous_442_._set_name(u'anonymous')
        return PyJs_anonymous_442_
    PyJsHoisted_locationGetter_.func_name = u'locationGetter'
    var.put(u'locationGetter', PyJsHoisted_locationGetter_)
    @Js
    def PyJsHoisted_getBlockNodes_(nodes, this, arguments, var=var):
        var = Scope({u'this':this, u'nodes':nodes, u'arguments':arguments}, var)
        var.registers([u'node', u'endNode', u'nodes', u'blockNodes', u'i'])
        var.put(u'node', var.get(u'nodes').get(u'0'))
        var.put(u'endNode', var.get(u'nodes').get((var.get(u'nodes').get(u'length')-Js(1.0))))
        pass
        #for JS loop
        var.put(u'i', Js(1.0))
        while (PyJsStrictNeq(var.get(u'node'),var.get(u'endNode')) and var.put(u'node', var.get(u'node').get(u'nextSibling'))):
            try:
                if (var.get(u'blockNodes') or PyJsStrictNeq(var.get(u'nodes').get(var.get(u'i')),var.get(u'node'))):
                    if var.get(u'blockNodes').neg():
                        var.put(u'blockNodes', var.get(u'jqLite')(var.get(u'slice').callprop(u'call', var.get(u'nodes'), Js(0.0), var.get(u'i'))))
                    var.get(u'blockNodes').callprop(u'push', var.get(u'node'))
            finally:
                    (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
        return (var.get(u'blockNodes') or var.get(u'nodes'))
    PyJsHoisted_getBlockNodes_.func_name = u'getBlockNodes'
    var.put(u'getBlockNodes', PyJsHoisted_getBlockNodes_)
    @Js
    def PyJsHoisted_checkboxInputType_(scope, element, attr, ctrl, PyJsArg_24736e6966666572_, PyJsArg_2462726f77736572_, PyJsArg_2466696c746572_, PyJsArg_247061727365_, this, arguments, var=var):
        var = Scope({u'$sniffer':PyJsArg_24736e6966666572_, u'attr':attr, u'ctrl':ctrl, u'this':this, u'$filter':PyJsArg_2466696c746572_, u'element':element, u'$browser':PyJsArg_2462726f77736572_, u'arguments':arguments, u'scope':scope, u'$parse':PyJsArg_247061727365_}, var)
        var.registers([u'$sniffer', u'attr', u'ctrl', u'trueValue', u'$filter', u'element', u'listener', u'$browser', u'scope', u'falseValue', u'$parse'])
        var.put(u'trueValue', var.get(u'parseConstantExpr')(var.get(u'$parse'), var.get(u'scope'), Js(u'ngTrueValue'), var.get(u'attr').get(u'ngTrueValue'), var.get(u'true')))
        var.put(u'falseValue', var.get(u'parseConstantExpr')(var.get(u'$parse'), var.get(u'scope'), Js(u'ngFalseValue'), var.get(u'attr').get(u'ngFalseValue'), Js(False)))
        @Js
        def PyJs_anonymous_997_(ev, this, arguments, var=var):
            var = Scope({u'this':this, u'ev':ev, u'arguments':arguments}, var)
            var.registers([u'ev'])
            var.get(u'ctrl').callprop(u'$setViewValue', var.get(u'element').get(u'0').get(u'checked'), (var.get(u'ev') and var.get(u'ev').get(u'type')))
        PyJs_anonymous_997_._set_name(u'anonymous')
        var.put(u'listener', PyJs_anonymous_997_)
        var.get(u'element').callprop(u'on', Js(u'click'), var.get(u'listener'))
        @Js
        def PyJs_anonymous_998_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u'element').get(u'0').put(u'checked', var.get(u'ctrl').get(u'$viewValue'))
        PyJs_anonymous_998_._set_name(u'anonymous')
        var.get(u'ctrl').put(u'$render', PyJs_anonymous_998_)
        @Js
        def PyJs_anonymous_999_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            return PyJsStrictEq(var.get(u'value'),Js(False))
        PyJs_anonymous_999_._set_name(u'anonymous')
        var.get(u'ctrl').put(u'$isEmpty', PyJs_anonymous_999_)
        @Js
        def PyJs_anonymous_1000_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            return var.get(u'equals')(var.get(u'value'), var.get(u'trueValue'))
        PyJs_anonymous_1000_._set_name(u'anonymous')
        var.get(u'ctrl').get(u'$formatters').callprop(u'push', PyJs_anonymous_1000_)
        @Js
        def PyJs_anonymous_1001_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            return (var.get(u'trueValue') if var.get(u'value') else var.get(u'falseValue'))
        PyJs_anonymous_1001_._set_name(u'anonymous')
        var.get(u'ctrl').get(u'$parsers').callprop(u'push', PyJs_anonymous_1001_)
    PyJsHoisted_checkboxInputType_.func_name = u'checkboxInputType'
    var.put(u'checkboxInputType', PyJsHoisted_checkboxInputType_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        var.get(u"this").put(u'$get', var.get(u'$$CookieReader'))
    PyJsHoistedNonPyName.func_name = u'$$CookieReaderProvider'
    var.put(u'$$CookieReaderProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_padNumber_(num, digits, trim, this, arguments, var=var):
        var = Scope({u'digits':digits, u'trim':trim, u'num':num, u'this':this, u'arguments':arguments}, var)
        var.registers([u'digits', u'neg', u'trim', u'num'])
        var.put(u'neg', Js(u''))
        if (var.get(u'num')<Js(0.0)):
            var.put(u'neg', Js(u'-'))
            var.put(u'num', (-var.get(u'num')))
        var.put(u'num', (Js(u'')+var.get(u'num')))
        while (var.get(u'num').get(u'length')<var.get(u'digits')):
            var.put(u'num', (Js(u'0')+var.get(u'num')))
        if var.get(u'trim'):
            var.put(u'num', var.get(u'num').callprop(u'substr', (var.get(u'num').get(u'length')-var.get(u'digits'))))
        return (var.get(u'neg')+var.get(u'num'))
    PyJsHoisted_padNumber_.func_name = u'padNumber'
    var.put(u'padNumber', PyJsHoisted_padNumber_)
    @Js
    def PyJsHoisted_isFunction_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        return PyJsStrictEq(var.get(u'value',throw=False).typeof(),Js(u'function'))
    PyJsHoisted_isFunction_.func_name = u'isFunction'
    var.put(u'isFunction', PyJsHoisted_isFunction_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'useApplyAsync', u'interceptorFactories', u'defaults', u'useLegacyPromise'])
        @Js
        def PyJs_anonymous_362_(d, this, arguments, var=var):
            var = Scope({u'this':this, u'd':d, u'arguments':arguments}, var)
            var.registers([u'd'])
            return (var.get(u'toJson')(var.get(u'd')) if (((var.get(u'isObject')(var.get(u'd')) and var.get(u'isFile')(var.get(u'd')).neg()) and var.get(u'isBlob')(var.get(u'd')).neg()) and var.get(u'isFormData')(var.get(u'd')).neg()) else var.get(u'd'))
        PyJs_anonymous_362_._set_name(u'anonymous')
        PyJs_Object_364_ = Js({u'Accept':Js(u'application/json, text/plain, */*')})
        PyJs_Object_363_ = Js({u'common':PyJs_Object_364_,u'post':var.get(u'shallowCopy')(var.get(u'CONTENT_TYPE_APPLICATION_JSON')),u'put':var.get(u'shallowCopy')(var.get(u'CONTENT_TYPE_APPLICATION_JSON')),u'patch':var.get(u'shallowCopy')(var.get(u'CONTENT_TYPE_APPLICATION_JSON'))})
        PyJs_Object_361_ = Js({u'transformResponse':Js([var.get(u'defaultHttpResponseTransform')]),u'transformRequest':Js([PyJs_anonymous_362_]),u'headers':PyJs_Object_363_,u'xsrfCookieName':Js(u'XSRF-TOKEN'),u'xsrfHeaderName':Js(u'X-XSRF-TOKEN'),u'paramSerializer':Js(u'$httpParamSerializer')})
        var.put(u'defaults', var.get(u"this").put(u'defaults', PyJs_Object_361_))
        var.put(u'useApplyAsync', Js(False))
        @Js
        def PyJs_anonymous_365_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            if var.get(u'isDefined')(var.get(u'value')):
                var.put(u'useApplyAsync', var.get(u'value').neg().neg())
                return var.get(u"this")
            return var.get(u'useApplyAsync')
        PyJs_anonymous_365_._set_name(u'anonymous')
        var.get(u"this").put(u'useApplyAsync', PyJs_anonymous_365_)
        var.put(u'useLegacyPromise', var.get(u'true'))
        @Js
        def PyJs_anonymous_366_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            if var.get(u'isDefined')(var.get(u'value')):
                var.put(u'useLegacyPromise', var.get(u'value').neg().neg())
                return var.get(u"this")
            return var.get(u'useLegacyPromise')
        PyJs_anonymous_366_._set_name(u'anonymous')
        var.get(u"this").put(u'useLegacyPromiseExtensions', PyJs_anonymous_366_)
        var.put(u'interceptorFactories', var.get(u"this").put(u'interceptors', Js([])))
        @Js
        def PyJs_anonymous_367_(PyJsArg_24687474704261636b656e64_, PyJsArg_2424636f6f6b6965526561646572_, PyJsArg_246361636865466163746f7279_, PyJsArg_24726f6f7453636f7065_, PyJsArg_2471_, PyJsArg_24696e6a6563746f72_, this, arguments, var=var):
            var = Scope({u'$rootScope':PyJsArg_24726f6f7453636f7065_, u'$$cookieReader':PyJsArg_2424636f6f6b6965526561646572_, u'this':this, u'$cacheFactory':PyJsArg_246361636865466163746f7279_, u'$injector':PyJsArg_24696e6a6563746f72_, u'$httpBackend':PyJsArg_24687474704261636b656e64_, u'arguments':arguments, u'$q':PyJsArg_2471_}, var)
            var.registers([u'$http', u'createShortMethods', u'defaultCache', u'$$cookieReader', u'$rootScope', u'$injector', u'$httpBackend', u'buildUrl', u'sendReq', u'createShortMethodsWithData', u'$q', u'reversedInterceptors', u'$cacheFactory'])
            @Js
            def PyJsHoistedNonPyName(requestConfig, this, arguments, var=var):
                var = Scope({u'this':this, u'requestConfig':requestConfig, u'arguments':arguments}, var)
                var.registers([u'mergeHeaders', u'chain', u'transformResponse', u'requestConfig', u'serverRequest', u'thenFn', u'promise', u'executeHeaderFns', u'rejectFn', u'config'])
                @Js
                def PyJsHoisted_transformResponse_(response, this, arguments, var=var):
                    var = Scope({u'this':this, u'response':response, u'arguments':arguments}, var)
                    var.registers([u'resp', u'response'])
                    PyJs_Object_377_ = Js({})
                    var.put(u'resp', var.get(u'extend')(PyJs_Object_377_, var.get(u'response')))
                    var.get(u'resp').put(u'data', var.get(u'transformData')(var.get(u'response').get(u'data'), var.get(u'response').get(u'headers'), var.get(u'response').get(u'status'), var.get(u'config').get(u'transformResponse')))
                    return (var.get(u'resp') if var.get(u'isSuccess')(var.get(u'response').get(u'status')) else var.get(u'$q').callprop(u'reject', var.get(u'resp')))
                PyJsHoisted_transformResponse_.func_name = u'transformResponse'
                var.put(u'transformResponse', PyJsHoisted_transformResponse_)
                @Js
                def PyJsHoisted_executeHeaderFns_(headers, config, this, arguments, var=var):
                    var = Scope({u'this':this, u'headers':headers, u'config':config, u'arguments':arguments}, var)
                    var.registers([u'headers', u'processedHeaders', u'headerContent', u'config'])
                    PyJs_Object_378_ = Js({})
                    var.put(u'processedHeaders', PyJs_Object_378_)
                    @Js
                    def PyJs_anonymous_379_(headerFn, header, this, arguments, var=var):
                        var = Scope({u'this':this, u'header':header, u'arguments':arguments, u'headerFn':headerFn}, var)
                        var.registers([u'header', u'headerFn'])
                        if var.get(u'isFunction')(var.get(u'headerFn')):
                            var.put(u'headerContent', var.get(u'headerFn')(var.get(u'config')))
                            if (var.get(u'headerContent')!=var.get(u"null")):
                                var.get(u'processedHeaders').put(var.get(u'header'), var.get(u'headerContent'))
                        else:
                            var.get(u'processedHeaders').put(var.get(u'header'), var.get(u'headerFn'))
                    PyJs_anonymous_379_._set_name(u'anonymous')
                    var.get(u'forEach')(var.get(u'headers'), PyJs_anonymous_379_)
                    return var.get(u'processedHeaders')
                PyJsHoisted_executeHeaderFns_.func_name = u'executeHeaderFns'
                var.put(u'executeHeaderFns', PyJsHoisted_executeHeaderFns_)
                @Js
                def PyJsHoisted_mergeHeaders_(config, this, arguments, var=var):
                    var = Scope({u'this':this, u'config':config, u'arguments':arguments}, var)
                    var.registers([u'defHeaderName', u'lowercaseDefHeaderName', u'defHeaders', u'reqHeaders', u'reqHeaderName', u'config'])
                    var.put(u'defHeaders', var.get(u'defaults').get(u'headers'))
                    PyJs_Object_380_ = Js({})
                    var.put(u'reqHeaders', var.get(u'extend')(PyJs_Object_380_, var.get(u'config').get(u'headers')))
                    PyJs_Object_381_ = Js({})
                    var.put(u'defHeaders', var.get(u'extend')(PyJs_Object_381_, var.get(u'defHeaders').get(u'common'), var.get(u'defHeaders').get(var.get(u'lowercase')(var.get(u'config').get(u'method')))))
                    class JS_CONTINUE_LABEL_64656661756c7448656164657273497465726174696f6e(Exception): pass
                    class JS_BREAK_LABEL_64656661756c7448656164657273497465726174696f6e(Exception): pass
                    try:
                        for PyJsTemp in var.get(u'defHeaders'):
                            try:
                                var.put(u'defHeaderName', PyJsTemp)
                                var.put(u'lowercaseDefHeaderName', var.get(u'lowercase')(var.get(u'defHeaderName')))
                                for PyJsTemp in var.get(u'reqHeaders'):
                                    var.put(u'reqHeaderName', PyJsTemp)
                                    if PyJsStrictEq(var.get(u'lowercase')(var.get(u'reqHeaderName')),var.get(u'lowercaseDefHeaderName')):
                                        raise JS_CONTINUE_LABEL_64656661756c7448656164657273497465726174696f6e("Continued")
                                var.get(u'reqHeaders').put(var.get(u'defHeaderName'), var.get(u'defHeaders').get(var.get(u'defHeaderName')))
                            except JS_CONTINUE_LABEL_64656661756c7448656164657273497465726174696f6e:
                                pass
                    except JS_BREAK_LABEL_64656661756c7448656164657273497465726174696f6e:
                        pass
                    return var.get(u'executeHeaderFns')(var.get(u'reqHeaders'), var.get(u'shallowCopy')(var.get(u'config')))
                PyJsHoisted_mergeHeaders_.func_name = u'mergeHeaders'
                var.put(u'mergeHeaders', PyJsHoisted_mergeHeaders_)
                if var.get(u'angular').callprop(u'isObject', var.get(u'requestConfig')).neg():
                    PyJsTempException = JsToPyException(var.get(u'minErr')(Js(u'$http'))(Js(u'badreq'), Js(u'Http request configuration must be an object.  Received: {0}'), var.get(u'requestConfig')))
                    raise PyJsTempException
                PyJs_Object_369_ = Js({u'method':Js(u'get'),u'transformRequest':var.get(u'defaults').get(u'transformRequest'),u'transformResponse':var.get(u'defaults').get(u'transformResponse'),u'paramSerializer':var.get(u'defaults').get(u'paramSerializer')})
                var.put(u'config', var.get(u'extend')(PyJs_Object_369_, var.get(u'requestConfig')))
                var.get(u'config').put(u'headers', var.get(u'mergeHeaders')(var.get(u'requestConfig')))
                var.get(u'config').put(u'method', var.get(u'uppercase')(var.get(u'config').get(u'method')))
                var.get(u'config').put(u'paramSerializer', (var.get(u'$injector').callprop(u'get', var.get(u'config').get(u'paramSerializer')) if var.get(u'isString')(var.get(u'config').get(u'paramSerializer')) else var.get(u'config').get(u'paramSerializer')))
                @Js
                def PyJs_anonymous_370_(config, this, arguments, var=var):
                    var = Scope({u'this':this, u'config':config, u'arguments':arguments}, var)
                    var.registers([u'headers', u'config', u'reqData'])
                    var.put(u'headers', var.get(u'config').get(u'headers'))
                    var.put(u'reqData', var.get(u'transformData')(var.get(u'config').get(u'data'), var.get(u'headersGetter')(var.get(u'headers')), var.get(u'undefined'), var.get(u'config').get(u'transformRequest')))
                    if var.get(u'isUndefined')(var.get(u'reqData')):
                        @Js
                        def PyJs_anonymous_371_(value, header, this, arguments, var=var):
                            var = Scope({u'this':this, u'header':header, u'arguments':arguments, u'value':value}, var)
                            var.registers([u'header', u'value'])
                            if PyJsStrictEq(var.get(u'lowercase')(var.get(u'header')),Js(u'content-type')):
                                var.get(u'headers').delete(var.get(u'header'))
                        PyJs_anonymous_371_._set_name(u'anonymous')
                        var.get(u'forEach')(var.get(u'headers'), PyJs_anonymous_371_)
                    if (var.get(u'isUndefined')(var.get(u'config').get(u'withCredentials')) and var.get(u'isUndefined')(var.get(u'defaults').get(u'withCredentials')).neg()):
                        var.get(u'config').put(u'withCredentials', var.get(u'defaults').get(u'withCredentials'))
                    return var.get(u'sendReq')(var.get(u'config'), var.get(u'reqData')).callprop(u'then', var.get(u'transformResponse'), var.get(u'transformResponse'))
                PyJs_anonymous_370_._set_name(u'anonymous')
                var.put(u'serverRequest', PyJs_anonymous_370_)
                var.put(u'chain', Js([var.get(u'serverRequest'), var.get(u'undefined')]))
                var.put(u'promise', var.get(u'$q').callprop(u'when', var.get(u'config')))
                @Js
                def PyJs_anonymous_372_(interceptor, this, arguments, var=var):
                    var = Scope({u'this':this, u'interceptor':interceptor, u'arguments':arguments}, var)
                    var.registers([u'interceptor'])
                    if (var.get(u'interceptor').get(u'request') or var.get(u'interceptor').get(u'requestError')):
                        var.get(u'chain').callprop(u'unshift', var.get(u'interceptor').get(u'request'), var.get(u'interceptor').get(u'requestError'))
                    if (var.get(u'interceptor').get(u'response') or var.get(u'interceptor').get(u'responseError')):
                        var.get(u'chain').callprop(u'push', var.get(u'interceptor').get(u'response'), var.get(u'interceptor').get(u'responseError'))
                PyJs_anonymous_372_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'reversedInterceptors'), PyJs_anonymous_372_)
                while var.get(u'chain').get(u'length'):
                    var.put(u'thenFn', var.get(u'chain').callprop(u'shift'))
                    var.put(u'rejectFn', var.get(u'chain').callprop(u'shift'))
                    var.put(u'promise', var.get(u'promise').callprop(u'then', var.get(u'thenFn'), var.get(u'rejectFn')))
                if var.get(u'useLegacyPromise'):
                    @Js
                    def PyJs_anonymous_373_(fn, this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments, u'fn':fn}, var)
                        var.registers([u'fn'])
                        var.get(u'assertArgFn')(var.get(u'fn'), Js(u'fn'))
                        @Js
                        def PyJs_anonymous_374_(response, this, arguments, var=var):
                            var = Scope({u'this':this, u'response':response, u'arguments':arguments}, var)
                            var.registers([u'response'])
                            var.get(u'fn')(var.get(u'response').get(u'data'), var.get(u'response').get(u'status'), var.get(u'response').get(u'headers'), var.get(u'config'))
                        PyJs_anonymous_374_._set_name(u'anonymous')
                        var.get(u'promise').callprop(u'then', PyJs_anonymous_374_)
                        return var.get(u'promise')
                    PyJs_anonymous_373_._set_name(u'anonymous')
                    var.get(u'promise').put(u'success', PyJs_anonymous_373_)
                    @Js
                    def PyJs_anonymous_375_(fn, this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments, u'fn':fn}, var)
                        var.registers([u'fn'])
                        var.get(u'assertArgFn')(var.get(u'fn'), Js(u'fn'))
                        @Js
                        def PyJs_anonymous_376_(response, this, arguments, var=var):
                            var = Scope({u'this':this, u'response':response, u'arguments':arguments}, var)
                            var.registers([u'response'])
                            var.get(u'fn')(var.get(u'response').get(u'data'), var.get(u'response').get(u'status'), var.get(u'response').get(u'headers'), var.get(u'config'))
                        PyJs_anonymous_376_._set_name(u'anonymous')
                        var.get(u'promise').callprop(u'then', var.get(u"null"), PyJs_anonymous_376_)
                        return var.get(u'promise')
                    PyJs_anonymous_375_._set_name(u'anonymous')
                    var.get(u'promise').put(u'error', PyJs_anonymous_375_)
                else:
                    var.get(u'promise').put(u'success', var.get(u'$httpMinErrLegacyFn')(Js(u'success')))
                    var.get(u'promise').put(u'error', var.get(u'$httpMinErrLegacyFn')(Js(u'error')))
                return var.get(u'promise')
                pass
                pass
                pass
            PyJsHoistedNonPyName.func_name = u'$http'
            var.put(u'$http', PyJsHoistedNonPyName)
            @Js
            def PyJsHoisted_createShortMethods_(names, this, arguments, var=var):
                var = Scope({u'this':this, u'names':names, u'arguments':arguments}, var)
                var.registers([u'names'])
                @Js
                def PyJs_anonymous_382_(name, this, arguments, var=var):
                    var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
                    var.registers([u'name'])
                    @Js
                    def PyJs_anonymous_383_(url, config, this, arguments, var=var):
                        var = Scope({u'url':url, u'this':this, u'config':config, u'arguments':arguments}, var)
                        var.registers([u'url', u'config'])
                        PyJs_Object_384_ = Js({})
                        PyJs_Object_385_ = Js({})
                        PyJs_Object_386_ = Js({u'method':var.get(u'name'),u'url':var.get(u'url')})
                        return var.get(u'$http')(var.get(u'extend')(PyJs_Object_384_, (var.get(u'config') or PyJs_Object_385_), PyJs_Object_386_))
                    PyJs_anonymous_383_._set_name(u'anonymous')
                    var.get(u'$http').put(var.get(u'name'), PyJs_anonymous_383_)
                PyJs_anonymous_382_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'arguments'), PyJs_anonymous_382_)
            PyJsHoisted_createShortMethods_.func_name = u'createShortMethods'
            var.put(u'createShortMethods', PyJsHoisted_createShortMethods_)
            @Js
            def PyJsHoisted_buildUrl_(url, serializedParams, this, arguments, var=var):
                var = Scope({u'url':url, u'this':this, u'serializedParams':serializedParams, u'arguments':arguments}, var)
                var.registers([u'url', u'serializedParams'])
                if (var.get(u'serializedParams').get(u'length')>Js(0.0)):
                    var.put(u'url', ((Js(u'?') if (var.get(u'url').callprop(u'indexOf', Js(u'?'))==(-Js(1.0))) else Js(u'&'))+var.get(u'serializedParams')), u'+')
                return var.get(u'url')
            PyJsHoisted_buildUrl_.func_name = u'buildUrl'
            var.put(u'buildUrl', PyJsHoisted_buildUrl_)
            @Js
            def PyJsHoisted_createShortMethodsWithData_(name, this, arguments, var=var):
                var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
                var.registers([u'name'])
                @Js
                def PyJs_anonymous_387_(name, this, arguments, var=var):
                    var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
                    var.registers([u'name'])
                    @Js
                    def PyJs_anonymous_388_(url, data, config, this, arguments, var=var):
                        var = Scope({u'url':url, u'config':config, u'this':this, u'data':data, u'arguments':arguments}, var)
                        var.registers([u'url', u'config', u'data'])
                        PyJs_Object_389_ = Js({})
                        PyJs_Object_390_ = Js({})
                        PyJs_Object_391_ = Js({u'method':var.get(u'name'),u'url':var.get(u'url'),u'data':var.get(u'data')})
                        return var.get(u'$http')(var.get(u'extend')(PyJs_Object_389_, (var.get(u'config') or PyJs_Object_390_), PyJs_Object_391_))
                    PyJs_anonymous_388_._set_name(u'anonymous')
                    var.get(u'$http').put(var.get(u'name'), PyJs_anonymous_388_)
                PyJs_anonymous_387_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'arguments'), PyJs_anonymous_387_)
            PyJsHoisted_createShortMethodsWithData_.func_name = u'createShortMethodsWithData'
            var.put(u'createShortMethodsWithData', PyJsHoisted_createShortMethodsWithData_)
            @Js
            def PyJsHoisted_sendReq_(config, reqData, this, arguments, var=var):
                var = Scope({u'this':this, u'config':config, u'arguments':arguments, u'reqData':reqData}, var)
                var.registers([u'removePendingReq', u'cachedResp', u'reqData', u'url', u'cache', u'xsrfValue', u'resolvePromiseWithResult', u'deferred', u'promise', u'done', u'resolvePromise', u'reqHeaders', u'config'])
                @Js
                def PyJsHoisted_resolvePromiseWithResult_(result, this, arguments, var=var):
                    var = Scope({u'this':this, u'result':result, u'arguments':arguments}, var)
                    var.registers([u'result'])
                    var.get(u'resolvePromise')(var.get(u'result').get(u'data'), var.get(u'result').get(u'status'), var.get(u'shallowCopy')(var.get(u'result').callprop(u'headers')), var.get(u'result').get(u'statusText'))
                PyJsHoisted_resolvePromiseWithResult_.func_name = u'resolvePromiseWithResult'
                var.put(u'resolvePromiseWithResult', PyJsHoisted_resolvePromiseWithResult_)
                @Js
                def PyJsHoisted_resolvePromise_(response, status, headers, statusText, this, arguments, var=var):
                    var = Scope({u'status':status, u'headers':headers, u'arguments':arguments, u'this':this, u'statusText':statusText, u'response':response}, var)
                    var.registers([u'status', u'headers', u'response', u'statusText'])
                    var.put(u'status', (var.get(u'status') if (var.get(u'status')>=(-Js(1.0))) else Js(0.0)))
                    PyJs_Object_393_ = Js({u'data':var.get(u'response'),u'status':var.get(u'status'),u'headers':var.get(u'headersGetter')(var.get(u'headers')),u'config':var.get(u'config'),u'statusText':var.get(u'statusText')})
                    (var.get(u'deferred').get(u'resolve') if var.get(u'isSuccess')(var.get(u'status')) else var.get(u'deferred').get(u'reject'))(PyJs_Object_393_)
                PyJsHoisted_resolvePromise_.func_name = u'resolvePromise'
                var.put(u'resolvePromise', PyJsHoisted_resolvePromise_)
                @Js
                def PyJsHoisted_removePendingReq_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'idx'])
                    var.put(u'idx', var.get(u'$http').get(u'pendingRequests').callprop(u'indexOf', var.get(u'config')))
                    if PyJsStrictNeq(var.get(u'idx'),(-Js(1.0))):
                        var.get(u'$http').get(u'pendingRequests').callprop(u'splice', var.get(u'idx'), Js(1.0))
                PyJsHoisted_removePendingReq_.func_name = u'removePendingReq'
                var.put(u'removePendingReq', PyJsHoisted_removePendingReq_)
                @Js
                def PyJsHoisted_done_(status, response, headersString, statusText, this, arguments, var=var):
                    var = Scope({u'status':status, u'headersString':headersString, u'arguments':arguments, u'this':this, u'statusText':statusText, u'response':response}, var)
                    var.registers([u'status', u'statusText', u'headersString', u'resolveHttpPromise', u'response'])
                    @Js
                    def PyJsHoisted_resolveHttpPromise_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        var.get(u'resolvePromise')(var.get(u'response'), var.get(u'status'), var.get(u'headersString'), var.get(u'statusText'))
                    PyJsHoisted_resolveHttpPromise_.func_name = u'resolveHttpPromise'
                    var.put(u'resolveHttpPromise', PyJsHoisted_resolveHttpPromise_)
                    if var.get(u'cache'):
                        if var.get(u'isSuccess')(var.get(u'status')):
                            var.get(u'cache').callprop(u'put', var.get(u'url'), Js([var.get(u'status'), var.get(u'response'), var.get(u'parseHeaders')(var.get(u'headersString')), var.get(u'statusText')]))
                        else:
                            var.get(u'cache').callprop(u'remove', var.get(u'url'))
                    pass
                    if var.get(u'useApplyAsync'):
                        var.get(u'$rootScope').callprop(u'$applyAsync', var.get(u'resolveHttpPromise'))
                    else:
                        var.get(u'resolveHttpPromise')()
                        if var.get(u'$rootScope').get(u'$$phase').neg():
                            var.get(u'$rootScope').callprop(u'$apply')
                PyJsHoisted_done_.func_name = u'done'
                var.put(u'done', PyJsHoisted_done_)
                var.put(u'deferred', var.get(u'$q').callprop(u'defer'))
                var.put(u'promise', var.get(u'deferred').get(u'promise'))
                var.put(u'reqHeaders', var.get(u'config').get(u'headers'))
                var.put(u'url', var.get(u'buildUrl')(var.get(u'config').get(u'url'), var.get(u'config').callprop(u'paramSerializer', var.get(u'config').get(u'params'))))
                var.get(u'$http').get(u'pendingRequests').callprop(u'push', var.get(u'config'))
                var.get(u'promise').callprop(u'then', var.get(u'removePendingReq'), var.get(u'removePendingReq'))
                if (((var.get(u'config').get(u'cache') or var.get(u'defaults').get(u'cache')) and PyJsStrictNeq(var.get(u'config').get(u'cache'),Js(False))) and (PyJsStrictEq(var.get(u'config').get(u'method'),Js(u'GET')) or PyJsStrictEq(var.get(u'config').get(u'method'),Js(u'JSONP')))):
                    var.put(u'cache', (var.get(u'config').get(u'cache') if var.get(u'isObject')(var.get(u'config').get(u'cache')) else (var.get(u'defaults').get(u'cache') if var.get(u'isObject')(var.get(u'defaults').get(u'cache')) else var.get(u'defaultCache'))))
                if var.get(u'cache'):
                    var.put(u'cachedResp', var.get(u'cache').callprop(u'get', var.get(u'url')))
                    if var.get(u'isDefined')(var.get(u'cachedResp')):
                        if var.get(u'isPromiseLike')(var.get(u'cachedResp')):
                            var.get(u'cachedResp').callprop(u'then', var.get(u'resolvePromiseWithResult'), var.get(u'resolvePromiseWithResult'))
                        else:
                            if var.get(u'isArray')(var.get(u'cachedResp')):
                                var.get(u'resolvePromise')(var.get(u'cachedResp').get(u'1'), var.get(u'cachedResp').get(u'0'), var.get(u'shallowCopy')(var.get(u'cachedResp').get(u'2')), var.get(u'cachedResp').get(u'3'))
                            else:
                                PyJs_Object_392_ = Js({})
                                var.get(u'resolvePromise')(var.get(u'cachedResp'), Js(200.0), PyJs_Object_392_, Js(u'OK'))
                    else:
                        var.get(u'cache').callprop(u'put', var.get(u'url'), var.get(u'promise'))
                if var.get(u'isUndefined')(var.get(u'cachedResp')):
                    var.put(u'xsrfValue', (var.get(u'$$cookieReader')().get((var.get(u'config').get(u'xsrfCookieName') or var.get(u'defaults').get(u'xsrfCookieName'))) if var.get(u'urlIsSameOrigin')(var.get(u'config').get(u'url')) else var.get(u'undefined')))
                    if var.get(u'xsrfValue'):
                        var.get(u'reqHeaders').put((var.get(u'config').get(u'xsrfHeaderName') or var.get(u'defaults').get(u'xsrfHeaderName')), var.get(u'xsrfValue'))
                    var.get(u'$httpBackend')(var.get(u'config').get(u'method'), var.get(u'url'), var.get(u'reqData'), var.get(u'done'), var.get(u'reqHeaders'), var.get(u'config').get(u'timeout'), var.get(u'config').get(u'withCredentials'), var.get(u'config').get(u'responseType'))
                return var.get(u'promise')
                pass
                pass
                pass
                pass
            PyJsHoisted_sendReq_.func_name = u'sendReq'
            var.put(u'sendReq', PyJsHoisted_sendReq_)
            var.put(u'defaultCache', var.get(u'$cacheFactory')(Js(u'$http')))
            var.get(u'defaults').put(u'paramSerializer', (var.get(u'$injector').callprop(u'get', var.get(u'defaults').get(u'paramSerializer')) if var.get(u'isString')(var.get(u'defaults').get(u'paramSerializer')) else var.get(u'defaults').get(u'paramSerializer')))
            var.put(u'reversedInterceptors', Js([]))
            @Js
            def PyJs_anonymous_368_(interceptorFactory, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'interceptorFactory':interceptorFactory}, var)
                var.registers([u'interceptorFactory'])
                var.get(u'reversedInterceptors').callprop(u'unshift', (var.get(u'$injector').callprop(u'get', var.get(u'interceptorFactory')) if var.get(u'isString')(var.get(u'interceptorFactory')) else var.get(u'$injector').callprop(u'invoke', var.get(u'interceptorFactory'))))
            PyJs_anonymous_368_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'interceptorFactories'), PyJs_anonymous_368_)
            pass
            var.get(u'$http').put(u'pendingRequests', Js([]))
            var.get(u'createShortMethods')(Js(u'get'), Js(u'delete'), Js(u'head'), Js(u'jsonp'))
            var.get(u'createShortMethodsWithData')(Js(u'post'), Js(u'put'), Js(u'patch'))
            var.get(u'$http').put(u'defaults', var.get(u'defaults'))
            return var.get(u'$http')
            pass
            pass
            pass
            pass
        PyJs_anonymous_367_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$httpBackend'), Js(u'$$cookieReader'), Js(u'$cacheFactory'), Js(u'$rootScope'), Js(u'$q'), Js(u'$injector'), PyJs_anonymous_367_]))
    PyJsHoistedNonPyName.func_name = u'$HttpProvider'
    var.put(u'$HttpProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_setHashKey_(obj, h, this, arguments, var=var):
        var = Scope({u'this':this, u'h':h, u'obj':obj, u'arguments':arguments}, var)
        var.registers([u'h', u'obj'])
        if var.get(u'h'):
            var.get(u'obj').put(u'$$hashKey', var.get(u'h'))
        else:
            var.get(u'obj').delete(u'$$hashKey')
    PyJsHoisted_setHashKey_.func_name = u'setHashKey'
    var.put(u'setHashKey', PyJsHoisted_setHashKey_)
    @Js
    def PyJsHoisted_isBoolean_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        return PyJsStrictEq(var.get(u'value',throw=False).typeof(),Js(u'boolean'))
    PyJsHoisted_isBoolean_.func_name = u'isBoolean'
    var.put(u'isBoolean', PyJsHoisted_isBoolean_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_742_(PyJsArg_24726f6f7453636f7065_, PyJsArg_24657863657074696f6e48616e646c6572_, this, arguments, var=var):
            var = Scope({u'$exceptionHandler':PyJsArg_24657863657074696f6e48616e646c6572_, u'this':this, u'$rootScope':PyJsArg_24726f6f7453636f7065_, u'arguments':arguments}, var)
            var.registers([u'$exceptionHandler', u'$rootScope'])
            @Js
            def PyJs_anonymous_743_(callback, this, arguments, var=var):
                var = Scope({u'this':this, u'callback':callback, u'arguments':arguments}, var)
                var.registers([u'callback'])
                var.get(u'$rootScope').callprop(u'$evalAsync', var.get(u'callback'))
            PyJs_anonymous_743_._set_name(u'anonymous')
            return var.get(u'qFactory')(PyJs_anonymous_743_, var.get(u'$exceptionHandler'))
        PyJs_anonymous_742_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$rootScope'), Js(u'$exceptionHandler'), PyJs_anonymous_742_]))
    PyJsHoistedNonPyName.func_name = u'$QProvider'
    var.put(u'$QProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_ngDirective_(directive, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'directive':directive}, var)
        var.registers([u'directive'])
        if var.get(u'isFunction')(var.get(u'directive')):
            PyJs_Object_910_ = Js({u'link':var.get(u'directive')})
            var.put(u'directive', PyJs_Object_910_)
        var.get(u'directive').put(u'restrict', (var.get(u'directive').get(u'restrict') or Js(u'AC')))
        return var.get(u'valueFn')(var.get(u'directive'))
    PyJsHoisted_ngDirective_.func_name = u'ngDirective'
    var.put(u'ngDirective', PyJsHoisted_ngDirective_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_236_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'cacheFactory', u'caches'])
            @Js
            def PyJsHoisted_cacheFactory_(cacheId, options, this, arguments, var=var):
                var = Scope({u'this':this, u'cacheId':cacheId, u'options':options, u'arguments':arguments}, var)
                var.registers([u'capacity', u'cacheId', u'lruHash', u'refresh', u'link', u'stats', u'freshEnd', u'data', u'options', u'staleEnd', u'size'])
                @Js
                def PyJsHoisted_link_(nextEntry, prevEntry, this, arguments, var=var):
                    var = Scope({u'prevEntry':prevEntry, u'this':this, u'nextEntry':nextEntry, u'arguments':arguments}, var)
                    var.registers([u'prevEntry', u'nextEntry'])
                    if (var.get(u'nextEntry')!=var.get(u'prevEntry')):
                        if var.get(u'nextEntry'):
                            var.get(u'nextEntry').put(u'p', var.get(u'prevEntry'))
                        if var.get(u'prevEntry'):
                            var.get(u'prevEntry').put(u'n', var.get(u'nextEntry'))
                PyJsHoisted_link_.func_name = u'link'
                var.put(u'link', PyJsHoisted_link_)
                @Js
                def PyJsHoisted_refresh_(entry, this, arguments, var=var):
                    var = Scope({u'this':this, u'entry':entry, u'arguments':arguments}, var)
                    var.registers([u'entry'])
                    if (var.get(u'entry')!=var.get(u'freshEnd')):
                        if var.get(u'staleEnd').neg():
                            var.put(u'staleEnd', var.get(u'entry'))
                        else:
                            if (var.get(u'staleEnd')==var.get(u'entry')):
                                var.put(u'staleEnd', var.get(u'entry').get(u'n'))
                        var.get(u'link')(var.get(u'entry').get(u'n'), var.get(u'entry').get(u'p'))
                        var.get(u'link')(var.get(u'entry'), var.get(u'freshEnd'))
                        var.put(u'freshEnd', var.get(u'entry'))
                        var.get(u'freshEnd').put(u'n', var.get(u"null"))
                PyJsHoisted_refresh_.func_name = u'refresh'
                var.put(u'refresh', PyJsHoisted_refresh_)
                if var.get(u'caches').contains(var.get(u'cacheId')):
                    PyJsTempException = JsToPyException(var.get(u'minErr')(Js(u'$cacheFactory'))(Js(u'iid'), Js(u"CacheId '{0}' is already taken!"), var.get(u'cacheId')))
                    raise PyJsTempException
                var.put(u'size', Js(0.0))
                PyJs_Object_238_ = Js({})
                PyJs_Object_239_ = Js({u'id':var.get(u'cacheId')})
                var.put(u'stats', var.get(u'extend')(PyJs_Object_238_, var.get(u'options'), PyJs_Object_239_))
                var.put(u'data', var.get(u'createMap')())
                var.put(u'capacity', ((var.get(u'options') and var.get(u'options').get(u'capacity')) or var.get(u'Number').get(u'MAX_VALUE')))
                var.put(u'lruHash', var.get(u'createMap')())
                var.put(u'freshEnd', var.get(u"null"))
                var.put(u'staleEnd', var.get(u"null"))
                @Js
                def PyJs_anonymous_241_(key, value, this, arguments, var=var):
                    var = Scope({u'this':this, u'value':value, u'key':key, u'arguments':arguments}, var)
                    var.registers([u'lruEntry', u'value', u'key'])
                    if var.get(u'isUndefined')(var.get(u'value')):
                        return var.get('undefined')
                    if (var.get(u'capacity')<var.get(u'Number').get(u'MAX_VALUE')):
                        PyJs_Object_242_ = Js({u'key':var.get(u'key')})
                        var.put(u'lruEntry', (var.get(u'lruHash').get(var.get(u'key')) or var.get(u'lruHash').put(var.get(u'key'), PyJs_Object_242_)))
                        var.get(u'refresh')(var.get(u'lruEntry'))
                    if var.get(u'data').contains(var.get(u'key')).neg():
                        (var.put(u'size',var.get(u'size')+Js(1))-Js(1))
                    var.get(u'data').put(var.get(u'key'), var.get(u'value'))
                    if (var.get(u'size')>var.get(u'capacity')):
                        var.get(u"this").callprop(u'remove', var.get(u'staleEnd').get(u'key'))
                    return var.get(u'value')
                PyJs_anonymous_241_._set_name(u'anonymous')
                @Js
                def PyJs_anonymous_243_(key, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'key':key}, var)
                    var.registers([u'lruEntry', u'key'])
                    if (var.get(u'capacity')<var.get(u'Number').get(u'MAX_VALUE')):
                        var.put(u'lruEntry', var.get(u'lruHash').get(var.get(u'key')))
                        if var.get(u'lruEntry').neg():
                            return var.get('undefined')
                        var.get(u'refresh')(var.get(u'lruEntry'))
                    return var.get(u'data').get(var.get(u'key'))
                PyJs_anonymous_243_._set_name(u'anonymous')
                @Js
                def PyJs_anonymous_244_(key, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'key':key}, var)
                    var.registers([u'lruEntry', u'key'])
                    if (var.get(u'capacity')<var.get(u'Number').get(u'MAX_VALUE')):
                        var.put(u'lruEntry', var.get(u'lruHash').get(var.get(u'key')))
                        if var.get(u'lruEntry').neg():
                            return var.get('undefined')
                        if (var.get(u'lruEntry')==var.get(u'freshEnd')):
                            var.put(u'freshEnd', var.get(u'lruEntry').get(u'p'))
                        if (var.get(u'lruEntry')==var.get(u'staleEnd')):
                            var.put(u'staleEnd', var.get(u'lruEntry').get(u'n'))
                        var.get(u'link')(var.get(u'lruEntry').get(u'n'), var.get(u'lruEntry').get(u'p'))
                        var.get(u'lruHash').delete(var.get(u'key'))
                    if var.get(u'data').contains(var.get(u'key')).neg():
                        return var.get('undefined')
                    var.get(u'data').delete(var.get(u'key'))
                    (var.put(u'size',var.get(u'size')-Js(1))+Js(1))
                PyJs_anonymous_244_._set_name(u'anonymous')
                @Js
                def PyJs_anonymous_245_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.put(u'data', var.get(u'createMap')())
                    var.put(u'size', Js(0.0))
                    var.put(u'lruHash', var.get(u'createMap')())
                    var.put(u'freshEnd', var.put(u'staleEnd', var.get(u"null")))
                PyJs_anonymous_245_._set_name(u'anonymous')
                @Js
                def PyJs_anonymous_246_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.put(u'data', var.get(u"null"))
                    var.put(u'stats', var.get(u"null"))
                    var.put(u'lruHash', var.get(u"null"))
                    var.get(u'caches').delete(var.get(u'cacheId'))
                PyJs_anonymous_246_._set_name(u'anonymous')
                @Js
                def PyJs_anonymous_247_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    PyJs_Object_248_ = Js({})
                    PyJs_Object_249_ = Js({u'size':var.get(u'size')})
                    return var.get(u'extend')(PyJs_Object_248_, var.get(u'stats'), PyJs_Object_249_)
                PyJs_anonymous_247_._set_name(u'anonymous')
                PyJs_Object_240_ = Js({u'put':PyJs_anonymous_241_,u'get':PyJs_anonymous_243_,u'remove':PyJs_anonymous_244_,u'removeAll':PyJs_anonymous_245_,u'destroy':PyJs_anonymous_246_,u'info':PyJs_anonymous_247_})
                return var.get(u'caches').put(var.get(u'cacheId'), PyJs_Object_240_)
                pass
                pass
            PyJsHoisted_cacheFactory_.func_name = u'cacheFactory'
            var.put(u'cacheFactory', PyJsHoisted_cacheFactory_)
            PyJs_Object_237_ = Js({})
            var.put(u'caches', PyJs_Object_237_)
            pass
            @Js
            def PyJs_anonymous_250_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'info'])
                PyJs_Object_251_ = Js({})
                var.put(u'info', PyJs_Object_251_)
                @Js
                def PyJs_anonymous_252_(cache, cacheId, this, arguments, var=var):
                    var = Scope({u'this':this, u'cacheId':cacheId, u'cache':cache, u'arguments':arguments}, var)
                    var.registers([u'cacheId', u'cache'])
                    var.get(u'info').put(var.get(u'cacheId'), var.get(u'cache').callprop(u'info'))
                PyJs_anonymous_252_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'caches'), PyJs_anonymous_252_)
                return var.get(u'info')
            PyJs_anonymous_250_._set_name(u'anonymous')
            var.get(u'cacheFactory').put(u'info', PyJs_anonymous_250_)
            @Js
            def PyJs_anonymous_253_(cacheId, this, arguments, var=var):
                var = Scope({u'this':this, u'cacheId':cacheId, u'arguments':arguments}, var)
                var.registers([u'cacheId'])
                return var.get(u'caches').get(var.get(u'cacheId'))
            PyJs_anonymous_253_._set_name(u'anonymous')
            var.get(u'cacheFactory').put(u'get', PyJs_anonymous_253_)
            return var.get(u'cacheFactory')
        PyJs_anonymous_236_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', PyJs_anonymous_236_)
    PyJsHoistedNonPyName.func_name = u'$CacheFactoryProvider'
    var.put(u'$CacheFactoryProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_isSuccess_(status, this, arguments, var=var):
        var = Scope({u'status':status, u'this':this, u'arguments':arguments}, var)
        var.registers([u'status'])
        return ((Js(200.0)<=var.get(u'status')) and (var.get(u'status')<Js(300.0)))
    PyJsHoisted_isSuccess_.func_name = u'isSuccess'
    var.put(u'isSuccess', PyJsHoisted_isSuccess_)
    @Js
    def PyJsHoisted_isBlankObject_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        return ((PyJsStrictNeq(var.get(u'value'),var.get(u"null")) and PyJsStrictEq(var.get(u'value',throw=False).typeof(),Js(u'object'))) and var.get(u'getPrototypeOf')(var.get(u'value')).neg())
    PyJsHoisted_isBlankObject_.func_name = u'isBlankObject'
    var.put(u'isBlankObject', PyJsHoisted_isBlankObject_)
    @Js
    def PyJsHoisted_longEraGetter_(date, formats, this, arguments, var=var):
        var = Scope({u'date':date, u'this':this, u'arguments':arguments, u'formats':formats}, var)
        var.registers([u'date', u'formats'])
        return (var.get(u'formats').get(u'ERANAMES').get(u'0') if (var.get(u'date').callprop(u'getFullYear')<=Js(0.0)) else var.get(u'formats').get(u'ERANAMES').get(u'1'))
    PyJsHoisted_longEraGetter_.func_name = u'longEraGetter'
    var.put(u'longEraGetter', PyJsHoisted_longEraGetter_)
    @Js
    def PyJsHoisted_specialMouseHandlerWrapper_(target, event, handler, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'handler':handler, u'target':target, u'event':event}, var)
        var.registers([u'handler', u'target', u'related', u'event'])
        var.put(u'related', var.get(u'event').get(u'relatedTarget'))
        if (var.get(u'related').neg() or (PyJsStrictNeq(var.get(u'related'),var.get(u'target')) and var.get(u'jqLiteContains').callprop(u'call', var.get(u'target'), var.get(u'related')).neg())):
            var.get(u'handler').callprop(u'call', var.get(u'target'), var.get(u'event'))
    PyJsHoisted_specialMouseHandlerWrapper_.func_name = u'specialMouseHandlerWrapper'
    var.put(u'specialMouseHandlerWrapper', PyJsHoisted_specialMouseHandlerWrapper_)
    @Js
    def PyJsHoisted_toJsonReplacer_(key, value, this, arguments, var=var):
        var = Scope({u'this':this, u'value':value, u'key':key, u'arguments':arguments}, var)
        var.registers([u'value', u'key', u'val'])
        var.put(u'val', var.get(u'value'))
        if ((PyJsStrictEq(var.get(u'key',throw=False).typeof(),Js(u'string')) and PyJsStrictEq(var.get(u'key').callprop(u'charAt', Js(0.0)),Js(u'$'))) and PyJsStrictEq(var.get(u'key').callprop(u'charAt', Js(1.0)),Js(u'$'))):
            var.put(u'val', var.get(u'undefined'))
        else:
            if var.get(u'isWindow')(var.get(u'value')):
                var.put(u'val', Js(u'$WINDOW'))
            else:
                if (var.get(u'value') and PyJsStrictEq(var.get(u'document'),var.get(u'value'))):
                    var.put(u'val', Js(u'$DOCUMENT'))
                else:
                    if var.get(u'isScope')(var.get(u'value')):
                        var.put(u'val', Js(u'$SCOPE'))
        return var.get(u'val')
    PyJsHoisted_toJsonReplacer_.func_name = u'toJsonReplacer'
    var.put(u'toJsonReplacer', PyJsHoisted_toJsonReplacer_)
    @Js
    def PyJsHoisted_isStateless_(PyJsArg_2466696c746572_, filterName, this, arguments, var=var):
        var = Scope({u'this':this, u'filterName':filterName, u'$filter':PyJsArg_2466696c746572_, u'arguments':arguments}, var)
        var.registers([u'filterName', u'$filter', u'fn'])
        var.put(u'fn', var.get(u'$filter')(var.get(u'filterName')))
        return var.get(u'fn').get(u'$stateful').neg()
    PyJsHoisted_isStateless_.func_name = u'isStateless'
    var.put(u'isStateless', PyJsHoisted_isStateless_)
    @Js
    def PyJsHoisted_defaultHttpResponseTransform_(data, headers, this, arguments, var=var):
        var = Scope({u'this':this, u'headers':headers, u'data':data, u'arguments':arguments}, var)
        var.registers([u'data', u'tempData', u'contentType', u'headers'])
        if var.get(u'isString')(var.get(u'data')):
            var.put(u'tempData', var.get(u'data').callprop(u'replace', var.get(u'JSON_PROTECTION_PREFIX'), Js(u'')).callprop(u'trim'))
            if var.get(u'tempData'):
                var.put(u'contentType', var.get(u'headers')(Js(u'Content-Type')))
                if ((var.get(u'contentType') and PyJsStrictEq(var.get(u'contentType').callprop(u'indexOf', var.get(u'APPLICATION_JSON')),Js(0.0))) or var.get(u'isJsonLike')(var.get(u'tempData'))):
                    var.put(u'data', var.get(u'fromJson')(var.get(u'tempData')))
        return var.get(u'data')
    PyJsHoisted_defaultHttpResponseTransform_.func_name = u'defaultHttpResponseTransform'
    var.put(u'defaultHttpResponseTransform', PyJsHoisted_defaultHttpResponseTransform_)
    @Js
    def PyJsHoisted_stripHash_(url, this, arguments, var=var):
        var = Scope({u'url':url, u'this':this, u'arguments':arguments}, var)
        var.registers([u'url', u'index'])
        var.put(u'index', var.get(u'url').callprop(u'indexOf', Js(u'#')))
        return (var.get(u'url') if (var.get(u'index')==(-Js(1.0))) else var.get(u'url').callprop(u'substr', Js(0.0), var.get(u'index')))
    PyJsHoisted_stripHash_.func_name = u'stripHash'
    var.put(u'stripHash', PyJsHoisted_stripHash_)
    @Js
    def PyJsHoisted_serializeObject_(obj, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
        var.registers([u'seen', u'obj'])
        var.put(u'seen', Js([]))
        @Js
        def PyJs_anonymous_54_(key, val, this, arguments, var=var):
            var = Scope({u'this':this, u'val':val, u'key':key, u'arguments':arguments}, var)
            var.registers([u'val', u'key'])
            var.put(u'val', var.get(u'toJsonReplacer')(var.get(u'key'), var.get(u'val')))
            if var.get(u'isObject')(var.get(u'val')):
                if (var.get(u'seen').callprop(u'indexOf', var.get(u'val'))>=Js(0.0)):
                    return Js(u'...')
                var.get(u'seen').callprop(u'push', var.get(u'val'))
            return var.get(u'val')
        PyJs_anonymous_54_._set_name(u'anonymous')
        return var.get(u'JSON').callprop(u'stringify', var.get(u'obj'), PyJs_anonymous_54_)
    PyJsHoisted_serializeObject_.func_name = u'serializeObject'
    var.put(u'serializeObject', PyJsHoisted_serializeObject_)
    @Js
    def PyJsHoisted_includes_(array, obj, this, arguments, var=var):
        var = Scope({u'this':this, u'array':array, u'obj':obj, u'arguments':arguments}, var)
        var.registers([u'array', u'obj'])
        return (var.get(u'Array').get(u'prototype').get(u'indexOf').callprop(u'call', var.get(u'array'), var.get(u'obj'))!=(-Js(1.0)))
    PyJsHoisted_includes_.func_name = u'includes'
    var.put(u'includes', PyJsHoisted_includes_)
    @Js
    def PyJsHoisted_beginsWith_(begin, whole, this, arguments, var=var):
        var = Scope({u'this':this, u'begin':begin, u'whole':whole, u'arguments':arguments}, var)
        var.registers([u'begin', u'whole'])
        if PyJsStrictEq(var.get(u'whole').callprop(u'indexOf', var.get(u'begin')),Js(0.0)):
            return var.get(u'whole').callprop(u'substr', var.get(u'begin').get(u'length'))
    PyJsHoisted_beginsWith_.func_name = u'beginsWith'
    var.put(u'beginsWith', PyJsHoisted_beginsWith_)
    @Js
    def PyJsHoisted_isPromiseLike_(obj, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
        var.registers([u'obj'])
        return (var.get(u'obj') and var.get(u'isFunction')(var.get(u'obj').get(u'then')))
    PyJsHoisted_isPromiseLike_.func_name = u'isPromiseLike'
    var.put(u'isPromiseLike', PyJsHoisted_isPromiseLike_)
    @Js
    def PyJsHoisted_eraGetter_(date, formats, this, arguments, var=var):
        var = Scope({u'date':date, u'this':this, u'arguments':arguments, u'formats':formats}, var)
        var.registers([u'date', u'formats'])
        return (var.get(u'formats').get(u'ERAS').get(u'0') if (var.get(u'date').callprop(u'getFullYear')<=Js(0.0)) else var.get(u'formats').get(u'ERAS').get(u'1'))
    PyJsHoisted_eraGetter_.func_name = u'eraGetter'
    var.put(u'eraGetter', PyJsHoisted_eraGetter_)
    @Js
    def PyJsHoisted_isObject_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        return (PyJsStrictNeq(var.get(u'value'),var.get(u"null")) and PyJsStrictEq(var.get(u'value',throw=False).typeof(),Js(u'object')))
    PyJsHoisted_isObject_.func_name = u'isObject'
    var.put(u'isObject', PyJsHoisted_isObject_)
    @Js
    def PyJsHoisted_concat_(array1, array2, index, this, arguments, var=var):
        var = Scope({u'this':this, u'array2':array2, u'array1':array1, u'arguments':arguments, u'index':index}, var)
        var.registers([u'array2', u'array1', u'index'])
        return var.get(u'array1').callprop(u'concat', var.get(u'slice').callprop(u'call', var.get(u'array2'), var.get(u'index')))
    PyJsHoisted_concat_.func_name = u'concat'
    var.put(u'concat', PyJsHoisted_concat_)
    @Js
    def PyJsHoisted_ASTInterpreter_(astBuilder, PyJsArg_2466696c746572_, this, arguments, var=var):
        var = Scope({u'this':this, u'astBuilder':astBuilder, u'$filter':PyJsArg_2466696c746572_, u'arguments':arguments}, var)
        var.registers([u'astBuilder', u'$filter'])
        var.get(u"this").put(u'astBuilder', var.get(u'astBuilder'))
        var.get(u"this").put(u'$filter', var.get(u'$filter'))
    PyJsHoisted_ASTInterpreter_.func_name = u'ASTInterpreter'
    var.put(u'ASTInterpreter', PyJsHoisted_ASTInterpreter_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_872_(PyJsArg_24726f6f7453636f7065_, PyJsArg_2462726f77736572_, PyJsArg_2471_, PyJsArg_242471_, PyJsArg_24657863657074696f6e48616e646c6572_, this, arguments, var=var):
            var = Scope({u'this':this, u'$rootScope':PyJsArg_24726f6f7453636f7065_, u'$browser':PyJsArg_2462726f77736572_, u'arguments':arguments, u'$exceptionHandler':PyJsArg_24657863657074696f6e48616e646c6572_, u'$$q':PyJsArg_242471_, u'$q':PyJsArg_2471_}, var)
            var.registers([u'$rootScope', u'$exceptionHandler', u'$$q', u'deferreds', u'$browser', u'timeout', u'$q'])
            @Js
            def PyJsHoisted_timeout_(fn, delay, invokeApply, this, arguments, var=var):
                var = Scope({u'delay':delay, u'this':this, u'arguments':arguments, u'fn':fn, u'invokeApply':invokeApply}, var)
                var.registers([u'timeoutId', u'args', u'delay', u'deferred', u'promise', u'invokeApply', u'skipApply', u'fn'])
                if var.get(u'isFunction')(var.get(u'fn')).neg():
                    var.put(u'invokeApply', var.get(u'delay'))
                    var.put(u'delay', var.get(u'fn'))
                    var.put(u'fn', var.get(u'noop'))
                var.put(u'args', var.get(u'sliceArgs')(var.get(u'arguments'), Js(3.0)))
                var.put(u'skipApply', (var.get(u'isDefined')(var.get(u'invokeApply')) and var.get(u'invokeApply').neg()))
                var.put(u'deferred', (var.get(u'$$q') if var.get(u'skipApply') else var.get(u'$q')).callprop(u'defer'))
                var.put(u'promise', var.get(u'deferred').get(u'promise'))
                @Js
                def PyJs_anonymous_874_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    try:
                        var.get(u'deferred').callprop(u'resolve', var.get(u'fn').callprop(u'apply', var.get(u"null"), var.get(u'args')))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_82089525 = var.own.get(u'e')
                        var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                        try:
                            var.get(u'deferred').callprop(u'reject', var.get(u'e'))
                            var.get(u'$exceptionHandler')(var.get(u'e'))
                        finally:
                            if PyJsHolder_65_82089525 is not None:
                                var.own[u'e'] = PyJsHolder_65_82089525
                            else:
                                del var.own[u'e']
                            del PyJsHolder_65_82089525
                    finally:
                        var.get(u'deferreds').delete(var.get(u'promise').get(u'$$timeoutId'))
                    if var.get(u'skipApply').neg():
                        var.get(u'$rootScope').callprop(u'$apply')
                PyJs_anonymous_874_._set_name(u'anonymous')
                var.put(u'timeoutId', var.get(u'$browser').callprop(u'defer', PyJs_anonymous_874_, var.get(u'delay')))
                var.get(u'promise').put(u'$$timeoutId', var.get(u'timeoutId'))
                var.get(u'deferreds').put(var.get(u'timeoutId'), var.get(u'deferred'))
                return var.get(u'promise')
            PyJsHoisted_timeout_.func_name = u'timeout'
            var.put(u'timeout', PyJsHoisted_timeout_)
            PyJs_Object_873_ = Js({})
            var.put(u'deferreds', PyJs_Object_873_)
            pass
            @Js
            def PyJs_anonymous_875_(promise, this, arguments, var=var):
                var = Scope({u'this':this, u'promise':promise, u'arguments':arguments}, var)
                var.registers([u'promise'])
                if (var.get(u'promise') and var.get(u'deferreds').contains(var.get(u'promise').get(u'$$timeoutId'))):
                    var.get(u'deferreds').get(var.get(u'promise').get(u'$$timeoutId')).callprop(u'reject', Js(u'canceled'))
                    var.get(u'deferreds').delete(var.get(u'promise').get(u'$$timeoutId'))
                    return var.get(u'$browser').get(u'defer').callprop(u'cancel', var.get(u'promise').get(u'$$timeoutId'))
                return Js(False)
            PyJs_anonymous_875_._set_name(u'anonymous')
            var.get(u'timeout').put(u'cancel', PyJs_anonymous_875_)
            return var.get(u'timeout')
        PyJs_anonymous_872_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$rootScope'), Js(u'$browser'), Js(u'$q'), Js(u'$$q'), Js(u'$exceptionHandler'), PyJs_anonymous_872_]))
    PyJsHoistedNonPyName.func_name = u'$TimeoutProvider'
    var.put(u'$TimeoutProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_dateStrGetter_(name, shortForm, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'shortForm':shortForm}, var)
        var.registers([u'name', u'shortForm'])
        @Js
        def PyJs_anonymous_892_(date, formats, this, arguments, var=var):
            var = Scope({u'date':date, u'this':this, u'arguments':arguments, u'formats':formats}, var)
            var.registers([u'date', u'formats', u'value', u'get'])
            var.put(u'value', var.get(u'date').callprop((Js(u'get')+var.get(u'name'))))
            var.put(u'get', var.get(u'uppercase')(((Js(u'SHORT')+var.get(u'name')) if var.get(u'shortForm') else var.get(u'name'))))
            return var.get(u'formats').get(var.get(u'get')).get(var.get(u'value'))
        PyJs_anonymous_892_._set_name(u'anonymous')
        return PyJs_anonymous_892_
    PyJsHoisted_dateStrGetter_.func_name = u'dateStrGetter'
    var.put(u'dateStrGetter', PyJsHoisted_dateStrGetter_)
    @Js
    def PyJsHoistedNonPyName(PyJsArg_2470726f76696465_, this, arguments, var=var):
        var = Scope({u'this':this, u'$provide':PyJsArg_2470726f76696465_, u'arguments':arguments}, var)
        var.registers([u'$provide', u'register', u'suffix'])
        @Js
        def PyJsHoisted_register_(name, factory, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'factory':factory}, var)
            var.registers([u'name', u'filters', u'factory'])
            if var.get(u'isObject')(var.get(u'name')):
                PyJs_Object_881_ = Js({})
                var.put(u'filters', PyJs_Object_881_)
                @Js
                def PyJs_anonymous_882_(filter, key, this, arguments, var=var):
                    var = Scope({u'filter':filter, u'this':this, u'arguments':arguments, u'key':key}, var)
                    var.registers([u'filter', u'key'])
                    var.get(u'filters').put(var.get(u'key'), var.get(u'register')(var.get(u'key'), var.get(u'filter')))
                PyJs_anonymous_882_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'name'), PyJs_anonymous_882_)
                return var.get(u'filters')
            else:
                return var.get(u'$provide').callprop(u'factory', (var.get(u'name')+var.get(u'suffix')), var.get(u'factory'))
        PyJsHoisted_register_.func_name = u'register'
        var.put(u'register', PyJsHoisted_register_)
        var.put(u'suffix', Js(u'Filter'))
        pass
        var.get(u"this").put(u'register', var.get(u'register'))
        @Js
        def PyJs_anonymous_883_(PyJsArg_24696e6a6563746f72_, this, arguments, var=var):
            var = Scope({u'this':this, u'$injector':PyJsArg_24696e6a6563746f72_, u'arguments':arguments}, var)
            var.registers([u'$injector'])
            @Js
            def PyJs_anonymous_884_(name, this, arguments, var=var):
                var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
                var.registers([u'name'])
                return var.get(u'$injector').callprop(u'get', (var.get(u'name')+var.get(u'suffix')))
            PyJs_anonymous_884_._set_name(u'anonymous')
            return PyJs_anonymous_884_
        PyJs_anonymous_883_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$injector'), PyJs_anonymous_883_]))
        var.get(u'register')(Js(u'currency'), var.get(u'currencyFilter'))
        var.get(u'register')(Js(u'date'), var.get(u'dateFilter'))
        var.get(u'register')(Js(u'filter'), var.get(u'filterFilter'))
        var.get(u'register')(Js(u'json'), var.get(u'jsonFilter'))
        var.get(u'register')(Js(u'limitTo'), var.get(u'limitToFilter'))
        var.get(u'register')(Js(u'lowercase'), var.get(u'lowercaseFilter'))
        var.get(u'register')(Js(u'number'), var.get(u'numberFilter'))
        var.get(u'register')(Js(u'orderBy'), var.get(u'orderByFilter'))
        var.get(u'register')(Js(u'uppercase'), var.get(u'uppercaseFilter'))
    PyJsHoistedNonPyName.func_name = u'$FilterProvider'
    var.put(u'$FilterProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_jqLiteAcceptsData_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node', u'nodeType'])
        var.put(u'nodeType', var.get(u'node').get(u'nodeType'))
        return ((PyJsStrictEq(var.get(u'nodeType'),var.get(u'NODE_TYPE_ELEMENT')) or var.get(u'nodeType').neg()) or PyJsStrictEq(var.get(u'nodeType'),var.get(u'NODE_TYPE_DOCUMENT')))
    PyJsHoisted_jqLiteAcceptsData_.func_name = u'jqLiteAcceptsData'
    var.put(u'jqLiteAcceptsData', PyJsHoisted_jqLiteAcceptsData_)
    @Js
    def PyJsHoisted_serverBase_(url, this, arguments, var=var):
        var = Scope({u'url':url, u'this':this, u'arguments':arguments}, var)
        var.registers([u'url'])
        return var.get(u'url').callprop(u'substring', Js(0.0), var.get(u'url').callprop(u'indexOf', Js(u'/'), (var.get(u'url').callprop(u'indexOf', Js(u'//'))+Js(2.0))))
    PyJsHoisted_serverBase_.func_name = u'serverBase'
    var.put(u'serverBase', PyJsHoisted_serverBase_)
    @Js
    def PyJsHoisted_bind_(self, fn, this, arguments, var=var):
        var = Scope({u'this':this, u'self':self, u'arguments':arguments, u'fn':fn}, var)
        var.registers([u'self', u'curryArgs', u'fn'])
        var.put(u'curryArgs', (var.get(u'sliceArgs')(var.get(u'arguments'), Js(2.0)) if (var.get(u'arguments').get(u'length')>Js(2.0)) else Js([])))
        if (var.get(u'isFunction')(var.get(u'fn')) and var.get(u'fn').instanceof(var.get(u'RegExp')).neg()):
            @Js
            def PyJs_anonymous_22_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                return (var.get(u'fn').callprop(u'apply', var.get(u'self'), var.get(u'concat')(var.get(u'curryArgs'), var.get(u'arguments'), Js(0.0))) if var.get(u'arguments').get(u'length') else var.get(u'fn').callprop(u'apply', var.get(u'self'), var.get(u'curryArgs')))
            PyJs_anonymous_22_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_23_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                return (var.get(u'fn').callprop(u'apply', var.get(u'self'), var.get(u'arguments')) if var.get(u'arguments').get(u'length') else var.get(u'fn').callprop(u'call', var.get(u'self')))
            PyJs_anonymous_23_._set_name(u'anonymous')
            return (PyJs_anonymous_22_ if var.get(u'curryArgs').get(u'length') else PyJs_anonymous_23_)
        else:
            return var.get(u'fn')
    PyJsHoisted_bind_.func_name = u'bind'
    var.put(u'bind', PyJsHoisted_bind_)
    @Js
    def PyJsHoisted_bootstrap_(element, modules, config, this, arguments, var=var):
        var = Scope({u'this':this, u'config':config, u'modules':modules, u'arguments':arguments, u'element':element}, var)
        var.registers([u'config', u'modules', u'NG_DEFER_BOOTSTRAP', u'element', u'NG_ENABLE_DEBUG_INFO', u'defaultConfig', u'doBootstrap'])
        if var.get(u'isObject')(var.get(u'config')).neg():
            PyJs_Object_33_ = Js({})
            var.put(u'config', PyJs_Object_33_)
        PyJs_Object_34_ = Js({u'strictDi':Js(False)})
        var.put(u'defaultConfig', PyJs_Object_34_)
        var.put(u'config', var.get(u'extend')(var.get(u'defaultConfig'), var.get(u'config')))
        @Js
        def PyJs_anonymous_35_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'injector', u'tag'])
            var.put(u'element', var.get(u'jqLite')(var.get(u'element')))
            if var.get(u'element').callprop(u'injector'):
                var.put(u'tag', (Js(u'document') if PyJsStrictEq(var.get(u'element').get(u'0'),var.get(u'document')) else var.get(u'startingTag')(var.get(u'element'))))
                PyJsTempException = JsToPyException(var.get(u'ngMinErr')(Js(u'btstrpd'), Js(u"App Already Bootstrapped with this Element '{0}'"), var.get(u'tag').callprop(u'replace', JsRegExp(u'/</'), Js(u'&lt;')).callprop(u'replace', JsRegExp(u'/>/'), Js(u'&gt;'))))
                raise PyJsTempException
            var.put(u'modules', (var.get(u'modules') or Js([])))
            @Js
            def PyJs_anonymous_36_(PyJsArg_2470726f76696465_, this, arguments, var=var):
                var = Scope({u'this':this, u'$provide':PyJsArg_2470726f76696465_, u'arguments':arguments}, var)
                var.registers([u'$provide'])
                var.get(u'$provide').callprop(u'value', Js(u'$rootElement'), var.get(u'element'))
            PyJs_anonymous_36_._set_name(u'anonymous')
            var.get(u'modules').callprop(u'unshift', Js([Js(u'$provide'), PyJs_anonymous_36_]))
            if var.get(u'config').get(u'debugInfoEnabled'):
                @Js
                def PyJs_anonymous_37_(PyJsArg_24636f6d70696c6550726f7669646572_, this, arguments, var=var):
                    var = Scope({u'$compileProvider':PyJsArg_24636f6d70696c6550726f7669646572_, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'$compileProvider'])
                    var.get(u'$compileProvider').callprop(u'debugInfoEnabled', var.get(u'true'))
                PyJs_anonymous_37_._set_name(u'anonymous')
                var.get(u'modules').callprop(u'push', Js([Js(u'$compileProvider'), PyJs_anonymous_37_]))
            var.get(u'modules').callprop(u'unshift', Js(u'ng'))
            var.put(u'injector', var.get(u'createInjector')(var.get(u'modules'), var.get(u'config').get(u'strictDi')))
            @Js
            def PyJs_bootstrapApply_38_(scope, element, compile, injector, this, arguments, var=var):
                var = Scope({u'compile':compile, u'this':this, u'bootstrapApply':PyJs_bootstrapApply_38_, u'arguments':arguments, u'injector':injector, u'scope':scope, u'element':element}, var)
                var.registers([u'compile', u'scope', u'injector', u'element'])
                @Js
                def PyJs_anonymous_39_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'element').callprop(u'data', Js(u'$injector'), var.get(u'injector'))
                    var.get(u'compile')(var.get(u'element'))(var.get(u'scope'))
                PyJs_anonymous_39_._set_name(u'anonymous')
                var.get(u'scope').callprop(u'$apply', PyJs_anonymous_39_)
            PyJs_bootstrapApply_38_._set_name(u'bootstrapApply')
            var.get(u'injector').callprop(u'invoke', Js([Js(u'$rootScope'), Js(u'$rootElement'), Js(u'$compile'), Js(u'$injector'), PyJs_bootstrapApply_38_]))
            return var.get(u'injector')
        PyJs_anonymous_35_._set_name(u'anonymous')
        var.put(u'doBootstrap', PyJs_anonymous_35_)
        var.put(u'NG_ENABLE_DEBUG_INFO', JsRegExp(u'/^NG_ENABLE_DEBUG_INFO!/'))
        var.put(u'NG_DEFER_BOOTSTRAP', JsRegExp(u'/^NG_DEFER_BOOTSTRAP!/'))
        if (var.get(u'window') and var.get(u'NG_ENABLE_DEBUG_INFO').callprop(u'test', var.get(u'window').get(u'name'))):
            var.get(u'config').put(u'debugInfoEnabled', var.get(u'true'))
            var.get(u'window').put(u'name', var.get(u'window').get(u'name').callprop(u'replace', var.get(u'NG_ENABLE_DEBUG_INFO'), Js(u'')))
        if (var.get(u'window') and var.get(u'NG_DEFER_BOOTSTRAP').callprop(u'test', var.get(u'window').get(u'name')).neg()):
            return var.get(u'doBootstrap')()
        var.get(u'window').put(u'name', var.get(u'window').get(u'name').callprop(u'replace', var.get(u'NG_DEFER_BOOTSTRAP'), Js(u'')))
        @Js
        def PyJs_anonymous_40_(extraModules, this, arguments, var=var):
            var = Scope({u'this':this, u'extraModules':extraModules, u'arguments':arguments}, var)
            var.registers([u'extraModules'])
            @Js
            def PyJs_anonymous_41_(module, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'module':module}, var)
                var.registers([u'module'])
                var.get(u'modules').callprop(u'push', var.get(u'module'))
            PyJs_anonymous_41_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'extraModules'), PyJs_anonymous_41_)
            return var.get(u'doBootstrap')()
        PyJs_anonymous_40_._set_name(u'anonymous')
        var.get(u'angular').put(u'resumeBootstrap', PyJs_anonymous_40_)
        if var.get(u'isFunction')(var.get(u'angular').get(u'resumeDeferredBootstrap')):
            var.get(u'angular').callprop(u'resumeDeferredBootstrap')
    PyJsHoisted_bootstrap_.func_name = u'bootstrap'
    var.put(u'bootstrap', PyJsHoisted_bootstrap_)
    @Js
    def PyJsHoisted_inherit_(parent, extra, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'parent':parent, u'extra':extra}, var)
        var.registers([u'parent', u'extra'])
        return var.get(u'extend')(var.get(u'Object').callprop(u'create', var.get(u'parent')), var.get(u'extra'))
    PyJsHoisted_inherit_.func_name = u'inherit'
    var.put(u'inherit', PyJsHoisted_inherit_)
    @Js
    def PyJsHoisted_deepCompare_(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject, this, arguments, var=var):
        var = Scope({u'dontMatchWholeObject':dontMatchWholeObject, u'actual':actual, u'arguments':arguments, u'comparator':comparator, u'expected':expected, u'this':this, u'matchAgainstAnyProp':matchAgainstAnyProp}, var)
        var.registers([u'expectedType', u'actualVal', u'comparator', u'matchAnyProperty', u'dontMatchWholeObject', u'expected', u'matchAgainstAnyProp', u'key', u'actualType', u'actual', u'expectedVal'])
        var.put(u'actualType', var.get(u'getTypeForFilter')(var.get(u'actual')))
        var.put(u'expectedType', var.get(u'getTypeForFilter')(var.get(u'expected')))
        if (PyJsStrictEq(var.get(u'expectedType'),Js(u'string')) and PyJsStrictEq(var.get(u'expected').callprop(u'charAt', Js(0.0)),Js(u'!'))):
            return var.get(u'deepCompare')(var.get(u'actual'), var.get(u'expected').callprop(u'substring', Js(1.0)), var.get(u'comparator'), var.get(u'matchAgainstAnyProp')).neg()
        else:
            if var.get(u'isArray')(var.get(u'actual')):
                @Js
                def PyJs_anonymous_888_(item, this, arguments, var=var):
                    var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
                    var.registers([u'item'])
                    return var.get(u'deepCompare')(var.get(u'item'), var.get(u'expected'), var.get(u'comparator'), var.get(u'matchAgainstAnyProp'))
                PyJs_anonymous_888_._set_name(u'anonymous')
                return var.get(u'actual').callprop(u'some', PyJs_anonymous_888_)
        while 1:
            SWITCHED = False
            CONDITION = (var.get(u'actualType'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'object')):
                SWITCHED = True
                pass
                if var.get(u'matchAgainstAnyProp'):
                    for PyJsTemp in var.get(u'actual'):
                        var.put(u'key', PyJsTemp)
                        if (PyJsStrictNeq(var.get(u'key').callprop(u'charAt', Js(0.0)),Js(u'$')) and var.get(u'deepCompare')(var.get(u'actual').get(var.get(u'key')), var.get(u'expected'), var.get(u'comparator'), var.get(u'true'))):
                            return var.get(u'true')
                    return (Js(False) if var.get(u'dontMatchWholeObject') else var.get(u'deepCompare')(var.get(u'actual'), var.get(u'expected'), var.get(u'comparator'), Js(False)))
                else:
                    if PyJsStrictEq(var.get(u'expectedType'),Js(u'object')):
                        for PyJsTemp in var.get(u'expected'):
                            var.put(u'key', PyJsTemp)
                            var.put(u'expectedVal', var.get(u'expected').get(var.get(u'key')))
                            if (var.get(u'isFunction')(var.get(u'expectedVal')) or var.get(u'isUndefined')(var.get(u'expectedVal'))):
                                continue
                            var.put(u'matchAnyProperty', PyJsStrictEq(var.get(u'key'),Js(u'$')))
                            var.put(u'actualVal', (var.get(u'actual') if var.get(u'matchAnyProperty') else var.get(u'actual').get(var.get(u'key'))))
                            if var.get(u'deepCompare')(var.get(u'actualVal'), var.get(u'expectedVal'), var.get(u'comparator'), var.get(u'matchAnyProperty'), var.get(u'matchAnyProperty')).neg():
                                return Js(False)
                        return var.get(u'true')
                    else:
                        return var.get(u'comparator')(var.get(u'actual'), var.get(u'expected'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'function')):
                SWITCHED = True
                return Js(False)
            if True:
                SWITCHED = True
                return var.get(u'comparator')(var.get(u'actual'), var.get(u'expected'))
            SWITCHED = True
            break
    PyJsHoisted_deepCompare_.func_name = u'deepCompare'
    var.put(u'deepCompare', PyJsHoisted_deepCompare_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'resourceUrlBlacklist', u'resourceUrlWhitelist'])
        var.get(u"this").put(u'SCE_CONTEXTS', var.get(u'SCE_CONTEXTS'))
        var.put(u'resourceUrlWhitelist', Js([Js(u'self')]))
        var.put(u'resourceUrlBlacklist', Js([]))
        @Js
        def PyJs_anonymous_831_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            if var.get(u'arguments').get(u'length'):
                var.put(u'resourceUrlWhitelist', var.get(u'adjustMatchers')(var.get(u'value')))
            return var.get(u'resourceUrlWhitelist')
        PyJs_anonymous_831_._set_name(u'anonymous')
        var.get(u"this").put(u'resourceUrlWhitelist', PyJs_anonymous_831_)
        @Js
        def PyJs_anonymous_832_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            if var.get(u'arguments').get(u'length'):
                var.put(u'resourceUrlBlacklist', var.get(u'adjustMatchers')(var.get(u'value')))
            return var.get(u'resourceUrlBlacklist')
        PyJs_anonymous_832_._set_name(u'anonymous')
        var.get(u"this").put(u'resourceUrlBlacklist', PyJs_anonymous_832_)
        @Js
        def PyJs_anonymous_833_(PyJsArg_24696e6a6563746f72_, this, arguments, var=var):
            var = Scope({u'this':this, u'$injector':PyJsArg_24696e6a6563746f72_, u'arguments':arguments}, var)
            var.registers([u'byType', u'trustAs', u'valueOf', u'htmlSanitizer', u'trustedValueHolderBase', u'$injector', u'generateHolderType', u'getTrusted', u'isResourceUrlAllowedByPolicy', u'matchUrl'])
            @Js
            def PyJsHoisted_trustAs_(type, trustedValue, this, arguments, var=var):
                var = Scope({u'this':this, u'trustedValue':trustedValue, u'type':type, u'arguments':arguments}, var)
                var.registers([u'trustedValue', u'type', u'Constructor'])
                var.put(u'Constructor', (var.get(u'byType').get(var.get(u'type')) if var.get(u'byType').callprop(u'hasOwnProperty', var.get(u'type')) else var.get(u"null")))
                if var.get(u'Constructor').neg():
                    PyJsTempException = JsToPyException(var.get(u'$sceMinErr')(Js(u'icontext'), Js(u'Attempted to trust a value in invalid context. Context: {0}; Value: {1}'), var.get(u'type'), var.get(u'trustedValue')))
                    raise PyJsTempException
                if ((PyJsStrictEq(var.get(u'trustedValue'),var.get(u"null")) or var.get(u'isUndefined')(var.get(u'trustedValue'))) or PyJsStrictEq(var.get(u'trustedValue'),Js(u''))):
                    return var.get(u'trustedValue')
                if PyJsStrictNeq(var.get(u'trustedValue',throw=False).typeof(),Js(u'string')):
                    PyJsTempException = JsToPyException(var.get(u'$sceMinErr')(Js(u'itype'), Js(u'Attempted to trust a non-string value in a content requiring a string: Context: {0}'), var.get(u'type')))
                    raise PyJsTempException
                return var.get(u'Constructor').create(var.get(u'trustedValue'))
            PyJsHoisted_trustAs_.func_name = u'trustAs'
            var.put(u'trustAs', PyJsHoisted_trustAs_)
            @Js
            def PyJsHoisted_valueOf_(maybeTrusted, this, arguments, var=var):
                var = Scope({u'this':this, u'maybeTrusted':maybeTrusted, u'arguments':arguments}, var)
                var.registers([u'maybeTrusted'])
                if var.get(u'maybeTrusted').instanceof(var.get(u'trustedValueHolderBase')):
                    return var.get(u'maybeTrusted').callprop(u'$$unwrapTrustedValue')
                else:
                    return var.get(u'maybeTrusted')
            PyJsHoisted_valueOf_.func_name = u'valueOf'
            var.put(u'valueOf', PyJsHoisted_valueOf_)
            @Js
            def PyJsHoisted_generateHolderType_(Base, this, arguments, var=var):
                var = Scope({u'this':this, u'Base':Base, u'arguments':arguments}, var)
                var.registers([u'holderType', u'Base'])
                @Js
                def PyJs_TrustedValueHolderType_835_(trustedValue, this, arguments, var=var):
                    var = Scope({u'this':this, u'TrustedValueHolderType':PyJs_TrustedValueHolderType_835_, u'trustedValue':trustedValue, u'arguments':arguments}, var)
                    var.registers([u'trustedValue'])
                    @Js
                    def PyJs_anonymous_836_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u'trustedValue')
                    PyJs_anonymous_836_._set_name(u'anonymous')
                    var.get(u"this").put(u'$$unwrapTrustedValue', PyJs_anonymous_836_)
                PyJs_TrustedValueHolderType_835_._set_name(u'TrustedValueHolderType')
                var.put(u'holderType', PyJs_TrustedValueHolderType_835_)
                if var.get(u'Base'):
                    var.get(u'holderType').put(u'prototype', var.get(u'Base').create())
                @Js
                def PyJs_sceValueOf_837_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'sceValueOf':PyJs_sceValueOf_837_}, var)
                    var.registers([])
                    return var.get(u"this").callprop(u'$$unwrapTrustedValue')
                PyJs_sceValueOf_837_._set_name(u'sceValueOf')
                var.get(u'holderType').get(u'prototype').put(u'valueOf', PyJs_sceValueOf_837_)
                @Js
                def PyJs_sceToString_838_(this, arguments, var=var):
                    var = Scope({u'this':this, u'sceToString':PyJs_sceToString_838_, u'arguments':arguments}, var)
                    var.registers([])
                    return var.get(u"this").callprop(u'$$unwrapTrustedValue').callprop(u'toString')
                PyJs_sceToString_838_._set_name(u'sceToString')
                var.get(u'holderType').get(u'prototype').put(u'toString', PyJs_sceToString_838_)
                return var.get(u'holderType')
            PyJsHoisted_generateHolderType_.func_name = u'generateHolderType'
            var.put(u'generateHolderType', PyJsHoisted_generateHolderType_)
            @Js
            def PyJsHoisted_getTrusted_(type, maybeTrusted, this, arguments, var=var):
                var = Scope({u'this':this, u'maybeTrusted':maybeTrusted, u'type':type, u'arguments':arguments}, var)
                var.registers([u'maybeTrusted', u'type', u'constructor'])
                if ((PyJsStrictEq(var.get(u'maybeTrusted'),var.get(u"null")) or var.get(u'isUndefined')(var.get(u'maybeTrusted'))) or PyJsStrictEq(var.get(u'maybeTrusted'),Js(u''))):
                    return var.get(u'maybeTrusted')
                var.put(u'constructor', (var.get(u'byType').get(var.get(u'type')) if var.get(u'byType').callprop(u'hasOwnProperty', var.get(u'type')) else var.get(u"null")))
                if (var.get(u'constructor') and var.get(u'maybeTrusted').instanceof(var.get(u'constructor'))):
                    return var.get(u'maybeTrusted').callprop(u'$$unwrapTrustedValue')
                if PyJsStrictEq(var.get(u'type'),var.get(u'SCE_CONTEXTS').get(u'RESOURCE_URL')):
                    if var.get(u'isResourceUrlAllowedByPolicy')(var.get(u'maybeTrusted')):
                        return var.get(u'maybeTrusted')
                    else:
                        PyJsTempException = JsToPyException(var.get(u'$sceMinErr')(Js(u'insecurl'), Js(u'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}'), var.get(u'maybeTrusted').callprop(u'toString')))
                        raise PyJsTempException
                else:
                    if PyJsStrictEq(var.get(u'type'),var.get(u'SCE_CONTEXTS').get(u'HTML')):
                        return var.get(u'htmlSanitizer')(var.get(u'maybeTrusted'))
                PyJsTempException = JsToPyException(var.get(u'$sceMinErr')(Js(u'unsafe'), Js(u'Attempting to use an unsafe value in a safe context.')))
                raise PyJsTempException
            PyJsHoisted_getTrusted_.func_name = u'getTrusted'
            var.put(u'getTrusted', PyJsHoisted_getTrusted_)
            @Js
            def PyJsHoisted_isResourceUrlAllowedByPolicy_(url, this, arguments, var=var):
                var = Scope({u'url':url, u'this':this, u'arguments':arguments}, var)
                var.registers([u'i', u'url', u'n', u'allowed', u'parsedUrl'])
                var.put(u'parsedUrl', var.get(u'urlResolve')(var.get(u'url').callprop(u'toString')))
                var.put(u'allowed', Js(False))
                #for JS loop
                PyJsComma(var.put(u'i', Js(0.0)),var.put(u'n', var.get(u'resourceUrlWhitelist').get(u'length')))
                while (var.get(u'i')<var.get(u'n')):
                    try:
                        if var.get(u'matchUrl')(var.get(u'resourceUrlWhitelist').get(var.get(u'i')), var.get(u'parsedUrl')):
                            var.put(u'allowed', var.get(u'true'))
                            break
                    finally:
                            (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                if var.get(u'allowed'):
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'n', var.get(u'resourceUrlBlacklist').get(u'length')))
                    while (var.get(u'i')<var.get(u'n')):
                        try:
                            if var.get(u'matchUrl')(var.get(u'resourceUrlBlacklist').get(var.get(u'i')), var.get(u'parsedUrl')):
                                var.put(u'allowed', Js(False))
                                break
                        finally:
                                (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                return var.get(u'allowed')
            PyJsHoisted_isResourceUrlAllowedByPolicy_.func_name = u'isResourceUrlAllowedByPolicy'
            var.put(u'isResourceUrlAllowedByPolicy', PyJsHoisted_isResourceUrlAllowedByPolicy_)
            @Js
            def PyJsHoisted_matchUrl_(matcher, parsedUrl, this, arguments, var=var):
                var = Scope({u'this':this, u'matcher':matcher, u'arguments':arguments, u'parsedUrl':parsedUrl}, var)
                var.registers([u'matcher', u'parsedUrl'])
                if PyJsStrictEq(var.get(u'matcher'),Js(u'self')):
                    return var.get(u'urlIsSameOrigin')(var.get(u'parsedUrl'))
                else:
                    return var.get(u'matcher').callprop(u'exec', var.get(u'parsedUrl').get(u'href')).neg().neg()
            PyJsHoisted_matchUrl_.func_name = u'matchUrl'
            var.put(u'matchUrl', PyJsHoisted_matchUrl_)
            @Js
            def PyJs_htmlSanitizer_834_(html, this, arguments, var=var):
                var = Scope({u'this':this, u'html':html, u'arguments':arguments, u'htmlSanitizer':PyJs_htmlSanitizer_834_}, var)
                var.registers([u'html'])
                PyJsTempException = JsToPyException(var.get(u'$sceMinErr')(Js(u'unsafe'), Js(u'Attempting to use an unsafe value in a safe context.')))
                raise PyJsTempException
            PyJs_htmlSanitizer_834_._set_name(u'htmlSanitizer')
            var.put(u'htmlSanitizer', PyJs_htmlSanitizer_834_)
            if var.get(u'$injector').callprop(u'has', Js(u'$sanitize')):
                var.put(u'htmlSanitizer', var.get(u'$injector').callprop(u'get', Js(u'$sanitize')))
            pass
            pass
            pass
            var.put(u'trustedValueHolderBase', var.get(u'generateHolderType')())
            PyJs_Object_839_ = Js({})
            var.put(u'byType', PyJs_Object_839_)
            var.get(u'byType').put(var.get(u'SCE_CONTEXTS').get(u'HTML'), var.get(u'generateHolderType')(var.get(u'trustedValueHolderBase')))
            var.get(u'byType').put(var.get(u'SCE_CONTEXTS').get(u'CSS'), var.get(u'generateHolderType')(var.get(u'trustedValueHolderBase')))
            var.get(u'byType').put(var.get(u'SCE_CONTEXTS').get(u'URL'), var.get(u'generateHolderType')(var.get(u'trustedValueHolderBase')))
            var.get(u'byType').put(var.get(u'SCE_CONTEXTS').get(u'JS'), var.get(u'generateHolderType')(var.get(u'trustedValueHolderBase')))
            var.get(u'byType').put(var.get(u'SCE_CONTEXTS').get(u'RESOURCE_URL'), var.get(u'generateHolderType')(var.get(u'byType').get(var.get(u'SCE_CONTEXTS').get(u'URL'))))
            pass
            pass
            pass
            PyJs_Object_840_ = Js({u'trustAs':var.get(u'trustAs'),u'getTrusted':var.get(u'getTrusted'),u'valueOf':var.get(u'valueOf')})
            return PyJs_Object_840_
        PyJs_anonymous_833_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$injector'), PyJs_anonymous_833_]))
    PyJsHoistedNonPyName.func_name = u'$SceDelegateProvider'
    var.put(u'$SceDelegateProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_getBooleanAttrName_(element, name, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'element':element}, var)
        var.registers([u'name', u'booleanAttr', u'element'])
        var.put(u'booleanAttr', var.get(u'BOOLEAN_ATTR').get(var.get(u'name').callprop(u'toLowerCase')))
        return ((var.get(u'booleanAttr') and var.get(u'BOOLEAN_ELEMENTS').get(var.get(u'nodeName_')(var.get(u'element')))) and var.get(u'booleanAttr'))
    PyJsHoisted_getBooleanAttrName_.func_name = u'getBooleanAttrName'
    var.put(u'getBooleanAttrName', PyJsHoisted_getBooleanAttrName_)
    @Js
    def PyJsHoisted_weekParser_(isoWeek, existingDate, this, arguments, var=var):
        var = Scope({u'isoWeek':isoWeek, u'this':this, u'arguments':arguments, u'existingDate':existingDate}, var)
        var.registers([u'week', u'seconds', u'addDays', u'firstThurs', u'existingDate', u'hours', u'parts', u'year', u'isoWeek', u'minutes', u'milliseconds'])
        if var.get(u'isDate')(var.get(u'isoWeek')):
            return var.get(u'isoWeek')
        if var.get(u'isString')(var.get(u'isoWeek')):
            var.get(u'WEEK_REGEXP').put(u'lastIndex', Js(0.0))
            var.put(u'parts', var.get(u'WEEK_REGEXP').callprop(u'exec', var.get(u'isoWeek')))
            if var.get(u'parts'):
                var.put(u'year', (+var.get(u'parts').get(u'1')))
                var.put(u'week', (+var.get(u'parts').get(u'2')))
                var.put(u'hours', Js(0.0))
                var.put(u'minutes', Js(0.0))
                var.put(u'seconds', Js(0.0))
                var.put(u'milliseconds', Js(0.0))
                var.put(u'firstThurs', var.get(u'getFirstThursdayOfYear')(var.get(u'year')))
                var.put(u'addDays', ((var.get(u'week')-Js(1.0))*Js(7.0)))
                if var.get(u'existingDate'):
                    var.put(u'hours', var.get(u'existingDate').callprop(u'getHours'))
                    var.put(u'minutes', var.get(u'existingDate').callprop(u'getMinutes'))
                    var.put(u'seconds', var.get(u'existingDate').callprop(u'getSeconds'))
                    var.put(u'milliseconds', var.get(u'existingDate').callprop(u'getMilliseconds'))
                return var.get(u'Date').create(var.get(u'year'), Js(0.0), (var.get(u'firstThurs').callprop(u'getDate')+var.get(u'addDays')), var.get(u'hours'), var.get(u'minutes'), var.get(u'seconds'), var.get(u'milliseconds'))
        return var.get(u'NaN')
    PyJsHoisted_weekParser_.func_name = u'weekParser'
    var.put(u'weekParser', PyJsHoisted_weekParser_)
    @Js
    def PyJsHoisted_parseAbsoluteUrl_(absoluteUrl, locationObj, this, arguments, var=var):
        var = Scope({u'this':this, u'absoluteUrl':absoluteUrl, u'arguments':arguments, u'locationObj':locationObj}, var)
        var.registers([u'absoluteUrl', u'locationObj', u'parsedUrl'])
        var.put(u'parsedUrl', var.get(u'urlResolve')(var.get(u'absoluteUrl')))
        var.get(u'locationObj').put(u'$$protocol', var.get(u'parsedUrl').get(u'protocol'))
        var.get(u'locationObj').put(u'$$host', var.get(u'parsedUrl').get(u'hostname'))
        var.get(u'locationObj').put(u'$$port', ((var.get(u'toInt')(var.get(u'parsedUrl').get(u'port')) or var.get(u'DEFAULT_PORTS').get(var.get(u'parsedUrl').get(u'protocol'))) or var.get(u"null")))
    PyJsHoisted_parseAbsoluteUrl_.func_name = u'parseAbsoluteUrl'
    var.put(u'parseAbsoluteUrl', PyJsHoisted_parseAbsoluteUrl_)
    @Js
    def PyJsHoistedNonPyName(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'cacheDefault', u'cacheExpensive'])
        var.put(u'cacheDefault', var.get(u'createMap')())
        var.put(u'cacheExpensive', var.get(u'createMap')())
        @Js
        def PyJs_anonymous_725_(PyJsArg_2466696c746572_, this, arguments, var=var):
            var = Scope({u'this':this, u'$filter':PyJsArg_2466696c746572_, u'arguments':arguments}, var)
            var.registers([u'noUnsafeEval', u'oneTimeLiteralWatchDelegate', u'$parseOptionsExpensive', u'inputsWatchDelegate', u'$parseOptions', u'$filter', u'oneTimeWatchDelegate', u'addInterceptor', u'expressionInputDirtyCheck', u'constantWatchDelegate'])
            @Js
            def PyJsHoisted_expressionInputDirtyCheck_(newValue, oldValueOfValue, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'newValue':newValue, u'oldValueOfValue':oldValueOfValue}, var)
                var.registers([u'newValue', u'oldValueOfValue'])
                if ((var.get(u'newValue')==var.get(u"null")) or (var.get(u'oldValueOfValue')==var.get(u"null"))):
                    return PyJsStrictEq(var.get(u'newValue'),var.get(u'oldValueOfValue'))
                if PyJsStrictEq(var.get(u'newValue',throw=False).typeof(),Js(u'object')):
                    var.put(u'newValue', var.get(u'getValueOf')(var.get(u'newValue')))
                    if PyJsStrictEq(var.get(u'newValue',throw=False).typeof(),Js(u'object')):
                        return Js(False)
                return (PyJsStrictEq(var.get(u'newValue'),var.get(u'oldValueOfValue')) or (PyJsStrictNeq(var.get(u'newValue'),var.get(u'newValue')) and PyJsStrictNeq(var.get(u'oldValueOfValue'),var.get(u'oldValueOfValue'))))
            PyJsHoisted_expressionInputDirtyCheck_.func_name = u'expressionInputDirtyCheck'
            var.put(u'expressionInputDirtyCheck', PyJsHoisted_expressionInputDirtyCheck_)
            @Js
            def PyJsHoisted_constantWatchDelegate_(scope, listener, objectEquality, parsedExpression, this, arguments, var=var):
                var = Scope({u'listener':listener, u'arguments':arguments, u'this':this, u'scope':scope, u'parsedExpression':parsedExpression, u'objectEquality':objectEquality}, var)
                var.registers([u'listener', u'unwatch', u'objectEquality', u'parsedExpression', u'scope'])
                pass
                @Js
                def PyJs_constantWatch_738_(scope, this, arguments, var=var):
                    var = Scope({u'this':this, u'scope':scope, u'constantWatch':PyJs_constantWatch_738_, u'arguments':arguments}, var)
                    var.registers([u'scope'])
                    return var.get(u'parsedExpression')(var.get(u'scope'))
                PyJs_constantWatch_738_._set_name(u'constantWatch')
                @Js
                def PyJs_constantListener_739_(value, old, scope, this, arguments, var=var):
                    var = Scope({u'old':old, u'this':this, u'value':value, u'arguments':arguments, u'scope':scope, u'constantListener':PyJs_constantListener_739_}, var)
                    var.registers([u'scope', u'old', u'value'])
                    if var.get(u'isFunction')(var.get(u'listener')):
                        var.get(u'listener').callprop(u'apply', var.get(u"this"), var.get(u'arguments'))
                    var.get(u'unwatch')()
                PyJs_constantListener_739_._set_name(u'constantListener')
                return var.put(u'unwatch', var.get(u'scope').callprop(u'$watch', PyJs_constantWatch_738_, PyJs_constantListener_739_, var.get(u'objectEquality')))
            PyJsHoisted_constantWatchDelegate_.func_name = u'constantWatchDelegate'
            var.put(u'constantWatchDelegate', PyJsHoisted_constantWatchDelegate_)
            @Js
            def PyJsHoisted_inputsWatchDelegate_(scope, listener, objectEquality, parsedExpression, prettyPrintExpression, this, arguments, var=var):
                var = Scope({u'listener':listener, u'arguments':arguments, u'prettyPrintExpression':prettyPrintExpression, u'this':this, u'scope':scope, u'parsedExpression':parsedExpression, u'objectEquality':objectEquality}, var)
                var.registers([u'oldInputValueOfValues', u'listener', u'inputExpressions', u'i', u'objectEquality', u'ii', u'oldInputValues', u'prettyPrintExpression', u'scope', u'lastResult', u'oldInputValueOf', u'parsedExpression'])
                var.put(u'inputExpressions', var.get(u'parsedExpression').get(u'inputs'))
                pass
                if PyJsStrictEq(var.get(u'inputExpressions').get(u'length'),Js(1.0)):
                    var.put(u'oldInputValueOf', var.get(u'expressionInputDirtyCheck'))
                    var.put(u'inputExpressions', var.get(u'inputExpressions').get(u'0'))
                    @Js
                    def PyJs_expressionInputWatch_729_(scope, this, arguments, var=var):
                        var = Scope({u'this':this, u'scope':scope, u'expressionInputWatch':PyJs_expressionInputWatch_729_, u'arguments':arguments}, var)
                        var.registers([u'scope', u'newInputValue'])
                        var.put(u'newInputValue', var.get(u'inputExpressions')(var.get(u'scope')))
                        if var.get(u'expressionInputDirtyCheck')(var.get(u'newInputValue'), var.get(u'oldInputValueOf')).neg():
                            var.put(u'lastResult', var.get(u'parsedExpression')(var.get(u'scope'), var.get(u'undefined'), var.get(u'undefined'), Js([var.get(u'newInputValue')])))
                            var.put(u'oldInputValueOf', (var.get(u'newInputValue') and var.get(u'getValueOf')(var.get(u'newInputValue'))))
                        return var.get(u'lastResult')
                    PyJs_expressionInputWatch_729_._set_name(u'expressionInputWatch')
                    return var.get(u'scope').callprop(u'$watch', PyJs_expressionInputWatch_729_, var.get(u'listener'), var.get(u'objectEquality'), var.get(u'prettyPrintExpression'))
                var.put(u'oldInputValueOfValues', Js([]))
                var.put(u'oldInputValues', Js([]))
                #for JS loop
                var.put(u'i', Js(0.0))
                var.put(u'ii', var.get(u'inputExpressions').get(u'length'))
                while (var.get(u'i')<var.get(u'ii')):
                    try:
                        var.get(u'oldInputValueOfValues').put(var.get(u'i'), var.get(u'expressionInputDirtyCheck'))
                        var.get(u'oldInputValues').put(var.get(u'i'), var.get(u"null"))
                    finally:
                            (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                @Js
                def PyJs_expressionInputsWatch_730_(scope, this, arguments, var=var):
                    var = Scope({u'this':this, u'scope':scope, u'arguments':arguments, u'expressionInputsWatch':PyJs_expressionInputsWatch_730_}, var)
                    var.registers([u'i', u'ii', u'changed', u'newInputValue', u'scope'])
                    var.put(u'changed', Js(False))
                    #for JS loop
                    var.put(u'i', Js(0.0))
                    var.put(u'ii', var.get(u'inputExpressions').get(u'length'))
                    while (var.get(u'i')<var.get(u'ii')):
                        try:
                            var.put(u'newInputValue', var.get(u'inputExpressions').callprop(var.get(u'i'), var.get(u'scope')))
                            if (var.get(u'changed') or var.put(u'changed', var.get(u'expressionInputDirtyCheck')(var.get(u'newInputValue'), var.get(u'oldInputValueOfValues').get(var.get(u'i'))).neg())):
                                var.get(u'oldInputValues').put(var.get(u'i'), var.get(u'newInputValue'))
                                var.get(u'oldInputValueOfValues').put(var.get(u'i'), (var.get(u'newInputValue') and var.get(u'getValueOf')(var.get(u'newInputValue'))))
                        finally:
                                (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                    if var.get(u'changed'):
                        var.put(u'lastResult', var.get(u'parsedExpression')(var.get(u'scope'), var.get(u'undefined'), var.get(u'undefined'), var.get(u'oldInputValues')))
                    return var.get(u'lastResult')
                PyJs_expressionInputsWatch_730_._set_name(u'expressionInputsWatch')
                return var.get(u'scope').callprop(u'$watch', PyJs_expressionInputsWatch_730_, var.get(u'listener'), var.get(u'objectEquality'), var.get(u'prettyPrintExpression'))
            PyJsHoisted_inputsWatchDelegate_.func_name = u'inputsWatchDelegate'
            var.put(u'inputsWatchDelegate', PyJsHoisted_inputsWatchDelegate_)
            @Js
            def PyJsHoisted_oneTimeWatchDelegate_(scope, listener, objectEquality, parsedExpression, this, arguments, var=var):
                var = Scope({u'listener':listener, u'arguments':arguments, u'this':this, u'scope':scope, u'parsedExpression':parsedExpression, u'objectEquality':objectEquality}, var)
                var.registers([u'unwatch', u'lastValue', u'objectEquality', u'listener', u'scope', u'parsedExpression'])
                pass
                @Js
                def PyJs_oneTimeWatch_731_(scope, this, arguments, var=var):
                    var = Scope({u'this':this, u'scope':scope, u'oneTimeWatch':PyJs_oneTimeWatch_731_, u'arguments':arguments}, var)
                    var.registers([u'scope'])
                    return var.get(u'parsedExpression')(var.get(u'scope'))
                PyJs_oneTimeWatch_731_._set_name(u'oneTimeWatch')
                @Js
                def PyJs_oneTimeListener_732_(value, old, scope, this, arguments, var=var):
                    var = Scope({u'old':old, u'this':this, u'value':value, u'oneTimeListener':PyJs_oneTimeListener_732_, u'arguments':arguments, u'scope':scope}, var)
                    var.registers([u'scope', u'old', u'value'])
                    var.put(u'lastValue', var.get(u'value'))
                    if var.get(u'isFunction')(var.get(u'listener')):
                        var.get(u'listener').callprop(u'apply', var.get(u"this"), var.get(u'arguments'))
                    if var.get(u'isDefined')(var.get(u'value')):
                        @Js
                        def PyJs_anonymous_733_(this, arguments, var=var):
                            var = Scope({u'this':this, u'arguments':arguments}, var)
                            var.registers([])
                            if var.get(u'isDefined')(var.get(u'lastValue')):
                                var.get(u'unwatch')()
                        PyJs_anonymous_733_._set_name(u'anonymous')
                        var.get(u'scope').callprop(u'$$postDigest', PyJs_anonymous_733_)
                PyJs_oneTimeListener_732_._set_name(u'oneTimeListener')
                return var.put(u'unwatch', var.get(u'scope').callprop(u'$watch', PyJs_oneTimeWatch_731_, PyJs_oneTimeListener_732_, var.get(u'objectEquality')))
            PyJsHoisted_oneTimeWatchDelegate_.func_name = u'oneTimeWatchDelegate'
            var.put(u'oneTimeWatchDelegate', PyJsHoisted_oneTimeWatchDelegate_)
            @Js
            def PyJsHoisted_addInterceptor_(parsedExpression, interceptorFn, this, arguments, var=var):
                var = Scope({u'this':this, u'interceptorFn':interceptorFn, u'parsedExpression':parsedExpression, u'arguments':arguments}, var)
                var.registers([u'watchDelegate', u'regularWatch', u'useInputs', u'interceptorFn', u'parsedExpression', u'fn'])
                if var.get(u'interceptorFn').neg():
                    return var.get(u'parsedExpression')
                var.put(u'watchDelegate', var.get(u'parsedExpression').get(u'$$watchDelegate'))
                var.put(u'useInputs', Js(False))
                var.put(u'regularWatch', (PyJsStrictNeq(var.get(u'watchDelegate'),var.get(u'oneTimeLiteralWatchDelegate')) and PyJsStrictNeq(var.get(u'watchDelegate'),var.get(u'oneTimeWatchDelegate'))))
                @Js
                def PyJs_regularInterceptedExpression_740_(scope, locals, assign, inputs, this, arguments, var=var):
                    var = Scope({u'inputs':inputs, u'regularInterceptedExpression':PyJs_regularInterceptedExpression_740_, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
                    var.registers([u'scope', u'inputs', u'locals', u'value', u'assign'])
                    var.put(u'value', (var.get(u'inputs').get(u'0') if (var.get(u'useInputs') and var.get(u'inputs')) else var.get(u'parsedExpression')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))))
                    return var.get(u'interceptorFn')(var.get(u'value'), var.get(u'scope'), var.get(u'locals'))
                PyJs_regularInterceptedExpression_740_._set_name(u'regularInterceptedExpression')
                @Js
                def PyJs_oneTimeInterceptedExpression_741_(scope, locals, assign, inputs, this, arguments, var=var):
                    var = Scope({u'inputs':inputs, u'arguments':arguments, u'oneTimeInterceptedExpression':PyJs_oneTimeInterceptedExpression_741_, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
                    var.registers([u'inputs', u'value', u'result', u'scope', u'assign', u'locals'])
                    var.put(u'value', var.get(u'parsedExpression')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')))
                    var.put(u'result', var.get(u'interceptorFn')(var.get(u'value'), var.get(u'scope'), var.get(u'locals')))
                    return (var.get(u'result') if var.get(u'isDefined')(var.get(u'value')) else var.get(u'value'))
                PyJs_oneTimeInterceptedExpression_741_._set_name(u'oneTimeInterceptedExpression')
                var.put(u'fn', (PyJs_regularInterceptedExpression_740_ if var.get(u'regularWatch') else PyJs_oneTimeInterceptedExpression_741_))
                if (var.get(u'parsedExpression').get(u'$$watchDelegate') and PyJsStrictNeq(var.get(u'parsedExpression').get(u'$$watchDelegate'),var.get(u'inputsWatchDelegate'))):
                    var.get(u'fn').put(u'$$watchDelegate', var.get(u'parsedExpression').get(u'$$watchDelegate'))
                else:
                    if var.get(u'interceptorFn').get(u'$stateful').neg():
                        var.get(u'fn').put(u'$$watchDelegate', var.get(u'inputsWatchDelegate'))
                        var.put(u'useInputs', var.get(u'parsedExpression').get(u'inputs').neg())
                        var.get(u'fn').put(u'inputs', (var.get(u'parsedExpression').get(u'inputs') if var.get(u'parsedExpression').get(u'inputs') else Js([var.get(u'parsedExpression')])))
                return var.get(u'fn')
            PyJsHoisted_addInterceptor_.func_name = u'addInterceptor'
            var.put(u'addInterceptor', PyJsHoisted_addInterceptor_)
            @Js
            def PyJsHoisted_oneTimeLiteralWatchDelegate_(scope, listener, objectEquality, parsedExpression, this, arguments, var=var):
                var = Scope({u'listener':listener, u'arguments':arguments, u'this':this, u'scope':scope, u'parsedExpression':parsedExpression, u'objectEquality':objectEquality}, var)
                var.registers([u'unwatch', u'lastValue', u'isAllDefined', u'objectEquality', u'listener', u'scope', u'parsedExpression'])
                @Js
                def PyJsHoisted_isAllDefined_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value', u'allDefined'])
                    var.put(u'allDefined', var.get(u'true'))
                    @Js
                    def PyJs_anonymous_737_(val, this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments, u'val':val}, var)
                        var.registers([u'val'])
                        if var.get(u'isDefined')(var.get(u'val')).neg():
                            var.put(u'allDefined', Js(False))
                    PyJs_anonymous_737_._set_name(u'anonymous')
                    var.get(u'forEach')(var.get(u'value'), PyJs_anonymous_737_)
                    return var.get(u'allDefined')
                PyJsHoisted_isAllDefined_.func_name = u'isAllDefined'
                var.put(u'isAllDefined', PyJsHoisted_isAllDefined_)
                pass
                @Js
                def PyJs_oneTimeWatch_734_(scope, this, arguments, var=var):
                    var = Scope({u'this':this, u'scope':scope, u'oneTimeWatch':PyJs_oneTimeWatch_734_, u'arguments':arguments}, var)
                    var.registers([u'scope'])
                    return var.get(u'parsedExpression')(var.get(u'scope'))
                PyJs_oneTimeWatch_734_._set_name(u'oneTimeWatch')
                @Js
                def PyJs_oneTimeListener_735_(value, old, scope, this, arguments, var=var):
                    var = Scope({u'old':old, u'this':this, u'value':value, u'oneTimeListener':PyJs_oneTimeListener_735_, u'arguments':arguments, u'scope':scope}, var)
                    var.registers([u'scope', u'old', u'value'])
                    var.put(u'lastValue', var.get(u'value'))
                    if var.get(u'isFunction')(var.get(u'listener')):
                        var.get(u'listener').callprop(u'call', var.get(u"this"), var.get(u'value'), var.get(u'old'), var.get(u'scope'))
                    if var.get(u'isAllDefined')(var.get(u'value')):
                        @Js
                        def PyJs_anonymous_736_(this, arguments, var=var):
                            var = Scope({u'this':this, u'arguments':arguments}, var)
                            var.registers([])
                            if var.get(u'isAllDefined')(var.get(u'lastValue')):
                                var.get(u'unwatch')()
                        PyJs_anonymous_736_._set_name(u'anonymous')
                        var.get(u'scope').callprop(u'$$postDigest', PyJs_anonymous_736_)
                PyJs_oneTimeListener_735_._set_name(u'oneTimeListener')
                return var.put(u'unwatch', var.get(u'scope').callprop(u'$watch', PyJs_oneTimeWatch_734_, PyJs_oneTimeListener_735_, var.get(u'objectEquality')))
                pass
            PyJsHoisted_oneTimeLiteralWatchDelegate_.func_name = u'oneTimeLiteralWatchDelegate'
            var.put(u'oneTimeLiteralWatchDelegate', PyJsHoisted_oneTimeLiteralWatchDelegate_)
            var.put(u'noUnsafeEval', var.get(u'csp')().get(u'noUnsafeEval'))
            PyJs_Object_726_ = Js({u'csp':var.get(u'noUnsafeEval'),u'expensiveChecks':Js(False)})
            var.put(u'$parseOptions', PyJs_Object_726_)
            PyJs_Object_727_ = Js({u'csp':var.get(u'noUnsafeEval'),u'expensiveChecks':var.get(u'true')})
            var.put(u'$parseOptionsExpensive', PyJs_Object_727_)
            @Js
            def PyJs_InlineNonPyName_728_(exp, interceptorFn, expensiveChecks, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'exp':exp, u'expensiveChecks':expensiveChecks, u'interceptorFn':interceptorFn, u'$parse':PyJs_InlineNonPyName_728_}, var)
                var.registers([u'lexer', u'parseOptions', u'cache', u'parser', u'oneTime', u'cacheKey', u'exp', u'expensiveChecks', u'interceptorFn', u'parsedExpression'])
                pass
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get(u'exp',throw=False).typeof())
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(u'string')):
                        SWITCHED = True
                        var.put(u'exp', var.get(u'exp').callprop(u'trim'))
                        var.put(u'cacheKey', var.get(u'exp'))
                        var.put(u'cache', (var.get(u'cacheExpensive') if var.get(u'expensiveChecks') else var.get(u'cacheDefault')))
                        var.put(u'parsedExpression', var.get(u'cache').get(var.get(u'cacheKey')))
                        if var.get(u'parsedExpression').neg():
                            if (PyJsStrictEq(var.get(u'exp').callprop(u'charAt', Js(0.0)),Js(u':')) and PyJsStrictEq(var.get(u'exp').callprop(u'charAt', Js(1.0)),Js(u':'))):
                                var.put(u'oneTime', var.get(u'true'))
                                var.put(u'exp', var.get(u'exp').callprop(u'substring', Js(2.0)))
                            var.put(u'parseOptions', (var.get(u'$parseOptionsExpensive') if var.get(u'expensiveChecks') else var.get(u'$parseOptions')))
                            var.put(u'lexer', var.get(u'Lexer').create(var.get(u'parseOptions')))
                            var.put(u'parser', var.get(u'Parser').create(var.get(u'lexer'), var.get(u'$filter'), var.get(u'parseOptions')))
                            var.put(u'parsedExpression', var.get(u'parser').callprop(u'parse', var.get(u'exp')))
                            if var.get(u'parsedExpression').get(u'constant'):
                                var.get(u'parsedExpression').put(u'$$watchDelegate', var.get(u'constantWatchDelegate'))
                            else:
                                if var.get(u'oneTime'):
                                    var.get(u'parsedExpression').put(u'$$watchDelegate', (var.get(u'oneTimeLiteralWatchDelegate') if var.get(u'parsedExpression').get(u'literal') else var.get(u'oneTimeWatchDelegate')))
                                else:
                                    if var.get(u'parsedExpression').get(u'inputs'):
                                        var.get(u'parsedExpression').put(u'$$watchDelegate', var.get(u'inputsWatchDelegate'))
                            var.get(u'cache').put(var.get(u'cacheKey'), var.get(u'parsedExpression'))
                        return var.get(u'addInterceptor')(var.get(u'parsedExpression'), var.get(u'interceptorFn'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js(u'function')):
                        SWITCHED = True
                        return var.get(u'addInterceptor')(var.get(u'exp'), var.get(u'interceptorFn'))
                    if True:
                        SWITCHED = True
                        return var.get(u'noop')
                    SWITCHED = True
                    break
            PyJs_InlineNonPyName_728_._set_name(u'$parse')
            return PyJs_InlineNonPyName_728_
            pass
            pass
            pass
            pass
            pass
            pass
        PyJs_anonymous_725_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$filter'), PyJs_anonymous_725_]))
    PyJsHoistedNonPyName.func_name = u'$ParseProvider'
    var.put(u'$ParseProvider', PyJsHoistedNonPyName)
    @Js
    def PyJsHoisted_valueFn_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        @Js
        def PyJs_anonymous_12_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            return var.get(u'value')
        PyJs_anonymous_12_._set_name(u'anonymous')
        return PyJs_anonymous_12_
    PyJsHoisted_valueFn_.func_name = u'valueFn'
    var.put(u'valueFn', PyJsHoisted_valueFn_)
    Js(u'use strict')
    pass
    var.put(u'REGEX_STRING_REGEXP', JsRegExp(u'/^\\/(.+)\\/([a-z]*)$/'))
    var.put(u'VALIDITY_STATE_PROPERTY', Js(u'validity'))
    @Js
    def PyJs_anonymous_3_(string, this, arguments, var=var):
        var = Scope({u'this':this, u'string':string, u'arguments':arguments}, var)
        var.registers([u'string'])
        return (var.get(u'string').callprop(u'toLowerCase') if var.get(u'isString')(var.get(u'string')) else var.get(u'string'))
    PyJs_anonymous_3_._set_name(u'anonymous')
    var.put(u'lowercase', PyJs_anonymous_3_)
    var.put(u'hasOwnProperty', var.get(u'Object').get(u'prototype').get(u'hasOwnProperty'))
    @Js
    def PyJs_anonymous_4_(string, this, arguments, var=var):
        var = Scope({u'this':this, u'string':string, u'arguments':arguments}, var)
        var.registers([u'string'])
        return (var.get(u'string').callprop(u'toUpperCase') if var.get(u'isString')(var.get(u'string')) else var.get(u'string'))
    PyJs_anonymous_4_._set_name(u'anonymous')
    var.put(u'uppercase', PyJs_anonymous_4_)
    @Js
    def PyJs_anonymous_5_(s, this, arguments, var=var):
        var = Scope({u'this':this, u's':s, u'arguments':arguments}, var)
        var.registers([u's'])
        @Js
        def PyJs_anonymous_6_(ch, this, arguments, var=var):
            var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
            var.registers([u'ch'])
            return var.get(u'String').callprop(u'fromCharCode', (var.get(u'ch').callprop(u'charCodeAt', Js(0.0))|Js(32.0)))
        PyJs_anonymous_6_._set_name(u'anonymous')
        return (var.get(u's').callprop(u'replace', JsRegExp(u'/[A-Z]/g'), PyJs_anonymous_6_) if var.get(u'isString')(var.get(u's')) else var.get(u's'))
    PyJs_anonymous_5_._set_name(u'anonymous')
    var.put(u'manualLowercase', PyJs_anonymous_5_)
    @Js
    def PyJs_anonymous_7_(s, this, arguments, var=var):
        var = Scope({u'this':this, u's':s, u'arguments':arguments}, var)
        var.registers([u's'])
        @Js
        def PyJs_anonymous_8_(ch, this, arguments, var=var):
            var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
            var.registers([u'ch'])
            return var.get(u'String').callprop(u'fromCharCode', (var.get(u'ch').callprop(u'charCodeAt', Js(0.0))&(~Js(32.0))))
        PyJs_anonymous_8_._set_name(u'anonymous')
        return (var.get(u's').callprop(u'replace', JsRegExp(u'/[a-z]/g'), PyJs_anonymous_8_) if var.get(u'isString')(var.get(u's')) else var.get(u's'))
    PyJs_anonymous_7_._set_name(u'anonymous')
    var.put(u'manualUppercase', PyJs_anonymous_7_)
    if PyJsStrictNeq(Js(u'i'),Js(u'I').callprop(u'toLowerCase')):
        var.put(u'lowercase', var.get(u'manualLowercase'))
        var.put(u'uppercase', var.get(u'manualUppercase'))
    var.put(u'slice', Js([]).get(u'slice'))
    var.put(u'splice', Js([]).get(u'splice'))
    var.put(u'push', Js([]).get(u'push'))
    var.put(u'toString', var.get(u'Object').get(u'prototype').get(u'toString'))
    var.put(u'getPrototypeOf', var.get(u'Object').get(u'getPrototypeOf'))
    var.put(u'ngMinErr', var.get(u'minErr')(Js(u'ng')))
    PyJs_Object_9_ = Js({})
    var.put(u'angular', (var.get(u'window').get(u'angular') or var.get(u'window').put(u'angular', PyJs_Object_9_)))
    var.put(u'uid', Js(0.0))
    var.put(u'msie', var.get(u'document').get(u'documentMode'))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    var.get(u'noop').put(u'$inject', Js([]))
    pass
    var.get(u'identity').put(u'$inject', Js([]))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    var.put(u'isArray', var.get(u'Array').get(u'isArray'))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    var.put(u'TYPED_ARRAY_REGEXP', JsRegExp(u'/^\\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\\]$/'))
    pass
    @Js
    def PyJs_anonymous_13_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        return (var.get(u'value').callprop(u'trim') if var.get(u'isString')(var.get(u'value')) else var.get(u'value'))
    PyJs_anonymous_13_._set_name(u'anonymous')
    var.put(u'trim', PyJs_anonymous_13_)
    @Js
    def PyJs_anonymous_14_(s, this, arguments, var=var):
        var = Scope({u'this':this, u's':s, u'arguments':arguments}, var)
        var.registers([u's'])
        return var.get(u's').callprop(u'replace', JsRegExp(u'/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g'), Js(u'\\$1')).callprop(u'replace', JsRegExp(u'/\x08/g'), Js(u'\\x08'))
    PyJs_anonymous_14_._set_name(u'anonymous')
    var.put(u'escapeForRegexp', PyJs_anonymous_14_)
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    @Js
    def PyJs_anonymous_18_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'ngCspAttribute', u'noUnsafeEval', u'ngCspElement'])
        @Js
        def PyJsHoisted_noUnsafeEval_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            try:
                var.get(u'Function').create(Js(u''))
                return Js(False)
            except PyJsException as PyJsTempException:
                PyJsHolder_65_6658670 = var.own.get(u'e')
                var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                try:
                    return var.get(u'true')
                finally:
                    if PyJsHolder_65_6658670 is not None:
                        var.own[u'e'] = PyJsHolder_65_6658670
                    else:
                        del var.own[u'e']
                    del PyJsHolder_65_6658670
        PyJsHoisted_noUnsafeEval_.func_name = u'noUnsafeEval'
        var.put(u'noUnsafeEval', PyJsHoisted_noUnsafeEval_)
        if var.get(u'isDefined')(var.get(u'csp').get(u'rules')).neg():
            var.put(u'ngCspElement', (var.get(u'document').callprop(u'querySelector', Js(u'[ng-csp]')) or var.get(u'document').callprop(u'querySelector', Js(u'[data-ng-csp]'))))
            if var.get(u'ngCspElement'):
                var.put(u'ngCspAttribute', (var.get(u'ngCspElement').callprop(u'getAttribute', Js(u'ng-csp')) or var.get(u'ngCspElement').callprop(u'getAttribute', Js(u'data-ng-csp'))))
                PyJs_Object_19_ = Js({u'noUnsafeEval':(var.get(u'ngCspAttribute').neg() or PyJsStrictNeq(var.get(u'ngCspAttribute').callprop(u'indexOf', Js(u'no-unsafe-eval')),(-Js(1.0)))),u'noInlineStyle':(var.get(u'ngCspAttribute').neg() or PyJsStrictNeq(var.get(u'ngCspAttribute').callprop(u'indexOf', Js(u'no-inline-style')),(-Js(1.0))))})
                var.get(u'csp').put(u'rules', PyJs_Object_19_)
            else:
                PyJs_Object_20_ = Js({u'noUnsafeEval':var.get(u'noUnsafeEval')(),u'noInlineStyle':Js(False)})
                var.get(u'csp').put(u'rules', PyJs_Object_20_)
        return var.get(u'csp').get(u'rules')
        pass
    PyJs_anonymous_18_._set_name(u'anonymous')
    var.put(u'csp', PyJs_anonymous_18_)
    @Js
    def PyJs_anonymous_21_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'i', u'el', u'ii', u'prefix', u'name'])
        if var.get(u'isDefined')(var.get(u'jq').get(u'name_')):
            return var.get(u'jq').get(u'name_')
        pass
        var.put(u'ii', var.get(u'ngAttrPrefixes').get(u'length'))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u'ii')):
            try:
                var.put(u'prefix', var.get(u'ngAttrPrefixes').get(var.get(u'i')))
                if var.put(u'el', var.get(u'document').callprop(u'querySelector', ((Js(u'[')+var.get(u'prefix').callprop(u'replace', Js(u':'), Js(u'\\:')))+Js(u'jq]')))):
                    var.put(u'name', var.get(u'el').callprop(u'getAttribute', (var.get(u'prefix')+Js(u'jq'))))
                    break
            finally:
                    var.put(u'i',var.get(u'i')+Js(1))
        return var.get(u'jq').put(u'name_', var.get(u'name'))
    PyJs_anonymous_21_._set_name(u'anonymous')
    var.put(u'jq', PyJs_anonymous_21_)
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    var.put(u'ngAttrPrefixes', Js([Js(u'ng-'), Js(u'data-ng-'), Js(u'ng:'), Js(u'x-ng-')]))
    pass
    pass
    pass
    pass
    pass
    var.put(u'SNAKE_CASE_REGEXP', JsRegExp(u'/[A-Z]/g'))
    pass
    var.put(u'bindJQueryFired', Js(False))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    var.put(u'NODE_TYPE_ELEMENT', Js(1.0))
    var.put(u'NODE_TYPE_ATTRIBUTE', Js(2.0))
    var.put(u'NODE_TYPE_TEXT', Js(3.0))
    var.put(u'NODE_TYPE_COMMENT', Js(8.0))
    var.put(u'NODE_TYPE_DOCUMENT', Js(9.0))
    var.put(u'NODE_TYPE_DOCUMENT_FRAGMENT', Js(11.0))
    pass
    pass
    pass
    PyJs_Object_55_ = Js({u'full':Js(u'1.4.8'),u'major':Js(1.0),u'minor':Js(4.0),u'dot':Js(8.0),u'codeName':Js(u'ice-manipulation')})
    var.put(u'version', PyJs_Object_55_)
    pass
    var.get(u'JQLite').put(u'expando', Js(u'ng339'))
    PyJs_Object_63_ = Js({})
    var.put(u'jqCache', var.get(u'JQLite').put(u'cache', PyJs_Object_63_))
    var.put(u'jqId', Js(1.0))
    @Js
    def PyJs_anonymous_64_(element, type, fn, this, arguments, var=var):
        var = Scope({u'this':this, u'type':type, u'arguments':arguments, u'fn':fn, u'element':element}, var)
        var.registers([u'type', u'fn', u'element'])
        var.get(u'element').callprop(u'addEventListener', var.get(u'type'), var.get(u'fn'), Js(False))
    PyJs_anonymous_64_._set_name(u'anonymous')
    var.put(u'addEventListenerFn', PyJs_anonymous_64_)
    @Js
    def PyJs_anonymous_65_(element, type, fn, this, arguments, var=var):
        var = Scope({u'this':this, u'type':type, u'arguments':arguments, u'fn':fn, u'element':element}, var)
        var.registers([u'type', u'fn', u'element'])
        var.get(u'element').callprop(u'removeEventListener', var.get(u'type'), var.get(u'fn'), Js(False))
    PyJs_anonymous_65_._set_name(u'anonymous')
    var.put(u'removeEventListenerFn', PyJs_anonymous_65_)
    @Js
    def PyJs_anonymous_66_(node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
        var.registers([u'node'])
        PyJs_Object_67_ = Js({})
        return (var.get(u"this").get(u'cache').get(var.get(u'node').get(var.get(u"this").get(u'expando'))) or PyJs_Object_67_)
    PyJs_anonymous_66_._set_name(u'anonymous')
    var.get(u'JQLite').put(u'_data', PyJs_anonymous_66_)
    pass
    var.put(u'SPECIAL_CHARS_REGEXP', JsRegExp(u'/([\\:\\-\\_]+(.))/g'))
    var.put(u'MOZ_HACK_REGEXP', JsRegExp(u'/^moz([A-Z])/'))
    PyJs_Object_68_ = Js({u'mouseleave':Js(u'mouseout'),u'mouseenter':Js(u'mouseover')})
    var.put(u'MOUSE_EVENT_MAP', PyJs_Object_68_)
    var.put(u'jqLiteMinErr', var.get(u'minErr')(Js(u'jqLite')))
    pass
    var.put(u'SINGLE_TAG_REGEXP', JsRegExp(u'/^<([\\w-]+)\\s*\\/?>(?:<\\/\x01>|)$/'))
    var.put(u'HTML_REGEXP', JsRegExp(u'/<|&#?\\w+;/'))
    var.put(u'TAG_NAME_REGEXP', JsRegExp(u'/<([\\w:-]+)/'))
    var.put(u'XHTML_TAG_REGEXP', JsRegExp(u'/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:-]+)[^>]*)\\/>/gi'))
    PyJs_Object_70_ = Js({u'option':Js([Js(1.0), Js(u'<select multiple="multiple">'), Js(u'</select>')]),u'thead':Js([Js(1.0), Js(u'<table>'), Js(u'</table>')]),u'col':Js([Js(2.0), Js(u'<table><colgroup>'), Js(u'</colgroup></table>')]),u'tr':Js([Js(2.0), Js(u'<table><tbody>'), Js(u'</tbody></table>')]),u'td':Js([Js(3.0), Js(u'<table><tbody><tr>'), Js(u'</tr></tbody></table>')]),u'_default':Js([Js(0.0), Js(u''), Js(u'')])})
    var.put(u'wrapMap', PyJs_Object_70_)
    var.get(u'wrapMap').put(u'optgroup', var.get(u'wrapMap').get(u'option'))
    var.get(u'wrapMap').put(u'tbody', var.get(u'wrapMap').put(u'tfoot', var.get(u'wrapMap').put(u'colgroup', var.get(u'wrapMap').put(u'caption', var.get(u'wrapMap').get(u'thead')))))
    var.get(u'wrapMap').put(u'th', var.get(u'wrapMap').get(u'td'))
    pass
    pass
    pass
    pass
    pass
    @Js
    def PyJs_anonymous_72_(arg, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'arg':arg}, var)
        var.registers([u'arg'])
        return (var.get(u"this").callprop(u'compareDocumentPosition', var.get(u'arg'))&Js(16.0)).neg().neg()
    PyJs_anonymous_72_._set_name(u'anonymous')
    var.put(u'jqLiteContains', (var.get(u'Node').get(u'prototype').get(u'contains') or PyJs_anonymous_72_))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    @Js
    def PyJs_anonymous_82_(fn, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'fn':fn}, var)
        var.registers([u'trigger', u'fired', u'fn'])
        @Js
        def PyJsHoisted_trigger_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            if var.get(u'fired'):
                return var.get('undefined')
            var.put(u'fired', var.get(u'true'))
            var.get(u'fn')()
        PyJsHoisted_trigger_.func_name = u'trigger'
        var.put(u'trigger', PyJsHoisted_trigger_)
        var.put(u'fired', Js(False))
        pass
        if PyJsStrictEq(var.get(u'document').get(u'readyState'),Js(u'complete')):
            var.get(u'setTimeout')(var.get(u'trigger'))
        else:
            var.get(u"this").callprop(u'on', Js(u'DOMContentLoaded'), var.get(u'trigger'))
            var.get(u'JQLite')(var.get(u'window')).callprop(u'on', Js(u'load'), var.get(u'trigger'))
    PyJs_anonymous_82_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_83_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'value'])
        var.put(u'value', Js([]))
        @Js
        def PyJs_anonymous_84_(e, this, arguments, var=var):
            var = Scope({u'this':this, u'e':e, u'arguments':arguments}, var)
            var.registers([u'e'])
            var.get(u'value').callprop(u'push', (Js(u'')+var.get(u'e')))
        PyJs_anonymous_84_._set_name(u'anonymous')
        var.get(u'forEach')(var.get(u"this"), PyJs_anonymous_84_)
        return ((Js(u'[')+var.get(u'value').callprop(u'join', Js(u', ')))+Js(u']'))
    PyJs_anonymous_83_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_85_(index, this, arguments, var=var):
        var = Scope({u'this':this, u'index':index, u'arguments':arguments}, var)
        var.registers([u'index'])
        return (var.get(u'jqLite')(var.get(u"this").get(var.get(u'index'))) if (var.get(u'index')>=Js(0.0)) else var.get(u'jqLite')(var.get(u"this").get((var.get(u"this").get(u'length')+var.get(u'index')))))
    PyJs_anonymous_85_._set_name(u'anonymous')
    PyJs_Object_81_ = Js({u'ready':PyJs_anonymous_82_,u'toString':PyJs_anonymous_83_,u'eq':PyJs_anonymous_85_,u'length':Js(0.0),u'push':var.get(u'push'),u'sort':Js([]).get(u'sort'),u'splice':Js([]).get(u'splice')})
    var.put(u'JQLitePrototype', var.get(u'JQLite').put(u'prototype', PyJs_Object_81_))
    PyJs_Object_86_ = Js({})
    var.put(u'BOOLEAN_ATTR', PyJs_Object_86_)
    @Js
    def PyJs_anonymous_87_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        var.get(u'BOOLEAN_ATTR').put(var.get(u'lowercase')(var.get(u'value')), var.get(u'value'))
    PyJs_anonymous_87_._set_name(u'anonymous')
    var.get(u'forEach')(Js(u'multiple,selected,checked,disabled,readOnly,required,open').callprop(u'split', Js(u',')), PyJs_anonymous_87_)
    PyJs_Object_88_ = Js({})
    var.put(u'BOOLEAN_ELEMENTS', PyJs_Object_88_)
    @Js
    def PyJs_anonymous_89_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        var.get(u'BOOLEAN_ELEMENTS').put(var.get(u'value'), var.get(u'true'))
    PyJs_anonymous_89_._set_name(u'anonymous')
    var.get(u'forEach')(Js(u'input,select,option,textarea,button,form,details').callprop(u'split', Js(u',')), PyJs_anonymous_89_)
    PyJs_Object_90_ = Js({u'ngMinlength':Js(u'minlength'),u'ngMaxlength':Js(u'maxlength'),u'ngMin':Js(u'min'),u'ngMax':Js(u'max'),u'ngPattern':Js(u'pattern')})
    var.put(u'ALIASED_ATTR', PyJs_Object_90_)
    pass
    pass
    PyJs_Object_91_ = Js({u'data':var.get(u'jqLiteData'),u'removeData':var.get(u'jqLiteRemoveData'),u'hasData':var.get(u'jqLiteHasData')})
    @Js
    def PyJs_anonymous_92_(fn, name, this, arguments, var=var):
        var = Scope({u'this':this, u'name':name, u'fn':fn, u'arguments':arguments}, var)
        var.registers([u'name', u'fn'])
        var.get(u'JQLite').put(var.get(u'name'), var.get(u'fn'))
    PyJs_anonymous_92_._set_name(u'anonymous')
    var.get(u'forEach')(PyJs_Object_91_, PyJs_anonymous_92_)
    @Js
    def PyJs_anonymous_94_(element, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'element'])
        return (var.get(u'jqLite').callprop(u'data', var.get(u'element'), Js(u'$scope')) or var.get(u'jqLiteInheritedData')((var.get(u'element').get(u'parentNode') or var.get(u'element')), Js([Js(u'$isolateScope'), Js(u'$scope')])))
    PyJs_anonymous_94_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_95_(element, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'element'])
        return (var.get(u'jqLite').callprop(u'data', var.get(u'element'), Js(u'$isolateScope')) or var.get(u'jqLite').callprop(u'data', var.get(u'element'), Js(u'$isolateScopeNoTemplate')))
    PyJs_anonymous_95_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_96_(element, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'element'])
        return var.get(u'jqLiteInheritedData')(var.get(u'element'), Js(u'$injector'))
    PyJs_anonymous_96_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_97_(element, name, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'element':element}, var)
        var.registers([u'name', u'element'])
        var.get(u'element').callprop(u'removeAttribute', var.get(u'name'))
    PyJs_anonymous_97_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_98_(element, name, value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'value':value, u'element':element}, var)
        var.registers([u'name', u'value', u'element'])
        var.put(u'name', var.get(u'camelCase')(var.get(u'name')))
        if var.get(u'isDefined')(var.get(u'value')):
            var.get(u'element').get(u'style').put(var.get(u'name'), var.get(u'value'))
        else:
            return var.get(u'element').get(u'style').get(var.get(u'name'))
    PyJs_anonymous_98_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_99_(element, name, value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'value':value, u'element':element}, var)
        var.registers([u'nodeType', u'name', u'lowercasedName', u'value', u'element', u'ret'])
        var.put(u'nodeType', var.get(u'element').get(u'nodeType'))
        if ((PyJsStrictEq(var.get(u'nodeType'),var.get(u'NODE_TYPE_TEXT')) or PyJsStrictEq(var.get(u'nodeType'),var.get(u'NODE_TYPE_ATTRIBUTE'))) or PyJsStrictEq(var.get(u'nodeType'),var.get(u'NODE_TYPE_COMMENT'))):
            return var.get('undefined')
        var.put(u'lowercasedName', var.get(u'lowercase')(var.get(u'name')))
        if var.get(u'BOOLEAN_ATTR').get(var.get(u'lowercasedName')):
            if var.get(u'isDefined')(var.get(u'value')):
                if var.get(u'value').neg().neg():
                    var.get(u'element').put(var.get(u'name'), var.get(u'true'))
                    var.get(u'element').callprop(u'setAttribute', var.get(u'name'), var.get(u'lowercasedName'))
                else:
                    var.get(u'element').put(var.get(u'name'), Js(False))
                    var.get(u'element').callprop(u'removeAttribute', var.get(u'lowercasedName'))
            else:
                return (var.get(u'lowercasedName') if (var.get(u'element').get(var.get(u'name')) or (var.get(u'element').get(u'attributes').callprop(u'getNamedItem', var.get(u'name')) or var.get(u'noop')).get(u'specified')) else var.get(u'undefined'))
        else:
            if var.get(u'isDefined')(var.get(u'value')):
                var.get(u'element').callprop(u'setAttribute', var.get(u'name'), var.get(u'value'))
            else:
                if var.get(u'element').get(u'getAttribute'):
                    var.put(u'ret', var.get(u'element').callprop(u'getAttribute', var.get(u'name'), Js(2.0)))
                    return (var.get(u'undefined') if PyJsStrictEq(var.get(u'ret'),var.get(u"null")) else var.get(u'ret'))
    PyJs_anonymous_99_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_100_(element, name, value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'value':value, u'element':element}, var)
        var.registers([u'name', u'value', u'element'])
        if var.get(u'isDefined')(var.get(u'value')):
            var.get(u'element').put(var.get(u'name'), var.get(u'value'))
        else:
            return var.get(u'element').get(var.get(u'name'))
    PyJs_anonymous_100_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_101_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'getText'])
        @Js
        def PyJsHoisted_getText_(element, value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value, u'element':element}, var)
            var.registers([u'nodeType', u'value', u'element'])
            if var.get(u'isUndefined')(var.get(u'value')):
                var.put(u'nodeType', var.get(u'element').get(u'nodeType'))
                return (var.get(u'element').get(u'textContent') if (PyJsStrictEq(var.get(u'nodeType'),var.get(u'NODE_TYPE_ELEMENT')) or PyJsStrictEq(var.get(u'nodeType'),var.get(u'NODE_TYPE_TEXT'))) else Js(u''))
            var.get(u'element').put(u'textContent', var.get(u'value'))
        PyJsHoisted_getText_.func_name = u'getText'
        var.put(u'getText', PyJsHoisted_getText_)
        var.get(u'getText').put(u'$dv', Js(u''))
        return var.get(u'getText')
        pass
    PyJs_anonymous_101_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_102_(element, value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value, u'element':element}, var)
        var.registers([u'result', u'value', u'element'])
        if var.get(u'isUndefined')(var.get(u'value')):
            if (var.get(u'element').get(u'multiple') and PyJsStrictEq(var.get(u'nodeName_')(var.get(u'element')),Js(u'select'))):
                var.put(u'result', Js([]))
                @Js
                def PyJs_anonymous_103_(option, this, arguments, var=var):
                    var = Scope({u'this':this, u'option':option, u'arguments':arguments}, var)
                    var.registers([u'option'])
                    if var.get(u'option').get(u'selected'):
                        var.get(u'result').callprop(u'push', (var.get(u'option').get(u'value') or var.get(u'option').get(u'text')))
                PyJs_anonymous_103_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'element').get(u'options'), PyJs_anonymous_103_)
                return (var.get(u"null") if PyJsStrictEq(var.get(u'result').get(u'length'),Js(0.0)) else var.get(u'result'))
            return var.get(u'element').get(u'value')
        var.get(u'element').put(u'value', var.get(u'value'))
    PyJs_anonymous_102_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_104_(element, value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value, u'element':element}, var)
        var.registers([u'value', u'element'])
        if var.get(u'isUndefined')(var.get(u'value')):
            return var.get(u'element').get(u'innerHTML')
        var.get(u'jqLiteDealoc')(var.get(u'element'), var.get(u'true'))
        var.get(u'element').put(u'innerHTML', var.get(u'value'))
    PyJs_anonymous_104_._set_name(u'anonymous')
    PyJs_Object_93_ = Js({u'data':var.get(u'jqLiteData'),u'inheritedData':var.get(u'jqLiteInheritedData'),u'scope':PyJs_anonymous_94_,u'isolateScope':PyJs_anonymous_95_,u'controller':var.get(u'jqLiteController'),u'injector':PyJs_anonymous_96_,u'removeAttr':PyJs_anonymous_97_,u'hasClass':var.get(u'jqLiteHasClass'),u'css':PyJs_anonymous_98_,u'attr':PyJs_anonymous_99_,u'prop':PyJs_anonymous_100_,u'text':PyJs_anonymous_101_(),u'val':PyJs_anonymous_102_,u'html':PyJs_anonymous_104_,u'empty':var.get(u'jqLiteEmpty')})
    @Js
    def PyJs_anonymous_105_(fn, name, this, arguments, var=var):
        var = Scope({u'this':this, u'name':name, u'fn':fn, u'arguments':arguments}, var)
        var.registers([u'name', u'fn'])
        @Js
        def PyJs_anonymous_106_(arg1, arg2, this, arguments, var=var):
            var = Scope({u'this':this, u'arg1':arg1, u'arg2':arg2, u'arguments':arguments}, var)
            var.registers([u'key', u'i', u'arg1', u'arg2', u'j', u'value', u'nodeValue', u'jj', u'nodeCount'])
            pass
            var.put(u'nodeCount', var.get(u"this").get(u'length'))
            if (PyJsStrictNeq(var.get(u'fn'),var.get(u'jqLiteEmpty')) and var.get(u'isUndefined')((var.get(u'arg1') if ((var.get(u'fn').get(u'length')==Js(2.0)) and (PyJsStrictNeq(var.get(u'fn'),var.get(u'jqLiteHasClass')) and PyJsStrictNeq(var.get(u'fn'),var.get(u'jqLiteController')))) else var.get(u'arg2')))):
                if var.get(u'isObject')(var.get(u'arg1')):
                    #for JS loop
                    var.put(u'i', Js(0.0))
                    while (var.get(u'i')<var.get(u'nodeCount')):
                        try:
                            if PyJsStrictEq(var.get(u'fn'),var.get(u'jqLiteData')):
                                var.get(u'fn')(var.get(u"this").get(var.get(u'i')), var.get(u'arg1'))
                            else:
                                for PyJsTemp in var.get(u'arg1'):
                                    var.put(u'key', PyJsTemp)
                                    var.get(u'fn')(var.get(u"this").get(var.get(u'i')), var.get(u'key'), var.get(u'arg1').get(var.get(u'key')))
                        finally:
                                (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                    return var.get(u"this")
                else:
                    var.put(u'value', var.get(u'fn').get(u'$dv'))
                    var.put(u'jj', (var.get(u'Math').callprop(u'min', var.get(u'nodeCount'), Js(1.0)) if var.get(u'isUndefined')(var.get(u'value')) else var.get(u'nodeCount')))
                    #for JS loop
                    var.put(u'j', Js(0.0))
                    while (var.get(u'j')<var.get(u'jj')):
                        try:
                            var.put(u'nodeValue', var.get(u'fn')(var.get(u"this").get(var.get(u'j')), var.get(u'arg1'), var.get(u'arg2')))
                            var.put(u'value', ((var.get(u'value')+var.get(u'nodeValue')) if var.get(u'value') else var.get(u'nodeValue')))
                        finally:
                                (var.put(u'j',var.get(u'j')+Js(1))-Js(1))
                    return var.get(u'value')
            else:
                #for JS loop
                var.put(u'i', Js(0.0))
                while (var.get(u'i')<var.get(u'nodeCount')):
                    try:
                        var.get(u'fn')(var.get(u"this").get(var.get(u'i')), var.get(u'arg1'), var.get(u'arg2'))
                    finally:
                            (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
                return var.get(u"this")
        PyJs_anonymous_106_._set_name(u'anonymous')
        var.get(u'JQLite').get(u'prototype').put(var.get(u'name'), PyJs_anonymous_106_)
    PyJs_anonymous_105_._set_name(u'anonymous')
    var.get(u'forEach')(PyJs_Object_93_, PyJs_anonymous_105_)
    pass
    pass
    pass
    @Js
    def PyJs_jqLiteOn_112_(element, type, fn, unsupported, this, arguments, var=var):
        var = Scope({u'fn':fn, u'jqLiteOn':PyJs_jqLiteOn_112_, u'this':this, u'arguments':arguments, u'type':type, u'unsupported':unsupported, u'element':element}, var)
        var.registers([u'handle', u'expandoStore', u'i', u'addHandler', u'unsupported', u'element', u'fn', u'type', u'events', u'types'])
        if var.get(u'isDefined')(var.get(u'unsupported')):
            PyJsTempException = JsToPyException(var.get(u'jqLiteMinErr')(Js(u'onargs'), Js(u'jqLite#on() does not support the `selector` or `eventData` parameters')))
            raise PyJsTempException
        if var.get(u'jqLiteAcceptsData')(var.get(u'element')).neg():
            return var.get('undefined')
        var.put(u'expandoStore', var.get(u'jqLiteExpandoStore')(var.get(u'element'), var.get(u'true')))
        var.put(u'events', var.get(u'expandoStore').get(u'events'))
        var.put(u'handle', var.get(u'expandoStore').get(u'handle'))
        if var.get(u'handle').neg():
            var.put(u'handle', var.get(u'expandoStore').put(u'handle', var.get(u'createEventHandler')(var.get(u'element'), var.get(u'events'))))
        var.put(u'types', (var.get(u'type').callprop(u'split', Js(u' ')) if (var.get(u'type').callprop(u'indexOf', Js(u' '))>=Js(0.0)) else Js([var.get(u'type')])))
        var.put(u'i', var.get(u'types').get(u'length'))
        @Js
        def PyJs_anonymous_113_(type, specialHandlerWrapper, noEventListener, this, arguments, var=var):
            var = Scope({u'this':this, u'specialHandlerWrapper':specialHandlerWrapper, u'type':type, u'arguments':arguments, u'noEventListener':noEventListener}, var)
            var.registers([u'specialHandlerWrapper', u'type', u'noEventListener', u'eventFns'])
            var.put(u'eventFns', var.get(u'events').get(var.get(u'type')))
            if var.get(u'eventFns').neg():
                var.put(u'eventFns', var.get(u'events').put(var.get(u'type'), Js([])))
                var.get(u'eventFns').put(u'specialHandlerWrapper', var.get(u'specialHandlerWrapper'))
                if (PyJsStrictNeq(var.get(u'type'),Js(u'$destroy')) and var.get(u'noEventListener').neg()):
                    var.get(u'addEventListenerFn')(var.get(u'element'), var.get(u'type'), var.get(u'handle'))
            var.get(u'eventFns').callprop(u'push', var.get(u'fn'))
        PyJs_anonymous_113_._set_name(u'anonymous')
        var.put(u'addHandler', PyJs_anonymous_113_)
        while (var.put(u'i',var.get(u'i')-Js(1))+Js(1)):
            var.put(u'type', var.get(u'types').get(var.get(u'i')))
            if var.get(u'MOUSE_EVENT_MAP').get(var.get(u'type')):
                var.get(u'addHandler')(var.get(u'MOUSE_EVENT_MAP').get(var.get(u'type')), var.get(u'specialMouseHandlerWrapper'))
                var.get(u'addHandler')(var.get(u'type'), var.get(u'undefined'), var.get(u'true'))
            else:
                var.get(u'addHandler')(var.get(u'type'))
    PyJs_jqLiteOn_112_._set_name(u'jqLiteOn')
    @Js
    def PyJs_anonymous_114_(element, type, fn, this, arguments, var=var):
        var = Scope({u'this':this, u'type':type, u'arguments':arguments, u'fn':fn, u'element':element}, var)
        var.registers([u'type', u'fn', u'element'])
        var.put(u'element', var.get(u'jqLite')(var.get(u'element')))
        @Js
        def PyJs_onFn_115_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'onFn':PyJs_onFn_115_}, var)
            var.registers([])
            var.get(u'element').callprop(u'off', var.get(u'type'), var.get(u'fn'))
            var.get(u'element').callprop(u'off', var.get(u'type'), var.get(u'onFn'))
        PyJs_onFn_115_._set_name(u'onFn')
        var.get(u'element').callprop(u'on', var.get(u'type'), PyJs_onFn_115_)
        var.get(u'element').callprop(u'on', var.get(u'type'), var.get(u'fn'))
    PyJs_anonymous_114_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_116_(element, replaceNode, this, arguments, var=var):
        var = Scope({u'this':this, u'replaceNode':replaceNode, u'arguments':arguments, u'element':element}, var)
        var.registers([u'index', u'replaceNode', u'parent', u'element'])
        var.put(u'parent', var.get(u'element').get(u'parentNode'))
        var.get(u'jqLiteDealoc')(var.get(u'element'))
        @Js
        def PyJs_anonymous_117_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            if var.get(u'index'):
                var.get(u'parent').callprop(u'insertBefore', var.get(u'node'), var.get(u'index').get(u'nextSibling'))
            else:
                var.get(u'parent').callprop(u'replaceChild', var.get(u'node'), var.get(u'element'))
            var.put(u'index', var.get(u'node'))
        PyJs_anonymous_117_._set_name(u'anonymous')
        var.get(u'forEach')(var.get(u'JQLite').create(var.get(u'replaceNode')), PyJs_anonymous_117_)
    PyJs_anonymous_116_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_118_(element, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'children', u'element'])
        var.put(u'children', Js([]))
        @Js
        def PyJs_anonymous_119_(element, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
            var.registers([u'element'])
            if PyJsStrictEq(var.get(u'element').get(u'nodeType'),var.get(u'NODE_TYPE_ELEMENT')):
                var.get(u'children').callprop(u'push', var.get(u'element'))
        PyJs_anonymous_119_._set_name(u'anonymous')
        var.get(u'forEach')(var.get(u'element').get(u'childNodes'), PyJs_anonymous_119_)
        return var.get(u'children')
    PyJs_anonymous_118_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_120_(element, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'element'])
        return ((var.get(u'element').get(u'contentDocument') or var.get(u'element').get(u'childNodes')) or Js([]))
    PyJs_anonymous_120_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_121_(element, node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'node', u'nodeType', u'i', u'element', u'ii', u'child'])
        var.put(u'nodeType', var.get(u'element').get(u'nodeType'))
        if (PyJsStrictNeq(var.get(u'nodeType'),var.get(u'NODE_TYPE_ELEMENT')) and PyJsStrictNeq(var.get(u'nodeType'),var.get(u'NODE_TYPE_DOCUMENT_FRAGMENT'))):
            return var.get('undefined')
        var.put(u'node', var.get(u'JQLite').create(var.get(u'node')))
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'ii', var.get(u'node').get(u'length'))
        while (var.get(u'i')<var.get(u'ii')):
            try:
                var.put(u'child', var.get(u'node').get(var.get(u'i')))
                var.get(u'element').callprop(u'appendChild', var.get(u'child'))
            finally:
                    (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
    PyJs_anonymous_121_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_122_(element, node, this, arguments, var=var):
        var = Scope({u'node':node, u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'node', u'index', u'element'])
        if PyJsStrictEq(var.get(u'element').get(u'nodeType'),var.get(u'NODE_TYPE_ELEMENT')):
            var.put(u'index', var.get(u'element').get(u'firstChild'))
            @Js
            def PyJs_anonymous_123_(child, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'child':child}, var)
                var.registers([u'child'])
                var.get(u'element').callprop(u'insertBefore', var.get(u'child'), var.get(u'index'))
            PyJs_anonymous_123_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'JQLite').create(var.get(u'node')), PyJs_anonymous_123_)
    PyJs_anonymous_122_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_124_(element, wrapNode, this, arguments, var=var):
        var = Scope({u'wrapNode':wrapNode, u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'wrapNode', u'parent', u'element'])
        var.put(u'wrapNode', var.get(u'jqLite')(var.get(u'wrapNode')).callprop(u'eq', Js(0.0)).callprop(u'clone').get(u'0'))
        var.put(u'parent', var.get(u'element').get(u'parentNode'))
        if var.get(u'parent'):
            var.get(u'parent').callprop(u'replaceChild', var.get(u'wrapNode'), var.get(u'element'))
        var.get(u'wrapNode').callprop(u'appendChild', var.get(u'element'))
    PyJs_anonymous_124_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_125_(element, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'element'])
        var.get(u'jqLiteRemove')(var.get(u'element'), var.get(u'true'))
    PyJs_anonymous_125_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_126_(element, newElement, this, arguments, var=var):
        var = Scope({u'newElement':newElement, u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'node', u'index', u'parent', u'i', u'element', u'ii', u'newElement'])
        var.put(u'index', var.get(u'element'))
        var.put(u'parent', var.get(u'element').get(u'parentNode'))
        var.put(u'newElement', var.get(u'JQLite').create(var.get(u'newElement')))
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'ii', var.get(u'newElement').get(u'length'))
        while (var.get(u'i')<var.get(u'ii')):
            try:
                var.put(u'node', var.get(u'newElement').get(var.get(u'i')))
                var.get(u'parent').callprop(u'insertBefore', var.get(u'node'), var.get(u'index').get(u'nextSibling'))
                var.put(u'index', var.get(u'node'))
            finally:
                    (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
    PyJs_anonymous_126_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_127_(element, selector, condition, this, arguments, var=var):
        var = Scope({u'this':this, u'selector':selector, u'arguments':arguments, u'condition':condition, u'element':element}, var)
        var.registers([u'selector', u'condition', u'element'])
        if var.get(u'selector'):
            @Js
            def PyJs_anonymous_128_(className, this, arguments, var=var):
                var = Scope({u'className':className, u'this':this, u'arguments':arguments}, var)
                var.registers([u'className', u'classCondition'])
                var.put(u'classCondition', var.get(u'condition'))
                if var.get(u'isUndefined')(var.get(u'classCondition')):
                    var.put(u'classCondition', var.get(u'jqLiteHasClass')(var.get(u'element'), var.get(u'className')).neg())
                (var.get(u'jqLiteAddClass') if var.get(u'classCondition') else var.get(u'jqLiteRemoveClass'))(var.get(u'element'), var.get(u'className'))
            PyJs_anonymous_128_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'selector').callprop(u'split', Js(u' ')), PyJs_anonymous_128_)
    PyJs_anonymous_127_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_129_(element, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'parent', u'element'])
        var.put(u'parent', var.get(u'element').get(u'parentNode'))
        return (var.get(u'parent') if (var.get(u'parent') and PyJsStrictNeq(var.get(u'parent').get(u'nodeType'),var.get(u'NODE_TYPE_DOCUMENT_FRAGMENT'))) else var.get(u"null"))
    PyJs_anonymous_129_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_130_(element, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
        var.registers([u'element'])
        return var.get(u'element').get(u'nextElementSibling')
    PyJs_anonymous_130_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_131_(element, selector, this, arguments, var=var):
        var = Scope({u'this':this, u'selector':selector, u'arguments':arguments, u'element':element}, var)
        var.registers([u'selector', u'element'])
        if var.get(u'element').get(u'getElementsByTagName'):
            return var.get(u'element').callprop(u'getElementsByTagName', var.get(u'selector'))
        else:
            return Js([])
    PyJs_anonymous_131_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_132_(element, event, extraParameters, this, arguments, var=var):
        var = Scope({u'this':this, u'extraParameters':extraParameters, u'event':event, u'arguments':arguments, u'element':element}, var)
        var.registers([u'handlerArgs', u'dummyEvent', u'expandoStore', u'event', u'element', u'eventName', u'eventFns', u'eventFnsCopy', u'events', u'extraParameters'])
        pass
        var.put(u'eventName', (var.get(u'event').get(u'type') or var.get(u'event')))
        var.put(u'expandoStore', var.get(u'jqLiteExpandoStore')(var.get(u'element')))
        var.put(u'events', (var.get(u'expandoStore') and var.get(u'expandoStore').get(u'events')))
        var.put(u'eventFns', (var.get(u'events') and var.get(u'events').get(var.get(u'eventName'))))
        if var.get(u'eventFns'):
            @Js
            def PyJs_anonymous_134_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                var.get(u"this").put(u'defaultPrevented', var.get(u'true'))
            PyJs_anonymous_134_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_135_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                return PyJsStrictEq(var.get(u"this").get(u'defaultPrevented'),var.get(u'true'))
            PyJs_anonymous_135_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_136_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                var.get(u"this").put(u'immediatePropagationStopped', var.get(u'true'))
            PyJs_anonymous_136_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_137_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                return PyJsStrictEq(var.get(u"this").get(u'immediatePropagationStopped'),var.get(u'true'))
            PyJs_anonymous_137_._set_name(u'anonymous')
            PyJs_Object_133_ = Js({u'preventDefault':PyJs_anonymous_134_,u'isDefaultPrevented':PyJs_anonymous_135_,u'stopImmediatePropagation':PyJs_anonymous_136_,u'isImmediatePropagationStopped':PyJs_anonymous_137_,u'stopPropagation':var.get(u'noop'),u'type':var.get(u'eventName'),u'target':var.get(u'element')})
            var.put(u'dummyEvent', PyJs_Object_133_)
            if var.get(u'event').get(u'type'):
                var.put(u'dummyEvent', var.get(u'extend')(var.get(u'dummyEvent'), var.get(u'event')))
            var.put(u'eventFnsCopy', var.get(u'shallowCopy')(var.get(u'eventFns')))
            var.put(u'handlerArgs', (Js([var.get(u'dummyEvent')]).callprop(u'concat', var.get(u'extraParameters')) if var.get(u'extraParameters') else Js([var.get(u'dummyEvent')])))
            @Js
            def PyJs_anonymous_138_(fn, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'fn':fn}, var)
                var.registers([u'fn'])
                if var.get(u'dummyEvent').callprop(u'isImmediatePropagationStopped').neg():
                    var.get(u'fn').callprop(u'apply', var.get(u'element'), var.get(u'handlerArgs'))
            PyJs_anonymous_138_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'eventFnsCopy'), PyJs_anonymous_138_)
    PyJs_anonymous_132_._set_name(u'anonymous')
    PyJs_Object_111_ = Js({u'removeData':var.get(u'jqLiteRemoveData'),u'on':PyJs_jqLiteOn_112_,u'off':var.get(u'jqLiteOff'),u'one':PyJs_anonymous_114_,u'replaceWith':PyJs_anonymous_116_,u'children':PyJs_anonymous_118_,u'contents':PyJs_anonymous_120_,u'append':PyJs_anonymous_121_,u'prepend':PyJs_anonymous_122_,u'wrap':PyJs_anonymous_124_,u'remove':var.get(u'jqLiteRemove'),u'detach':PyJs_anonymous_125_,u'after':PyJs_anonymous_126_,u'addClass':var.get(u'jqLiteAddClass'),u'removeClass':var.get(u'jqLiteRemoveClass'),u'toggleClass':PyJs_anonymous_127_,u'parent':PyJs_anonymous_129_,u'next':PyJs_anonymous_130_,u'find':PyJs_anonymous_131_,u'clone':var.get(u'jqLiteClone'),u'triggerHandler':PyJs_anonymous_132_})
    @Js
    def PyJs_anonymous_139_(fn, name, this, arguments, var=var):
        var = Scope({u'this':this, u'name':name, u'fn':fn, u'arguments':arguments}, var)
        var.registers([u'name', u'fn'])
        @Js
        def PyJs_anonymous_140_(arg1, arg2, arg3, this, arguments, var=var):
            var = Scope({u'this':this, u'arg1':arg1, u'arg2':arg2, u'arg3':arg3, u'arguments':arguments}, var)
            var.registers([u'i', u'arg1', u'arg2', u'arg3', u'value', u'ii'])
            pass
            #for JS loop
            var.put(u'i', Js(0.0))
            var.put(u'ii', var.get(u"this").get(u'length'))
            while (var.get(u'i')<var.get(u'ii')):
                try:
                    if var.get(u'isUndefined')(var.get(u'value')):
                        var.put(u'value', var.get(u'fn')(var.get(u"this").get(var.get(u'i')), var.get(u'arg1'), var.get(u'arg2'), var.get(u'arg3')))
                        if var.get(u'isDefined')(var.get(u'value')):
                            var.put(u'value', var.get(u'jqLite')(var.get(u'value')))
                    else:
                        var.get(u'jqLiteAddNodes')(var.get(u'value'), var.get(u'fn')(var.get(u"this").get(var.get(u'i')), var.get(u'arg1'), var.get(u'arg2'), var.get(u'arg3')))
                finally:
                        (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
            return (var.get(u'value') if var.get(u'isDefined')(var.get(u'value')) else var.get(u"this"))
        PyJs_anonymous_140_._set_name(u'anonymous')
        var.get(u'JQLite').get(u'prototype').put(var.get(u'name'), PyJs_anonymous_140_)
        var.get(u'JQLite').get(u'prototype').put(u'bind', var.get(u'JQLite').get(u'prototype').get(u'on'))
        var.get(u'JQLite').get(u'prototype').put(u'unbind', var.get(u'JQLite').get(u'prototype').get(u'off'))
    PyJs_anonymous_139_._set_name(u'anonymous')
    var.get(u'forEach')(PyJs_Object_111_, PyJs_anonymous_139_)
    pass
    pass
    pass
    @Js
    def PyJs_anonymous_148_(key, value, this, arguments, var=var):
        var = Scope({u'this':this, u'value':value, u'key':key, u'arguments':arguments}, var)
        var.registers([u'value', u'key'])
        var.get(u"this").put(var.get(u'hashKey')(var.get(u'key'), var.get(u"this").get(u'nextUid')), var.get(u'value'))
    PyJs_anonymous_148_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_149_(key, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'key':key}, var)
        var.registers([u'key'])
        return var.get(u"this").get(var.get(u'hashKey')(var.get(u'key'), var.get(u"this").get(u'nextUid')))
    PyJs_anonymous_149_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_150_(key, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'key':key}, var)
        var.registers([u'key', u'value'])
        var.put(u'value', var.get(u"this").get(var.put(u'key', var.get(u'hashKey')(var.get(u'key'), var.get(u"this").get(u'nextUid')))))
        var.get(u"this").delete(var.get(u'key'))
        return var.get(u'value')
    PyJs_anonymous_150_._set_name(u'anonymous')
    PyJs_Object_147_ = Js({u'put':PyJs_anonymous_148_,u'get':PyJs_anonymous_149_,u'remove':PyJs_anonymous_150_})
    var.get(u'HashMap').put(u'prototype', PyJs_Object_147_)
    @Js
    def PyJs_anonymous_151_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_152_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            return var.get(u'HashMap')
        PyJs_anonymous_152_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([PyJs_anonymous_152_]))
    PyJs_anonymous_151_._set_name(u'anonymous')
    var.put(u'$$HashMapProvider', Js([PyJs_anonymous_151_]))
    var.put(u'FN_ARGS', JsRegExp(u'/^[^\\(]*\\(\\s*([^\\)]*)\\)/m'))
    var.put(u'FN_ARG_SPLIT', JsRegExp(u'/,/'))
    var.put(u'FN_ARG', JsRegExp(u'/^\\s*(_?)(\\S+?)\x01\\s*$/'))
    var.put(u'STRIP_COMMENTS', JsRegExp(u'/((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg'))
    var.put(u'$injectorMinErr', var.get(u'minErr')(Js(u'$injector')))
    pass
    pass
    pass
    var.get(u'createInjector').put(u'$$annotate', var.get(u'annotate'))
    pass
    var.put(u'$animateMinErr', var.get(u'minErr')(Js(u'$animate')))
    var.put(u'ELEMENT_NODE', Js(1.0))
    var.put(u'NG_ANIMATE_CLASSNAME', Js(u'ng-animate'))
    pass
    pass
    pass
    pass
    @Js
    def PyJs_anonymous_179_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_180_(PyJsArg_2471_, PyJsArg_2424724146_, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'$$rAF':PyJsArg_2424724146_, u'$q':PyJsArg_2471_}, var)
            var.registers([u'AnimateRunner', u'$$rAF', u'$q'])
            @Js
            def PyJsHoisted_AnimateRunner_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                pass
            PyJsHoisted_AnimateRunner_.func_name = u'AnimateRunner'
            var.put(u'AnimateRunner', PyJsHoisted_AnimateRunner_)
            pass
            var.get(u'AnimateRunner').put(u'all', var.get(u'noop'))
            var.get(u'AnimateRunner').put(u'chain', var.get(u'noop'))
            @Js
            def PyJs_anonymous_182_(PyJsArg_70617373_, fail, this, arguments, var=var):
                var = Scope({u'fail':fail, u'this':this, u'arguments':arguments, u'pass':PyJsArg_70617373_}, var)
                var.registers([u'fail', u'pass'])
                @Js
                def PyJs_anonymous_183_(resolve, this, arguments, var=var):
                    var = Scope({u'this':this, u'resolve':resolve, u'arguments':arguments}, var)
                    var.registers([u'resolve'])
                    @Js
                    def PyJs_anonymous_184_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        var.get(u'resolve')()
                    PyJs_anonymous_184_._set_name(u'anonymous')
                    var.get(u'$$rAF')(PyJs_anonymous_184_)
                PyJs_anonymous_183_._set_name(u'anonymous')
                return var.get(u'$q')(PyJs_anonymous_183_).callprop(u'then', var.get(u'pass'), var.get(u'fail'))
            PyJs_anonymous_182_._set_name(u'anonymous')
            PyJs_Object_181_ = Js({u'end':var.get(u'noop'),u'cancel':var.get(u'noop'),u'resume':var.get(u'noop'),u'pause':var.get(u'noop'),u'complete':var.get(u'noop'),u'then':PyJs_anonymous_182_})
            var.get(u'AnimateRunner').put(u'prototype', PyJs_Object_181_)
            return var.get(u'AnimateRunner')
        PyJs_anonymous_180_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$q'), Js(u'$$rAF'), PyJs_anonymous_180_]))
    PyJs_anonymous_179_._set_name(u'anonymous')
    var.put(u'$$CoreAnimateRunnerProvider', PyJs_anonymous_179_)
    @Js
    def PyJs_anonymous_185_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'postDigestQueue', u'postDigestElements'])
        var.put(u'postDigestQueue', var.get(u'HashMap').create())
        var.put(u'postDigestElements', Js([]))
        @Js
        def PyJs_anonymous_186_(PyJsArg_2424416e696d61746552756e6e6572_, PyJsArg_24726f6f7453636f7065_, this, arguments, var=var):
            var = Scope({u'$$AnimateRunner':PyJsArg_2424416e696d61746552756e6e6572_, u'this':this, u'$rootScope':PyJsArg_24726f6f7453636f7065_, u'arguments':arguments}, var)
            var.registers([u'$$AnimateRunner', u'updateData', u'$rootScope', u'handleCSSClassChanges', u'addRemoveClassesPostDigest'])
            @Js
            def PyJsHoisted_updateData_(data, classes, value, this, arguments, var=var):
                var = Scope({u'this':this, u'classes':classes, u'data':data, u'arguments':arguments, u'value':value}, var)
                var.registers([u'classes', u'changed', u'data', u'value'])
                var.put(u'changed', Js(False))
                if var.get(u'classes'):
                    var.put(u'classes', (var.get(u'classes').callprop(u'split', Js(u' ')) if var.get(u'isString')(var.get(u'classes')) else (var.get(u'classes') if var.get(u'isArray')(var.get(u'classes')) else Js([]))))
                    @Js
                    def PyJs_anonymous_190_(className, this, arguments, var=var):
                        var = Scope({u'className':className, u'this':this, u'arguments':arguments}, var)
                        var.registers([u'className'])
                        if var.get(u'className'):
                            var.put(u'changed', var.get(u'true'))
                            var.get(u'data').put(var.get(u'className'), var.get(u'value'))
                    PyJs_anonymous_190_._set_name(u'anonymous')
                    var.get(u'forEach')(var.get(u'classes'), PyJs_anonymous_190_)
                return var.get(u'changed')
            PyJsHoisted_updateData_.func_name = u'updateData'
            var.put(u'updateData', PyJsHoisted_updateData_)
            @Js
            def PyJsHoisted_handleCSSClassChanges_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                @Js
                def PyJs_anonymous_191_(element, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
                    var.registers([u'element', u'toRemove', u'data', u'toAdd', u'existing'])
                    var.put(u'data', var.get(u'postDigestQueue').callprop(u'get', var.get(u'element')))
                    if var.get(u'data'):
                        var.put(u'existing', var.get(u'splitClasses')(var.get(u'element').callprop(u'attr', Js(u'class'))))
                        var.put(u'toAdd', Js(u''))
                        var.put(u'toRemove', Js(u''))
                        @Js
                        def PyJs_anonymous_192_(status, className, this, arguments, var=var):
                            var = Scope({u'status':status, u'className':className, u'this':this, u'arguments':arguments}, var)
                            var.registers([u'hasClass', u'status', u'className'])
                            var.put(u'hasClass', var.get(u'existing').get(var.get(u'className')).neg().neg())
                            if PyJsStrictNeq(var.get(u'status'),var.get(u'hasClass')):
                                if var.get(u'status'):
                                    var.put(u'toAdd', ((Js(u' ') if var.get(u'toAdd').get(u'length') else Js(u''))+var.get(u'className')), u'+')
                                else:
                                    var.put(u'toRemove', ((Js(u' ') if var.get(u'toRemove').get(u'length') else Js(u''))+var.get(u'className')), u'+')
                        PyJs_anonymous_192_._set_name(u'anonymous')
                        var.get(u'forEach')(var.get(u'data'), PyJs_anonymous_192_)
                        @Js
                        def PyJs_anonymous_193_(elm, this, arguments, var=var):
                            var = Scope({u'this':this, u'arguments':arguments, u'elm':elm}, var)
                            var.registers([u'elm'])
                            (var.get(u'toAdd') and var.get(u'jqLiteAddClass')(var.get(u'elm'), var.get(u'toAdd')))
                            (var.get(u'toRemove') and var.get(u'jqLiteRemoveClass')(var.get(u'elm'), var.get(u'toRemove')))
                        PyJs_anonymous_193_._set_name(u'anonymous')
                        var.get(u'forEach')(var.get(u'element'), PyJs_anonymous_193_)
                        var.get(u'postDigestQueue').callprop(u'remove', var.get(u'element'))
                PyJs_anonymous_191_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'postDigestElements'), PyJs_anonymous_191_)
                var.get(u'postDigestElements').put(u'length', Js(0.0))
            PyJsHoisted_handleCSSClassChanges_.func_name = u'handleCSSClassChanges'
            var.put(u'handleCSSClassChanges', PyJsHoisted_handleCSSClassChanges_)
            @Js
            def PyJsHoisted_addRemoveClassesPostDigest_(element, add, remove, this, arguments, var=var):
                var = Scope({u'this':this, u'add':add, u'arguments':arguments, u'remove':remove, u'element':element}, var)
                var.registers([u'remove', u'element', u'add', u'classesRemoved', u'data', u'classesAdded'])
                PyJs_Object_194_ = Js({})
                var.put(u'data', (var.get(u'postDigestQueue').callprop(u'get', var.get(u'element')) or PyJs_Object_194_))
                var.put(u'classesAdded', var.get(u'updateData')(var.get(u'data'), var.get(u'add'), var.get(u'true')))
                var.put(u'classesRemoved', var.get(u'updateData')(var.get(u'data'), var.get(u'remove'), Js(False)))
                if (var.get(u'classesAdded') or var.get(u'classesRemoved')):
                    var.get(u'postDigestQueue').callprop(u'put', var.get(u'element'), var.get(u'data'))
                    var.get(u'postDigestElements').callprop(u'push', var.get(u'element'))
                    if PyJsStrictEq(var.get(u'postDigestElements').get(u'length'),Js(1.0)):
                        var.get(u'$rootScope').callprop(u'$$postDigest', var.get(u'handleCSSClassChanges'))
            PyJsHoisted_addRemoveClassesPostDigest_.func_name = u'addRemoveClassesPostDigest'
            var.put(u'addRemoveClassesPostDigest', PyJsHoisted_addRemoveClassesPostDigest_)
            @Js
            def PyJs_anonymous_188_(element, event, options, domOperation, this, arguments, var=var):
                var = Scope({u'arguments':arguments, u'element':element, u'this':this, u'domOperation':domOperation, u'options':options, u'event':event}, var)
                var.registers([u'options', u'event', u'domOperation', u'element'])
                (var.get(u'domOperation') and var.get(u'domOperation')())
                PyJs_Object_189_ = Js({})
                var.put(u'options', (var.get(u'options') or PyJs_Object_189_))
                (var.get(u'options').get(u'from') and var.get(u'element').callprop(u'css', var.get(u'options').get(u'from')))
                (var.get(u'options').get(u'to') and var.get(u'element').callprop(u'css', var.get(u'options').get(u'to')))
                if (var.get(u'options').get(u'addClass') or var.get(u'options').get(u'removeClass')):
                    var.get(u'addRemoveClassesPostDigest')(var.get(u'element'), var.get(u'options').get(u'addClass'), var.get(u'options').get(u'removeClass'))
                return var.get(u'$$AnimateRunner').create()
            PyJs_anonymous_188_._set_name(u'anonymous')
            PyJs_Object_187_ = Js({u'enabled':var.get(u'noop'),u'on':var.get(u'noop'),u'off':var.get(u'noop'),u'pin':var.get(u'noop'),u'push':PyJs_anonymous_188_})
            return PyJs_Object_187_
            pass
            pass
            pass
        PyJs_anonymous_186_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$$AnimateRunner'), Js(u'$rootScope'), PyJs_anonymous_186_]))
    PyJs_anonymous_185_._set_name(u'anonymous')
    var.put(u'$$CoreAnimateQueueProvider', PyJs_anonymous_185_)
    @Js
    def PyJs_anonymous_195_(PyJsArg_2470726f76696465_, this, arguments, var=var):
        var = Scope({u'this':this, u'$provide':PyJsArg_2470726f76696465_, u'arguments':arguments}, var)
        var.registers([u'$provide', u'provider'])
        var.put(u'provider', var.get(u"this"))
        var.get(u"this").put(u'$$registeredAnimations', var.get(u'Object').callprop(u'create', var.get(u"null")))
        @Js
        def PyJs_anonymous_196_(name, factory, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'factory':factory}, var)
            var.registers([u'name', u'key', u'factory'])
            if (var.get(u'name') and PyJsStrictNeq(var.get(u'name').callprop(u'charAt', Js(0.0)),Js(u'.'))):
                PyJsTempException = JsToPyException(var.get(u'$animateMinErr')(Js(u'notcsel'), Js(u"Expecting class selector starting with '.' got '{0}'."), var.get(u'name')))
                raise PyJsTempException
            var.put(u'key', (var.get(u'name')+Js(u'-animation')))
            var.get(u'provider').get(u'$$registeredAnimations').put(var.get(u'name').callprop(u'substr', Js(1.0)), var.get(u'key'))
            var.get(u'$provide').callprop(u'factory', var.get(u'key'), var.get(u'factory'))
        PyJs_anonymous_196_._set_name(u'anonymous')
        var.get(u"this").put(u'register', PyJs_anonymous_196_)
        @Js
        def PyJs_anonymous_197_(expression, this, arguments, var=var):
            var = Scope({u'this':this, u'expression':expression, u'arguments':arguments}, var)
            var.registers([u'expression', u'reservedRegex'])
            if PyJsStrictEq(var.get(u'arguments').get(u'length'),Js(1.0)):
                var.get(u"this").put(u'$$classNameFilter', (var.get(u'expression') if var.get(u'expression').instanceof(var.get(u'RegExp')) else var.get(u"null")))
                if var.get(u"this").get(u'$$classNameFilter'):
                    var.put(u'reservedRegex', var.get(u'RegExp').create(((Js(u'(\\s+|\\/)')+var.get(u'NG_ANIMATE_CLASSNAME'))+Js(u'(\\s+|\\/)'))))
                    if var.get(u'reservedRegex').callprop(u'test', var.get(u"this").get(u'$$classNameFilter').callprop(u'toString')):
                        PyJsTempException = JsToPyException(var.get(u'$animateMinErr')(Js(u'nongcls'), Js(u'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.'), var.get(u'NG_ANIMATE_CLASSNAME')))
                        raise PyJsTempException
            return var.get(u"this").get(u'$$classNameFilter')
        PyJs_anonymous_197_._set_name(u'anonymous')
        var.get(u"this").put(u'classNameFilter', PyJs_anonymous_197_)
        @Js
        def PyJs_anonymous_198_(PyJsArg_2424616e696d6174655175657565_, this, arguments, var=var):
            var = Scope({u'this':this, u'$$animateQueue':PyJsArg_2424616e696d6174655175657565_, u'arguments':arguments}, var)
            var.registers([u'domInsert', u'$$animateQueue'])
            @Js
            def PyJsHoisted_domInsert_(element, parentElement, afterElement, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'afterElement':afterElement, u'parentElement':parentElement, u'element':element}, var)
                var.registers([u'afterElement', u'afterNode', u'parentElement', u'element'])
                if var.get(u'afterElement'):
                    var.put(u'afterNode', var.get(u'extractElementNode')(var.get(u'afterElement')))
                    if ((var.get(u'afterNode') and var.get(u'afterNode').get(u'parentNode').neg()) and var.get(u'afterNode').get(u'previousElementSibling').neg()):
                        var.put(u'afterElement', var.get(u"null"))
                (var.get(u'afterElement').callprop(u'after', var.get(u'element')) if var.get(u'afterElement') else var.get(u'parentElement').callprop(u'prepend', var.get(u'element')))
            PyJsHoisted_domInsert_.func_name = u'domInsert'
            var.put(u'domInsert', PyJsHoisted_domInsert_)
            pass
            @Js
            def PyJs_anonymous_200_(runner, this, arguments, var=var):
                var = Scope({u'runner':runner, u'this':this, u'arguments':arguments}, var)
                var.registers([u'runner'])
                (var.get(u'runner').get(u'end') and var.get(u'runner').callprop(u'end'))
            PyJs_anonymous_200_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_201_(element, parent, after, options, this, arguments, var=var):
                var = Scope({u'arguments':arguments, u'parent':parent, u'this':this, u'after':after, u'options':options, u'element':element}, var)
                var.registers([u'after', u'options', u'parent', u'element'])
                var.put(u'parent', (var.get(u'parent') and var.get(u'jqLite')(var.get(u'parent'))))
                var.put(u'after', (var.get(u'after') and var.get(u'jqLite')(var.get(u'after'))))
                var.put(u'parent', (var.get(u'parent') or var.get(u'after').callprop(u'parent')))
                var.get(u'domInsert')(var.get(u'element'), var.get(u'parent'), var.get(u'after'))
                return var.get(u'$$animateQueue').callprop(u'push', var.get(u'element'), Js(u'enter'), var.get(u'prepareAnimateOptions')(var.get(u'options')))
            PyJs_anonymous_201_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_202_(element, parent, after, options, this, arguments, var=var):
                var = Scope({u'arguments':arguments, u'parent':parent, u'this':this, u'after':after, u'options':options, u'element':element}, var)
                var.registers([u'after', u'options', u'parent', u'element'])
                var.put(u'parent', (var.get(u'parent') and var.get(u'jqLite')(var.get(u'parent'))))
                var.put(u'after', (var.get(u'after') and var.get(u'jqLite')(var.get(u'after'))))
                var.put(u'parent', (var.get(u'parent') or var.get(u'after').callprop(u'parent')))
                var.get(u'domInsert')(var.get(u'element'), var.get(u'parent'), var.get(u'after'))
                return var.get(u'$$animateQueue').callprop(u'push', var.get(u'element'), Js(u'move'), var.get(u'prepareAnimateOptions')(var.get(u'options')))
            PyJs_anonymous_202_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_203_(element, options, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'options':options, u'element':element}, var)
                var.registers([u'options', u'element'])
                @Js
                def PyJs_anonymous_204_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'element').callprop(u'remove')
                PyJs_anonymous_204_._set_name(u'anonymous')
                return var.get(u'$$animateQueue').callprop(u'push', var.get(u'element'), Js(u'leave'), var.get(u'prepareAnimateOptions')(var.get(u'options')), PyJs_anonymous_204_)
            PyJs_anonymous_203_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_205_(element, className, options, this, arguments, var=var):
                var = Scope({u'className':className, u'this':this, u'options':options, u'arguments':arguments, u'element':element}, var)
                var.registers([u'className', u'options', u'element'])
                var.put(u'options', var.get(u'prepareAnimateOptions')(var.get(u'options')))
                var.get(u'options').put(u'addClass', var.get(u'mergeClasses')(var.get(u'options').get(u'addclass'), var.get(u'className')))
                return var.get(u'$$animateQueue').callprop(u'push', var.get(u'element'), Js(u'addClass'), var.get(u'options'))
            PyJs_anonymous_205_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_206_(element, className, options, this, arguments, var=var):
                var = Scope({u'className':className, u'this':this, u'options':options, u'arguments':arguments, u'element':element}, var)
                var.registers([u'className', u'options', u'element'])
                var.put(u'options', var.get(u'prepareAnimateOptions')(var.get(u'options')))
                var.get(u'options').put(u'removeClass', var.get(u'mergeClasses')(var.get(u'options').get(u'removeClass'), var.get(u'className')))
                return var.get(u'$$animateQueue').callprop(u'push', var.get(u'element'), Js(u'removeClass'), var.get(u'options'))
            PyJs_anonymous_206_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_207_(element, add, remove, options, this, arguments, var=var):
                var = Scope({u'add':add, u'arguments':arguments, u'this':this, u'options':options, u'remove':remove, u'element':element}, var)
                var.registers([u'add', u'options', u'remove', u'element'])
                var.put(u'options', var.get(u'prepareAnimateOptions')(var.get(u'options')))
                var.get(u'options').put(u'addClass', var.get(u'mergeClasses')(var.get(u'options').get(u'addClass'), var.get(u'add')))
                var.get(u'options').put(u'removeClass', var.get(u'mergeClasses')(var.get(u'options').get(u'removeClass'), var.get(u'remove')))
                return var.get(u'$$animateQueue').callprop(u'push', var.get(u'element'), Js(u'setClass'), var.get(u'options'))
            PyJs_anonymous_207_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_208_(element, PyJsArg_66726f6d_, to, className, options, this, arguments, var=var):
                var = Scope({u'className':className, u'to':to, u'from':PyJsArg_66726f6d_, u'arguments':arguments, u'this':this, u'options':options, u'element':element}, var)
                var.registers([u'className', u'to', u'from', u'options', u'element'])
                var.put(u'options', var.get(u'prepareAnimateOptions')(var.get(u'options')))
                var.get(u'options').put(u'from', (var.get(u'extend')(var.get(u'options').get(u'from'), var.get(u'from')) if var.get(u'options').get(u'from') else var.get(u'from')))
                var.get(u'options').put(u'to', (var.get(u'extend')(var.get(u'options').get(u'to'), var.get(u'to')) if var.get(u'options').get(u'to') else var.get(u'to')))
                var.put(u'className', (var.get(u'className') or Js(u'ng-inline-animate')))
                var.get(u'options').put(u'tempClasses', var.get(u'mergeClasses')(var.get(u'options').get(u'tempClasses'), var.get(u'className')))
                return var.get(u'$$animateQueue').callprop(u'push', var.get(u'element'), Js(u'animate'), var.get(u'options'))
            PyJs_anonymous_208_._set_name(u'anonymous')
            PyJs_Object_199_ = Js({u'on':var.get(u'$$animateQueue').get(u'on'),u'off':var.get(u'$$animateQueue').get(u'off'),u'pin':var.get(u'$$animateQueue').get(u'pin'),u'enabled':var.get(u'$$animateQueue').get(u'enabled'),u'cancel':PyJs_anonymous_200_,u'enter':PyJs_anonymous_201_,u'move':PyJs_anonymous_202_,u'leave':PyJs_anonymous_203_,u'addClass':PyJs_anonymous_205_,u'removeClass':PyJs_anonymous_206_,u'setClass':PyJs_anonymous_207_,u'animate':PyJs_anonymous_208_})
            return PyJs_Object_199_
        PyJs_anonymous_198_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$$animateQueue'), PyJs_anonymous_198_]))
    PyJs_anonymous_195_._set_name(u'anonymous')
    var.put(u'$AnimateProvider', Js([Js(u'$provide'), PyJs_anonymous_195_]))
    @Js
    def PyJs_anonymous_209_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_210_(PyJsArg_2424724146_, PyJsArg_2471_, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'$$rAF':PyJsArg_2424724146_, u'$q':PyJsArg_2471_}, var)
            var.registers([u'RAFPromise', u'$$rAF', u'$q'])
            @Js
            def PyJs_anonymous_211_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_211_._set_name(u'anonymous')
            var.put(u'RAFPromise', PyJs_anonymous_211_)
            @Js
            def PyJs_anonymous_213_(cancel, this, arguments, var=var):
                var = Scope({u'cancel':cancel, u'this':this, u'arguments':arguments}, var)
                var.registers([u'cancel'])
                (var.get(u"this").get(u'defer') and var.get(u"this").get(u'defer').callprop((Js(u'reject') if PyJsStrictEq(var.get(u'cancel'),var.get(u'true')) else Js(u'resolve'))))
            PyJs_anonymous_213_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_214_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                var.get(u"this").callprop(u'done')
            PyJs_anonymous_214_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_215_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                var.get(u"this").callprop(u'done', var.get(u'true'))
            PyJs_anonymous_215_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_216_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                if var.get(u"this").get(u'defer').neg():
                    var.get(u"this").put(u'defer', var.get(u'$q').callprop(u'defer'))
                return var.get(u"this").get(u'defer').get(u'promise')
            PyJs_anonymous_216_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_217_(f1, f2, this, arguments, var=var):
                var = Scope({u'this':this, u'f1':f1, u'f2':f2, u'arguments':arguments}, var)
                var.registers([u'f1', u'f2'])
                return var.get(u"this").callprop(u'getPromise').callprop(u'then', var.get(u'f1'), var.get(u'f2'))
            PyJs_anonymous_217_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_218_(f1, this, arguments, var=var):
                var = Scope({u'this':this, u'f1':f1, u'arguments':arguments}, var)
                var.registers([u'f1'])
                return var.get(u"this").callprop(u'getPromise').callprop(u'catch', var.get(u'f1'))
            PyJs_anonymous_218_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_219_(f1, this, arguments, var=var):
                var = Scope({u'this':this, u'f1':f1, u'arguments':arguments}, var)
                var.registers([u'f1'])
                return var.get(u"this").callprop(u'getPromise').callprop(u'finally', var.get(u'f1'))
            PyJs_anonymous_219_._set_name(u'anonymous')
            PyJs_Object_212_ = Js({u'done':PyJs_anonymous_213_,u'end':PyJs_anonymous_214_,u'cancel':PyJs_anonymous_215_,u'getPromise':PyJs_anonymous_216_,u'then':PyJs_anonymous_217_,u'catch':PyJs_anonymous_218_,u'finally':PyJs_anonymous_219_})
            var.get(u'RAFPromise').put(u'prototype', PyJs_Object_212_)
            @Js
            def PyJs_anonymous_220_(element, options, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'options':options, u'element':element}, var)
                var.registers([u'run', u'runner', u'element', u'closed', u'close', u'options'])
                @Js
                def PyJsHoisted_close_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    if var.get(u'options').get(u'addClass'):
                        var.get(u'element').callprop(u'addClass', var.get(u'options').get(u'addClass'))
                        var.get(u'options').put(u'addClass', var.get(u"null"))
                    if var.get(u'options').get(u'removeClass'):
                        var.get(u'element').callprop(u'removeClass', var.get(u'options').get(u'removeClass'))
                        var.get(u'options').put(u'removeClass', var.get(u"null"))
                    if var.get(u'options').get(u'to'):
                        var.get(u'element').callprop(u'css', var.get(u'options').get(u'to'))
                        var.get(u'options').put(u'to', var.get(u"null"))
                PyJsHoisted_close_.func_name = u'close'
                var.put(u'close', PyJsHoisted_close_)
                @Js
                def PyJsHoisted_run_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    @Js
                    def PyJs_anonymous_222_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        var.get(u'close')()
                        if var.get(u'closed').neg():
                            var.get(u'runner').callprop(u'done')
                        var.put(u'closed', var.get(u'true'))
                    PyJs_anonymous_222_._set_name(u'anonymous')
                    var.get(u'$$rAF')(PyJs_anonymous_222_)
                    return var.get(u'runner')
                PyJsHoisted_run_.func_name = u'run'
                var.put(u'run', PyJsHoisted_run_)
                if var.get(u'options').get(u'cleanupStyles'):
                    var.get(u'options').put(u'from', var.get(u'options').put(u'to', var.get(u"null")))
                if var.get(u'options').get(u'from'):
                    var.get(u'element').callprop(u'css', var.get(u'options').get(u'from'))
                    var.get(u'options').put(u'from', var.get(u"null"))
                var.put(u'runner', var.get(u'RAFPromise').create())
                PyJs_Object_221_ = Js({u'start':var.get(u'run'),u'end':var.get(u'run')})
                return PyJs_Object_221_
                pass
                pass
            PyJs_anonymous_220_._set_name(u'anonymous')
            return PyJs_anonymous_220_
        PyJs_anonymous_210_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$$rAF'), Js(u'$q'), PyJs_anonymous_210_]))
    PyJs_anonymous_209_._set_name(u'anonymous')
    var.put(u'$CoreAnimateCssProvider', PyJs_anonymous_209_)
    pass
    pass
    pass
    pass
    var.put(u'$compileMinErr', var.get(u'minErr')(Js(u'$compile')))
    var.get(u'$CompileProvider').put(u'$inject', Js([Js(u'$provide'), Js(u'$$sanitizeUriProvider')]))
    pass
    var.put(u'PREFIX_REGEXP', JsRegExp(u'/^((?:x|data)[\\:\\-_])/i'))
    pass
    pass
    pass
    pass
    pass
    var.put(u'$controllerMinErr', var.get(u'minErr')(Js(u'$controller')))
    var.put(u'CNTRL_REG', JsRegExp(u'/^(\\S+)(\\s+as\\s+(\\w+))?$/'))
    pass
    pass
    pass
    pass
    @Js
    def PyJs_anonymous_342_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_343_(PyJsArg_24646f63756d656e74_, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'$document':PyJsArg_24646f63756d656e74_}, var)
            var.registers([u'$document'])
            @Js
            def PyJs_anonymous_344_(domNode, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'domNode':domNode}, var)
                var.registers([u'domNode'])
                if var.get(u'domNode'):
                    if (var.get(u'domNode').get(u'nodeType').neg() and var.get(u'domNode').instanceof(var.get(u'jqLite'))):
                        var.put(u'domNode', var.get(u'domNode').get(u'0'))
                else:
                    var.put(u'domNode', var.get(u'$document').get(u'0').get(u'body'))
                return (var.get(u'domNode').get(u'offsetWidth')+Js(1.0))
            PyJs_anonymous_344_._set_name(u'anonymous')
            return PyJs_anonymous_344_
        PyJs_anonymous_343_._set_name(u'anonymous')
        var.get(u"this").put(u'$get', Js([Js(u'$document'), PyJs_anonymous_343_]))
    PyJs_anonymous_342_._set_name(u'anonymous')
    var.put(u'$$ForceReflowProvider', PyJs_anonymous_342_)
    var.put(u'APPLICATION_JSON', Js(u'application/json'))
    PyJs_Object_345_ = Js({u'Content-Type':(var.get(u'APPLICATION_JSON')+Js(u';charset=utf-8'))})
    var.put(u'CONTENT_TYPE_APPLICATION_JSON', PyJs_Object_345_)
    var.put(u'JSON_START', JsRegExp(u'/^\\[|^\\{(?!\\{)/'))
    PyJs_Object_346_ = Js({u'[':JsRegExp(u'/]$/'),u'{':JsRegExp(u'/}$/')})
    var.put(u'JSON_ENDS', PyJs_Object_346_)
    var.put(u'JSON_PROTECTION_PREFIX', JsRegExp(u"/^\\)\\]\\}',?\n/"))
    var.put(u'$httpMinErr', var.get(u'minErr')(Js(u'$http')))
    @Js
    def PyJs_anonymous_347_(method, this, arguments, var=var):
        var = Scope({u'this':this, u'method':method, u'arguments':arguments}, var)
        var.registers([u'method'])
        @Js
        def PyJs_anonymous_348_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get(u'$httpMinErr')(Js(u'legacy'), Js(u'The method `{0}` on the promise returned from `$http` has been disabled.'), var.get(u'method')))
            raise PyJsTempException
        PyJs_anonymous_348_._set_name(u'anonymous')
        return PyJs_anonymous_348_
    PyJs_anonymous_347_._set_name(u'anonymous')
    var.put(u'$httpMinErrLegacyFn', PyJs_anonymous_347_)
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    var.put(u'$interpolateMinErr', var.get(u'angular').put(u'$interpolateMinErr', var.get(u'minErr')(Js(u'$interpolate'))))
    @Js
    def PyJs_anonymous_405_(text, this, arguments, var=var):
        var = Scope({u'this':this, u'text':text, u'arguments':arguments}, var)
        var.registers([u'text'])
        PyJsTempException = JsToPyException(var.get(u'$interpolateMinErr')(Js(u'noconcat'), ((Js(u'Error while interpolating: {0}\nStrict Contextual Escaping disallows ')+Js(u'interpolations that concatenate multiple expressions when a trusted value is '))+Js(u'required.  See http://docs.angularjs.org/api/ng.$sce')), var.get(u'text')))
        raise PyJsTempException
    PyJs_anonymous_405_._set_name(u'anonymous')
    var.get(u'$interpolateMinErr').put(u'throwNoconcat', PyJs_anonymous_405_)
    @Js
    def PyJs_anonymous_406_(text, err, this, arguments, var=var):
        var = Scope({u'this':this, u'text':text, u'arguments':arguments, u'err':err}, var)
        var.registers([u'text', u'err'])
        return var.get(u'$interpolateMinErr')(Js(u'interr'), Js(u"Can't interpolate: {0}\n{1}"), var.get(u'text'), var.get(u'err').callprop(u'toString'))
    PyJs_anonymous_406_._set_name(u'anonymous')
    var.get(u'$interpolateMinErr').put(u'interr', PyJs_anonymous_406_)
    pass
    pass
    var.put(u'PATH_MATCH', JsRegExp(u'/^([^\\?#]*)(\\?([^#]*))?(#(.*))?$/'))
    PyJs_Object_423_ = Js({u'http':Js(80.0),u'https':Js(443.0),u'ftp':Js(21.0)})
    var.put(u'DEFAULT_PORTS', PyJs_Object_423_)
    var.put(u'$locationMinErr', var.get(u'minErr')(Js(u'$location')))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    @Js
    def PyJs_anonymous_433_(url, this, arguments, var=var):
        var = Scope({u'url':url, u'this':this, u'arguments':arguments}, var)
        var.registers([u'url', u'match'])
        if var.get(u'isUndefined')(var.get(u'url')):
            return var.get(u"this").get(u'$$url')
        var.put(u'match', var.get(u'PATH_MATCH').callprop(u'exec', var.get(u'url')))
        if (var.get(u'match').get(u'1') or PyJsStrictEq(var.get(u'url'),Js(u''))):
            var.get(u"this").callprop(u'path', var.get(u'decodeURIComponent')(var.get(u'match').get(u'1')))
        if ((var.get(u'match').get(u'2') or var.get(u'match').get(u'1')) or PyJsStrictEq(var.get(u'url'),Js(u''))):
            var.get(u"this").callprop(u'search', (var.get(u'match').get(u'3') or Js(u'')))
        var.get(u"this").callprop(u'hash', (var.get(u'match').get(u'5') or Js(u'')))
        return var.get(u"this")
    PyJs_anonymous_433_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_434_(path, this, arguments, var=var):
        var = Scope({u'this':this, u'path':path, u'arguments':arguments}, var)
        var.registers([u'path'])
        var.put(u'path', (var.get(u'path').callprop(u'toString') if PyJsStrictNeq(var.get(u'path'),var.get(u"null")) else Js(u'')))
        return (var.get(u'path') if (var.get(u'path').callprop(u'charAt', Js(0.0))==Js(u'/')) else (Js(u'/')+var.get(u'path')))
    PyJs_anonymous_434_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_435_(search, paramValue, this, arguments, var=var):
        var = Scope({u'paramValue':paramValue, u'this':this, u'search':search, u'arguments':arguments}, var)
        var.registers([u'paramValue', u'search'])
        while 1:
            SWITCHED = False
            CONDITION = (var.get(u'arguments').get(u'length'))
            if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                SWITCHED = True
                return var.get(u"this").get(u'$$search')
            if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                SWITCHED = True
                if (var.get(u'isString')(var.get(u'search')) or var.get(u'isNumber')(var.get(u'search'))):
                    var.put(u'search', var.get(u'search').callprop(u'toString'))
                    var.get(u"this").put(u'$$search', var.get(u'parseKeyValue')(var.get(u'search')))
                else:
                    if var.get(u'isObject')(var.get(u'search')):
                        PyJs_Object_436_ = Js({})
                        var.put(u'search', var.get(u'copy')(var.get(u'search'), PyJs_Object_436_))
                        @Js
                        def PyJs_anonymous_437_(value, key, this, arguments, var=var):
                            var = Scope({u'this':this, u'key':key, u'value':value, u'arguments':arguments}, var)
                            var.registers([u'key', u'value'])
                            if (var.get(u'value')==var.get(u"null")):
                                var.get(u'search').delete(var.get(u'key'))
                        PyJs_anonymous_437_._set_name(u'anonymous')
                        var.get(u'forEach')(var.get(u'search'), PyJs_anonymous_437_)
                        var.get(u"this").put(u'$$search', var.get(u'search'))
                    else:
                        PyJsTempException = JsToPyException(var.get(u'$locationMinErr')(Js(u'isrcharg'), Js(u'The first argument of the `$location#search()` call must be a string or an object.')))
                        raise PyJsTempException
                break
            if True:
                SWITCHED = True
                if (var.get(u'isUndefined')(var.get(u'paramValue')) or PyJsStrictEq(var.get(u'paramValue'),var.get(u"null"))):
                    var.get(u"this").get(u'$$search').delete(var.get(u'search'))
                else:
                    var.get(u"this").get(u'$$search').put(var.get(u'search'), var.get(u'paramValue'))
            SWITCHED = True
            break
        var.get(u"this").callprop(u'$$compose')
        return var.get(u"this")
    PyJs_anonymous_435_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_438_(hash, this, arguments, var=var):
        var = Scope({u'this':this, u'hash':hash, u'arguments':arguments}, var)
        var.registers([u'hash'])
        return (var.get(u'hash').callprop(u'toString') if PyJsStrictNeq(var.get(u'hash'),var.get(u"null")) else Js(u''))
    PyJs_anonymous_438_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_439_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        var.get(u"this").put(u'$$replace', var.get(u'true'))
        return var.get(u"this")
    PyJs_anonymous_439_._set_name(u'anonymous')
    PyJs_Object_432_ = Js({u'$$html5':Js(False),u'$$replace':Js(False),u'absUrl':var.get(u'locationGetter')(Js(u'$$absUrl')),u'url':PyJs_anonymous_433_,u'protocol':var.get(u'locationGetter')(Js(u'$$protocol')),u'host':var.get(u'locationGetter')(Js(u'$$host')),u'port':var.get(u'locationGetter')(Js(u'$$port')),u'path':var.get(u'locationGetterSetter')(Js(u'$$path'), PyJs_anonymous_434_),u'search':PyJs_anonymous_435_,u'hash':var.get(u'locationGetterSetter')(Js(u'$$hash'), PyJs_anonymous_438_),u'replace':PyJs_anonymous_439_})
    var.put(u'locationPrototype', PyJs_Object_432_)
    @Js
    def PyJs_anonymous_440_(Location, this, arguments, var=var):
        var = Scope({u'this':this, u'Location':Location, u'arguments':arguments}, var)
        var.registers([u'Location'])
        var.get(u'Location').put(u'prototype', var.get(u'Object').callprop(u'create', var.get(u'locationPrototype')))
        @Js
        def PyJs_anonymous_441_(state, this, arguments, var=var):
            var = Scope({u'this':this, u'state':state, u'arguments':arguments}, var)
            var.registers([u'state'])
            if var.get(u'arguments').get(u'length').neg():
                return var.get(u"this").get(u'$$state')
            if (PyJsStrictNeq(var.get(u'Location'),var.get(u'LocationHtml5Url')) or var.get(u"this").get(u'$$html5').neg()):
                PyJsTempException = JsToPyException(var.get(u'$locationMinErr')(Js(u'nostate'), (Js(u'History API state support is available only ')+Js(u'in HTML5 mode and only in browsers supporting HTML5 History API'))))
                raise PyJsTempException
            var.get(u"this").put(u'$$state', (var.get(u"null") if var.get(u'isUndefined')(var.get(u'state')) else var.get(u'state')))
            return var.get(u"this")
        PyJs_anonymous_441_._set_name(u'anonymous')
        var.get(u'Location').get(u'prototype').put(u'state', PyJs_anonymous_441_)
    PyJs_anonymous_440_._set_name(u'anonymous')
    var.get(u'forEach')(Js([var.get(u'LocationHashbangInHtml5Url'), var.get(u'LocationHashbangUrl'), var.get(u'LocationHtml5Url')]), PyJs_anonymous_440_)
    pass
    pass
    pass
    pass
    var.put(u'$parseMinErr', var.get(u'minErr')(Js(u'$parse')))
    pass
    pass
    pass
    var.put(u'CALL', var.get(u'Function').get(u'prototype').get(u'call'))
    var.put(u'APPLY', var.get(u'Function').get(u'prototype').get(u'apply'))
    var.put(u'BIND', var.get(u'Function').get(u'prototype').get(u'bind'))
    pass
    pass
    var.put(u'OPERATORS', var.get(u'createMap')())
    @Js
    def PyJs_anonymous_463_(operator, this, arguments, var=var):
        var = Scope({u'operator':operator, u'this':this, u'arguments':arguments}, var)
        var.registers([u'operator'])
        var.get(u'OPERATORS').put(var.get(u'operator'), var.get(u'true'))
    PyJs_anonymous_463_._set_name(u'anonymous')
    var.get(u'forEach')(Js(u'+ - * / % === !== == != < > <= >= && || ! = |').callprop(u'split', Js(u' ')), PyJs_anonymous_463_)
    PyJs_Object_464_ = Js({u'n':Js(u'\n'),u'f':Js(u'\x0c'),u'r':Js(u'\r'),u't':Js(u'\t'),u'v':Js(u'\x0b'),u"'":Js(u"'"),u'"':Js(u'"')})
    var.put(u'ESCAPE', PyJs_Object_464_)
    @Js
    def PyJs_anonymous_465_(options, this, arguments, var=var):
        var = Scope({u'this':this, u'options':options, u'arguments':arguments}, var)
        var.registers([u'options'])
        var.get(u"this").put(u'options', var.get(u'options'))
    PyJs_anonymous_465_._set_name(u'anonymous')
    var.put(u'Lexer', PyJs_anonymous_465_)
    @Js
    def PyJs_anonymous_467_(text, this, arguments, var=var):
        var = Scope({u'this':this, u'text':text, u'arguments':arguments}, var)
        var.registers([u'ch', u'op1', u'op2', u'op3', u'text', u'token', u'ch2', u'ch3'])
        var.get(u"this").put(u'text', var.get(u'text'))
        var.get(u"this").put(u'index', Js(0.0))
        var.get(u"this").put(u'tokens', Js([]))
        while (var.get(u"this").get(u'index')<var.get(u"this").get(u'text').get(u'length')):
            var.put(u'ch', var.get(u"this").get(u'text').callprop(u'charAt', var.get(u"this").get(u'index')))
            if (PyJsStrictEq(var.get(u'ch'),Js(u'"')) or PyJsStrictEq(var.get(u'ch'),Js(u"'"))):
                var.get(u"this").callprop(u'readString', var.get(u'ch'))
            else:
                if (var.get(u"this").callprop(u'isNumber', var.get(u'ch')) or (PyJsStrictEq(var.get(u'ch'),Js(u'.')) and var.get(u"this").callprop(u'isNumber', var.get(u"this").callprop(u'peek')))):
                    var.get(u"this").callprop(u'readNumber')
                else:
                    if var.get(u"this").callprop(u'isIdent', var.get(u'ch')):
                        var.get(u"this").callprop(u'readIdent')
                    else:
                        if var.get(u"this").callprop(u'is', var.get(u'ch'), Js(u'(){}[].,;:?')):
                            PyJs_Object_468_ = Js({u'index':var.get(u"this").get(u'index'),u'text':var.get(u'ch')})
                            var.get(u"this").get(u'tokens').callprop(u'push', PyJs_Object_468_)
                            (var.get(u"this").put(u'index',var.get(u"this").get(u'index')+Js(1))-Js(1))
                        else:
                            if var.get(u"this").callprop(u'isWhitespace', var.get(u'ch')):
                                (var.get(u"this").put(u'index',var.get(u"this").get(u'index')+Js(1))-Js(1))
                            else:
                                var.put(u'ch2', (var.get(u'ch')+var.get(u"this").callprop(u'peek')))
                                var.put(u'ch3', (var.get(u'ch2')+var.get(u"this").callprop(u'peek', Js(2.0))))
                                var.put(u'op1', var.get(u'OPERATORS').get(var.get(u'ch')))
                                var.put(u'op2', var.get(u'OPERATORS').get(var.get(u'ch2')))
                                var.put(u'op3', var.get(u'OPERATORS').get(var.get(u'ch3')))
                                if ((var.get(u'op1') or var.get(u'op2')) or var.get(u'op3')):
                                    var.put(u'token', (var.get(u'ch3') if var.get(u'op3') else (var.get(u'ch2') if var.get(u'op2') else var.get(u'ch'))))
                                    PyJs_Object_469_ = Js({u'index':var.get(u"this").get(u'index'),u'text':var.get(u'token'),u'operator':var.get(u'true')})
                                    var.get(u"this").get(u'tokens').callprop(u'push', PyJs_Object_469_)
                                    var.get(u"this").put(u'index', var.get(u'token').get(u'length'), u'+')
                                else:
                                    var.get(u"this").callprop(u'throwError', Js(u'Unexpected next character '), var.get(u"this").get(u'index'), (var.get(u"this").get(u'index')+Js(1.0)))
        return var.get(u"this").get(u'tokens')
    PyJs_anonymous_467_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_470_(ch, chars, this, arguments, var=var):
        var = Scope({u'this':this, u'chars':chars, u'ch':ch, u'arguments':arguments}, var)
        var.registers([u'chars', u'ch'])
        return PyJsStrictNeq(var.get(u'chars').callprop(u'indexOf', var.get(u'ch')),(-Js(1.0)))
    PyJs_anonymous_470_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_471_(i, this, arguments, var=var):
        var = Scope({u'i':i, u'this':this, u'arguments':arguments}, var)
        var.registers([u'i', u'num'])
        var.put(u'num', (var.get(u'i') or Js(1.0)))
        return (var.get(u"this").get(u'text').callprop(u'charAt', (var.get(u"this").get(u'index')+var.get(u'num'))) if ((var.get(u"this").get(u'index')+var.get(u'num'))<var.get(u"this").get(u'text').get(u'length')) else Js(False))
    PyJs_anonymous_471_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_472_(ch, this, arguments, var=var):
        var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
        var.registers([u'ch'])
        return (((Js(u'0')<=var.get(u'ch')) and (var.get(u'ch')<=Js(u'9'))) and PyJsStrictEq(var.get(u'ch',throw=False).typeof(),Js(u'string')))
    PyJs_anonymous_472_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_473_(ch, this, arguments, var=var):
        var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
        var.registers([u'ch'])
        return (((((PyJsStrictEq(var.get(u'ch'),Js(u' ')) or PyJsStrictEq(var.get(u'ch'),Js(u'\r'))) or PyJsStrictEq(var.get(u'ch'),Js(u'\t'))) or PyJsStrictEq(var.get(u'ch'),Js(u'\n'))) or PyJsStrictEq(var.get(u'ch'),Js(u'\x0b'))) or PyJsStrictEq(var.get(u'ch'),Js(u'\xa0')))
    PyJs_anonymous_473_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_474_(ch, this, arguments, var=var):
        var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
        var.registers([u'ch'])
        return (((((Js(u'a')<=var.get(u'ch')) and (var.get(u'ch')<=Js(u'z'))) or ((Js(u'A')<=var.get(u'ch')) and (var.get(u'ch')<=Js(u'Z')))) or PyJsStrictEq(Js(u'_'),var.get(u'ch'))) or PyJsStrictEq(var.get(u'ch'),Js(u'$')))
    PyJs_anonymous_474_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_475_(ch, this, arguments, var=var):
        var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
        var.registers([u'ch'])
        return ((PyJsStrictEq(var.get(u'ch'),Js(u'-')) or PyJsStrictEq(var.get(u'ch'),Js(u'+'))) or var.get(u"this").callprop(u'isNumber', var.get(u'ch')))
    PyJs_anonymous_475_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_476_(error, start, end, this, arguments, var=var):
        var = Scope({u'this':this, u'start':start, u'end':end, u'arguments':arguments, u'error':error}, var)
        var.registers([u'colStr', u'end', u'start', u'error'])
        var.put(u'end', (var.get(u'end') or var.get(u"this").get(u'index')))
        var.put(u'colStr', (((((((Js(u's ')+var.get(u'start'))+Js(u'-'))+var.get(u"this").get(u'index'))+Js(u' ['))+var.get(u"this").get(u'text').callprop(u'substring', var.get(u'start'), var.get(u'end')))+Js(u']')) if var.get(u'isDefined')(var.get(u'start')) else (Js(u' ')+var.get(u'end'))))
        PyJsTempException = JsToPyException(var.get(u'$parseMinErr')(Js(u'lexerr'), Js(u'Lexer Error: {0} at column{1} in expression [{2}].'), var.get(u'error'), var.get(u'colStr'), var.get(u"this").get(u'text')))
        raise PyJsTempException
    PyJs_anonymous_476_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_477_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'start', u'peekCh', u'ch', u'number'])
        var.put(u'number', Js(u''))
        var.put(u'start', var.get(u"this").get(u'index'))
        while (var.get(u"this").get(u'index')<var.get(u"this").get(u'text').get(u'length')):
            var.put(u'ch', var.get(u'lowercase')(var.get(u"this").get(u'text').callprop(u'charAt', var.get(u"this").get(u'index'))))
            if ((var.get(u'ch')==Js(u'.')) or var.get(u"this").callprop(u'isNumber', var.get(u'ch'))):
                var.put(u'number', var.get(u'ch'), u'+')
            else:
                var.put(u'peekCh', var.get(u"this").callprop(u'peek'))
                if ((var.get(u'ch')==Js(u'e')) and var.get(u"this").callprop(u'isExpOperator', var.get(u'peekCh'))):
                    var.put(u'number', var.get(u'ch'), u'+')
                else:
                    if (((var.get(u"this").callprop(u'isExpOperator', var.get(u'ch')) and var.get(u'peekCh')) and var.get(u"this").callprop(u'isNumber', var.get(u'peekCh'))) and (var.get(u'number').callprop(u'charAt', (var.get(u'number').get(u'length')-Js(1.0)))==Js(u'e'))):
                        var.put(u'number', var.get(u'ch'), u'+')
                    else:
                        if ((var.get(u"this").callprop(u'isExpOperator', var.get(u'ch')) and (var.get(u'peekCh').neg() or var.get(u"this").callprop(u'isNumber', var.get(u'peekCh')).neg())) and (var.get(u'number').callprop(u'charAt', (var.get(u'number').get(u'length')-Js(1.0)))==Js(u'e'))):
                            var.get(u"this").callprop(u'throwError', Js(u'Invalid exponent'))
                        else:
                            break
            (var.get(u"this").put(u'index',var.get(u"this").get(u'index')+Js(1))-Js(1))
        PyJs_Object_478_ = Js({u'index':var.get(u'start'),u'text':var.get(u'number'),u'constant':var.get(u'true'),u'value':var.get(u'Number')(var.get(u'number'))})
        var.get(u"this").get(u'tokens').callprop(u'push', PyJs_Object_478_)
    PyJs_anonymous_477_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_479_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'start', u'ch'])
        var.put(u'start', var.get(u"this").get(u'index'))
        while (var.get(u"this").get(u'index')<var.get(u"this").get(u'text').get(u'length')):
            var.put(u'ch', var.get(u"this").get(u'text').callprop(u'charAt', var.get(u"this").get(u'index')))
            if (var.get(u"this").callprop(u'isIdent', var.get(u'ch')) or var.get(u"this").callprop(u'isNumber', var.get(u'ch'))).neg():
                break
            (var.get(u"this").put(u'index',var.get(u"this").get(u'index')+Js(1))-Js(1))
        PyJs_Object_480_ = Js({u'index':var.get(u'start'),u'text':var.get(u"this").get(u'text').callprop(u'slice', var.get(u'start'), var.get(u"this").get(u'index')),u'identifier':var.get(u'true')})
        var.get(u"this").get(u'tokens').callprop(u'push', PyJs_Object_480_)
    PyJs_anonymous_479_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_481_(quote, this, arguments, var=var):
        var = Scope({u'this':this, u'quote':quote, u'arguments':arguments}, var)
        var.registers([u'ch', u'rawString', u'string', u'quote', u'rep', u'hex', u'start', u'escape'])
        var.put(u'start', var.get(u"this").get(u'index'))
        (var.get(u"this").put(u'index',var.get(u"this").get(u'index')+Js(1))-Js(1))
        var.put(u'string', Js(u''))
        var.put(u'rawString', var.get(u'quote'))
        var.put(u'escape', Js(False))
        while (var.get(u"this").get(u'index')<var.get(u"this").get(u'text').get(u'length')):
            var.put(u'ch', var.get(u"this").get(u'text').callprop(u'charAt', var.get(u"this").get(u'index')))
            var.put(u'rawString', var.get(u'ch'), u'+')
            if var.get(u'escape'):
                if PyJsStrictEq(var.get(u'ch'),Js(u'u')):
                    var.put(u'hex', var.get(u"this").get(u'text').callprop(u'substring', (var.get(u"this").get(u'index')+Js(1.0)), (var.get(u"this").get(u'index')+Js(5.0))))
                    if var.get(u'hex').callprop(u'match', JsRegExp(u'/[\\da-f]{4}/i')).neg():
                        var.get(u"this").callprop(u'throwError', ((Js(u'Invalid unicode escape [\\u')+var.get(u'hex'))+Js(u']')))
                    var.get(u"this").put(u'index', Js(4.0), u'+')
                    var.put(u'string', var.get(u'String').callprop(u'fromCharCode', var.get(u'parseInt')(var.get(u'hex'), Js(16.0))), u'+')
                else:
                    var.put(u'rep', var.get(u'ESCAPE').get(var.get(u'ch')))
                    var.put(u'string', (var.get(u'string')+(var.get(u'rep') or var.get(u'ch'))))
                var.put(u'escape', Js(False))
            else:
                if PyJsStrictEq(var.get(u'ch'),Js(u'\\')):
                    var.put(u'escape', var.get(u'true'))
                else:
                    if PyJsStrictEq(var.get(u'ch'),var.get(u'quote')):
                        (var.get(u"this").put(u'index',var.get(u"this").get(u'index')+Js(1))-Js(1))
                        PyJs_Object_482_ = Js({u'index':var.get(u'start'),u'text':var.get(u'rawString'),u'constant':var.get(u'true'),u'value':var.get(u'string')})
                        var.get(u"this").get(u'tokens').callprop(u'push', PyJs_Object_482_)
                        return var.get('undefined')
                    else:
                        var.put(u'string', var.get(u'ch'), u'+')
            (var.get(u"this").put(u'index',var.get(u"this").get(u'index')+Js(1))-Js(1))
        var.get(u"this").callprop(u'throwError', Js(u'Unterminated quote'), var.get(u'start'))
    PyJs_anonymous_481_._set_name(u'anonymous')
    PyJs_Object_466_ = Js({u'constructor':var.get(u'Lexer'),u'lex':PyJs_anonymous_467_,u'is':PyJs_anonymous_470_,u'peek':PyJs_anonymous_471_,u'isNumber':PyJs_anonymous_472_,u'isWhitespace':PyJs_anonymous_473_,u'isIdent':PyJs_anonymous_474_,u'isExpOperator':PyJs_anonymous_475_,u'throwError':PyJs_anonymous_476_,u'readNumber':PyJs_anonymous_477_,u'readIdent':PyJs_anonymous_479_,u'readString':PyJs_anonymous_481_})
    var.get(u'Lexer').put(u'prototype', PyJs_Object_466_)
    @Js
    def PyJs_anonymous_483_(lexer, options, this, arguments, var=var):
        var = Scope({u'this':this, u'lexer':lexer, u'options':options, u'arguments':arguments}, var)
        var.registers([u'lexer', u'options'])
        var.get(u"this").put(u'lexer', var.get(u'lexer'))
        var.get(u"this").put(u'options', var.get(u'options'))
    PyJs_anonymous_483_._set_name(u'anonymous')
    var.put(u'AST', PyJs_anonymous_483_)
    var.get(u'AST').put(u'Program', Js(u'Program'))
    var.get(u'AST').put(u'ExpressionStatement', Js(u'ExpressionStatement'))
    var.get(u'AST').put(u'AssignmentExpression', Js(u'AssignmentExpression'))
    var.get(u'AST').put(u'ConditionalExpression', Js(u'ConditionalExpression'))
    var.get(u'AST').put(u'LogicalExpression', Js(u'LogicalExpression'))
    var.get(u'AST').put(u'BinaryExpression', Js(u'BinaryExpression'))
    var.get(u'AST').put(u'UnaryExpression', Js(u'UnaryExpression'))
    var.get(u'AST').put(u'CallExpression', Js(u'CallExpression'))
    var.get(u'AST').put(u'MemberExpression', Js(u'MemberExpression'))
    var.get(u'AST').put(u'Identifier', Js(u'Identifier'))
    var.get(u'AST').put(u'Literal', Js(u'Literal'))
    var.get(u'AST').put(u'ArrayExpression', Js(u'ArrayExpression'))
    var.get(u'AST').put(u'Property', Js(u'Property'))
    var.get(u'AST').put(u'ObjectExpression', Js(u'ObjectExpression'))
    var.get(u'AST').put(u'ThisExpression', Js(u'ThisExpression'))
    var.get(u'AST').put(u'NGValueParameter', Js(u'NGValueParameter'))
    @Js
    def PyJs_anonymous_485_(text, this, arguments, var=var):
        var = Scope({u'this':this, u'text':text, u'arguments':arguments}, var)
        var.registers([u'text', u'value'])
        var.get(u"this").put(u'text', var.get(u'text'))
        var.get(u"this").put(u'tokens', var.get(u"this").get(u'lexer').callprop(u'lex', var.get(u'text')))
        var.put(u'value', var.get(u"this").callprop(u'program'))
        if PyJsStrictNeq(var.get(u"this").get(u'tokens').get(u'length'),Js(0.0)):
            var.get(u"this").callprop(u'throwError', Js(u'is an unexpected token'), var.get(u"this").get(u'tokens').get(u'0'))
        return var.get(u'value')
    PyJs_anonymous_485_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_486_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'body'])
        var.put(u'body', Js([]))
        while var.get(u'true'):
            if ((var.get(u"this").get(u'tokens').get(u'length')>Js(0.0)) and var.get(u"this").callprop(u'peek', Js(u'}'), Js(u')'), Js(u';'), Js(u']')).neg()):
                var.get(u'body').callprop(u'push', var.get(u"this").callprop(u'expressionStatement'))
            if var.get(u"this").callprop(u'expect', Js(u';')).neg():
                PyJs_Object_487_ = Js({u'type':var.get(u'AST').get(u'Program'),u'body':var.get(u'body')})
                return PyJs_Object_487_
    PyJs_anonymous_486_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_488_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        PyJs_Object_489_ = Js({u'type':var.get(u'AST').get(u'ExpressionStatement'),u'expression':var.get(u"this").callprop(u'filterChain')})
        return PyJs_Object_489_
    PyJs_anonymous_488_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_490_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'token', u'left'])
        var.put(u'left', var.get(u"this").callprop(u'expression'))
        pass
        while var.put(u'token', var.get(u"this").callprop(u'expect', Js(u'|'))):
            var.put(u'left', var.get(u"this").callprop(u'filter', var.get(u'left')))
        return var.get(u'left')
    PyJs_anonymous_490_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_491_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").callprop(u'assignment')
    PyJs_anonymous_491_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_492_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'result'])
        var.put(u'result', var.get(u"this").callprop(u'ternary'))
        if var.get(u"this").callprop(u'expect', Js(u'=')):
            PyJs_Object_493_ = Js({u'type':var.get(u'AST').get(u'AssignmentExpression'),u'left':var.get(u'result'),u'right':var.get(u"this").callprop(u'assignment'),u'operator':Js(u'=')})
            var.put(u'result', PyJs_Object_493_)
        return var.get(u'result')
    PyJs_anonymous_492_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_494_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'test', u'alternate', u'consequent'])
        var.put(u'test', var.get(u"this").callprop(u'logicalOR'))
        pass
        pass
        if var.get(u"this").callprop(u'expect', Js(u'?')):
            var.put(u'alternate', var.get(u"this").callprop(u'expression'))
            if var.get(u"this").callprop(u'consume', Js(u':')):
                var.put(u'consequent', var.get(u"this").callprop(u'expression'))
                PyJs_Object_495_ = Js({u'type':var.get(u'AST').get(u'ConditionalExpression'),u'test':var.get(u'test'),u'alternate':var.get(u'alternate'),u'consequent':var.get(u'consequent')})
                return PyJs_Object_495_
        return var.get(u'test')
    PyJs_anonymous_494_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_496_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'left'])
        var.put(u'left', var.get(u"this").callprop(u'logicalAND'))
        while var.get(u"this").callprop(u'expect', Js(u'||')):
            PyJs_Object_497_ = Js({u'type':var.get(u'AST').get(u'LogicalExpression'),u'operator':Js(u'||'),u'left':var.get(u'left'),u'right':var.get(u"this").callprop(u'logicalAND')})
            var.put(u'left', PyJs_Object_497_)
        return var.get(u'left')
    PyJs_anonymous_496_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_498_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'left'])
        var.put(u'left', var.get(u"this").callprop(u'equality'))
        while var.get(u"this").callprop(u'expect', Js(u'&&')):
            PyJs_Object_499_ = Js({u'type':var.get(u'AST').get(u'LogicalExpression'),u'operator':Js(u'&&'),u'left':var.get(u'left'),u'right':var.get(u"this").callprop(u'equality')})
            var.put(u'left', PyJs_Object_499_)
        return var.get(u'left')
    PyJs_anonymous_498_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_500_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'token', u'left'])
        var.put(u'left', var.get(u"this").callprop(u'relational'))
        pass
        while var.put(u'token', var.get(u"this").callprop(u'expect', Js(u'=='), Js(u'!='), Js(u'==='), Js(u'!=='))):
            PyJs_Object_501_ = Js({u'type':var.get(u'AST').get(u'BinaryExpression'),u'operator':var.get(u'token').get(u'text'),u'left':var.get(u'left'),u'right':var.get(u"this").callprop(u'relational')})
            var.put(u'left', PyJs_Object_501_)
        return var.get(u'left')
    PyJs_anonymous_500_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_502_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'token', u'left'])
        var.put(u'left', var.get(u"this").callprop(u'additive'))
        pass
        while var.put(u'token', var.get(u"this").callprop(u'expect', Js(u'<'), Js(u'>'), Js(u'<='), Js(u'>='))):
            PyJs_Object_503_ = Js({u'type':var.get(u'AST').get(u'BinaryExpression'),u'operator':var.get(u'token').get(u'text'),u'left':var.get(u'left'),u'right':var.get(u"this").callprop(u'additive')})
            var.put(u'left', PyJs_Object_503_)
        return var.get(u'left')
    PyJs_anonymous_502_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_504_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'token', u'left'])
        var.put(u'left', var.get(u"this").callprop(u'multiplicative'))
        pass
        while var.put(u'token', var.get(u"this").callprop(u'expect', Js(u'+'), Js(u'-'))):
            PyJs_Object_505_ = Js({u'type':var.get(u'AST').get(u'BinaryExpression'),u'operator':var.get(u'token').get(u'text'),u'left':var.get(u'left'),u'right':var.get(u"this").callprop(u'multiplicative')})
            var.put(u'left', PyJs_Object_505_)
        return var.get(u'left')
    PyJs_anonymous_504_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_506_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'token', u'left'])
        var.put(u'left', var.get(u"this").callprop(u'unary'))
        pass
        while var.put(u'token', var.get(u"this").callprop(u'expect', Js(u'*'), Js(u'/'), Js(u'%'))):
            PyJs_Object_507_ = Js({u'type':var.get(u'AST').get(u'BinaryExpression'),u'operator':var.get(u'token').get(u'text'),u'left':var.get(u'left'),u'right':var.get(u"this").callprop(u'unary')})
            var.put(u'left', PyJs_Object_507_)
        return var.get(u'left')
    PyJs_anonymous_506_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_508_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'token'])
        pass
        if var.put(u'token', var.get(u"this").callprop(u'expect', Js(u'+'), Js(u'-'), Js(u'!'))):
            PyJs_Object_509_ = Js({u'type':var.get(u'AST').get(u'UnaryExpression'),u'operator':var.get(u'token').get(u'text'),u'prefix':var.get(u'true'),u'argument':var.get(u"this").callprop(u'unary')})
            return PyJs_Object_509_
        else:
            return var.get(u"this").callprop(u'primary')
    PyJs_anonymous_508_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_510_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'primary', u'next'])
        pass
        if var.get(u"this").callprop(u'expect', Js(u'(')):
            var.put(u'primary', var.get(u"this").callprop(u'filterChain'))
            var.get(u"this").callprop(u'consume', Js(u')'))
        else:
            if var.get(u"this").callprop(u'expect', Js(u'[')):
                var.put(u'primary', var.get(u"this").callprop(u'arrayDeclaration'))
            else:
                if var.get(u"this").callprop(u'expect', Js(u'{')):
                    var.put(u'primary', var.get(u"this").callprop(u'object'))
                else:
                    if var.get(u"this").get(u'constants').callprop(u'hasOwnProperty', var.get(u"this").callprop(u'peek').get(u'text')):
                        var.put(u'primary', var.get(u'copy')(var.get(u"this").get(u'constants').get(var.get(u"this").callprop(u'consume').get(u'text'))))
                    else:
                        if var.get(u"this").callprop(u'peek').get(u'identifier'):
                            var.put(u'primary', var.get(u"this").callprop(u'identifier'))
                        else:
                            if var.get(u"this").callprop(u'peek').get(u'constant'):
                                var.put(u'primary', var.get(u"this").callprop(u'constant'))
                            else:
                                var.get(u"this").callprop(u'throwError', Js(u'not a primary expression'), var.get(u"this").callprop(u'peek'))
        pass
        while var.put(u'next', var.get(u"this").callprop(u'expect', Js(u'('), Js(u'['), Js(u'.'))):
            if PyJsStrictEq(var.get(u'next').get(u'text'),Js(u'(')):
                PyJs_Object_511_ = Js({u'type':var.get(u'AST').get(u'CallExpression'),u'callee':var.get(u'primary'),u'arguments':var.get(u"this").callprop(u'parseArguments')})
                var.put(u'primary', PyJs_Object_511_)
                var.get(u"this").callprop(u'consume', Js(u')'))
            else:
                if PyJsStrictEq(var.get(u'next').get(u'text'),Js(u'[')):
                    PyJs_Object_512_ = Js({u'type':var.get(u'AST').get(u'MemberExpression'),u'object':var.get(u'primary'),u'property':var.get(u"this").callprop(u'expression'),u'computed':var.get(u'true')})
                    var.put(u'primary', PyJs_Object_512_)
                    var.get(u"this").callprop(u'consume', Js(u']'))
                else:
                    if PyJsStrictEq(var.get(u'next').get(u'text'),Js(u'.')):
                        PyJs_Object_513_ = Js({u'type':var.get(u'AST').get(u'MemberExpression'),u'object':var.get(u'primary'),u'property':var.get(u"this").callprop(u'identifier'),u'computed':Js(False)})
                        var.put(u'primary', PyJs_Object_513_)
                    else:
                        var.get(u"this").callprop(u'throwError', Js(u'IMPOSSIBLE'))
        return var.get(u'primary')
    PyJs_anonymous_510_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_514_(baseExpression, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'baseExpression':baseExpression}, var)
        var.registers([u'args', u'result', u'baseExpression'])
        var.put(u'args', Js([var.get(u'baseExpression')]))
        PyJs_Object_515_ = Js({u'type':var.get(u'AST').get(u'CallExpression'),u'callee':var.get(u"this").callprop(u'identifier'),u'arguments':var.get(u'args'),u'filter':var.get(u'true')})
        var.put(u'result', PyJs_Object_515_)
        while var.get(u"this").callprop(u'expect', Js(u':')):
            var.get(u'args').callprop(u'push', var.get(u"this").callprop(u'expression'))
        return var.get(u'result')
    PyJs_anonymous_514_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_516_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'args'])
        var.put(u'args', Js([]))
        if PyJsStrictNeq(var.get(u"this").callprop(u'peekToken').get(u'text'),Js(u')')):
            while 1:
                var.get(u'args').callprop(u'push', var.get(u"this").callprop(u'expression'))
                if not var.get(u"this").callprop(u'expect', Js(u',')):
                    break
        return var.get(u'args')
    PyJs_anonymous_516_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_517_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'token'])
        var.put(u'token', var.get(u"this").callprop(u'consume'))
        if var.get(u'token').get(u'identifier').neg():
            var.get(u"this").callprop(u'throwError', Js(u'is not a valid identifier'), var.get(u'token'))
        PyJs_Object_518_ = Js({u'type':var.get(u'AST').get(u'Identifier'),u'name':var.get(u'token').get(u'text')})
        return PyJs_Object_518_
    PyJs_anonymous_517_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_519_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        PyJs_Object_520_ = Js({u'type':var.get(u'AST').get(u'Literal'),u'value':var.get(u"this").callprop(u'consume').get(u'value')})
        return PyJs_Object_520_
    PyJs_anonymous_519_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_521_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'elements'])
        var.put(u'elements', Js([]))
        if PyJsStrictNeq(var.get(u"this").callprop(u'peekToken').get(u'text'),Js(u']')):
            while 1:
                if var.get(u"this").callprop(u'peek', Js(u']')):
                    break
                var.get(u'elements').callprop(u'push', var.get(u"this").callprop(u'expression'))
                if not var.get(u"this").callprop(u'expect', Js(u',')):
                    break
        var.get(u"this").callprop(u'consume', Js(u']'))
        PyJs_Object_522_ = Js({u'type':var.get(u'AST').get(u'ArrayExpression'),u'elements':var.get(u'elements')})
        return PyJs_Object_522_
    PyJs_anonymous_521_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_523_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'property', u'properties'])
        var.put(u'properties', Js([]))
        if PyJsStrictNeq(var.get(u"this").callprop(u'peekToken').get(u'text'),Js(u'}')):
            while 1:
                if var.get(u"this").callprop(u'peek', Js(u'}')):
                    break
                PyJs_Object_524_ = Js({u'type':var.get(u'AST').get(u'Property'),u'kind':Js(u'init')})
                var.put(u'property', PyJs_Object_524_)
                if var.get(u"this").callprop(u'peek').get(u'constant'):
                    var.get(u'property').put(u'key', var.get(u"this").callprop(u'constant'))
                else:
                    if var.get(u"this").callprop(u'peek').get(u'identifier'):
                        var.get(u'property').put(u'key', var.get(u"this").callprop(u'identifier'))
                    else:
                        var.get(u"this").callprop(u'throwError', Js(u'invalid key'), var.get(u"this").callprop(u'peek'))
                var.get(u"this").callprop(u'consume', Js(u':'))
                var.get(u'property').put(u'value', var.get(u"this").callprop(u'expression'))
                var.get(u'properties').callprop(u'push', var.get(u'property'))
                if not var.get(u"this").callprop(u'expect', Js(u',')):
                    break
        var.get(u"this").callprop(u'consume', Js(u'}'))
        PyJs_Object_525_ = Js({u'type':var.get(u'AST').get(u'ObjectExpression'),u'properties':var.get(u'properties')})
        return PyJs_Object_525_
    PyJs_anonymous_523_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_526_(msg, token, this, arguments, var=var):
        var = Scope({u'msg':msg, u'this':this, u'token':token, u'arguments':arguments}, var)
        var.registers([u'msg', u'token'])
        PyJsTempException = JsToPyException(var.get(u'$parseMinErr')(Js(u'syntax'), Js(u"Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}]."), var.get(u'token').get(u'text'), var.get(u'msg'), (var.get(u'token').get(u'index')+Js(1.0)), var.get(u"this").get(u'text'), var.get(u"this").get(u'text').callprop(u'substring', var.get(u'token').get(u'index'))))
        raise PyJsTempException
    PyJs_anonymous_526_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_527_(e1, this, arguments, var=var):
        var = Scope({u'this':this, u'e1':e1, u'arguments':arguments}, var)
        var.registers([u'token', u'e1'])
        if PyJsStrictEq(var.get(u"this").get(u'tokens').get(u'length'),Js(0.0)):
            PyJsTempException = JsToPyException(var.get(u'$parseMinErr')(Js(u'ueoe'), Js(u'Unexpected end of expression: {0}'), var.get(u"this").get(u'text')))
            raise PyJsTempException
        var.put(u'token', var.get(u"this").callprop(u'expect', var.get(u'e1')))
        if var.get(u'token').neg():
            var.get(u"this").callprop(u'throwError', ((Js(u'is unexpected, expecting [')+var.get(u'e1'))+Js(u']')), var.get(u"this").callprop(u'peek'))
        return var.get(u'token')
    PyJs_anonymous_527_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_528_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        if PyJsStrictEq(var.get(u"this").get(u'tokens').get(u'length'),Js(0.0)):
            PyJsTempException = JsToPyException(var.get(u'$parseMinErr')(Js(u'ueoe'), Js(u'Unexpected end of expression: {0}'), var.get(u"this").get(u'text')))
            raise PyJsTempException
        return var.get(u"this").get(u'tokens').get(u'0')
    PyJs_anonymous_528_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_529_(e1, e2, e3, e4, this, arguments, var=var):
        var = Scope({u'arguments':arguments, u'this':this, u'e4':e4, u'e1':e1, u'e3':e3, u'e2':e2}, var)
        var.registers([u'e4', u'e1', u'e3', u'e2'])
        return var.get(u"this").callprop(u'peekAhead', Js(0.0), var.get(u'e1'), var.get(u'e2'), var.get(u'e3'), var.get(u'e4'))
    PyJs_anonymous_529_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_530_(i, e1, e2, e3, e4, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'i':i, u'e4':e4, u'e1':e1, u'e3':e3, u'e2':e2}, var)
        var.registers([u'i', u'token', u't', u'e4', u'e1', u'e3', u'e2'])
        if (var.get(u"this").get(u'tokens').get(u'length')>var.get(u'i')):
            var.put(u'token', var.get(u"this").get(u'tokens').get(var.get(u'i')))
            var.put(u't', var.get(u'token').get(u'text'))
            if ((((PyJsStrictEq(var.get(u't'),var.get(u'e1')) or PyJsStrictEq(var.get(u't'),var.get(u'e2'))) or PyJsStrictEq(var.get(u't'),var.get(u'e3'))) or PyJsStrictEq(var.get(u't'),var.get(u'e4'))) or (((var.get(u'e1').neg() and var.get(u'e2').neg()) and var.get(u'e3').neg()) and var.get(u'e4').neg())):
                return var.get(u'token')
        return Js(False)
    PyJs_anonymous_530_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_531_(e1, e2, e3, e4, this, arguments, var=var):
        var = Scope({u'arguments':arguments, u'this':this, u'e4':e4, u'e1':e1, u'e3':e3, u'e2':e2}, var)
        var.registers([u'e4', u'token', u'e1', u'e3', u'e2'])
        var.put(u'token', var.get(u"this").callprop(u'peek', var.get(u'e1'), var.get(u'e2'), var.get(u'e3'), var.get(u'e4')))
        if var.get(u'token'):
            var.get(u"this").get(u'tokens').callprop(u'shift')
            return var.get(u'token')
        return Js(False)
    PyJs_anonymous_531_._set_name(u'anonymous')
    PyJs_Object_533_ = Js({u'type':var.get(u'AST').get(u'Literal'),u'value':var.get(u'true')})
    PyJs_Object_534_ = Js({u'type':var.get(u'AST').get(u'Literal'),u'value':Js(False)})
    PyJs_Object_535_ = Js({u'type':var.get(u'AST').get(u'Literal'),u'value':var.get(u"null")})
    PyJs_Object_536_ = Js({u'type':var.get(u'AST').get(u'Literal'),u'value':var.get(u'undefined')})
    PyJs_Object_537_ = Js({u'type':var.get(u'AST').get(u'ThisExpression')})
    PyJs_Object_532_ = Js({u'true':PyJs_Object_533_,u'false':PyJs_Object_534_,u'null':PyJs_Object_535_,u'undefined':PyJs_Object_536_,u'this':PyJs_Object_537_})
    PyJs_Object_484_ = Js({u'ast':PyJs_anonymous_485_,u'program':PyJs_anonymous_486_,u'expressionStatement':PyJs_anonymous_488_,u'filterChain':PyJs_anonymous_490_,u'expression':PyJs_anonymous_491_,u'assignment':PyJs_anonymous_492_,u'ternary':PyJs_anonymous_494_,u'logicalOR':PyJs_anonymous_496_,u'logicalAND':PyJs_anonymous_498_,u'equality':PyJs_anonymous_500_,u'relational':PyJs_anonymous_502_,u'additive':PyJs_anonymous_504_,u'multiplicative':PyJs_anonymous_506_,u'unary':PyJs_anonymous_508_,u'primary':PyJs_anonymous_510_,u'filter':PyJs_anonymous_514_,u'parseArguments':PyJs_anonymous_516_,u'identifier':PyJs_anonymous_517_,u'constant':PyJs_anonymous_519_,u'arrayDeclaration':PyJs_anonymous_521_,u'object':PyJs_anonymous_523_,u'throwError':PyJs_anonymous_526_,u'consume':PyJs_anonymous_527_,u'peekToken':PyJs_anonymous_528_,u'peek':PyJs_anonymous_529_,u'peekAhead':PyJs_anonymous_530_,u'expect':PyJs_anonymous_531_,u'constants':PyJs_Object_532_})
    var.get(u'AST').put(u'prototype', PyJs_Object_484_)
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    @Js
    def PyJs_anonymous_546_(expression, expensiveChecks, this, arguments, var=var):
        var = Scope({u'this':this, u'expensiveChecks':expensiveChecks, u'expression':expression, u'arguments':arguments}, var)
        var.registers([u'assignable', u'expensiveChecks', u'extra', u'self', u'ast', u'fnString', u'result', u'toWatch', u'expression', u'fn'])
        var.put(u'self', var.get(u"this"))
        var.put(u'ast', var.get(u"this").get(u'astBuilder').callprop(u'ast', var.get(u'expression')))
        PyJs_Object_548_ = Js({})
        PyJs_Object_550_ = Js({})
        PyJs_Object_549_ = Js({u'vars':Js([]),u'body':Js([]),u'own':PyJs_Object_550_})
        PyJs_Object_552_ = Js({})
        PyJs_Object_551_ = Js({u'vars':Js([]),u'body':Js([]),u'own':PyJs_Object_552_})
        PyJs_Object_547_ = Js({u'nextId':Js(0.0),u'filters':PyJs_Object_548_,u'expensiveChecks':var.get(u'expensiveChecks'),u'fn':PyJs_Object_549_,u'assign':PyJs_Object_551_,u'inputs':Js([])})
        var.get(u"this").put(u'state', PyJs_Object_547_)
        var.get(u'findConstantAndWatchExpressions')(var.get(u'ast'), var.get(u'self').get(u'$filter'))
        var.put(u'extra', Js(u''))
        pass
        var.get(u"this").put(u'stage', Js(u'assign'))
        if var.put(u'assignable', var.get(u'assignableAST')(var.get(u'ast'))):
            var.get(u"this").get(u'state').put(u'computing', Js(u'assign'))
            var.put(u'result', var.get(u"this").callprop(u'nextId'))
            var.get(u"this").callprop(u'recurse', var.get(u'assignable'), var.get(u'result'))
            var.get(u"this").callprop(u'return_', var.get(u'result'))
            var.put(u'extra', (Js(u'fn.assign=')+var.get(u"this").callprop(u'generateFunction', Js(u'assign'), Js(u's,v,l'))))
        var.put(u'toWatch', var.get(u'getInputs')(var.get(u'ast').get(u'body')))
        var.get(u'self').put(u'stage', Js(u'inputs'))
        @Js
        def PyJs_anonymous_553_(watch, key, this, arguments, var=var):
            var = Scope({u'this':this, u'watch':watch, u'arguments':arguments, u'key':key}, var)
            var.registers([u'watch', u'intoId', u'fnKey', u'key'])
            var.put(u'fnKey', (Js(u'fn')+var.get(u'key')))
            PyJs_Object_555_ = Js({})
            PyJs_Object_554_ = Js({u'vars':Js([]),u'body':Js([]),u'own':PyJs_Object_555_})
            var.get(u'self').get(u'state').put(var.get(u'fnKey'), PyJs_Object_554_)
            var.get(u'self').get(u'state').put(u'computing', var.get(u'fnKey'))
            var.put(u'intoId', var.get(u'self').callprop(u'nextId'))
            var.get(u'self').callprop(u'recurse', var.get(u'watch'), var.get(u'intoId'))
            var.get(u'self').callprop(u'return_', var.get(u'intoId'))
            var.get(u'self').get(u'state').get(u'inputs').callprop(u'push', var.get(u'fnKey'))
            var.get(u'watch').put(u'watchId', var.get(u'key'))
        PyJs_anonymous_553_._set_name(u'anonymous')
        var.get(u'forEach')(var.get(u'toWatch'), PyJs_anonymous_553_)
        var.get(u"this").get(u'state').put(u'computing', Js(u'fn'))
        var.get(u"this").put(u'stage', Js(u'main'))
        var.get(u"this").callprop(u'recurse', var.get(u'ast'))
        var.put(u'fnString', ((((((((((Js(u'"')+var.get(u"this").get(u'USE'))+Js(u' '))+var.get(u"this").get(u'STRICT'))+Js(u'";\n'))+var.get(u"this").callprop(u'filterPrefix'))+Js(u'var fn='))+var.get(u"this").callprop(u'generateFunction', Js(u'fn'), Js(u's,l,a,i')))+var.get(u'extra'))+var.get(u"this").callprop(u'watchFns'))+Js(u'return fn;')))
        def PyJs_LONG_556_(var=var):
            return var.get(u'Function').create(Js(u'$filter'), Js(u'ensureSafeMemberName'), Js(u'ensureSafeObject'), Js(u'ensureSafeFunction'), Js(u'getStringValue'), Js(u'ensureSafeAssignContext'), Js(u'ifDefined'), Js(u'plus'), Js(u'text'), var.get(u'fnString'))(var.get(u"this").get(u'$filter'), var.get(u'ensureSafeMemberName'), var.get(u'ensureSafeObject'), var.get(u'ensureSafeFunction'), var.get(u'getStringValue'), var.get(u'ensureSafeAssignContext'), var.get(u'ifDefined'), var.get(u'plusFn'), var.get(u'expression'))
        var.put(u'fn', PyJs_LONG_556_())
        var.get(u"this").put(u'state', var.get(u"this").put(u'stage', var.get(u'undefined')))
        var.get(u'fn').put(u'literal', var.get(u'isLiteral')(var.get(u'ast')))
        var.get(u'fn').put(u'constant', var.get(u'isConstant')(var.get(u'ast')))
        return var.get(u'fn')
    PyJs_anonymous_546_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_557_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'self', u'fns', u'result'])
        var.put(u'result', Js([]))
        var.put(u'fns', var.get(u"this").get(u'state').get(u'inputs'))
        var.put(u'self', var.get(u"this"))
        @Js
        def PyJs_anonymous_558_(name, this, arguments, var=var):
            var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
            var.registers([u'name'])
            var.get(u'result').callprop(u'push', (((Js(u'var ')+var.get(u'name'))+Js(u'='))+var.get(u'self').callprop(u'generateFunction', var.get(u'name'), Js(u's'))))
        PyJs_anonymous_558_._set_name(u'anonymous')
        var.get(u'forEach')(var.get(u'fns'), PyJs_anonymous_558_)
        if var.get(u'fns').get(u'length'):
            var.get(u'result').callprop(u'push', ((Js(u'fn.inputs=[')+var.get(u'fns').callprop(u'join', Js(u',')))+Js(u'];')))
        return var.get(u'result').callprop(u'join', Js(u''))
    PyJs_anonymous_557_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_559_(name, params, this, arguments, var=var):
        var = Scope({u'this':this, u'params':params, u'name':name, u'arguments':arguments}, var)
        var.registers([u'params', u'name'])
        return (((((Js(u'function(')+var.get(u'params'))+Js(u'){'))+var.get(u"this").callprop(u'varsPrefix', var.get(u'name')))+var.get(u"this").callprop(u'body', var.get(u'name')))+Js(u'};'))
    PyJs_anonymous_559_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_560_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'self', u'parts'])
        var.put(u'parts', Js([]))
        var.put(u'self', var.get(u"this"))
        @Js
        def PyJs_anonymous_561_(id, filter, this, arguments, var=var):
            var = Scope({u'filter':filter, u'this':this, u'id':id, u'arguments':arguments}, var)
            var.registers([u'filter', u'id'])
            var.get(u'parts').callprop(u'push', (((var.get(u'id')+Js(u'=$filter('))+var.get(u'self').callprop(u'escape', var.get(u'filter')))+Js(u')')))
        PyJs_anonymous_561_._set_name(u'anonymous')
        var.get(u'forEach')(var.get(u"this").get(u'state').get(u'filters'), PyJs_anonymous_561_)
        if var.get(u'parts').get(u'length'):
            return ((Js(u'var ')+var.get(u'parts').callprop(u'join', Js(u',')))+Js(u';'))
        return Js(u'')
    PyJs_anonymous_560_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_562_(section, this, arguments, var=var):
        var = Scope({u'this':this, u'section':section, u'arguments':arguments}, var)
        var.registers([u'section'])
        return (((Js(u'var ')+var.get(u"this").get(u'state').get(var.get(u'section')).get(u'vars').callprop(u'join', Js(u',')))+Js(u';')) if var.get(u"this").get(u'state').get(var.get(u'section')).get(u'vars').get(u'length') else Js(u''))
    PyJs_anonymous_562_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_563_(section, this, arguments, var=var):
        var = Scope({u'this':this, u'section':section, u'arguments':arguments}, var)
        var.registers([u'section'])
        return var.get(u"this").get(u'state').get(var.get(u'section')).get(u'body').callprop(u'join', Js(u''))
    PyJs_anonymous_563_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_564_(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck, this, arguments, var=var):
        var = Scope({u'skipWatchIdCheck':skipWatchIdCheck, u'this':this, u'create':create, u'intoId':intoId, u'ast':ast, u'arguments':arguments, u'recursionFn':recursionFn, u'nameId':nameId}, var)
        var.registers([u'right', u'ast', u'nameId', u'self', u'args', u'skipWatchIdCheck', u'recursionFn', u'intoId', u'expression', u'create', u'left'])
        var.put(u'self', var.get(u"this"))
        var.put(u'recursionFn', (var.get(u'recursionFn') or var.get(u'noop')))
        if (var.get(u'skipWatchIdCheck').neg() and var.get(u'isDefined')(var.get(u'ast').get(u'watchId'))):
            var.put(u'intoId', (var.get(u'intoId') or var.get(u"this").callprop(u'nextId')))
            var.get(u"this").callprop(u'if_', Js(u'i'), var.get(u"this").callprop(u'lazyAssign', var.get(u'intoId'), var.get(u"this").callprop(u'computedMember', Js(u'i'), var.get(u'ast').get(u'watchId'))), var.get(u"this").callprop(u'lazyRecurse', var.get(u'ast'), var.get(u'intoId'), var.get(u'nameId'), var.get(u'recursionFn'), var.get(u'create'), var.get(u'true')))
            return var.get('undefined')
        while 1:
            SWITCHED = False
            CONDITION = (var.get(u'ast').get(u'type'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'Program')):
                SWITCHED = True
                @Js
                def PyJs_anonymous_565_(expression, pos, this, arguments, var=var):
                    var = Scope({u'this':this, u'expression':expression, u'pos':pos, u'arguments':arguments}, var)
                    var.registers([u'expression', u'pos'])
                    @Js
                    def PyJs_anonymous_566_(expr, this, arguments, var=var):
                        var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                        var.registers([u'expr'])
                        var.put(u'right', var.get(u'expr'))
                    PyJs_anonymous_566_._set_name(u'anonymous')
                    var.get(u'self').callprop(u'recurse', var.get(u'expression').get(u'expression'), var.get(u'undefined'), var.get(u'undefined'), PyJs_anonymous_566_)
                    if PyJsStrictNeq(var.get(u'pos'),(var.get(u'ast').get(u'body').get(u'length')-Js(1.0))):
                        var.get(u'self').callprop(u'current').get(u'body').callprop(u'push', var.get(u'right'), Js(u';'))
                    else:
                        var.get(u'self').callprop(u'return_', var.get(u'right'))
                PyJs_anonymous_565_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'ast').get(u'body'), PyJs_anonymous_565_)
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'Literal')):
                SWITCHED = True
                var.put(u'expression', var.get(u"this").callprop(u'escape', var.get(u'ast').get(u'value')))
                var.get(u"this").callprop(u'assign', var.get(u'intoId'), var.get(u'expression'))
                var.get(u'recursionFn')(var.get(u'expression'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'UnaryExpression')):
                SWITCHED = True
                @Js
                def PyJs_anonymous_567_(expr, this, arguments, var=var):
                    var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                    var.registers([u'expr'])
                    var.put(u'right', var.get(u'expr'))
                PyJs_anonymous_567_._set_name(u'anonymous')
                var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'argument'), var.get(u'undefined'), var.get(u'undefined'), PyJs_anonymous_567_)
                var.put(u'expression', (((var.get(u'ast').get(u'operator')+Js(u'('))+var.get(u"this").callprop(u'ifDefined', var.get(u'right'), Js(0.0)))+Js(u')')))
                var.get(u"this").callprop(u'assign', var.get(u'intoId'), var.get(u'expression'))
                var.get(u'recursionFn')(var.get(u'expression'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'BinaryExpression')):
                SWITCHED = True
                @Js
                def PyJs_anonymous_568_(expr, this, arguments, var=var):
                    var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                    var.registers([u'expr'])
                    var.put(u'left', var.get(u'expr'))
                PyJs_anonymous_568_._set_name(u'anonymous')
                var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'left'), var.get(u'undefined'), var.get(u'undefined'), PyJs_anonymous_568_)
                @Js
                def PyJs_anonymous_569_(expr, this, arguments, var=var):
                    var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                    var.registers([u'expr'])
                    var.put(u'right', var.get(u'expr'))
                PyJs_anonymous_569_._set_name(u'anonymous')
                var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'right'), var.get(u'undefined'), var.get(u'undefined'), PyJs_anonymous_569_)
                if PyJsStrictEq(var.get(u'ast').get(u'operator'),Js(u'+')):
                    var.put(u'expression', var.get(u"this").callprop(u'plus', var.get(u'left'), var.get(u'right')))
                else:
                    if PyJsStrictEq(var.get(u'ast').get(u'operator'),Js(u'-')):
                        var.put(u'expression', ((var.get(u"this").callprop(u'ifDefined', var.get(u'left'), Js(0.0))+var.get(u'ast').get(u'operator'))+var.get(u"this").callprop(u'ifDefined', var.get(u'right'), Js(0.0))))
                    else:
                        var.put(u'expression', ((((((Js(u'(')+var.get(u'left'))+Js(u')'))+var.get(u'ast').get(u'operator'))+Js(u'('))+var.get(u'right'))+Js(u')')))
                var.get(u"this").callprop(u'assign', var.get(u'intoId'), var.get(u'expression'))
                var.get(u'recursionFn')(var.get(u'expression'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'LogicalExpression')):
                SWITCHED = True
                var.put(u'intoId', (var.get(u'intoId') or var.get(u"this").callprop(u'nextId')))
                var.get(u'self').callprop(u'recurse', var.get(u'ast').get(u'left'), var.get(u'intoId'))
                var.get(u'self').callprop(u'if_', (var.get(u'intoId') if PyJsStrictEq(var.get(u'ast').get(u'operator'),Js(u'&&')) else var.get(u'self').callprop(u'not', var.get(u'intoId'))), var.get(u'self').callprop(u'lazyRecurse', var.get(u'ast').get(u'right'), var.get(u'intoId')))
                var.get(u'recursionFn')(var.get(u'intoId'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'ConditionalExpression')):
                SWITCHED = True
                var.put(u'intoId', (var.get(u'intoId') or var.get(u"this").callprop(u'nextId')))
                var.get(u'self').callprop(u'recurse', var.get(u'ast').get(u'test'), var.get(u'intoId'))
                var.get(u'self').callprop(u'if_', var.get(u'intoId'), var.get(u'self').callprop(u'lazyRecurse', var.get(u'ast').get(u'alternate'), var.get(u'intoId')), var.get(u'self').callprop(u'lazyRecurse', var.get(u'ast').get(u'consequent'), var.get(u'intoId')))
                var.get(u'recursionFn')(var.get(u'intoId'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'Identifier')):
                SWITCHED = True
                var.put(u'intoId', (var.get(u'intoId') or var.get(u"this").callprop(u'nextId')))
                if var.get(u'nameId'):
                    var.get(u'nameId').put(u'context', (Js(u's') if PyJsStrictEq(var.get(u'self').get(u'stage'),Js(u'inputs')) else var.get(u"this").callprop(u'assign', var.get(u"this").callprop(u'nextId'), (var.get(u"this").callprop(u'getHasOwnProperty', Js(u'l'), var.get(u'ast').get(u'name'))+Js(u'?l:s')))))
                    var.get(u'nameId').put(u'computed', Js(False))
                    var.get(u'nameId').put(u'name', var.get(u'ast').get(u'name'))
                var.get(u'ensureSafeMemberName')(var.get(u'ast').get(u'name'))
                def PyJs_LONG_572_(var=var):
                    @Js
                    def PyJs_anonymous_570_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        @Js
                        def PyJs_anonymous_571_(this, arguments, var=var):
                            var = Scope({u'this':this, u'arguments':arguments}, var)
                            var.registers([])
                            if (var.get(u'create') and PyJsStrictNeq(var.get(u'create'),Js(1.0))):
                                var.get(u'self').callprop(u'if_', var.get(u'self').callprop(u'not', var.get(u'self').callprop(u'nonComputedMember', Js(u's'), var.get(u'ast').get(u'name'))), var.get(u'self').callprop(u'lazyAssign', var.get(u'self').callprop(u'nonComputedMember', Js(u's'), var.get(u'ast').get(u'name')), Js(u'{}')))
                            var.get(u'self').callprop(u'assign', var.get(u'intoId'), var.get(u'self').callprop(u'nonComputedMember', Js(u's'), var.get(u'ast').get(u'name')))
                        PyJs_anonymous_571_._set_name(u'anonymous')
                        var.get(u'self').callprop(u'if_', (PyJsStrictEq(var.get(u'self').get(u'stage'),Js(u'inputs')) or Js(u's')), PyJs_anonymous_571_)
                    PyJs_anonymous_570_._set_name(u'anonymous')
                    return var.get(u'self').callprop(u'if_', (PyJsStrictEq(var.get(u'self').get(u'stage'),Js(u'inputs')) or var.get(u'self').callprop(u'not', var.get(u'self').callprop(u'getHasOwnProperty', Js(u'l'), var.get(u'ast').get(u'name')))), PyJs_anonymous_570_, (var.get(u'intoId') and var.get(u'self').callprop(u'lazyAssign', var.get(u'intoId'), var.get(u'self').callprop(u'nonComputedMember', Js(u'l'), var.get(u'ast').get(u'name')))))
                PyJs_LONG_572_()
                if (var.get(u'self').get(u'state').get(u'expensiveChecks') or var.get(u'isPossiblyDangerousMemberName')(var.get(u'ast').get(u'name'))):
                    var.get(u'self').callprop(u'addEnsureSafeObject', var.get(u'intoId'))
                var.get(u'recursionFn')(var.get(u'intoId'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'MemberExpression')):
                SWITCHED = True
                var.put(u'left', ((var.get(u'nameId') and var.get(u'nameId').put(u'context', var.get(u"this").callprop(u'nextId'))) or var.get(u"this").callprop(u'nextId')))
                var.put(u'intoId', (var.get(u'intoId') or var.get(u"this").callprop(u'nextId')))
                @Js
                def PyJs_anonymous_573_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    @Js
                    def PyJs_anonymous_574_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        if var.get(u'ast').get(u'computed'):
                            var.put(u'right', var.get(u'self').callprop(u'nextId'))
                            var.get(u'self').callprop(u'recurse', var.get(u'ast').get(u'property'), var.get(u'right'))
                            var.get(u'self').callprop(u'getStringValue', var.get(u'right'))
                            var.get(u'self').callprop(u'addEnsureSafeMemberName', var.get(u'right'))
                            if (var.get(u'create') and PyJsStrictNeq(var.get(u'create'),Js(1.0))):
                                var.get(u'self').callprop(u'if_', var.get(u'self').callprop(u'not', var.get(u'self').callprop(u'computedMember', var.get(u'left'), var.get(u'right'))), var.get(u'self').callprop(u'lazyAssign', var.get(u'self').callprop(u'computedMember', var.get(u'left'), var.get(u'right')), Js(u'{}')))
                            var.put(u'expression', var.get(u'self').callprop(u'ensureSafeObject', var.get(u'self').callprop(u'computedMember', var.get(u'left'), var.get(u'right'))))
                            var.get(u'self').callprop(u'assign', var.get(u'intoId'), var.get(u'expression'))
                            if var.get(u'nameId'):
                                var.get(u'nameId').put(u'computed', var.get(u'true'))
                                var.get(u'nameId').put(u'name', var.get(u'right'))
                        else:
                            var.get(u'ensureSafeMemberName')(var.get(u'ast').get(u'property').get(u'name'))
                            if (var.get(u'create') and PyJsStrictNeq(var.get(u'create'),Js(1.0))):
                                var.get(u'self').callprop(u'if_', var.get(u'self').callprop(u'not', var.get(u'self').callprop(u'nonComputedMember', var.get(u'left'), var.get(u'ast').get(u'property').get(u'name'))), var.get(u'self').callprop(u'lazyAssign', var.get(u'self').callprop(u'nonComputedMember', var.get(u'left'), var.get(u'ast').get(u'property').get(u'name')), Js(u'{}')))
                            var.put(u'expression', var.get(u'self').callprop(u'nonComputedMember', var.get(u'left'), var.get(u'ast').get(u'property').get(u'name')))
                            if (var.get(u'self').get(u'state').get(u'expensiveChecks') or var.get(u'isPossiblyDangerousMemberName')(var.get(u'ast').get(u'property').get(u'name'))):
                                var.put(u'expression', var.get(u'self').callprop(u'ensureSafeObject', var.get(u'expression')))
                            var.get(u'self').callprop(u'assign', var.get(u'intoId'), var.get(u'expression'))
                            if var.get(u'nameId'):
                                var.get(u'nameId').put(u'computed', Js(False))
                                var.get(u'nameId').put(u'name', var.get(u'ast').get(u'property').get(u'name'))
                    PyJs_anonymous_574_._set_name(u'anonymous')
                    @Js
                    def PyJs_anonymous_575_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        var.get(u'self').callprop(u'assign', var.get(u'intoId'), Js(u'undefined'))
                    PyJs_anonymous_575_._set_name(u'anonymous')
                    var.get(u'self').callprop(u'if_', var.get(u'self').callprop(u'notNull', var.get(u'left')), PyJs_anonymous_574_, PyJs_anonymous_575_)
                    var.get(u'recursionFn')(var.get(u'intoId'))
                PyJs_anonymous_573_._set_name(u'anonymous')
                var.get(u'self').callprop(u'recurse', var.get(u'ast').get(u'object'), var.get(u'left'), var.get(u'undefined'), PyJs_anonymous_573_, var.get(u'create').neg().neg())
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'CallExpression')):
                SWITCHED = True
                var.put(u'intoId', (var.get(u'intoId') or var.get(u"this").callprop(u'nextId')))
                if var.get(u'ast').get(u'filter'):
                    var.put(u'right', var.get(u'self').callprop(u'filter', var.get(u'ast').get(u'callee').get(u'name')))
                    var.put(u'args', Js([]))
                    @Js
                    def PyJs_anonymous_576_(expr, this, arguments, var=var):
                        var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                        var.registers([u'expr', u'argument'])
                        var.put(u'argument', var.get(u'self').callprop(u'nextId'))
                        var.get(u'self').callprop(u'recurse', var.get(u'expr'), var.get(u'argument'))
                        var.get(u'args').callprop(u'push', var.get(u'argument'))
                    PyJs_anonymous_576_._set_name(u'anonymous')
                    var.get(u'forEach')(var.get(u'ast').get(u'arguments'), PyJs_anonymous_576_)
                    var.put(u'expression', (((var.get(u'right')+Js(u'('))+var.get(u'args').callprop(u'join', Js(u',')))+Js(u')')))
                    var.get(u'self').callprop(u'assign', var.get(u'intoId'), var.get(u'expression'))
                    var.get(u'recursionFn')(var.get(u'intoId'))
                else:
                    var.put(u'right', var.get(u'self').callprop(u'nextId'))
                    PyJs_Object_577_ = Js({})
                    var.put(u'left', PyJs_Object_577_)
                    var.put(u'args', Js([]))
                    @Js
                    def PyJs_anonymous_578_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        @Js
                        def PyJs_anonymous_579_(this, arguments, var=var):
                            var = Scope({u'this':this, u'arguments':arguments}, var)
                            var.registers([])
                            var.get(u'self').callprop(u'addEnsureSafeFunction', var.get(u'right'))
                            @Js
                            def PyJs_anonymous_580_(expr, this, arguments, var=var):
                                var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                                var.registers([u'expr'])
                                @Js
                                def PyJs_anonymous_581_(argument, this, arguments, var=var):
                                    var = Scope({u'this':this, u'argument':argument, u'arguments':arguments}, var)
                                    var.registers([u'argument'])
                                    var.get(u'args').callprop(u'push', var.get(u'self').callprop(u'ensureSafeObject', var.get(u'argument')))
                                PyJs_anonymous_581_._set_name(u'anonymous')
                                var.get(u'self').callprop(u'recurse', var.get(u'expr'), var.get(u'self').callprop(u'nextId'), var.get(u'undefined'), PyJs_anonymous_581_)
                            PyJs_anonymous_580_._set_name(u'anonymous')
                            var.get(u'forEach')(var.get(u'ast').get(u'arguments'), PyJs_anonymous_580_)
                            if var.get(u'left').get(u'name'):
                                if var.get(u'self').get(u'state').get(u'expensiveChecks').neg():
                                    var.get(u'self').callprop(u'addEnsureSafeObject', var.get(u'left').get(u'context'))
                                var.put(u'expression', (((var.get(u'self').callprop(u'member', var.get(u'left').get(u'context'), var.get(u'left').get(u'name'), var.get(u'left').get(u'computed'))+Js(u'('))+var.get(u'args').callprop(u'join', Js(u',')))+Js(u')')))
                            else:
                                var.put(u'expression', (((var.get(u'right')+Js(u'('))+var.get(u'args').callprop(u'join', Js(u',')))+Js(u')')))
                            var.put(u'expression', var.get(u'self').callprop(u'ensureSafeObject', var.get(u'expression')))
                            var.get(u'self').callprop(u'assign', var.get(u'intoId'), var.get(u'expression'))
                        PyJs_anonymous_579_._set_name(u'anonymous')
                        @Js
                        def PyJs_anonymous_582_(this, arguments, var=var):
                            var = Scope({u'this':this, u'arguments':arguments}, var)
                            var.registers([])
                            var.get(u'self').callprop(u'assign', var.get(u'intoId'), Js(u'undefined'))
                        PyJs_anonymous_582_._set_name(u'anonymous')
                        var.get(u'self').callprop(u'if_', var.get(u'self').callprop(u'notNull', var.get(u'right')), PyJs_anonymous_579_, PyJs_anonymous_582_)
                        var.get(u'recursionFn')(var.get(u'intoId'))
                    PyJs_anonymous_578_._set_name(u'anonymous')
                    var.get(u'self').callprop(u'recurse', var.get(u'ast').get(u'callee'), var.get(u'right'), var.get(u'left'), PyJs_anonymous_578_)
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'AssignmentExpression')):
                SWITCHED = True
                var.put(u'right', var.get(u"this").callprop(u'nextId'))
                PyJs_Object_583_ = Js({})
                var.put(u'left', PyJs_Object_583_)
                if var.get(u'isAssignable')(var.get(u'ast').get(u'left')).neg():
                    PyJsTempException = JsToPyException(var.get(u'$parseMinErr')(Js(u'lval'), Js(u'Trying to assing a value to a non l-value')))
                    raise PyJsTempException
                @Js
                def PyJs_anonymous_584_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    @Js
                    def PyJs_anonymous_585_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        var.get(u'self').callprop(u'recurse', var.get(u'ast').get(u'right'), var.get(u'right'))
                        var.get(u'self').callprop(u'addEnsureSafeObject', var.get(u'self').callprop(u'member', var.get(u'left').get(u'context'), var.get(u'left').get(u'name'), var.get(u'left').get(u'computed')))
                        var.get(u'self').callprop(u'addEnsureSafeAssignContext', var.get(u'left').get(u'context'))
                        var.put(u'expression', ((var.get(u'self').callprop(u'member', var.get(u'left').get(u'context'), var.get(u'left').get(u'name'), var.get(u'left').get(u'computed'))+var.get(u'ast').get(u'operator'))+var.get(u'right')))
                        var.get(u'self').callprop(u'assign', var.get(u'intoId'), var.get(u'expression'))
                        var.get(u'recursionFn')((var.get(u'intoId') or var.get(u'expression')))
                    PyJs_anonymous_585_._set_name(u'anonymous')
                    var.get(u'self').callprop(u'if_', var.get(u'self').callprop(u'notNull', var.get(u'left').get(u'context')), PyJs_anonymous_585_)
                PyJs_anonymous_584_._set_name(u'anonymous')
                var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'left'), var.get(u'undefined'), var.get(u'left'), PyJs_anonymous_584_, Js(1.0))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'ArrayExpression')):
                SWITCHED = True
                var.put(u'args', Js([]))
                @Js
                def PyJs_anonymous_586_(expr, this, arguments, var=var):
                    var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                    var.registers([u'expr'])
                    @Js
                    def PyJs_anonymous_587_(argument, this, arguments, var=var):
                        var = Scope({u'this':this, u'argument':argument, u'arguments':arguments}, var)
                        var.registers([u'argument'])
                        var.get(u'args').callprop(u'push', var.get(u'argument'))
                    PyJs_anonymous_587_._set_name(u'anonymous')
                    var.get(u'self').callprop(u'recurse', var.get(u'expr'), var.get(u'self').callprop(u'nextId'), var.get(u'undefined'), PyJs_anonymous_587_)
                PyJs_anonymous_586_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'ast').get(u'elements'), PyJs_anonymous_586_)
                var.put(u'expression', ((Js(u'[')+var.get(u'args').callprop(u'join', Js(u',')))+Js(u']')))
                var.get(u"this").callprop(u'assign', var.get(u'intoId'), var.get(u'expression'))
                var.get(u'recursionFn')(var.get(u'expression'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'ObjectExpression')):
                SWITCHED = True
                var.put(u'args', Js([]))
                @Js
                def PyJs_anonymous_588_(property, this, arguments, var=var):
                    var = Scope({u'this':this, u'property':property, u'arguments':arguments}, var)
                    var.registers([u'property'])
                    @Js
                    def PyJs_anonymous_589_(expr, this, arguments, var=var):
                        var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                        var.registers([u'expr'])
                        var.get(u'args').callprop(u'push', ((var.get(u'self').callprop(u'escape', (var.get(u'property').get(u'key').get(u'name') if PyJsStrictEq(var.get(u'property').get(u'key').get(u'type'),var.get(u'AST').get(u'Identifier')) else (Js(u'')+var.get(u'property').get(u'key').get(u'value'))))+Js(u':'))+var.get(u'expr')))
                    PyJs_anonymous_589_._set_name(u'anonymous')
                    var.get(u'self').callprop(u'recurse', var.get(u'property').get(u'value'), var.get(u'self').callprop(u'nextId'), var.get(u'undefined'), PyJs_anonymous_589_)
                PyJs_anonymous_588_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'ast').get(u'properties'), PyJs_anonymous_588_)
                var.put(u'expression', ((Js(u'{')+var.get(u'args').callprop(u'join', Js(u',')))+Js(u'}')))
                var.get(u"this").callprop(u'assign', var.get(u'intoId'), var.get(u'expression'))
                var.get(u'recursionFn')(var.get(u'expression'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'ThisExpression')):
                SWITCHED = True
                var.get(u"this").callprop(u'assign', var.get(u'intoId'), Js(u's'))
                var.get(u'recursionFn')(Js(u's'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'NGValueParameter')):
                SWITCHED = True
                var.get(u"this").callprop(u'assign', var.get(u'intoId'), Js(u'v'))
                var.get(u'recursionFn')(Js(u'v'))
                break
            SWITCHED = True
            break
    PyJs_anonymous_564_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_590_(element, property, this, arguments, var=var):
        var = Scope({u'this':this, u'property':property, u'arguments':arguments, u'element':element}, var)
        var.registers([u'property', u'own', u'key', u'element'])
        var.put(u'key', ((var.get(u'element')+Js(u'.'))+var.get(u'property')))
        var.put(u'own', var.get(u"this").callprop(u'current').get(u'own'))
        if var.get(u'own').callprop(u'hasOwnProperty', var.get(u'key')).neg():
            var.get(u'own').put(var.get(u'key'), var.get(u"this").callprop(u'nextId', Js(False), (((((var.get(u'element')+Js(u'&&('))+var.get(u"this").callprop(u'escape', var.get(u'property')))+Js(u' in '))+var.get(u'element'))+Js(u')'))))
        return var.get(u'own').get(var.get(u'key'))
    PyJs_anonymous_590_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_591_(id, value, this, arguments, var=var):
        var = Scope({u'this':this, u'id':id, u'value':value, u'arguments':arguments}, var)
        var.registers([u'id', u'value'])
        if var.get(u'id').neg():
            return var.get('undefined')
        var.get(u"this").callprop(u'current').get(u'body').callprop(u'push', var.get(u'id'), Js(u'='), var.get(u'value'), Js(u';'))
        return var.get(u'id')
    PyJs_anonymous_591_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_592_(filterName, this, arguments, var=var):
        var = Scope({u'this':this, u'filterName':filterName, u'arguments':arguments}, var)
        var.registers([u'filterName'])
        if var.get(u"this").get(u'state').get(u'filters').callprop(u'hasOwnProperty', var.get(u'filterName')).neg():
            var.get(u"this").get(u'state').get(u'filters').put(var.get(u'filterName'), var.get(u"this").callprop(u'nextId', var.get(u'true')))
        return var.get(u"this").get(u'state').get(u'filters').get(var.get(u'filterName'))
    PyJs_anonymous_592_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_593_(id, defaultValue, this, arguments, var=var):
        var = Scope({u'this':this, u'defaultValue':defaultValue, u'id':id, u'arguments':arguments}, var)
        var.registers([u'defaultValue', u'id'])
        return ((((Js(u'ifDefined(')+var.get(u'id'))+Js(u','))+var.get(u"this").callprop(u'escape', var.get(u'defaultValue')))+Js(u')'))
    PyJs_anonymous_593_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_594_(left, right, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'left':left}, var)
        var.registers([u'right', u'left'])
        return ((((Js(u'plus(')+var.get(u'left'))+Js(u','))+var.get(u'right'))+Js(u')'))
    PyJs_anonymous_594_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_595_(id, this, arguments, var=var):
        var = Scope({u'this':this, u'id':id, u'arguments':arguments}, var)
        var.registers([u'id'])
        var.get(u"this").callprop(u'current').get(u'body').callprop(u'push', Js(u'return '), var.get(u'id'), Js(u';'))
    PyJs_anonymous_595_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_596_(test, alternate, consequent, this, arguments, var=var):
        var = Scope({u'test':test, u'this':this, u'alternate':alternate, u'arguments':arguments, u'consequent':consequent}, var)
        var.registers([u'body', u'test', u'alternate', u'consequent'])
        if PyJsStrictEq(var.get(u'test'),var.get(u'true')):
            var.get(u'alternate')()
        else:
            var.put(u'body', var.get(u"this").callprop(u'current').get(u'body'))
            var.get(u'body').callprop(u'push', Js(u'if('), var.get(u'test'), Js(u'){'))
            var.get(u'alternate')()
            var.get(u'body').callprop(u'push', Js(u'}'))
            if var.get(u'consequent'):
                var.get(u'body').callprop(u'push', Js(u'else{'))
                var.get(u'consequent')()
                var.get(u'body').callprop(u'push', Js(u'}'))
    PyJs_anonymous_596_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_597_(expression, this, arguments, var=var):
        var = Scope({u'this':this, u'expression':expression, u'arguments':arguments}, var)
        var.registers([u'expression'])
        return ((Js(u'!(')+var.get(u'expression'))+Js(u')'))
    PyJs_anonymous_597_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_598_(expression, this, arguments, var=var):
        var = Scope({u'this':this, u'expression':expression, u'arguments':arguments}, var)
        var.registers([u'expression'])
        return (var.get(u'expression')+Js(u'!=null'))
    PyJs_anonymous_598_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_599_(left, right, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'left':left}, var)
        var.registers([u'right', u'left'])
        return ((var.get(u'left')+Js(u'.'))+var.get(u'right'))
    PyJs_anonymous_599_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_600_(left, right, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'left':left}, var)
        var.registers([u'right', u'left'])
        return (((var.get(u'left')+Js(u'['))+var.get(u'right'))+Js(u']'))
    PyJs_anonymous_600_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_601_(left, right, computed, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'right':right, u'computed':computed, u'left':left}, var)
        var.registers([u'right', u'computed', u'left'])
        if var.get(u'computed'):
            return var.get(u"this").callprop(u'computedMember', var.get(u'left'), var.get(u'right'))
        return var.get(u"this").callprop(u'nonComputedMember', var.get(u'left'), var.get(u'right'))
    PyJs_anonymous_601_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_602_(item, this, arguments, var=var):
        var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
        var.registers([u'item'])
        var.get(u"this").callprop(u'current').get(u'body').callprop(u'push', var.get(u"this").callprop(u'ensureSafeObject', var.get(u'item')), Js(u';'))
    PyJs_anonymous_602_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_603_(item, this, arguments, var=var):
        var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
        var.registers([u'item'])
        var.get(u"this").callprop(u'current').get(u'body').callprop(u'push', var.get(u"this").callprop(u'ensureSafeMemberName', var.get(u'item')), Js(u';'))
    PyJs_anonymous_603_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_604_(item, this, arguments, var=var):
        var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
        var.registers([u'item'])
        var.get(u"this").callprop(u'current').get(u'body').callprop(u'push', var.get(u"this").callprop(u'ensureSafeFunction', var.get(u'item')), Js(u';'))
    PyJs_anonymous_604_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_605_(item, this, arguments, var=var):
        var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
        var.registers([u'item'])
        var.get(u"this").callprop(u'current').get(u'body').callprop(u'push', var.get(u"this").callprop(u'ensureSafeAssignContext', var.get(u'item')), Js(u';'))
    PyJs_anonymous_605_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_606_(item, this, arguments, var=var):
        var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
        var.registers([u'item'])
        return ((Js(u'ensureSafeObject(')+var.get(u'item'))+Js(u',text)'))
    PyJs_anonymous_606_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_607_(item, this, arguments, var=var):
        var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
        var.registers([u'item'])
        return ((Js(u'ensureSafeMemberName(')+var.get(u'item'))+Js(u',text)'))
    PyJs_anonymous_607_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_608_(item, this, arguments, var=var):
        var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
        var.registers([u'item'])
        return ((Js(u'ensureSafeFunction(')+var.get(u'item'))+Js(u',text)'))
    PyJs_anonymous_608_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_609_(item, this, arguments, var=var):
        var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
        var.registers([u'item'])
        var.get(u"this").callprop(u'assign', var.get(u'item'), ((Js(u'getStringValue(')+var.get(u'item'))+Js(u',text)')))
    PyJs_anonymous_609_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_610_(item, this, arguments, var=var):
        var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
        var.registers([u'item'])
        return ((Js(u'ensureSafeAssignContext(')+var.get(u'item'))+Js(u',text)'))
    PyJs_anonymous_610_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_611_(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck, this, arguments, var=var):
        var = Scope({u'skipWatchIdCheck':skipWatchIdCheck, u'this':this, u'create':create, u'intoId':intoId, u'ast':ast, u'arguments':arguments, u'recursionFn':recursionFn, u'nameId':nameId}, var)
        var.registers([u'ast', u'self', u'intoId', u'skipWatchIdCheck', u'recursionFn', u'nameId', u'create'])
        var.put(u'self', var.get(u"this"))
        @Js
        def PyJs_anonymous_612_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u'self').callprop(u'recurse', var.get(u'ast'), var.get(u'intoId'), var.get(u'nameId'), var.get(u'recursionFn'), var.get(u'create'), var.get(u'skipWatchIdCheck'))
        PyJs_anonymous_612_._set_name(u'anonymous')
        return PyJs_anonymous_612_
    PyJs_anonymous_611_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_613_(id, value, this, arguments, var=var):
        var = Scope({u'this':this, u'id':id, u'value':value, u'arguments':arguments}, var)
        var.registers([u'self', u'id', u'value'])
        var.put(u'self', var.get(u"this"))
        @Js
        def PyJs_anonymous_614_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u'self').callprop(u'assign', var.get(u'id'), var.get(u'value'))
        PyJs_anonymous_614_._set_name(u'anonymous')
        return PyJs_anonymous_614_
    PyJs_anonymous_613_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_615_(c, this, arguments, var=var):
        var = Scope({u'this':this, u'c':c, u'arguments':arguments}, var)
        var.registers([u'c'])
        return (Js(u'\\u')+(Js(u'0000')+var.get(u'c').callprop(u'charCodeAt', Js(0.0)).callprop(u'toString', Js(16.0))).callprop(u'slice', (-Js(4.0))))
    PyJs_anonymous_615_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_616_(value, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
        var.registers([u'value'])
        if var.get(u'isString')(var.get(u'value')):
            return ((Js(u"'")+var.get(u'value').callprop(u'replace', var.get(u"this").get(u'stringEscapeRegex'), var.get(u"this").get(u'stringEscapeFn')))+Js(u"'"))
        if var.get(u'isNumber')(var.get(u'value')):
            return var.get(u'value').callprop(u'toString')
        if PyJsStrictEq(var.get(u'value'),var.get(u'true')):
            return Js(u'true')
        if PyJsStrictEq(var.get(u'value'),Js(False)):
            return Js(u'false')
        if PyJsStrictEq(var.get(u'value'),var.get(u"null")):
            return Js(u'null')
        if PyJsStrictEq(var.get(u'value',throw=False).typeof(),Js(u'undefined')):
            return Js(u'undefined')
        PyJsTempException = JsToPyException(var.get(u'$parseMinErr')(Js(u'esc'), Js(u'IMPOSSIBLE')))
        raise PyJsTempException
    PyJs_anonymous_616_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_617_(skip, init, this, arguments, var=var):
        var = Scope({u'this':this, u'skip':skip, u'init':init, u'arguments':arguments}, var)
        var.registers([u'skip', u'init', u'id'])
        var.put(u'id', (Js(u'v')+(var.get(u"this").get(u'state').put(u'nextId',var.get(u"this").get(u'state').get(u'nextId')+Js(1))-Js(1))))
        if var.get(u'skip').neg():
            var.get(u"this").callprop(u'current').get(u'vars').callprop(u'push', (var.get(u'id')+((Js(u'=')+var.get(u'init')) if var.get(u'init') else Js(u''))))
        return var.get(u'id')
    PyJs_anonymous_617_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_618_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'state').get(var.get(u"this").get(u'state').get(u'computing'))
    PyJs_anonymous_618_._set_name(u'anonymous')
    PyJs_Object_545_ = Js({u'compile':PyJs_anonymous_546_,u'USE':Js(u'use'),u'STRICT':Js(u'strict'),u'watchFns':PyJs_anonymous_557_,u'generateFunction':PyJs_anonymous_559_,u'filterPrefix':PyJs_anonymous_560_,u'varsPrefix':PyJs_anonymous_562_,u'body':PyJs_anonymous_563_,u'recurse':PyJs_anonymous_564_,u'getHasOwnProperty':PyJs_anonymous_590_,u'assign':PyJs_anonymous_591_,u'filter':PyJs_anonymous_592_,u'ifDefined':PyJs_anonymous_593_,u'plus':PyJs_anonymous_594_,u'return_':PyJs_anonymous_595_,u'if_':PyJs_anonymous_596_,u'not':PyJs_anonymous_597_,u'notNull':PyJs_anonymous_598_,u'nonComputedMember':PyJs_anonymous_599_,u'computedMember':PyJs_anonymous_600_,u'member':PyJs_anonymous_601_,u'addEnsureSafeObject':PyJs_anonymous_602_,u'addEnsureSafeMemberName':PyJs_anonymous_603_,u'addEnsureSafeFunction':PyJs_anonymous_604_,u'addEnsureSafeAssignContext':PyJs_anonymous_605_,u'ensureSafeObject':PyJs_anonymous_606_,u'ensureSafeMemberName':PyJs_anonymous_607_,u'ensureSafeFunction':PyJs_anonymous_608_,u'getStringValue':PyJs_anonymous_609_,u'ensureSafeAssignContext':PyJs_anonymous_610_,u'lazyRecurse':PyJs_anonymous_611_,u'lazyAssign':PyJs_anonymous_613_,u'stringEscapeRegex':JsRegExp(u'/[^ a-zA-Z0-9]/g'),u'stringEscapeFn':PyJs_anonymous_615_,u'escape':PyJs_anonymous_616_,u'nextId':PyJs_anonymous_617_,u'current':PyJs_anonymous_618_})
    var.get(u'ASTCompiler').put(u'prototype', PyJs_Object_545_)
    pass
    @Js
    def PyJs_anonymous_620_(expression, expensiveChecks, this, arguments, var=var):
        var = Scope({u'this':this, u'expensiveChecks':expensiveChecks, u'expression':expression, u'arguments':arguments}, var)
        var.registers([u'assignable', u'expensiveChecks', u'inputs', u'self', u'ast', u'expressions', u'toWatch', u'expression', u'assign', u'fn'])
        var.put(u'self', var.get(u"this"))
        var.put(u'ast', var.get(u"this").get(u'astBuilder').callprop(u'ast', var.get(u'expression')))
        var.get(u"this").put(u'expression', var.get(u'expression'))
        var.get(u"this").put(u'expensiveChecks', var.get(u'expensiveChecks'))
        var.get(u'findConstantAndWatchExpressions')(var.get(u'ast'), var.get(u'self').get(u'$filter'))
        pass
        pass
        if var.put(u'assignable', var.get(u'assignableAST')(var.get(u'ast'))):
            var.put(u'assign', var.get(u"this").callprop(u'recurse', var.get(u'assignable')))
        var.put(u'toWatch', var.get(u'getInputs')(var.get(u'ast').get(u'body')))
        pass
        if var.get(u'toWatch'):
            var.put(u'inputs', Js([]))
            @Js
            def PyJs_anonymous_621_(watch, key, this, arguments, var=var):
                var = Scope({u'this':this, u'watch':watch, u'arguments':arguments, u'key':key}, var)
                var.registers([u'input', u'watch', u'key'])
                var.put(u'input', var.get(u'self').callprop(u'recurse', var.get(u'watch')))
                var.get(u'watch').put(u'input', var.get(u'input'))
                var.get(u'inputs').callprop(u'push', var.get(u'input'))
                var.get(u'watch').put(u'watchId', var.get(u'key'))
            PyJs_anonymous_621_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'toWatch'), PyJs_anonymous_621_)
        var.put(u'expressions', Js([]))
        @Js
        def PyJs_anonymous_622_(expression, this, arguments, var=var):
            var = Scope({u'this':this, u'expression':expression, u'arguments':arguments}, var)
            var.registers([u'expression'])
            var.get(u'expressions').callprop(u'push', var.get(u'self').callprop(u'recurse', var.get(u'expression').get(u'expression')))
        PyJs_anonymous_622_._set_name(u'anonymous')
        var.get(u'forEach')(var.get(u'ast').get(u'body'), PyJs_anonymous_622_)
        @Js
        def PyJs_anonymous_623_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            pass
        PyJs_anonymous_623_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_624_(scope, locals, this, arguments, var=var):
            var = Scope({u'this':this, u'scope':scope, u'arguments':arguments, u'locals':locals}, var)
            var.registers([u'scope', u'lastValue', u'locals'])
            pass
            @Js
            def PyJs_anonymous_625_(exp, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'exp':exp}, var)
                var.registers([u'exp'])
                var.put(u'lastValue', var.get(u'exp')(var.get(u'scope'), var.get(u'locals')))
            PyJs_anonymous_625_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'expressions'), PyJs_anonymous_625_)
            return var.get(u'lastValue')
        PyJs_anonymous_624_._set_name(u'anonymous')
        var.put(u'fn', (PyJs_anonymous_623_ if PyJsStrictEq(var.get(u'ast').get(u'body').get(u'length'),Js(0.0)) else (var.get(u'expressions').get(u'0') if PyJsStrictEq(var.get(u'ast').get(u'body').get(u'length'),Js(1.0)) else PyJs_anonymous_624_)))
        if var.get(u'assign'):
            @Js
            def PyJs_anonymous_626_(scope, value, locals, this, arguments, var=var):
                var = Scope({u'this':this, u'scope':scope, u'locals':locals, u'value':value, u'arguments':arguments}, var)
                var.registers([u'scope', u'locals', u'value'])
                return var.get(u'assign')(var.get(u'scope'), var.get(u'locals'), var.get(u'value'))
            PyJs_anonymous_626_._set_name(u'anonymous')
            var.get(u'fn').put(u'assign', PyJs_anonymous_626_)
        if var.get(u'inputs'):
            var.get(u'fn').put(u'inputs', var.get(u'inputs'))
        var.get(u'fn').put(u'literal', var.get(u'isLiteral')(var.get(u'ast')))
        var.get(u'fn').put(u'constant', var.get(u'isConstant')(var.get(u'ast')))
        return var.get(u'fn')
    PyJs_anonymous_620_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_627_(ast, context, create, this, arguments, var=var):
        var = Scope({u'this':this, u'create':create, u'arguments':arguments, u'context':context, u'ast':ast}, var)
        var.registers([u'right', u'ast', u'self', u'args', u'context', u'expression', u'create', u'left'])
        var.put(u'self', var.get(u"this"))
        if var.get(u'ast').get(u'input'):
            return var.get(u"this").callprop(u'inputs', var.get(u'ast').get(u'input'), var.get(u'ast').get(u'watchId'))
        while 1:
            SWITCHED = False
            CONDITION = (var.get(u'ast').get(u'type'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'Literal')):
                SWITCHED = True
                return var.get(u"this").callprop(u'value', var.get(u'ast').get(u'value'), var.get(u'context'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'UnaryExpression')):
                SWITCHED = True
                var.put(u'right', var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'argument')))
                return var.get(u"this").callprop((Js(u'unary')+var.get(u'ast').get(u'operator')), var.get(u'right'), var.get(u'context'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'BinaryExpression')):
                SWITCHED = True
                var.put(u'left', var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'left')))
                var.put(u'right', var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'right')))
                return var.get(u"this").callprop((Js(u'binary')+var.get(u'ast').get(u'operator')), var.get(u'left'), var.get(u'right'), var.get(u'context'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'LogicalExpression')):
                SWITCHED = True
                var.put(u'left', var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'left')))
                var.put(u'right', var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'right')))
                return var.get(u"this").callprop((Js(u'binary')+var.get(u'ast').get(u'operator')), var.get(u'left'), var.get(u'right'), var.get(u'context'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'ConditionalExpression')):
                SWITCHED = True
                return var.get(u"this").callprop(u'ternary?:', var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'test')), var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'alternate')), var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'consequent')), var.get(u'context'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'Identifier')):
                SWITCHED = True
                var.get(u'ensureSafeMemberName')(var.get(u'ast').get(u'name'), var.get(u'self').get(u'expression'))
                return var.get(u'self').callprop(u'identifier', var.get(u'ast').get(u'name'), (var.get(u'self').get(u'expensiveChecks') or var.get(u'isPossiblyDangerousMemberName')(var.get(u'ast').get(u'name'))), var.get(u'context'), var.get(u'create'), var.get(u'self').get(u'expression'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'MemberExpression')):
                SWITCHED = True
                var.put(u'left', var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'object'), Js(False), var.get(u'create').neg().neg()))
                if var.get(u'ast').get(u'computed').neg():
                    var.get(u'ensureSafeMemberName')(var.get(u'ast').get(u'property').get(u'name'), var.get(u'self').get(u'expression'))
                    var.put(u'right', var.get(u'ast').get(u'property').get(u'name'))
                if var.get(u'ast').get(u'computed'):
                    var.put(u'right', var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'property')))
                def PyJs_LONG_628_(var=var):
                    return (var.get(u"this").callprop(u'computedMember', var.get(u'left'), var.get(u'right'), var.get(u'context'), var.get(u'create'), var.get(u'self').get(u'expression')) if var.get(u'ast').get(u'computed') else var.get(u"this").callprop(u'nonComputedMember', var.get(u'left'), var.get(u'right'), var.get(u'self').get(u'expensiveChecks'), var.get(u'context'), var.get(u'create'), var.get(u'self').get(u'expression')))
                return PyJs_LONG_628_()
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'CallExpression')):
                SWITCHED = True
                var.put(u'args', Js([]))
                @Js
                def PyJs_anonymous_629_(expr, this, arguments, var=var):
                    var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                    var.registers([u'expr'])
                    var.get(u'args').callprop(u'push', var.get(u'self').callprop(u'recurse', var.get(u'expr')))
                PyJs_anonymous_629_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'ast').get(u'arguments'), PyJs_anonymous_629_)
                if var.get(u'ast').get(u'filter'):
                    var.put(u'right', var.get(u"this").callprop(u'$filter', var.get(u'ast').get(u'callee').get(u'name')))
                if var.get(u'ast').get(u'filter').neg():
                    var.put(u'right', var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'callee'), var.get(u'true')))
                @Js
                def PyJs_anonymous_630_(scope, locals, assign, inputs, this, arguments, var=var):
                    var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
                    var.registers([u'inputs', u'i', u'value', u'values', u'scope', u'assign', u'locals'])
                    var.put(u'values', Js([]))
                    #for JS loop
                    var.put(u'i', Js(0.0))
                    while (var.get(u'i')<var.get(u'args').get(u'length')):
                        try:
                            var.get(u'values').callprop(u'push', var.get(u'args').callprop(var.get(u'i'), var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')))
                        finally:
                                var.put(u'i',var.get(u'i')+Js(1))
                    var.put(u'value', var.get(u'right').callprop(u'apply', var.get(u'undefined'), var.get(u'values'), var.get(u'inputs')))
                    PyJs_Object_631_ = Js({u'context':var.get(u'undefined'),u'name':var.get(u'undefined'),u'value':var.get(u'value')})
                    return (PyJs_Object_631_ if var.get(u'context') else var.get(u'value'))
                PyJs_anonymous_630_._set_name(u'anonymous')
                @Js
                def PyJs_anonymous_632_(scope, locals, assign, inputs, this, arguments, var=var):
                    var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
                    var.registers([u'inputs', u'i', u'rhs', u'value', u'values', u'scope', u'assign', u'locals'])
                    var.put(u'rhs', var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')))
                    pass
                    if (var.get(u'rhs').get(u'value')!=var.get(u"null")):
                        var.get(u'ensureSafeObject')(var.get(u'rhs').get(u'context'), var.get(u'self').get(u'expression'))
                        var.get(u'ensureSafeFunction')(var.get(u'rhs').get(u'value'), var.get(u'self').get(u'expression'))
                        var.put(u'values', Js([]))
                        #for JS loop
                        var.put(u'i', Js(0.0))
                        while (var.get(u'i')<var.get(u'args').get(u'length')):
                            try:
                                var.get(u'values').callprop(u'push', var.get(u'ensureSafeObject')(var.get(u'args').callprop(var.get(u'i'), var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')), var.get(u'self').get(u'expression')))
                            finally:
                                    var.put(u'i',var.get(u'i')+Js(1))
                        var.put(u'value', var.get(u'ensureSafeObject')(var.get(u'rhs').get(u'value').callprop(u'apply', var.get(u'rhs').get(u'context'), var.get(u'values')), var.get(u'self').get(u'expression')))
                    PyJs_Object_633_ = Js({u'value':var.get(u'value')})
                    return (PyJs_Object_633_ if var.get(u'context') else var.get(u'value'))
                PyJs_anonymous_632_._set_name(u'anonymous')
                return (PyJs_anonymous_630_ if var.get(u'ast').get(u'filter') else PyJs_anonymous_632_)
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'AssignmentExpression')):
                SWITCHED = True
                var.put(u'left', var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'left'), var.get(u'true'), Js(1.0)))
                var.put(u'right', var.get(u"this").callprop(u'recurse', var.get(u'ast').get(u'right')))
                @Js
                def PyJs_anonymous_634_(scope, locals, assign, inputs, this, arguments, var=var):
                    var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
                    var.registers([u'inputs', u'rhs', u'lhs', u'scope', u'assign', u'locals'])
                    var.put(u'lhs', var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')))
                    var.put(u'rhs', var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')))
                    var.get(u'ensureSafeObject')(var.get(u'lhs').get(u'value'), var.get(u'self').get(u'expression'))
                    var.get(u'ensureSafeAssignContext')(var.get(u'lhs').get(u'context'))
                    var.get(u'lhs').get(u'context').put(var.get(u'lhs').get(u'name'), var.get(u'rhs'))
                    PyJs_Object_635_ = Js({u'value':var.get(u'rhs')})
                    return (PyJs_Object_635_ if var.get(u'context') else var.get(u'rhs'))
                PyJs_anonymous_634_._set_name(u'anonymous')
                return PyJs_anonymous_634_
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'ArrayExpression')):
                SWITCHED = True
                var.put(u'args', Js([]))
                @Js
                def PyJs_anonymous_636_(expr, this, arguments, var=var):
                    var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                    var.registers([u'expr'])
                    var.get(u'args').callprop(u'push', var.get(u'self').callprop(u'recurse', var.get(u'expr')))
                PyJs_anonymous_636_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'ast').get(u'elements'), PyJs_anonymous_636_)
                @Js
                def PyJs_anonymous_637_(scope, locals, assign, inputs, this, arguments, var=var):
                    var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
                    var.registers([u'inputs', u'i', u'value', u'scope', u'assign', u'locals'])
                    var.put(u'value', Js([]))
                    #for JS loop
                    var.put(u'i', Js(0.0))
                    while (var.get(u'i')<var.get(u'args').get(u'length')):
                        try:
                            var.get(u'value').callprop(u'push', var.get(u'args').callprop(var.get(u'i'), var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')))
                        finally:
                                var.put(u'i',var.get(u'i')+Js(1))
                    PyJs_Object_638_ = Js({u'value':var.get(u'value')})
                    return (PyJs_Object_638_ if var.get(u'context') else var.get(u'value'))
                PyJs_anonymous_637_._set_name(u'anonymous')
                return PyJs_anonymous_637_
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'ObjectExpression')):
                SWITCHED = True
                var.put(u'args', Js([]))
                @Js
                def PyJs_anonymous_639_(property, this, arguments, var=var):
                    var = Scope({u'this':this, u'property':property, u'arguments':arguments}, var)
                    var.registers([u'property'])
                    PyJs_Object_640_ = Js({u'key':(var.get(u'property').get(u'key').get(u'name') if PyJsStrictEq(var.get(u'property').get(u'key').get(u'type'),var.get(u'AST').get(u'Identifier')) else (Js(u'')+var.get(u'property').get(u'key').get(u'value'))),u'value':var.get(u'self').callprop(u'recurse', var.get(u'property').get(u'value'))})
                    var.get(u'args').callprop(u'push', PyJs_Object_640_)
                PyJs_anonymous_639_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'ast').get(u'properties'), PyJs_anonymous_639_)
                @Js
                def PyJs_anonymous_641_(scope, locals, assign, inputs, this, arguments, var=var):
                    var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
                    var.registers([u'inputs', u'i', u'value', u'scope', u'assign', u'locals'])
                    PyJs_Object_642_ = Js({})
                    var.put(u'value', PyJs_Object_642_)
                    #for JS loop
                    var.put(u'i', Js(0.0))
                    while (var.get(u'i')<var.get(u'args').get(u'length')):
                        try:
                            var.get(u'value').put(var.get(u'args').get(var.get(u'i')).get(u'key'), var.get(u'args').get(var.get(u'i')).callprop(u'value', var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')))
                        finally:
                                var.put(u'i',var.get(u'i')+Js(1))
                    PyJs_Object_643_ = Js({u'value':var.get(u'value')})
                    return (PyJs_Object_643_ if var.get(u'context') else var.get(u'value'))
                PyJs_anonymous_641_._set_name(u'anonymous')
                return PyJs_anonymous_641_
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'ThisExpression')):
                SWITCHED = True
                @Js
                def PyJs_anonymous_644_(scope, this, arguments, var=var):
                    var = Scope({u'this':this, u'scope':scope, u'arguments':arguments}, var)
                    var.registers([u'scope'])
                    PyJs_Object_645_ = Js({u'value':var.get(u'scope')})
                    return (PyJs_Object_645_ if var.get(u'context') else var.get(u'scope'))
                PyJs_anonymous_644_._set_name(u'anonymous')
                return PyJs_anonymous_644_
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'AST').get(u'NGValueParameter')):
                SWITCHED = True
                @Js
                def PyJs_anonymous_646_(scope, locals, assign, inputs, this, arguments, var=var):
                    var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
                    var.registers([u'scope', u'assign', u'locals', u'inputs'])
                    PyJs_Object_647_ = Js({u'value':var.get(u'assign')})
                    return (PyJs_Object_647_ if var.get(u'context') else var.get(u'assign'))
                PyJs_anonymous_646_._set_name(u'anonymous')
                return PyJs_anonymous_646_
            SWITCHED = True
            break
    PyJs_anonymous_627_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_648_(argument, context, this, arguments, var=var):
        var = Scope({u'this':this, u'argument':argument, u'context':context, u'arguments':arguments}, var)
        var.registers([u'argument', u'context'])
        @Js
        def PyJs_anonymous_649_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', var.get(u'argument')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')))
            if var.get(u'isDefined')(var.get(u'arg')):
                var.put(u'arg', (+var.get(u'arg')))
            else:
                var.put(u'arg', Js(0.0))
            PyJs_Object_650_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_650_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_649_._set_name(u'anonymous')
        return PyJs_anonymous_649_
    PyJs_anonymous_648_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_651_(argument, context, this, arguments, var=var):
        var = Scope({u'this':this, u'argument':argument, u'context':context, u'arguments':arguments}, var)
        var.registers([u'argument', u'context'])
        @Js
        def PyJs_anonymous_652_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', var.get(u'argument')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')))
            if var.get(u'isDefined')(var.get(u'arg')):
                var.put(u'arg', (-var.get(u'arg')))
            else:
                var.put(u'arg', Js(0.0))
            PyJs_Object_653_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_653_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_652_._set_name(u'anonymous')
        return PyJs_anonymous_652_
    PyJs_anonymous_651_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_654_(argument, context, this, arguments, var=var):
        var = Scope({u'this':this, u'argument':argument, u'context':context, u'arguments':arguments}, var)
        var.registers([u'argument', u'context'])
        @Js
        def PyJs_anonymous_655_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', var.get(u'argument')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')).neg())
            PyJs_Object_656_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_656_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_655_._set_name(u'anonymous')
        return PyJs_anonymous_655_
    PyJs_anonymous_654_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_657_(left, right, context, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'context':context, u'left':left}, var)
        var.registers([u'right', u'context', u'left'])
        @Js
        def PyJs_anonymous_658_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'inputs', u'rhs', u'lhs', u'arg', u'scope', u'assign', u'locals'])
            var.put(u'lhs', var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')))
            var.put(u'rhs', var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')))
            var.put(u'arg', var.get(u'plusFn')(var.get(u'lhs'), var.get(u'rhs')))
            PyJs_Object_659_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_659_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_658_._set_name(u'anonymous')
        return PyJs_anonymous_658_
    PyJs_anonymous_657_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_660_(left, right, context, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'context':context, u'left':left}, var)
        var.registers([u'right', u'context', u'left'])
        @Js
        def PyJs_anonymous_661_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'inputs', u'rhs', u'lhs', u'arg', u'scope', u'assign', u'locals'])
            var.put(u'lhs', var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')))
            var.put(u'rhs', var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')))
            var.put(u'arg', ((var.get(u'lhs') if var.get(u'isDefined')(var.get(u'lhs')) else Js(0.0))-(var.get(u'rhs') if var.get(u'isDefined')(var.get(u'rhs')) else Js(0.0))))
            PyJs_Object_662_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_662_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_661_._set_name(u'anonymous')
        return PyJs_anonymous_661_
    PyJs_anonymous_660_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_663_(left, right, context, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'context':context, u'left':left}, var)
        var.registers([u'right', u'context', u'left'])
        @Js
        def PyJs_anonymous_664_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', (var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))*var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))))
            PyJs_Object_665_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_665_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_664_._set_name(u'anonymous')
        return PyJs_anonymous_664_
    PyJs_anonymous_663_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_666_(left, right, context, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'context':context, u'left':left}, var)
        var.registers([u'right', u'context', u'left'])
        @Js
        def PyJs_anonymous_667_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', (var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))/var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))))
            PyJs_Object_668_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_668_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_667_._set_name(u'anonymous')
        return PyJs_anonymous_667_
    PyJs_anonymous_666_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_669_(left, right, context, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'context':context, u'left':left}, var)
        var.registers([u'right', u'context', u'left'])
        @Js
        def PyJs_anonymous_670_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', (var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))%var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))))
            PyJs_Object_671_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_671_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_670_._set_name(u'anonymous')
        return PyJs_anonymous_670_
    PyJs_anonymous_669_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_672_(left, right, context, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'context':context, u'left':left}, var)
        var.registers([u'right', u'context', u'left'])
        @Js
        def PyJs_anonymous_673_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', PyJsStrictEq(var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')),var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))))
            PyJs_Object_674_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_674_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_673_._set_name(u'anonymous')
        return PyJs_anonymous_673_
    PyJs_anonymous_672_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_675_(left, right, context, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'context':context, u'left':left}, var)
        var.registers([u'right', u'context', u'left'])
        @Js
        def PyJs_anonymous_676_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', PyJsStrictNeq(var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')),var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))))
            PyJs_Object_677_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_677_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_676_._set_name(u'anonymous')
        return PyJs_anonymous_676_
    PyJs_anonymous_675_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_678_(left, right, context, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'context':context, u'left':left}, var)
        var.registers([u'right', u'context', u'left'])
        @Js
        def PyJs_anonymous_679_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', (var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))==var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))))
            PyJs_Object_680_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_680_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_679_._set_name(u'anonymous')
        return PyJs_anonymous_679_
    PyJs_anonymous_678_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_681_(left, right, context, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'context':context, u'left':left}, var)
        var.registers([u'right', u'context', u'left'])
        @Js
        def PyJs_anonymous_682_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', (var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))!=var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))))
            PyJs_Object_683_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_683_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_682_._set_name(u'anonymous')
        return PyJs_anonymous_682_
    PyJs_anonymous_681_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_684_(left, right, context, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'context':context, u'left':left}, var)
        var.registers([u'right', u'context', u'left'])
        @Js
        def PyJs_anonymous_685_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', (var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))<var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))))
            PyJs_Object_686_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_686_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_685_._set_name(u'anonymous')
        return PyJs_anonymous_685_
    PyJs_anonymous_684_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_687_(left, right, context, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'context':context, u'left':left}, var)
        var.registers([u'right', u'context', u'left'])
        @Js
        def PyJs_anonymous_688_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', (var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))>var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))))
            PyJs_Object_689_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_689_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_688_._set_name(u'anonymous')
        return PyJs_anonymous_688_
    PyJs_anonymous_687_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_690_(left, right, context, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'context':context, u'left':left}, var)
        var.registers([u'right', u'context', u'left'])
        @Js
        def PyJs_anonymous_691_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', (var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))<=var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))))
            PyJs_Object_692_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_692_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_691_._set_name(u'anonymous')
        return PyJs_anonymous_691_
    PyJs_anonymous_690_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_693_(left, right, context, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'context':context, u'left':left}, var)
        var.registers([u'right', u'context', u'left'])
        @Js
        def PyJs_anonymous_694_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', (var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))>=var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))))
            PyJs_Object_695_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_695_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_694_._set_name(u'anonymous')
        return PyJs_anonymous_694_
    PyJs_anonymous_693_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_696_(left, right, context, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'context':context, u'left':left}, var)
        var.registers([u'right', u'context', u'left'])
        @Js
        def PyJs_anonymous_697_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', (var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')) and var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))))
            PyJs_Object_698_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_698_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_697_._set_name(u'anonymous')
        return PyJs_anonymous_697_
    PyJs_anonymous_696_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_699_(left, right, context, this, arguments, var=var):
        var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'context':context, u'left':left}, var)
        var.registers([u'right', u'context', u'left'])
        @Js
        def PyJs_anonymous_700_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', (var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')) or var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))))
            PyJs_Object_701_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_701_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_700_._set_name(u'anonymous')
        return PyJs_anonymous_700_
    PyJs_anonymous_699_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_702_(test, alternate, consequent, context, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'context':context, u'test':test, u'alternate':alternate, u'consequent':consequent}, var)
        var.registers([u'test', u'alternate', u'context', u'consequent'])
        @Js
        def PyJs_anonymous_703_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'scope', u'inputs', u'assign', u'locals', u'arg'])
            var.put(u'arg', (var.get(u'alternate')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')) if var.get(u'test')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')) else var.get(u'consequent')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs'))))
            PyJs_Object_704_ = Js({u'value':var.get(u'arg')})
            return (PyJs_Object_704_ if var.get(u'context') else var.get(u'arg'))
        PyJs_anonymous_703_._set_name(u'anonymous')
        return PyJs_anonymous_703_
    PyJs_anonymous_702_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_705_(value, context, this, arguments, var=var):
        var = Scope({u'this':this, u'context':context, u'value':value, u'arguments':arguments}, var)
        var.registers([u'context', u'value'])
        @Js
        def PyJs_anonymous_706_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            PyJs_Object_707_ = Js({u'context':var.get(u'undefined'),u'name':var.get(u'undefined'),u'value':var.get(u'value')})
            return (PyJs_Object_707_ if var.get(u'context') else var.get(u'value'))
        PyJs_anonymous_706_._set_name(u'anonymous')
        return PyJs_anonymous_706_
    PyJs_anonymous_705_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_708_(name, expensiveChecks, context, create, expression, this, arguments, var=var):
        var = Scope({u'name':name, u'context':context, u'this':this, u'create':create, u'expensiveChecks':expensiveChecks, u'expression':expression, u'arguments':arguments}, var)
        var.registers([u'create', u'expensiveChecks', u'expression', u'name', u'context'])
        @Js
        def PyJs_anonymous_709_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'inputs', u'value', u'base', u'scope', u'assign', u'locals'])
            var.put(u'base', (var.get(u'locals') if (var.get(u'locals') and var.get(u'locals').contains(var.get(u'name'))) else var.get(u'scope')))
            if (((var.get(u'create') and PyJsStrictNeq(var.get(u'create'),Js(1.0))) and var.get(u'base')) and var.get(u'base').get(var.get(u'name')).neg()):
                PyJs_Object_710_ = Js({})
                var.get(u'base').put(var.get(u'name'), PyJs_Object_710_)
            var.put(u'value', (var.get(u'base').get(var.get(u'name')) if var.get(u'base') else var.get(u'undefined')))
            if var.get(u'expensiveChecks'):
                var.get(u'ensureSafeObject')(var.get(u'value'), var.get(u'expression'))
            if var.get(u'context'):
                PyJs_Object_711_ = Js({u'context':var.get(u'base'),u'name':var.get(u'name'),u'value':var.get(u'value')})
                return PyJs_Object_711_
            else:
                return var.get(u'value')
        PyJs_anonymous_709_._set_name(u'anonymous')
        return PyJs_anonymous_709_
    PyJs_anonymous_708_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_712_(left, right, context, create, expression, this, arguments, var=var):
        var = Scope({u'right':right, u'arguments':arguments, u'context':context, u'this':this, u'create':create, u'expression':expression, u'left':left}, var)
        var.registers([u'create', u'right', u'expression', u'context', u'left'])
        @Js
        def PyJs_anonymous_713_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'inputs', u'rhs', u'value', u'lhs', u'scope', u'assign', u'locals'])
            var.put(u'lhs', var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')))
            pass
            pass
            if (var.get(u'lhs')!=var.get(u"null")):
                var.put(u'rhs', var.get(u'right')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')))
                var.put(u'rhs', var.get(u'getStringValue')(var.get(u'rhs')))
                var.get(u'ensureSafeMemberName')(var.get(u'rhs'), var.get(u'expression'))
                if (((var.get(u'create') and PyJsStrictNeq(var.get(u'create'),Js(1.0))) and var.get(u'lhs')) and var.get(u'lhs').get(var.get(u'rhs')).neg()):
                    PyJs_Object_714_ = Js({})
                    var.get(u'lhs').put(var.get(u'rhs'), PyJs_Object_714_)
                var.put(u'value', var.get(u'lhs').get(var.get(u'rhs')))
                var.get(u'ensureSafeObject')(var.get(u'value'), var.get(u'expression'))
            if var.get(u'context'):
                PyJs_Object_715_ = Js({u'context':var.get(u'lhs'),u'name':var.get(u'rhs'),u'value':var.get(u'value')})
                return PyJs_Object_715_
            else:
                return var.get(u'value')
        PyJs_anonymous_713_._set_name(u'anonymous')
        return PyJs_anonymous_713_
    PyJs_anonymous_712_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_716_(left, right, expensiveChecks, context, create, expression, this, arguments, var=var):
        var = Scope({u'right':right, u'this':this, u'create':create, u'arguments':arguments, u'context':context, u'expensiveChecks':expensiveChecks, u'expression':expression, u'left':left}, var)
        var.registers([u'right', u'create', u'context', u'expensiveChecks', u'expression', u'left'])
        @Js
        def PyJs_anonymous_717_(scope, locals, assign, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'arguments':arguments, u'this':this, u'scope':scope, u'assign':assign, u'locals':locals}, var)
            var.registers([u'inputs', u'value', u'lhs', u'scope', u'assign', u'locals'])
            var.put(u'lhs', var.get(u'left')(var.get(u'scope'), var.get(u'locals'), var.get(u'assign'), var.get(u'inputs')))
            if (((var.get(u'create') and PyJsStrictNeq(var.get(u'create'),Js(1.0))) and var.get(u'lhs')) and var.get(u'lhs').get(var.get(u'right')).neg()):
                PyJs_Object_718_ = Js({})
                var.get(u'lhs').put(var.get(u'right'), PyJs_Object_718_)
            var.put(u'value', (var.get(u'lhs').get(var.get(u'right')) if (var.get(u'lhs')!=var.get(u"null")) else var.get(u'undefined')))
            if (var.get(u'expensiveChecks') or var.get(u'isPossiblyDangerousMemberName')(var.get(u'right'))):
                var.get(u'ensureSafeObject')(var.get(u'value'), var.get(u'expression'))
            if var.get(u'context'):
                PyJs_Object_719_ = Js({u'context':var.get(u'lhs'),u'name':var.get(u'right'),u'value':var.get(u'value')})
                return PyJs_Object_719_
            else:
                return var.get(u'value')
        PyJs_anonymous_717_._set_name(u'anonymous')
        return PyJs_anonymous_717_
    PyJs_anonymous_716_._set_name(u'anonymous')
    @Js
    def PyJs_anonymous_720_(input, watchId, this, arguments, var=var):
        var = Scope({u'this':this, u'input':input, u'watchId':watchId, u'arguments':arguments}, var)
        var.registers([u'input', u'watchId'])
        @Js
        def PyJs_anonymous_721_(scope, value, locals, inputs, this, arguments, var=var):
            var = Scope({u'inputs':inputs, u'value':value, u'this':this, u'scope':scope, u'locals':locals, u'arguments':arguments}, var)
            var.registers([u'scope', u'locals', u'value', u'inputs'])
            if var.get(u'inputs'):
                return var.get(u'inputs').get(var.get(u'watchId'))
            return var.get(u'input')(var.get(u'scope'), var.get(u'value'), var.get(u'locals'))
        PyJs_anonymous_721_._set_name(u'anonymous')
        return PyJs_anonymous_721_
    PyJs_anonymous_720_._set_name(u'anonymous')
    PyJs_Object_619_ = Js({u'compile':PyJs_anonymous_620_,u'recurse':PyJs_anonymous_627_,u'unary+':PyJs_anonymous_648_,u'unary-':PyJs_anonymous_651_,u'unary!':PyJs_anonymous_654_,u'binary+':PyJs_anonymous_657_,u'binary-':PyJs_anonymous_660_,u'binary*':PyJs_anonymous_663_,u'binary/':PyJs_anonymous_666_,u'binary%':PyJs_anonymous_669_,u'binary===':PyJs_anonymous_672_,u'binary!==':PyJs_anonymous_675_,u'binary==':PyJs_anonymous_678_,u'binary!=':PyJs_anonymous_681_,u'binary<':PyJs_anonymous_684_,u'binary>':PyJs_anonymous_687_,u'binary<=':PyJs_anonymous_690_,u'binary>=':PyJs_anonymous_693_,u'binary&&':PyJs_anonymous_696_,u'binary||':PyJs_anonymous_699_,u'ternary?:':PyJs_anonymous_702_,u'value':PyJs_anonymous_705_,u'identifier':PyJs_anonymous_708_,u'computedMember':PyJs_anonymous_712_,u'nonComputedMember':PyJs_anonymous_716_,u'inputs':PyJs_anonymous_720_})
    var.get(u'ASTInterpreter').put(u'prototype', PyJs_Object_619_)
    @Js
    def PyJs_anonymous_722_(lexer, PyJsArg_2466696c746572_, options, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'lexer':lexer, u'$filter':PyJsArg_2466696c746572_, u'options':options}, var)
        var.registers([u'lexer', u'$filter', u'options'])
        var.get(u"this").put(u'lexer', var.get(u'lexer'))
        var.get(u"this").put(u'$filter', var.get(u'$filter'))
        var.get(u"this").put(u'options', var.get(u'options'))
        var.get(u"this").put(u'ast', var.get(u'AST').create(var.get(u"this").get(u'lexer')))
        var.get(u"this").put(u'astCompiler', (var.get(u'ASTInterpreter').create(var.get(u"this").get(u'ast'), var.get(u'$filter')) if var.get(u'options').get(u'csp') else var.get(u'ASTCompiler').create(var.get(u"this").get(u'ast'), var.get(u'$filter'))))
    PyJs_anonymous_722_._set_name(u'anonymous')
    var.put(u'Parser', PyJs_anonymous_722_)
    @Js
    def PyJs_anonymous_724_(text, this, arguments, var=var):
        var = Scope({u'this':this, u'text':text, u'arguments':arguments}, var)
        var.registers([u'text'])
        return var.get(u"this").get(u'astCompiler').callprop(u'compile', var.get(u'text'), var.get(u"this").get(u'options').get(u'expensiveChecks'))
    PyJs_anonymous_724_._set_name(u'anonymous')
    PyJs_Object_723_ = Js({u'constructor':var.get(u'Parser'),u'parse':PyJs_anonymous_724_})
    var.get(u'Parser').put(u'prototype', PyJs_Object_723_)
    var.put(u'getterFnCacheDefault', var.get(u'createMap')())
    var.put(u'getterFnCacheExpensive', var.get(u'createMap')())
    pass
    var.put(u'objectValueOf', var.get(u'Object').get(u'prototype').get(u'valueOf'))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    var.put(u'$sceMinErr', var.get(u'minErr')(Js(u'$sce')))
    PyJs_Object_829_ = Js({u'HTML':Js(u'html'),u'CSS':Js(u'css'),u'URL':Js(u'url'),u'RESOURCE_URL':Js(u'resourceUrl'),u'JS':Js(u'js')})
    var.put(u'SCE_CONTEXTS', PyJs_Object_829_)
    pass
    pass
    pass
    pass
    pass
    var.put(u'$compileMinErr', var.get(u'minErr')(Js(u'$compile')))
    pass
    pass
    pass
    var.put(u'urlParsingNode', var.get(u'document').callprop(u'createElement', Js(u'a')))
    var.put(u'originUrl', var.get(u'urlResolve')(var.get(u'window').get(u'location').get(u'href')))
    pass
    pass
    pass
    pass
    var.get(u'$$CookieReader').put(u'$inject', Js([Js(u'$document')]))
    pass
    var.get(u'$FilterProvider').put(u'$inject', Js([Js(u'$provide')]))
    pass
    pass
    pass
    pass
    pass
    var.get(u'currencyFilter').put(u'$inject', Js([Js(u'$locale')]))
    pass
    var.get(u'numberFilter').put(u'$inject', Js([Js(u'$locale')]))
    pass
    var.put(u'DECIMAL_SEP', Js(u'.'))
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    PyJs_Object_894_ = Js({u'yyyy':var.get(u'dateGetter')(Js(u'FullYear'), Js(4.0)),u'yy':var.get(u'dateGetter')(Js(u'FullYear'), Js(2.0), Js(0.0), var.get(u'true')),u'y':var.get(u'dateGetter')(Js(u'FullYear'), Js(1.0)),u'MMMM':var.get(u'dateStrGetter')(Js(u'Month')),u'MMM':var.get(u'dateStrGetter')(Js(u'Month'), var.get(u'true')),u'MM':var.get(u'dateGetter')(Js(u'Month'), Js(2.0), Js(1.0)),u'M':var.get(u'dateGetter')(Js(u'Month'), Js(1.0), Js(1.0)),u'dd':var.get(u'dateGetter')(Js(u'Date'), Js(2.0)),u'd':var.get(u'dateGetter')(Js(u'Date'), Js(1.0)),u'HH':var.get(u'dateGetter')(Js(u'Hours'), Js(2.0)),u'H':var.get(u'dateGetter')(Js(u'Hours'), Js(1.0)),u'hh':var.get(u'dateGetter')(Js(u'Hours'), Js(2.0), (-Js(12.0))),u'h':var.get(u'dateGetter')(Js(u'Hours'), Js(1.0), (-Js(12.0))),u'mm':var.get(u'dateGetter')(Js(u'Minutes'), Js(2.0)),u'm':var.get(u'dateGetter')(Js(u'Minutes'), Js(1.0)),u'ss':var.get(u'dateGetter')(Js(u'Seconds'), Js(2.0)),u's':var.get(u'dateGetter')(Js(u'Seconds'), Js(1.0)),u'sss':var.get(u'dateGetter')(Js(u'Milliseconds'), Js(3.0)),u'EEEE':var.get(u'dateStrGetter')(Js(u'Day')),u'EEE':var.get(u'dateStrGetter')(Js(u'Day'), var.get(u'true')),u'a':var.get(u'ampmGetter'),u'Z':var.get(u'timeZoneGetter'),u'ww':var.get(u'weekGetter')(Js(2.0)),u'w':var.get(u'weekGetter')(Js(1.0)),u'G':var.get(u'eraGetter'),u'GG':var.get(u'eraGetter'),u'GGG':var.get(u'eraGetter'),u'GGGG':var.get(u'longEraGetter')})
    var.put(u'DATE_FORMATS', PyJs_Object_894_)
    var.put(u'DATE_FORMATS_SPLIT', JsRegExp(u"/((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/"))
    var.put(u'NUMBER_STRING', JsRegExp(u'/^\\-?\\d+$/'))
    var.get(u'dateFilter').put(u'$inject', Js([Js(u'$locale')]))
    pass
    pass
    var.put(u'lowercaseFilter', var.get(u'valueFn')(var.get(u'lowercase')))
    var.put(u'uppercaseFilter', var.get(u'valueFn')(var.get(u'uppercase')))
    pass
    var.get(u'orderByFilter').put(u'$inject', Js([Js(u'$parse')]))
    pass
    pass
    @Js
    def PyJs_anonymous_912_(element, attr, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'attr':attr, u'element':element}, var)
        var.registers([u'attr', u'element'])
        if (var.get(u'attr').get(u'href').neg() and var.get(u'attr').get(u'xlinkHref').neg()):
            @Js
            def PyJs_anonymous_913_(scope, element, this, arguments, var=var):
                var = Scope({u'this':this, u'scope':scope, u'arguments':arguments, u'element':element}, var)
                var.registers([u'scope', u'href', u'element'])
                if PyJsStrictNeq(var.get(u'element').get(u'0').get(u'nodeName').callprop(u'toLowerCase'),Js(u'a')):
                    return var.get('undefined')
                var.put(u'href', (Js(u'xlink:href') if PyJsStrictEq(var.get(u'toString').callprop(u'call', var.get(u'element').callprop(u'prop', Js(u'href'))),Js(u'[object SVGAnimatedString]')) else Js(u'href')))
                @Js
                def PyJs_anonymous_914_(event, this, arguments, var=var):
                    var = Scope({u'this':this, u'event':event, u'arguments':arguments}, var)
                    var.registers([u'event'])
                    if var.get(u'element').callprop(u'attr', var.get(u'href')).neg():
                        var.get(u'event').callprop(u'preventDefault')
                PyJs_anonymous_914_._set_name(u'anonymous')
                var.get(u'element').callprop(u'on', Js(u'click'), PyJs_anonymous_914_)
            PyJs_anonymous_913_._set_name(u'anonymous')
            return PyJs_anonymous_913_
    PyJs_anonymous_912_._set_name(u'anonymous')
    PyJs_Object_911_ = Js({u'restrict':Js(u'E'),u'compile':PyJs_anonymous_912_})
    var.put(u'htmlAnchorDirective', var.get(u'valueFn')(PyJs_Object_911_))
    PyJs_Object_915_ = Js({})
    var.put(u'ngAttributeAliasDirectives', PyJs_Object_915_)
    @Js
    def PyJs_anonymous_916_(propName, attrName, this, arguments, var=var):
        var = Scope({u'attrName':attrName, u'this':this, u'arguments':arguments, u'propName':propName}, var)
        var.registers([u'attrName', u'propName', u'linkFn', u'normalized', u'defaultLinkFn'])
        @Js
        def PyJsHoisted_defaultLinkFn_(scope, element, attr, this, arguments, var=var):
            var = Scope({u'this':this, u'scope':scope, u'attr':attr, u'arguments':arguments, u'element':element}, var)
            var.registers([u'scope', u'attr', u'element'])
            @Js
            def PyJs_ngBooleanAttrWatchAction_917_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'ngBooleanAttrWatchAction':PyJs_ngBooleanAttrWatchAction_917_, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                var.get(u'attr').callprop(u'$set', var.get(u'attrName'), var.get(u'value').neg().neg())
            PyJs_ngBooleanAttrWatchAction_917_._set_name(u'ngBooleanAttrWatchAction')
            var.get(u'scope').callprop(u'$watch', var.get(u'attr').get(var.get(u'normalized')), PyJs_ngBooleanAttrWatchAction_917_)
        PyJsHoisted_defaultLinkFn_.func_name = u'defaultLinkFn'
        var.put(u'defaultLinkFn', PyJsHoisted_defaultLinkFn_)
        if (var.get(u'propName')==Js(u'multiple')):
            return var.get('undefined')
        pass
        var.put(u'normalized', var.get(u'directiveNormalize')((Js(u'ng-')+var.get(u'attrName'))))
        var.put(u'linkFn', var.get(u'defaultLinkFn'))
        if PyJsStrictEq(var.get(u'propName'),Js(u'checked')):
            @Js
            def PyJs_anonymous_918_(scope, element, attr, this, arguments, var=var):
                var = Scope({u'this':this, u'scope':scope, u'attr':attr, u'arguments':arguments, u'element':element}, var)
                var.registers([u'scope', u'attr', u'element'])
                if PyJsStrictNeq(var.get(u'attr').get(u'ngModel'),var.get(u'attr').get(var.get(u'normalized'))):
                    var.get(u'defaultLinkFn')(var.get(u'scope'), var.get(u'element'), var.get(u'attr'))
            PyJs_anonymous_918_._set_name(u'anonymous')
            var.put(u'linkFn', PyJs_anonymous_918_)
        @Js
        def PyJs_anonymous_919_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            PyJs_Object_920_ = Js({u'restrict':Js(u'A'),u'priority':Js(100.0),u'link':var.get(u'linkFn')})
            return PyJs_Object_920_
        PyJs_anonymous_919_._set_name(u'anonymous')
        var.get(u'ngAttributeAliasDirectives').put(var.get(u'normalized'), PyJs_anonymous_919_)
    PyJs_anonymous_916_._set_name(u'anonymous')
    var.get(u'forEach')(var.get(u'BOOLEAN_ATTR'), PyJs_anonymous_916_)
    @Js
    def PyJs_anonymous_921_(htmlAttr, ngAttr, this, arguments, var=var):
        var = Scope({u'this':this, u'ngAttr':ngAttr, u'htmlAttr':htmlAttr, u'arguments':arguments}, var)
        var.registers([u'ngAttr', u'htmlAttr'])
        @Js
        def PyJs_anonymous_922_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_924_(scope, element, attr, this, arguments, var=var):
                var = Scope({u'this':this, u'scope':scope, u'attr':attr, u'arguments':arguments, u'element':element}, var)
                var.registers([u'scope', u'attr', u'match', u'element'])
                if (PyJsStrictEq(var.get(u'ngAttr'),Js(u'ngPattern')) and (var.get(u'attr').get(u'ngPattern').callprop(u'charAt', Js(0.0))==Js(u'/'))):
                    var.put(u'match', var.get(u'attr').get(u'ngPattern').callprop(u'match', var.get(u'REGEX_STRING_REGEXP')))
                    if var.get(u'match'):
                        var.get(u'attr').callprop(u'$set', Js(u'ngPattern'), var.get(u'RegExp').create(var.get(u'match').get(u'1'), var.get(u'match').get(u'2')))
                        return var.get('undefined')
                @Js
                def PyJs_ngAttrAliasWatchAction_925_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'ngAttrAliasWatchAction':PyJs_ngAttrAliasWatchAction_925_, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    var.get(u'attr').callprop(u'$set', var.get(u'ngAttr'), var.get(u'value'))
                PyJs_ngAttrAliasWatchAction_925_._set_name(u'ngAttrAliasWatchAction')
                var.get(u'scope').callprop(u'$watch', var.get(u'attr').get(var.get(u'ngAttr')), PyJs_ngAttrAliasWatchAction_925_)
            PyJs_anonymous_924_._set_name(u'anonymous')
            PyJs_Object_923_ = Js({u'priority':Js(100.0),u'link':PyJs_anonymous_924_})
            return PyJs_Object_923_
        PyJs_anonymous_922_._set_name(u'anonymous')
        var.get(u'ngAttributeAliasDirectives').put(var.get(u'ngAttr'), PyJs_anonymous_922_)
    PyJs_anonymous_921_._set_name(u'anonymous')
    var.get(u'forEach')(var.get(u'ALIASED_ATTR'), PyJs_anonymous_921_)
    @Js
    def PyJs_anonymous_926_(attrName, this, arguments, var=var):
        var = Scope({u'attrName':attrName, u'this':this, u'arguments':arguments}, var)
        var.registers([u'attrName', u'normalized'])
        var.put(u'normalized', var.get(u'directiveNormalize')((Js(u'ng-')+var.get(u'attrName'))))
        @Js
        def PyJs_anonymous_927_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_929_(scope, element, attr, this, arguments, var=var):
                var = Scope({u'this':this, u'scope':scope, u'attr':attr, u'arguments':arguments, u'element':element}, var)
                var.registers([u'scope', u'attr', u'name', u'propName', u'element'])
                var.put(u'propName', var.get(u'attrName'))
                var.put(u'name', var.get(u'attrName'))
                if (PyJsStrictEq(var.get(u'attrName'),Js(u'href')) and PyJsStrictEq(var.get(u'toString').callprop(u'call', var.get(u'element').callprop(u'prop', Js(u'href'))),Js(u'[object SVGAnimatedString]'))):
                    var.put(u'name', Js(u'xlinkHref'))
                    var.get(u'attr').get(u'$attr').put(var.get(u'name'), Js(u'xlink:href'))
                    var.put(u'propName', var.get(u"null"))
                @Js
                def PyJs_anonymous_930_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    if var.get(u'value').neg():
                        if PyJsStrictEq(var.get(u'attrName'),Js(u'href')):
                            var.get(u'attr').callprop(u'$set', var.get(u'name'), var.get(u"null"))
                        return var.get('undefined')
                    var.get(u'attr').callprop(u'$set', var.get(u'name'), var.get(u'value'))
                    if (var.get(u'msie') and var.get(u'propName')):
                        var.get(u'element').callprop(u'prop', var.get(u'propName'), var.get(u'attr').get(var.get(u'name')))
                PyJs_anonymous_930_._set_name(u'anonymous')
                var.get(u'attr').callprop(u'$observe', var.get(u'normalized'), PyJs_anonymous_930_)
            PyJs_anonymous_929_._set_name(u'anonymous')
            PyJs_Object_928_ = Js({u'priority':Js(99.0),u'link':PyJs_anonymous_929_})
            return PyJs_Object_928_
        PyJs_anonymous_927_._set_name(u'anonymous')
        var.get(u'ngAttributeAliasDirectives').put(var.get(u'normalized'), PyJs_anonymous_927_)
    PyJs_anonymous_926_._set_name(u'anonymous')
    var.get(u'forEach')(Js([Js(u'src'), Js(u'srcset'), Js(u'href')]), PyJs_anonymous_926_)
    PyJs_Object_931_ = Js({u'$addControl':var.get(u'noop'),u'$$renameControl':var.get(u'nullFormRenameControl'),u'$removeControl':var.get(u'noop'),u'$setValidity':var.get(u'noop'),u'$setDirty':var.get(u'noop'),u'$setPristine':var.get(u'noop'),u'$setSubmitted':var.get(u'noop')})
    var.put(u'nullFormCtrl', PyJs_Object_931_)
    var.put(u'SUBMITTED_CLASS', Js(u'ng-submitted'))
    pass
    var.get(u'FormController').put(u'$inject', Js([Js(u'$element'), Js(u'$attrs'), Js(u'$scope'), Js(u'$animate'), Js(u'$interpolate')]))
    pass
    @Js
    def PyJs_anonymous_953_(isNgForm, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'isNgForm':isNgForm}, var)
        var.registers([u'isNgForm'])
        @Js
        def PyJs_anonymous_954_(PyJsArg_2474696d656f7574_, PyJsArg_247061727365_, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'$timeout':PyJsArg_2474696d656f7574_, u'$parse':PyJsArg_247061727365_}, var)
            var.registers([u'getSetter', u'formDirective', u'$timeout', u'$parse'])
            @Js
            def PyJsHoisted_getSetter_(expression, this, arguments, var=var):
                var = Scope({u'this':this, u'expression':expression, u'arguments':arguments}, var)
                var.registers([u'expression'])
                if PyJsStrictEq(var.get(u'expression'),Js(u'')):
                    return var.get(u'$parse')(Js(u'this[""]')).get(u'assign')
                return (var.get(u'$parse')(var.get(u'expression')).get(u'assign') or var.get(u'noop'))
            PyJsHoisted_getSetter_.func_name = u'getSetter'
            var.put(u'getSetter', PyJsHoisted_getSetter_)
            @Js
            def PyJs_ngFormCompile_956_(formElement, attr, this, arguments, var=var):
                var = Scope({u'this':this, u'formElement':formElement, u'ngFormCompile':PyJs_ngFormCompile_956_, u'attr':attr, u'arguments':arguments}, var)
                var.registers([u'formElement', u'nameAttr', u'attr'])
                var.get(u'formElement').callprop(u'addClass', var.get(u'PRISTINE_CLASS')).callprop(u'addClass', var.get(u'VALID_CLASS'))
                var.put(u'nameAttr', (Js(u'name') if var.get(u'attr').get(u'name') else (Js(u'ngForm') if (var.get(u'isNgForm') and var.get(u'attr').get(u'ngForm')) else Js(False))))
                @Js
                def PyJs_ngFormPreLink_958_(scope, formElement, attr, ctrls, this, arguments, var=var):
                    var = Scope({u'formElement':formElement, u'attr':attr, u'this':this, u'scope':scope, u'ngFormPreLink':PyJs_ngFormPreLink_958_, u'arguments':arguments, u'ctrls':ctrls}, var)
                    var.registers([u'attr', u'handleFormSubmission', u'parentFormCtrl', u'formElement', u'controller', u'scope', u'ctrls', u'setter'])
                    var.put(u'controller', var.get(u'ctrls').get(u'0'))
                    if var.get(u'attr').contains(Js(u'action')).neg():
                        @Js
                        def PyJs_anonymous_959_(event, this, arguments, var=var):
                            var = Scope({u'this':this, u'event':event, u'arguments':arguments}, var)
                            var.registers([u'event'])
                            @Js
                            def PyJs_anonymous_960_(this, arguments, var=var):
                                var = Scope({u'this':this, u'arguments':arguments}, var)
                                var.registers([])
                                var.get(u'controller').callprop(u'$commitViewValue')
                                var.get(u'controller').callprop(u'$setSubmitted')
                            PyJs_anonymous_960_._set_name(u'anonymous')
                            var.get(u'scope').callprop(u'$apply', PyJs_anonymous_960_)
                            var.get(u'event').callprop(u'preventDefault')
                        PyJs_anonymous_959_._set_name(u'anonymous')
                        var.put(u'handleFormSubmission', PyJs_anonymous_959_)
                        var.get(u'addEventListenerFn')(var.get(u'formElement').get(u'0'), Js(u'submit'), var.get(u'handleFormSubmission'))
                        @Js
                        def PyJs_anonymous_961_(this, arguments, var=var):
                            var = Scope({u'this':this, u'arguments':arguments}, var)
                            var.registers([])
                            @Js
                            def PyJs_anonymous_962_(this, arguments, var=var):
                                var = Scope({u'this':this, u'arguments':arguments}, var)
                                var.registers([])
                                var.get(u'removeEventListenerFn')(var.get(u'formElement').get(u'0'), Js(u'submit'), var.get(u'handleFormSubmission'))
                            PyJs_anonymous_962_._set_name(u'anonymous')
                            var.get(u'$timeout')(PyJs_anonymous_962_, Js(0.0), Js(False))
                        PyJs_anonymous_961_._set_name(u'anonymous')
                        var.get(u'formElement').callprop(u'on', Js(u'$destroy'), PyJs_anonymous_961_)
                    var.put(u'parentFormCtrl', (var.get(u'ctrls').get(u'1') or var.get(u'controller').get(u'$$parentForm')))
                    var.get(u'parentFormCtrl').callprop(u'$addControl', var.get(u'controller'))
                    var.put(u'setter', (var.get(u'getSetter')(var.get(u'controller').get(u'$name')) if var.get(u'nameAttr') else var.get(u'noop')))
                    if var.get(u'nameAttr'):
                        var.get(u'setter')(var.get(u'scope'), var.get(u'controller'))
                        @Js
                        def PyJs_anonymous_963_(newValue, this, arguments, var=var):
                            var = Scope({u'this':this, u'newValue':newValue, u'arguments':arguments}, var)
                            var.registers([u'newValue'])
                            if PyJsStrictEq(var.get(u'controller').get(u'$name'),var.get(u'newValue')):
                                return var.get('undefined')
                            var.get(u'setter')(var.get(u'scope'), var.get(u'undefined'))
                            var.get(u'controller').get(u'$$parentForm').callprop(u'$$renameControl', var.get(u'controller'), var.get(u'newValue'))
                            var.put(u'setter', var.get(u'getSetter')(var.get(u'controller').get(u'$name')))
                            var.get(u'setter')(var.get(u'scope'), var.get(u'controller'))
                        PyJs_anonymous_963_._set_name(u'anonymous')
                        var.get(u'attr').callprop(u'$observe', var.get(u'nameAttr'), PyJs_anonymous_963_)
                    @Js
                    def PyJs_anonymous_964_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        var.get(u'controller').get(u'$$parentForm').callprop(u'$removeControl', var.get(u'controller'))
                        var.get(u'setter')(var.get(u'scope'), var.get(u'undefined'))
                        var.get(u'extend')(var.get(u'controller'), var.get(u'nullFormCtrl'))
                    PyJs_anonymous_964_._set_name(u'anonymous')
                    var.get(u'formElement').callprop(u'on', Js(u'$destroy'), PyJs_anonymous_964_)
                PyJs_ngFormPreLink_958_._set_name(u'ngFormPreLink')
                PyJs_Object_957_ = Js({u'pre':PyJs_ngFormPreLink_958_})
                return PyJs_Object_957_
            PyJs_ngFormCompile_956_._set_name(u'ngFormCompile')
            PyJs_Object_955_ = Js({u'name':Js(u'form'),u'restrict':(Js(u'EAC') if var.get(u'isNgForm') else Js(u'E')),u'require':Js([Js(u'form'), Js(u'^^?form')]),u'controller':var.get(u'FormController'),u'compile':PyJs_ngFormCompile_956_})
            var.put(u'formDirective', PyJs_Object_955_)
            return var.get(u'formDirective')
            pass
        PyJs_anonymous_954_._set_name(u'anonymous')
        return Js([Js(u'$timeout'), Js(u'$parse'), PyJs_anonymous_954_])
    PyJs_anonymous_953_._set_name(u'anonymous')
    var.put(u'formDirectiveFactory', PyJs_anonymous_953_)
    var.put(u'formDirective', var.get(u'formDirectiveFactory')())
    var.put(u'ngFormDirective', var.get(u'formDirectiveFactory')(var.get(u'true')))
    var.put(u'ISO_DATE_REGEXP', JsRegExp(u'/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/'))
    var.put(u'URL_REGEXP', JsRegExp(u'/^[A-Za-z][A-Za-z\\d.+-]*:\\/*(?:\\w+(?::\\w+)?@)?[^\\s/]+(?::\\d+)?(?:\\/[\\w#!:.?+=&%@\\-/]*)?$/'))
    var.put(u'EMAIL_REGEXP', JsRegExp(u"/^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i"))
    var.put(u'NUMBER_REGEXP', JsRegExp(u'/^\\s*(\\-|\\+)?(\\d+|(\\d*(\\.\\d*)))([eE][+-]?\\d+)?\\s*$/'))
    var.put(u'DATE_REGEXP', JsRegExp(u'/^(\\d{4})-(\\d{2})-(\\d{2})$/'))
    var.put(u'DATETIMELOCAL_REGEXP', JsRegExp(u'/^(\\d{4})-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d)(?::(\\d\\d)(\\.\\d{1,3})?)?$/'))
    var.put(u'WEEK_REGEXP', JsRegExp(u'/^(\\d{4})-W(\\d\\d)$/'))
    var.put(u'MONTH_REGEXP', JsRegExp(u'/^(\\d{4})-(\\d\\d)$/'))
    var.put(u'TIME_REGEXP', JsRegExp(u'/^(\\d\\d):(\\d\\d)(?::(\\d\\d)(\\.\\d{1,3})?)?$/'))
    PyJs_Object_965_ = Js({u'text':var.get(u'textInputType'),u'date':var.get(u'createDateInputType')(Js(u'date'), var.get(u'DATE_REGEXP'), var.get(u'createDateParser')(var.get(u'DATE_REGEXP'), Js([Js(u'yyyy'), Js(u'MM'), Js(u'dd')])), Js(u'yyyy-MM-dd')),u'datetime-local':var.get(u'createDateInputType')(Js(u'datetimelocal'), var.get(u'DATETIMELOCAL_REGEXP'), var.get(u'createDateParser')(var.get(u'DATETIMELOCAL_REGEXP'), Js([Js(u'yyyy'), Js(u'MM'), Js(u'dd'), Js(u'HH'), Js(u'mm'), Js(u'ss'), Js(u'sss')])), Js(u'yyyy-MM-ddTHH:mm:ss.sss')),u'time':var.get(u'createDateInputType')(Js(u'time'), var.get(u'TIME_REGEXP'), var.get(u'createDateParser')(var.get(u'TIME_REGEXP'), Js([Js(u'HH'), Js(u'mm'), Js(u'ss'), Js(u'sss')])), Js(u'HH:mm:ss.sss')),u'week':var.get(u'createDateInputType')(Js(u'week'), var.get(u'WEEK_REGEXP'), var.get(u'weekParser'), Js(u'yyyy-Www')),u'month':var.get(u'createDateInputType')(Js(u'month'), var.get(u'MONTH_REGEXP'), var.get(u'createDateParser')(var.get(u'MONTH_REGEXP'), Js([Js(u'yyyy'), Js(u'MM')])), Js(u'yyyy-MM')),u'number':var.get(u'numberInputType'),u'url':var.get(u'urlInputType'),u'email':var.get(u'emailInputType'),u'radio':var.get(u'radioInputType'),u'checkbox':var.get(u'checkboxInputType'),u'hidden':var.get(u'noop'),u'button':var.get(u'noop'),u'submit':var.get(u'noop'),u'reset':var.get(u'noop'),u'file':var.get(u'noop')})
    var.put(u'inputType', PyJs_Object_965_)
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    pass
    @Js
    def PyJs_anonymous_1002_(PyJsArg_2462726f77736572_, PyJsArg_24736e6966666572_, PyJsArg_2466696c746572_, PyJsArg_247061727365_, this, arguments, var=var):
        var = Scope({u'$sniffer':PyJsArg_24736e6966666572_, u'$browser':PyJsArg_2462726f77736572_, u'arguments':arguments, u'this':this, u'$filter':PyJsArg_2466696c746572_, u'$parse':PyJsArg_247061727365_}, var)
        var.registers([u'$sniffer', u'$browser', u'$filter', u'$parse'])
        @Js
        def PyJs_anonymous_1005_(scope, element, attr, ctrls, this, arguments, var=var):
            var = Scope({u'arguments':arguments, u'attr':attr, u'this':this, u'scope':scope, u'element':element, u'ctrls':ctrls}, var)
            var.registers([u'scope', u'ctrls', u'attr', u'element'])
            if var.get(u'ctrls').get(u'0'):
                (var.get(u'inputType').get(var.get(u'lowercase')(var.get(u'attr').get(u'type'))) or var.get(u'inputType').get(u'text'))(var.get(u'scope'), var.get(u'element'), var.get(u'attr'), var.get(u'ctrls').get(u'0'), var.get(u'$sniffer'), var.get(u'$browser'), var.get(u'$filter'), var.get(u'$parse'))
        PyJs_anonymous_1005_._set_name(u'anonymous')
        PyJs_Object_1004_ = Js({u'pre':PyJs_anonymous_1005_})
        PyJs_Object_1003_ = Js({u'restrict':Js(u'E'),u'require':Js([Js(u'?ngModel')]),u'link':PyJs_Object_1004_})
        return PyJs_Object_1003_
    PyJs_anonymous_1002_._set_name(u'anonymous')
    var.put(u'inputDirective', Js([Js(u'$browser'), Js(u'$sniffer'), Js(u'$filter'), Js(u'$parse'), PyJs_anonymous_1002_]))
    var.put(u'CONSTANT_VALUE_REGEXP', JsRegExp(u'/^(true|false|\\d+)$/'))
    @Js
    def PyJs_anonymous_1006_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_1008_(tpl, tplAttr, this, arguments, var=var):
            var = Scope({u'this':this, u'tpl':tpl, u'arguments':arguments, u'tplAttr':tplAttr}, var)
            var.registers([u'tpl', u'tplAttr'])
            if var.get(u'CONSTANT_VALUE_REGEXP').callprop(u'test', var.get(u'tplAttr').get(u'ngValue')):
                @Js
                def PyJs_ngValueConstantLink_1009_(scope, elm, attr, this, arguments, var=var):
                    var = Scope({u'attr':attr, u'elm':elm, u'this':this, u'arguments':arguments, u'scope':scope, u'ngValueConstantLink':PyJs_ngValueConstantLink_1009_}, var)
                    var.registers([u'scope', u'attr', u'elm'])
                    var.get(u'attr').callprop(u'$set', Js(u'value'), var.get(u'scope').callprop(u'$eval', var.get(u'attr').get(u'ngValue')))
                PyJs_ngValueConstantLink_1009_._set_name(u'ngValueConstantLink')
                return PyJs_ngValueConstantLink_1009_
            else:
                @Js
                def PyJs_ngValueLink_1010_(scope, elm, attr, this, arguments, var=var):
                    var = Scope({u'attr':attr, u'elm':elm, u'this':this, u'ngValueLink':PyJs_ngValueLink_1010_, u'arguments':arguments, u'scope':scope}, var)
                    var.registers([u'scope', u'attr', u'elm'])
                    @Js
                    def PyJs_valueWatchAction_1011_(value, this, arguments, var=var):
                        var = Scope({u'this':this, u'valueWatchAction':PyJs_valueWatchAction_1011_, u'arguments':arguments, u'value':value}, var)
                        var.registers([u'value'])
                        var.get(u'attr').callprop(u'$set', Js(u'value'), var.get(u'value'))
                    PyJs_valueWatchAction_1011_._set_name(u'valueWatchAction')
                    var.get(u'scope').callprop(u'$watch', var.get(u'attr').get(u'ngValue'), PyJs_valueWatchAction_1011_)
                PyJs_ngValueLink_1010_._set_name(u'ngValueLink')
                return PyJs_ngValueLink_1010_
        PyJs_anonymous_1008_._set_name(u'anonymous')
        PyJs_Object_1007_ = Js({u'restrict':Js(u'A'),u'priority':Js(100.0),u'compile':PyJs_anonymous_1008_})
        return PyJs_Object_1007_
    PyJs_anonymous_1006_._set_name(u'anonymous')
    var.put(u'ngValueDirective', PyJs_anonymous_1006_)
    @Js
    def PyJs_anonymous_1012_(PyJsArg_24636f6d70696c65_, this, arguments, var=var):
        var = Scope({u'this':this, u'$compile':PyJsArg_24636f6d70696c65_, u'arguments':arguments}, var)
        var.registers([u'$compile'])
        @Js
        def PyJs_ngBindCompile_1014_(templateElement, this, arguments, var=var):
            var = Scope({u'this':this, u'templateElement':templateElement, u'ngBindCompile':PyJs_ngBindCompile_1014_, u'arguments':arguments}, var)
            var.registers([u'templateElement'])
            var.get(u'$compile').callprop(u'$$addBindingClass', var.get(u'templateElement'))
            @Js
            def PyJs_ngBindLink_1015_(scope, element, attr, this, arguments, var=var):
                var = Scope({u'attr':attr, u'this':this, u'ngBindLink':PyJs_ngBindLink_1015_, u'element':element, u'arguments':arguments, u'scope':scope}, var)
                var.registers([u'scope', u'attr', u'element'])
                var.get(u'$compile').callprop(u'$$addBindingInfo', var.get(u'element'), var.get(u'attr').get(u'ngBind'))
                var.put(u'element', var.get(u'element').get(u'0'))
                @Js
                def PyJs_ngBindWatchAction_1016_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'ngBindWatchAction':PyJs_ngBindWatchAction_1016_, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    var.get(u'element').put(u'textContent', (Js(u'') if var.get(u'isUndefined')(var.get(u'value')) else var.get(u'value')))
                PyJs_ngBindWatchAction_1016_._set_name(u'ngBindWatchAction')
                var.get(u'scope').callprop(u'$watch', var.get(u'attr').get(u'ngBind'), PyJs_ngBindWatchAction_1016_)
            PyJs_ngBindLink_1015_._set_name(u'ngBindLink')
            return PyJs_ngBindLink_1015_
        PyJs_ngBindCompile_1014_._set_name(u'ngBindCompile')
        PyJs_Object_1013_ = Js({u'restrict':Js(u'AC'),u'compile':PyJs_ngBindCompile_1014_})
        return PyJs_Object_1013_
    PyJs_anonymous_1012_._set_name(u'anonymous')
    var.put(u'ngBindDirective', Js([Js(u'$compile'), PyJs_anonymous_1012_]))
    @Js
    def PyJs_anonymous_1017_(PyJsArg_24696e746572706f6c617465_, PyJsArg_24636f6d70696c65_, this, arguments, var=var):
        var = Scope({u'this':this, u'$compile':PyJsArg_24636f6d70696c65_, u'$interpolate':PyJsArg_24696e746572706f6c617465_, u'arguments':arguments}, var)
        var.registers([u'$compile', u'$interpolate'])
        @Js
        def PyJs_ngBindTemplateCompile_1019_(templateElement, this, arguments, var=var):
            var = Scope({u'this':this, u'templateElement':templateElement, u'ngBindTemplateCompile':PyJs_ngBindTemplateCompile_1019_, u'arguments':arguments}, var)
            var.registers([u'templateElement'])
            var.get(u'$compile').callprop(u'$$addBindingClass', var.get(u'templateElement'))
            @Js
            def PyJs_ngBindTemplateLink_1020_(scope, element, attr, this, arguments, var=var):
                var = Scope({u'ngBindTemplateLink':PyJs_ngBindTemplateLink_1020_, u'attr':attr, u'this':this, u'element':element, u'arguments':arguments, u'scope':scope}, var)
                var.registers([u'interpolateFn', u'scope', u'attr', u'element'])
                var.put(u'interpolateFn', var.get(u'$interpolate')(var.get(u'element').callprop(u'attr', var.get(u'attr').get(u'$attr').get(u'ngBindTemplate'))))
                var.get(u'$compile').callprop(u'$$addBindingInfo', var.get(u'element'), var.get(u'interpolateFn').get(u'expressions'))
                var.put(u'element', var.get(u'element').get(u'0'))
                @Js
                def PyJs_anonymous_1021_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    var.get(u'element').put(u'textContent', (Js(u'') if var.get(u'isUndefined')(var.get(u'value')) else var.get(u'value')))
                PyJs_anonymous_1021_._set_name(u'anonymous')
                var.get(u'attr').callprop(u'$observe', Js(u'ngBindTemplate'), PyJs_anonymous_1021_)
            PyJs_ngBindTemplateLink_1020_._set_name(u'ngBindTemplateLink')
            return PyJs_ngBindTemplateLink_1020_
        PyJs_ngBindTemplateCompile_1019_._set_name(u'ngBindTemplateCompile')
        PyJs_Object_1018_ = Js({u'compile':PyJs_ngBindTemplateCompile_1019_})
        return PyJs_Object_1018_
    PyJs_anonymous_1017_._set_name(u'anonymous')
    var.put(u'ngBindTemplateDirective', Js([Js(u'$interpolate'), Js(u'$compile'), PyJs_anonymous_1017_]))
    @Js
    def PyJs_anonymous_1022_(PyJsArg_24736365_, PyJsArg_247061727365_, PyJsArg_24636f6d70696c65_, this, arguments, var=var):
        var = Scope({u'this':this, u'$compile':PyJsArg_24636f6d70696c65_, u'$sce':PyJsArg_24736365_, u'arguments':arguments, u'$parse':PyJsArg_247061727365_}, var)
        var.registers([u'$compile', u'$sce', u'$parse'])
        @Js
        def PyJs_ngBindHtmlCompile_1024_(tElement, tAttrs, this, arguments, var=var):
            var = Scope({u'this':this, u'tAttrs':tAttrs, u'ngBindHtmlCompile':PyJs_ngBindHtmlCompile_1024_, u'tElement':tElement, u'arguments':arguments}, var)
            var.registers([u'tAttrs', u'tElement', u'ngBindHtmlGetter', u'ngBindHtmlWatch'])
            var.put(u'ngBindHtmlGetter', var.get(u'$parse')(var.get(u'tAttrs').get(u'ngBindHtml')))
            @Js
            def PyJs_getStringValue_1025_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'getStringValue':PyJs_getStringValue_1025_, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                return (var.get(u'value') or Js(u'')).callprop(u'toString')
            PyJs_getStringValue_1025_._set_name(u'getStringValue')
            var.put(u'ngBindHtmlWatch', var.get(u'$parse')(var.get(u'tAttrs').get(u'ngBindHtml'), PyJs_getStringValue_1025_))
            var.get(u'$compile').callprop(u'$$addBindingClass', var.get(u'tElement'))
            @Js
            def PyJs_ngBindHtmlLink_1026_(scope, element, attr, this, arguments, var=var):
                var = Scope({u'attr':attr, u'this':this, u'element':element, u'arguments':arguments, u'scope':scope, u'ngBindHtmlLink':PyJs_ngBindHtmlLink_1026_}, var)
                var.registers([u'scope', u'attr', u'element'])
                var.get(u'$compile').callprop(u'$$addBindingInfo', var.get(u'element'), var.get(u'attr').get(u'ngBindHtml'))
                @Js
                def PyJs_ngBindHtmlWatchAction_1027_(this, arguments, var=var):
                    var = Scope({u'this':this, u'ngBindHtmlWatchAction':PyJs_ngBindHtmlWatchAction_1027_, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'element').callprop(u'html', (var.get(u'$sce').callprop(u'getTrustedHtml', var.get(u'ngBindHtmlGetter')(var.get(u'scope'))) or Js(u'')))
                PyJs_ngBindHtmlWatchAction_1027_._set_name(u'ngBindHtmlWatchAction')
                var.get(u'scope').callprop(u'$watch', var.get(u'ngBindHtmlWatch'), PyJs_ngBindHtmlWatchAction_1027_)
            PyJs_ngBindHtmlLink_1026_._set_name(u'ngBindHtmlLink')
            return PyJs_ngBindHtmlLink_1026_
        PyJs_ngBindHtmlCompile_1024_._set_name(u'ngBindHtmlCompile')
        PyJs_Object_1023_ = Js({u'restrict':Js(u'A'),u'compile':PyJs_ngBindHtmlCompile_1024_})
        return PyJs_Object_1023_
    PyJs_anonymous_1022_._set_name(u'anonymous')
    var.put(u'ngBindHtmlDirective', Js([Js(u'$sce'), Js(u'$parse'), Js(u'$compile'), PyJs_anonymous_1022_]))
    @Js
    def PyJs_anonymous_1029_(scope, element, attr, ctrl, this, arguments, var=var):
        var = Scope({u'arguments':arguments, u'attr':attr, u'ctrl':ctrl, u'this':this, u'scope':scope, u'element':element}, var)
        var.registers([u'scope', u'ctrl', u'attr', u'element'])
        @Js
        def PyJs_anonymous_1030_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u'scope').callprop(u'$eval', var.get(u'attr').get(u'ngChange'))
        PyJs_anonymous_1030_._set_name(u'anonymous')
        var.get(u'ctrl').get(u'$viewChangeListeners').callprop(u'push', PyJs_anonymous_1030_)
    PyJs_anonymous_1029_._set_name(u'anonymous')
    PyJs_Object_1028_ = Js({u'restrict':Js(u'A'),u'require':Js(u'ngModel'),u'link':PyJs_anonymous_1029_})
    var.put(u'ngChangeDirective', var.get(u'valueFn')(PyJs_Object_1028_))
    pass
    var.put(u'ngClassDirective', var.get(u'classDirective')(Js(u''), var.get(u'true')))
    var.put(u'ngClassOddDirective', var.get(u'classDirective')(Js(u'Odd'), Js(0.0)))
    var.put(u'ngClassEvenDirective', var.get(u'classDirective')(Js(u'Even'), Js(1.0)))
    @Js
    def PyJs_anonymous_1040_(element, attr, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'attr':attr, u'element':element}, var)
        var.registers([u'attr', u'element'])
        var.get(u'attr').callprop(u'$set', Js(u'ngCloak'), var.get(u'undefined'))
        var.get(u'element').callprop(u'removeClass', Js(u'ng-cloak'))
    PyJs_anonymous_1040_._set_name(u'anonymous')
    PyJs_Object_1039_ = Js({u'compile':PyJs_anonymous_1040_})
    var.put(u'ngCloakDirective', var.get(u'ngDirective')(PyJs_Object_1039_))
    @Js
    def PyJs_anonymous_1041_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        PyJs_Object_1042_ = Js({u'restrict':Js(u'A'),u'scope':var.get(u'true'),u'controller':Js(u'@'),u'priority':Js(500.0)})
        return PyJs_Object_1042_
    PyJs_anonymous_1041_._set_name(u'anonymous')
    var.put(u'ngControllerDirective', Js([PyJs_anonymous_1041_]))
    PyJs_Object_1043_ = Js({})
    var.put(u'ngEventDirectives', PyJs_Object_1043_)
    PyJs_Object_1044_ = Js({u'blur':var.get(u'true'),u'focus':var.get(u'true')})
    var.put(u'forceAsyncEvents', PyJs_Object_1044_)
    @Js
    def PyJs_anonymous_1045_(eventName, this, arguments, var=var):
        var = Scope({u'eventName':eventName, u'this':this, u'arguments':arguments}, var)
        var.registers([u'eventName', u'directiveName'])
        var.put(u'directiveName', var.get(u'directiveNormalize')((Js(u'ng-')+var.get(u'eventName'))))
        @Js
        def PyJs_anonymous_1046_(PyJsArg_247061727365_, PyJsArg_24726f6f7453636f7065_, this, arguments, var=var):
            var = Scope({u'this':this, u'$rootScope':PyJsArg_24726f6f7453636f7065_, u'arguments':arguments, u'$parse':PyJsArg_247061727365_}, var)
            var.registers([u'$rootScope', u'$parse'])
            @Js
            def PyJs_anonymous_1048_(PyJsArg_24656c656d656e74_, attr, this, arguments, var=var):
                var = Scope({u'this':this, u'$element':PyJsArg_24656c656d656e74_, u'attr':attr, u'arguments':arguments}, var)
                var.registers([u'$element', u'attr', u'fn'])
                var.put(u'fn', var.get(u'$parse')(var.get(u'attr').get(var.get(u'directiveName')), var.get(u"null"), var.get(u'true')))
                @Js
                def PyJs_ngEventHandler_1049_(scope, element, this, arguments, var=var):
                    var = Scope({u'this':this, u'scope':scope, u'ngEventHandler':PyJs_ngEventHandler_1049_, u'arguments':arguments, u'element':element}, var)
                    var.registers([u'scope', u'element'])
                    @Js
                    def PyJs_anonymous_1050_(event, this, arguments, var=var):
                        var = Scope({u'this':this, u'event':event, u'arguments':arguments}, var)
                        var.registers([u'callback', u'event'])
                        @Js
                        def PyJs_anonymous_1051_(this, arguments, var=var):
                            var = Scope({u'this':this, u'arguments':arguments}, var)
                            var.registers([])
                            PyJs_Object_1052_ = Js({u'$event':var.get(u'event')})
                            var.get(u'fn')(var.get(u'scope'), PyJs_Object_1052_)
                        PyJs_anonymous_1051_._set_name(u'anonymous')
                        var.put(u'callback', PyJs_anonymous_1051_)
                        if (var.get(u'forceAsyncEvents').get(var.get(u'eventName')) and var.get(u'$rootScope').get(u'$$phase')):
                            var.get(u'scope').callprop(u'$evalAsync', var.get(u'callback'))
                        else:
                            var.get(u'scope').callprop(u'$apply', var.get(u'callback'))
                    PyJs_anonymous_1050_._set_name(u'anonymous')
                    var.get(u'element').callprop(u'on', var.get(u'eventName'), PyJs_anonymous_1050_)
                PyJs_ngEventHandler_1049_._set_name(u'ngEventHandler')
                return PyJs_ngEventHandler_1049_
            PyJs_anonymous_1048_._set_name(u'anonymous')
            PyJs_Object_1047_ = Js({u'restrict':Js(u'A'),u'compile':PyJs_anonymous_1048_})
            return PyJs_Object_1047_
        PyJs_anonymous_1046_._set_name(u'anonymous')
        var.get(u'ngEventDirectives').put(var.get(u'directiveName'), Js([Js(u'$parse'), Js(u'$rootScope'), PyJs_anonymous_1046_]))
    PyJs_anonymous_1045_._set_name(u'anonymous')
    var.get(u'forEach')(Js(u'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste').callprop(u'split', Js(u' ')), PyJs_anonymous_1045_)
    @Js
    def PyJs_anonymous_1053_(PyJsArg_24616e696d617465_, this, arguments, var=var):
        var = Scope({u'this':this, u'$animate':PyJsArg_24616e696d617465_, u'arguments':arguments}, var)
        var.registers([u'$animate'])
        @Js
        def PyJs_anonymous_1055_(PyJsArg_2473636f7065_, PyJsArg_24656c656d656e74_, PyJsArg_2461747472_, ctrl, PyJsArg_247472616e73636c756465_, this, arguments, var=var):
            var = Scope({u'$attr':PyJsArg_2461747472_, u'$element':PyJsArg_24656c656d656e74_, u'arguments':arguments, u'$transclude':PyJsArg_247472616e73636c756465_, u'ctrl':ctrl, u'this':this, u'$scope':PyJsArg_2473636f7065_}, var)
            var.registers([u'$element', u'$transclude', u'ctrl', u'$scope', u'$attr', u'previousElements', u'childScope', u'block'])
            pass
            @Js
            def PyJs_ngIfWatchAction_1056_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'ngIfWatchAction':PyJs_ngIfWatchAction_1056_, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                if var.get(u'value'):
                    if var.get(u'childScope').neg():
                        @Js
                        def PyJs_anonymous_1057_(clone, newScope, this, arguments, var=var):
                            var = Scope({u'this':this, u'clone':clone, u'arguments':arguments, u'newScope':newScope}, var)
                            var.registers([u'clone', u'newScope'])
                            var.put(u'childScope', var.get(u'newScope'))
                            var.get(u'clone').put((var.get(u'clone').put(u'length',var.get(u'clone').get(u'length')+Js(1))-Js(1)), var.get(u'document').callprop(u'createComment', ((Js(u' end ngIf: ')+var.get(u'$attr').get(u'ngIf'))+Js(u' '))))
                            PyJs_Object_1058_ = Js({u'clone':var.get(u'clone')})
                            var.put(u'block', PyJs_Object_1058_)
                            var.get(u'$animate').callprop(u'enter', var.get(u'clone'), var.get(u'$element').callprop(u'parent'), var.get(u'$element'))
                        PyJs_anonymous_1057_._set_name(u'anonymous')
                        var.get(u'$transclude')(PyJs_anonymous_1057_)
                else:
                    if var.get(u'previousElements'):
                        var.get(u'previousElements').callprop(u'remove')
                        var.put(u'previousElements', var.get(u"null"))
                    if var.get(u'childScope'):
                        var.get(u'childScope').callprop(u'$destroy')
                        var.put(u'childScope', var.get(u"null"))
                    if var.get(u'block'):
                        var.put(u'previousElements', var.get(u'getBlockNodes')(var.get(u'block').get(u'clone')))
                        @Js
                        def PyJs_anonymous_1059_(this, arguments, var=var):
                            var = Scope({u'this':this, u'arguments':arguments}, var)
                            var.registers([])
                            var.put(u'previousElements', var.get(u"null"))
                        PyJs_anonymous_1059_._set_name(u'anonymous')
                        var.get(u'$animate').callprop(u'leave', var.get(u'previousElements')).callprop(u'then', PyJs_anonymous_1059_)
                        var.put(u'block', var.get(u"null"))
            PyJs_ngIfWatchAction_1056_._set_name(u'ngIfWatchAction')
            var.get(u'$scope').callprop(u'$watch', var.get(u'$attr').get(u'ngIf'), PyJs_ngIfWatchAction_1056_)
        PyJs_anonymous_1055_._set_name(u'anonymous')
        PyJs_Object_1054_ = Js({u'multiElement':var.get(u'true'),u'transclude':Js(u'element'),u'priority':Js(600.0),u'terminal':var.get(u'true'),u'restrict':Js(u'A'),u'$$tlb':var.get(u'true'),u'link':PyJs_anonymous_1055_})
        return PyJs_Object_1054_
    PyJs_anonymous_1053_._set_name(u'anonymous')
    var.put(u'ngIfDirective', Js([Js(u'$animate'), PyJs_anonymous_1053_]))
    @Js
    def PyJs_anonymous_1060_(PyJsArg_2474656d706c61746552657175657374_, PyJsArg_24616e63686f725363726f6c6c_, PyJsArg_24616e696d617465_, this, arguments, var=var):
        var = Scope({u'this':this, u'$templateRequest':PyJsArg_2474656d706c61746552657175657374_, u'$animate':PyJsArg_24616e696d617465_, u'arguments':arguments, u'$anchorScroll':PyJsArg_24616e63686f725363726f6c6c_}, var)
        var.registers([u'$templateRequest', u'$animate', u'$anchorScroll'])
        @Js
        def PyJs_anonymous_1062_(element, attr, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'attr':attr, u'element':element}, var)
            var.registers([u'onloadExp', u'attr', u'srcExp', u'autoScrollExp', u'element'])
            var.put(u'srcExp', (var.get(u'attr').get(u'ngInclude') or var.get(u'attr').get(u'src')))
            var.put(u'onloadExp', (var.get(u'attr').get(u'onload') or Js(u'')))
            var.put(u'autoScrollExp', var.get(u'attr').get(u'autoscroll'))
            @Js
            def PyJs_anonymous_1063_(scope, PyJsArg_24656c656d656e74_, PyJsArg_2461747472_, ctrl, PyJsArg_247472616e73636c756465_, this, arguments, var=var):
                var = Scope({u'$attr':PyJsArg_2461747472_, u'$element':PyJsArg_24656c656d656e74_, u'arguments':arguments, u'$transclude':PyJsArg_247472616e73636c756465_, u'ctrl':ctrl, u'this':this, u'scope':scope}, var)
                var.registers([u'$element', u'$transclude', u'ctrl', u'$attr', u'previousElement', u'currentElement', u'currentScope', u'scope', u'changeCounter', u'cleanupLastIncludeContent'])
                var.put(u'changeCounter', Js(0.0))
                @Js
                def PyJs_anonymous_1064_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    if var.get(u'previousElement'):
                        var.get(u'previousElement').callprop(u'remove')
                        var.put(u'previousElement', var.get(u"null"))
                    if var.get(u'currentScope'):
                        var.get(u'currentScope').callprop(u'$destroy')
                        var.put(u'currentScope', var.get(u"null"))
                    if var.get(u'currentElement'):
                        @Js
                        def PyJs_anonymous_1065_(this, arguments, var=var):
                            var = Scope({u'this':this, u'arguments':arguments}, var)
                            var.registers([])
                            var.put(u'previousElement', var.get(u"null"))
                        PyJs_anonymous_1065_._set_name(u'anonymous')
                        var.get(u'$animate').callprop(u'leave', var.get(u'currentElement')).callprop(u'then', PyJs_anonymous_1065_)
                        var.put(u'previousElement', var.get(u'currentElement'))
                        var.put(u'currentElement', var.get(u"null"))
                PyJs_anonymous_1064_._set_name(u'anonymous')
                var.put(u'cleanupLastIncludeContent', PyJs_anonymous_1064_)
                @Js
                def PyJs_ngIncludeWatchAction_1066_(src, this, arguments, var=var):
                    var = Scope({u'this':this, u'src':src, u'ngIncludeWatchAction':PyJs_ngIncludeWatchAction_1066_, u'arguments':arguments}, var)
                    var.registers([u'src', u'afterAnimation', u'thisChangeId'])
                    @Js
                    def PyJs_anonymous_1067_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        if (var.get(u'isDefined')(var.get(u'autoScrollExp')) and (var.get(u'autoScrollExp').neg() or var.get(u'scope').callprop(u'$eval', var.get(u'autoScrollExp')))):
                            var.get(u'$anchorScroll')()
                    PyJs_anonymous_1067_._set_name(u'anonymous')
                    var.put(u'afterAnimation', PyJs_anonymous_1067_)
                    var.put(u'thisChangeId', var.put(u'changeCounter',var.get(u'changeCounter')+Js(1)))
                    if var.get(u'src'):
                        @Js
                        def PyJs_anonymous_1068_(response, this, arguments, var=var):
                            var = Scope({u'this':this, u'response':response, u'arguments':arguments}, var)
                            var.registers([u'clone', u'response', u'newScope'])
                            if PyJsStrictNeq(var.get(u'thisChangeId'),var.get(u'changeCounter')):
                                return var.get('undefined')
                            var.put(u'newScope', var.get(u'scope').callprop(u'$new'))
                            var.get(u'ctrl').put(u'template', var.get(u'response'))
                            @Js
                            def PyJs_anonymous_1069_(clone, this, arguments, var=var):
                                var = Scope({u'this':this, u'clone':clone, u'arguments':arguments}, var)
                                var.registers([u'clone'])
                                var.get(u'cleanupLastIncludeContent')()
                                var.get(u'$animate').callprop(u'enter', var.get(u'clone'), var.get(u"null"), var.get(u'$element')).callprop(u'then', var.get(u'afterAnimation'))
                            PyJs_anonymous_1069_._set_name(u'anonymous')
                            var.put(u'clone', var.get(u'$transclude')(var.get(u'newScope'), PyJs_anonymous_1069_))
                            var.put(u'currentScope', var.get(u'newScope'))
                            var.put(u'currentElement', var.get(u'clone'))
                            var.get(u'currentScope').callprop(u'$emit', Js(u'$includeContentLoaded'), var.get(u'src'))
                            var.get(u'scope').callprop(u'$eval', var.get(u'onloadExp'))
                        PyJs_anonymous_1068_._set_name(u'anonymous')
                        @Js
                        def PyJs_anonymous_1070_(this, arguments, var=var):
                            var = Scope({u'this':this, u'arguments':arguments}, var)
                            var.registers([])
                            if PyJsStrictEq(var.get(u'thisChangeId'),var.get(u'changeCounter')):
                                var.get(u'cleanupLastIncludeContent')()
                                var.get(u'scope').callprop(u'$emit', Js(u'$includeContentError'), var.get(u'src'))
                        PyJs_anonymous_1070_._set_name(u'anonymous')
                        var.get(u'$templateRequest')(var.get(u'src'), var.get(u'true')).callprop(u'then', PyJs_anonymous_1068_, PyJs_anonymous_1070_)
                        var.get(u'scope').callprop(u'$emit', Js(u'$includeContentRequested'), var.get(u'src'))
                    else:
                        var.get(u'cleanupLastIncludeContent')()
                        var.get(u'ctrl').put(u'template', var.get(u"null"))
                PyJs_ngIncludeWatchAction_1066_._set_name(u'ngIncludeWatchAction')
                var.get(u'scope').callprop(u'$watch', var.get(u'srcExp'), PyJs_ngIncludeWatchAction_1066_)
            PyJs_anonymous_1063_._set_name(u'anonymous')
            return PyJs_anonymous_1063_
        PyJs_anonymous_1062_._set_name(u'anonymous')
        PyJs_Object_1061_ = Js({u'restrict':Js(u'ECA'),u'priority':Js(400.0),u'terminal':var.get(u'true'),u'transclude':Js(u'element'),u'controller':var.get(u'angular').get(u'noop'),u'compile':PyJs_anonymous_1062_})
        return PyJs_Object_1061_
    PyJs_anonymous_1060_._set_name(u'anonymous')
    var.put(u'ngIncludeDirective', Js([Js(u'$templateRequest'), Js(u'$anchorScroll'), Js(u'$animate'), PyJs_anonymous_1060_]))
    @Js
    def PyJs_anonymous_1071_(PyJsArg_24636f6d70696c65_, this, arguments, var=var):
        var = Scope({u'this':this, u'$compile':PyJsArg_24636f6d70696c65_, u'arguments':arguments}, var)
        var.registers([u'$compile'])
        @Js
        def PyJs_anonymous_1073_(scope, PyJsArg_24656c656d656e74_, PyJsArg_2461747472_, ctrl, this, arguments, var=var):
            var = Scope({u'$attr':PyJsArg_2461747472_, u'$element':PyJsArg_24656c656d656e74_, u'arguments':arguments, u'ctrl':ctrl, u'this':this, u'scope':scope}, var)
            var.registers([u'$attr', u'scope', u'$element', u'ctrl'])
            if JsRegExp(u'/SVG/').callprop(u'test', var.get(u'$element').get(u'0').callprop(u'toString')):
                var.get(u'$element').callprop(u'empty')
                @Js
                def PyJs_namespaceAdaptedClone_1074_(clone, this, arguments, var=var):
                    var = Scope({u'this':this, u'clone':clone, u'arguments':arguments, u'namespaceAdaptedClone':PyJs_namespaceAdaptedClone_1074_}, var)
                    var.registers([u'clone'])
                    var.get(u'$element').callprop(u'append', var.get(u'clone'))
                PyJs_namespaceAdaptedClone_1074_._set_name(u'namespaceAdaptedClone')
                PyJs_Object_1075_ = Js({u'futureParentElement':var.get(u'$element')})
                var.get(u'$compile')(var.get(u'jqLiteBuildFragment')(var.get(u'ctrl').get(u'template'), var.get(u'document')).get(u'childNodes'))(var.get(u'scope'), PyJs_namespaceAdaptedClone_1074_, PyJs_Object_1075_)
                return var.get('undefined')
            var.get(u'$element').callprop(u'html', var.get(u'ctrl').get(u'template'))
            var.get(u'$compile')(var.get(u'$element').callprop(u'contents'))(var.get(u'scope'))
        PyJs_anonymous_1073_._set_name(u'anonymous')
        PyJs_Object_1072_ = Js({u'restrict':Js(u'ECA'),u'priority':(-Js(400.0)),u'require':Js(u'ngInclude'),u'link':PyJs_anonymous_1073_})
        return PyJs_Object_1072_
    PyJs_anonymous_1071_._set_name(u'anonymous')
    var.put(u'ngIncludeFillContentDirective', Js([Js(u'$compile'), PyJs_anonymous_1071_]))
    @Js
    def PyJs_anonymous_1077_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_1079_(scope, element, attrs, this, arguments, var=var):
            var = Scope({u'this':this, u'scope':scope, u'attrs':attrs, u'arguments':arguments, u'element':element}, var)
            var.registers([u'scope', u'attrs', u'element'])
            var.get(u'scope').callprop(u'$eval', var.get(u'attrs').get(u'ngInit'))
        PyJs_anonymous_1079_._set_name(u'anonymous')
        PyJs_Object_1078_ = Js({u'pre':PyJs_anonymous_1079_})
        return PyJs_Object_1078_
    PyJs_anonymous_1077_._set_name(u'anonymous')
    PyJs_Object_1076_ = Js({u'priority':Js(450.0),u'compile':PyJs_anonymous_1077_})
    var.put(u'ngInitDirective', var.get(u'ngDirective')(PyJs_Object_1076_))
    @Js
    def PyJs_anonymous_1080_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_1082_(scope, element, attr, ctrl, this, arguments, var=var):
            var = Scope({u'arguments':arguments, u'attr':attr, u'ctrl':ctrl, u'this':this, u'scope':scope, u'element':element}, var)
            var.registers([u'attr', u'ctrl', u'trimValues', u'element', u'parse', u'ngList', u'separator', u'scope'])
            var.put(u'ngList', (var.get(u'element').callprop(u'attr', var.get(u'attr').get(u'$attr').get(u'ngList')) or Js(u', ')))
            var.put(u'trimValues', PyJsStrictNeq(var.get(u'attr').get(u'ngTrim'),Js(u'false')))
            var.put(u'separator', (var.get(u'trim')(var.get(u'ngList')) if var.get(u'trimValues') else var.get(u'ngList')))
            @Js
            def PyJs_anonymous_1083_(viewValue, this, arguments, var=var):
                var = Scope({u'this':this, u'viewValue':viewValue, u'arguments':arguments}, var)
                var.registers([u'viewValue', u'list'])
                if var.get(u'isUndefined')(var.get(u'viewValue')):
                    return var.get('undefined')
                var.put(u'list', Js([]))
                if var.get(u'viewValue'):
                    @Js
                    def PyJs_anonymous_1084_(value, this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                        var.registers([u'value'])
                        if var.get(u'value'):
                            var.get(u'list').callprop(u'push', (var.get(u'trim')(var.get(u'value')) if var.get(u'trimValues') else var.get(u'value')))
                    PyJs_anonymous_1084_._set_name(u'anonymous')
                    var.get(u'forEach')(var.get(u'viewValue').callprop(u'split', var.get(u'separator')), PyJs_anonymous_1084_)
                return var.get(u'list')
            PyJs_anonymous_1083_._set_name(u'anonymous')
            var.put(u'parse', PyJs_anonymous_1083_)
            var.get(u'ctrl').get(u'$parsers').callprop(u'push', var.get(u'parse'))
            @Js
            def PyJs_anonymous_1085_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                if var.get(u'isArray')(var.get(u'value')):
                    return var.get(u'value').callprop(u'join', var.get(u'ngList'))
                return var.get(u'undefined')
            PyJs_anonymous_1085_._set_name(u'anonymous')
            var.get(u'ctrl').get(u'$formatters').callprop(u'push', PyJs_anonymous_1085_)
            @Js
            def PyJs_anonymous_1086_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                return (var.get(u'value').neg() or var.get(u'value').get(u'length').neg())
            PyJs_anonymous_1086_._set_name(u'anonymous')
            var.get(u'ctrl').put(u'$isEmpty', PyJs_anonymous_1086_)
        PyJs_anonymous_1082_._set_name(u'anonymous')
        PyJs_Object_1081_ = Js({u'restrict':Js(u'A'),u'priority':Js(100.0),u'require':Js(u'ngModel'),u'link':PyJs_anonymous_1082_})
        return PyJs_Object_1081_
    PyJs_anonymous_1080_._set_name(u'anonymous')
    var.put(u'ngListDirective', PyJs_anonymous_1080_)
    var.put(u'VALID_CLASS', Js(u'ng-valid'))
    var.put(u'INVALID_CLASS', Js(u'ng-invalid'))
    var.put(u'PRISTINE_CLASS', Js(u'ng-pristine'))
    var.put(u'DIRTY_CLASS', Js(u'ng-dirty'))
    var.put(u'UNTOUCHED_CLASS', Js(u'ng-untouched'))
    var.put(u'TOUCHED_CLASS', Js(u'ng-touched'))
    var.put(u'PENDING_CLASS', Js(u'ng-pending'))
    var.put(u'ngModelMinErr', var.get(u'minErr')(Js(u'ngModel')))
    @Js
    def PyJs_anonymous_1087_(PyJsArg_2473636f7065_, PyJsArg_24657863657074696f6e48616e646c6572_, PyJsArg_2461747472_, PyJsArg_24656c656d656e74_, PyJsArg_247061727365_, PyJsArg_24616e696d617465_, PyJsArg_2474696d656f7574_, PyJsArg_24726f6f7453636f7065_, PyJsArg_2471_, PyJsArg_24696e746572706f6c617465_, this, arguments, var=var):
        var = Scope({u'$animate':PyJsArg_24616e696d617465_, u'$rootScope':PyJsArg_24726f6f7453636f7065_, u'$element':PyJsArg_24656c656d656e74_, u'$timeout':PyJsArg_2474696d656f7574_, u'$exceptionHandler':PyJsArg_24657863657074696f6e48616e646c6572_, u'$scope':PyJsArg_2473636f7065_, u'$attr':PyJsArg_2461747472_, u'this':this, u'$interpolate':PyJsArg_24696e746572706f6c617465_, u'arguments':arguments, u'$q':PyJsArg_2471_, u'$parse':PyJsArg_247061727365_}, var)
        var.registers([u'$q', u'$animate', u'$rootScope', u'currentValidationRunId', u'$timeout', u'ctrl', u'$exceptionHandler', u'$interpolate', u'$scope', u'$attr', u'parsedNgModel', u'parsedNgModelAssign', u'$element', u'ngModelGet', u'$parse', u'parserValid', u'ngModelSet', u'pendingDebounce'])
        var.get(u"this").put(u'$viewValue', var.get(u'Number').get(u'NaN'))
        var.get(u"this").put(u'$modelValue', var.get(u'Number').get(u'NaN'))
        var.get(u"this").put(u'$$rawModelValue', var.get(u'undefined'))
        PyJs_Object_1088_ = Js({})
        var.get(u"this").put(u'$validators', PyJs_Object_1088_)
        PyJs_Object_1089_ = Js({})
        var.get(u"this").put(u'$asyncValidators', PyJs_Object_1089_)
        var.get(u"this").put(u'$parsers', Js([]))
        var.get(u"this").put(u'$formatters', Js([]))
        var.get(u"this").put(u'$viewChangeListeners', Js([]))
        var.get(u"this").put(u'$untouched', var.get(u'true'))
        var.get(u"this").put(u'$touched', Js(False))
        var.get(u"this").put(u'$pristine', var.get(u'true'))
        var.get(u"this").put(u'$dirty', Js(False))
        var.get(u"this").put(u'$valid', var.get(u'true'))
        var.get(u"this").put(u'$invalid', Js(False))
        PyJs_Object_1090_ = Js({})
        var.get(u"this").put(u'$error', PyJs_Object_1090_)
        PyJs_Object_1091_ = Js({})
        var.get(u"this").put(u'$$success', PyJs_Object_1091_)
        var.get(u"this").put(u'$pending', var.get(u'undefined'))
        var.get(u"this").put(u'$name', var.get(u'$interpolate')((var.get(u'$attr').get(u'name') or Js(u'')), Js(False))(var.get(u'$scope')))
        var.get(u"this").put(u'$$parentForm', var.get(u'nullFormCtrl'))
        var.put(u'parsedNgModel', var.get(u'$parse')(var.get(u'$attr').get(u'ngModel')))
        var.put(u'parsedNgModelAssign', var.get(u'parsedNgModel').get(u'assign'))
        var.put(u'ngModelGet', var.get(u'parsedNgModel'))
        var.put(u'ngModelSet', var.get(u'parsedNgModelAssign'))
        var.put(u'pendingDebounce', var.get(u"null"))
        var.put(u'ctrl', var.get(u"this"))
        @Js
        def PyJs_anonymous_1092_(options, this, arguments, var=var):
            var = Scope({u'this':this, u'options':options, u'arguments':arguments}, var)
            var.registers([u'invokeModelSetter', u'options', u'invokeModelGetter'])
            var.get(u'ctrl').put(u'$options', var.get(u'options'))
            if (var.get(u'options') and var.get(u'options').get(u'getterSetter')):
                var.put(u'invokeModelGetter', var.get(u'$parse')((var.get(u'$attr').get(u'ngModel')+Js(u'()'))))
                var.put(u'invokeModelSetter', var.get(u'$parse')((var.get(u'$attr').get(u'ngModel')+Js(u'($$$p)'))))
                @Js
                def PyJs_anonymous_1093_(PyJsArg_2473636f7065_, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'$scope':PyJsArg_2473636f7065_}, var)
                    var.registers([u'modelValue', u'$scope'])
                    var.put(u'modelValue', var.get(u'parsedNgModel')(var.get(u'$scope')))
                    if var.get(u'isFunction')(var.get(u'modelValue')):
                        var.put(u'modelValue', var.get(u'invokeModelGetter')(var.get(u'$scope')))
                    return var.get(u'modelValue')
                PyJs_anonymous_1093_._set_name(u'anonymous')
                var.put(u'ngModelGet', PyJs_anonymous_1093_)
                @Js
                def PyJs_anonymous_1094_(PyJsArg_2473636f7065_, newValue, this, arguments, var=var):
                    var = Scope({u'this':this, u'newValue':newValue, u'$scope':PyJsArg_2473636f7065_, u'arguments':arguments}, var)
                    var.registers([u'newValue', u'$scope'])
                    if var.get(u'isFunction')(var.get(u'parsedNgModel')(var.get(u'$scope'))):
                        PyJs_Object_1095_ = Js({u'$$$p':var.get(u'ctrl').get(u'$modelValue')})
                        var.get(u'invokeModelSetter')(var.get(u'$scope'), PyJs_Object_1095_)
                    else:
                        var.get(u'parsedNgModelAssign')(var.get(u'$scope'), var.get(u'ctrl').get(u'$modelValue'))
                PyJs_anonymous_1094_._set_name(u'anonymous')
                var.put(u'ngModelSet', PyJs_anonymous_1094_)
            else:
                if var.get(u'parsedNgModel').get(u'assign').neg():
                    PyJsTempException = JsToPyException(var.get(u'ngModelMinErr')(Js(u'nonassign'), Js(u"Expression '{0}' is non-assignable. Element: {1}"), var.get(u'$attr').get(u'ngModel'), var.get(u'startingTag')(var.get(u'$element'))))
                    raise PyJsTempException
        PyJs_anonymous_1092_._set_name(u'anonymous')
        var.get(u"this").put(u'$$setOptions', PyJs_anonymous_1092_)
        var.get(u"this").put(u'$render', var.get(u'noop'))
        @Js
        def PyJs_anonymous_1096_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            return (((var.get(u'isUndefined')(var.get(u'value')) or PyJsStrictEq(var.get(u'value'),Js(u''))) or PyJsStrictEq(var.get(u'value'),var.get(u"null"))) or PyJsStrictNeq(var.get(u'value'),var.get(u'value')))
        PyJs_anonymous_1096_._set_name(u'anonymous')
        var.get(u"this").put(u'$isEmpty', PyJs_anonymous_1096_)
        var.put(u'currentValidationRunId', Js(0.0))
        @Js
        def PyJs_anonymous_1098_(object, property, this, arguments, var=var):
            var = Scope({u'this':this, u'property':property, u'object':object, u'arguments':arguments}, var)
            var.registers([u'property', u'object'])
            var.get(u'object').put(var.get(u'property'), var.get(u'true'))
        PyJs_anonymous_1098_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_1099_(object, property, this, arguments, var=var):
            var = Scope({u'this':this, u'property':property, u'object':object, u'arguments':arguments}, var)
            var.registers([u'property', u'object'])
            var.get(u'object').delete(var.get(u'property'))
        PyJs_anonymous_1099_._set_name(u'anonymous')
        PyJs_Object_1097_ = Js({u'ctrl':var.get(u"this"),u'$element':var.get(u'$element'),u'set':PyJs_anonymous_1098_,u'unset':PyJs_anonymous_1099_,u'$animate':var.get(u'$animate')})
        var.get(u'addSetValidityMethod')(PyJs_Object_1097_)
        @Js
        def PyJs_anonymous_1100_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u'ctrl').put(u'$dirty', Js(False))
            var.get(u'ctrl').put(u'$pristine', var.get(u'true'))
            var.get(u'$animate').callprop(u'removeClass', var.get(u'$element'), var.get(u'DIRTY_CLASS'))
            var.get(u'$animate').callprop(u'addClass', var.get(u'$element'), var.get(u'PRISTINE_CLASS'))
        PyJs_anonymous_1100_._set_name(u'anonymous')
        var.get(u"this").put(u'$setPristine', PyJs_anonymous_1100_)
        @Js
        def PyJs_anonymous_1101_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u'ctrl').put(u'$dirty', var.get(u'true'))
            var.get(u'ctrl').put(u'$pristine', Js(False))
            var.get(u'$animate').callprop(u'removeClass', var.get(u'$element'), var.get(u'PRISTINE_CLASS'))
            var.get(u'$animate').callprop(u'addClass', var.get(u'$element'), var.get(u'DIRTY_CLASS'))
            var.get(u'ctrl').get(u'$$parentForm').callprop(u'$setDirty')
        PyJs_anonymous_1101_._set_name(u'anonymous')
        var.get(u"this").put(u'$setDirty', PyJs_anonymous_1101_)
        @Js
        def PyJs_anonymous_1102_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u'ctrl').put(u'$touched', Js(False))
            var.get(u'ctrl').put(u'$untouched', var.get(u'true'))
            var.get(u'$animate').callprop(u'setClass', var.get(u'$element'), var.get(u'UNTOUCHED_CLASS'), var.get(u'TOUCHED_CLASS'))
        PyJs_anonymous_1102_._set_name(u'anonymous')
        var.get(u"this").put(u'$setUntouched', PyJs_anonymous_1102_)
        @Js
        def PyJs_anonymous_1103_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u'ctrl').put(u'$touched', var.get(u'true'))
            var.get(u'ctrl').put(u'$untouched', Js(False))
            var.get(u'$animate').callprop(u'setClass', var.get(u'$element'), var.get(u'TOUCHED_CLASS'), var.get(u'UNTOUCHED_CLASS'))
        PyJs_anonymous_1103_._set_name(u'anonymous')
        var.get(u"this").put(u'$setTouched', PyJs_anonymous_1103_)
        @Js
        def PyJs_anonymous_1104_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u'$timeout').callprop(u'cancel', var.get(u'pendingDebounce'))
            var.get(u'ctrl').put(u'$viewValue', var.get(u'ctrl').get(u'$$lastCommittedViewValue'))
            var.get(u'ctrl').callprop(u'$render')
        PyJs_anonymous_1104_._set_name(u'anonymous')
        var.get(u"this").put(u'$rollbackViewValue', PyJs_anonymous_1104_)
        @Js
        def PyJs_anonymous_1105_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'allowInvalid', u'prevValid', u'viewValue', u'modelValue', u'prevModelValue'])
            if (var.get(u'isNumber')(var.get(u'ctrl').get(u'$modelValue')) and var.get(u'isNaN')(var.get(u'ctrl').get(u'$modelValue'))):
                return var.get('undefined')
            var.put(u'viewValue', var.get(u'ctrl').get(u'$$lastCommittedViewValue'))
            var.put(u'modelValue', var.get(u'ctrl').get(u'$$rawModelValue'))
            var.put(u'prevValid', var.get(u'ctrl').get(u'$valid'))
            var.put(u'prevModelValue', var.get(u'ctrl').get(u'$modelValue'))
            var.put(u'allowInvalid', (var.get(u'ctrl').get(u'$options') and var.get(u'ctrl').get(u'$options').get(u'allowInvalid')))
            @Js
            def PyJs_anonymous_1106_(allValid, this, arguments, var=var):
                var = Scope({u'this':this, u'allValid':allValid, u'arguments':arguments}, var)
                var.registers([u'allValid'])
                if (var.get(u'allowInvalid').neg() and PyJsStrictNeq(var.get(u'prevValid'),var.get(u'allValid'))):
                    var.get(u'ctrl').put(u'$modelValue', (var.get(u'modelValue') if var.get(u'allValid') else var.get(u'undefined')))
                    if PyJsStrictNeq(var.get(u'ctrl').get(u'$modelValue'),var.get(u'prevModelValue')):
                        var.get(u'ctrl').callprop(u'$$writeModelToScope')
            PyJs_anonymous_1106_._set_name(u'anonymous')
            var.get(u'ctrl').callprop(u'$$runValidators', var.get(u'modelValue'), var.get(u'viewValue'), PyJs_anonymous_1106_)
        PyJs_anonymous_1105_._set_name(u'anonymous')
        var.get(u"this").put(u'$validate', PyJs_anonymous_1105_)
        @Js
        def PyJs_anonymous_1107_(modelValue, viewValue, doneCallback, this, arguments, var=var):
            var = Scope({u'this':this, u'viewValue':viewValue, u'modelValue':modelValue, u'doneCallback':doneCallback, u'arguments':arguments}, var)
            var.registers([u'localValidationRunId', u'processParseErrors', u'doneCallback', u'setValidity', u'viewValue', u'processSyncValidators', u'validationDone', u'modelValue', u'processAsyncValidators'])
            @Js
            def PyJsHoisted_validationDone_(allValid, this, arguments, var=var):
                var = Scope({u'this':this, u'allValid':allValid, u'arguments':arguments}, var)
                var.registers([u'allValid'])
                if PyJsStrictEq(var.get(u'localValidationRunId'),var.get(u'currentValidationRunId')):
                    var.get(u'doneCallback')(var.get(u'allValid'))
            PyJsHoisted_validationDone_.func_name = u'validationDone'
            var.put(u'validationDone', PyJsHoisted_validationDone_)
            @Js
            def PyJsHoisted_processParseErrors_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'errorKey'])
                var.put(u'errorKey', (var.get(u'ctrl').get(u'$$parserName') or Js(u'parse')))
                if var.get(u'isUndefined')(var.get(u'parserValid')):
                    var.get(u'setValidity')(var.get(u'errorKey'), var.get(u"null"))
                else:
                    if var.get(u'parserValid').neg():
                        @Js
                        def PyJs_anonymous_1108_(v, name, this, arguments, var=var):
                            var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'v':v}, var)
                            var.registers([u'name', u'v'])
                            var.get(u'setValidity')(var.get(u'name'), var.get(u"null"))
                        PyJs_anonymous_1108_._set_name(u'anonymous')
                        var.get(u'forEach')(var.get(u'ctrl').get(u'$validators'), PyJs_anonymous_1108_)
                        @Js
                        def PyJs_anonymous_1109_(v, name, this, arguments, var=var):
                            var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'v':v}, var)
                            var.registers([u'name', u'v'])
                            var.get(u'setValidity')(var.get(u'name'), var.get(u"null"))
                        PyJs_anonymous_1109_._set_name(u'anonymous')
                        var.get(u'forEach')(var.get(u'ctrl').get(u'$asyncValidators'), PyJs_anonymous_1109_)
                    var.get(u'setValidity')(var.get(u'errorKey'), var.get(u'parserValid'))
                    return var.get(u'parserValid')
                return var.get(u'true')
            PyJsHoisted_processParseErrors_.func_name = u'processParseErrors'
            var.put(u'processParseErrors', PyJsHoisted_processParseErrors_)
            @Js
            def PyJsHoisted_processAsyncValidators_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'validatorPromises', u'allValid'])
                var.put(u'validatorPromises', Js([]))
                var.put(u'allValid', var.get(u'true'))
                @Js
                def PyJs_anonymous_1112_(validator, name, this, arguments, var=var):
                    var = Scope({u'this':this, u'validator':validator, u'name':name, u'arguments':arguments}, var)
                    var.registers([u'validator', u'promise', u'name'])
                    var.put(u'promise', var.get(u'validator')(var.get(u'modelValue'), var.get(u'viewValue')))
                    if var.get(u'isPromiseLike')(var.get(u'promise')).neg():
                        PyJsTempException = JsToPyException(var.get(u'ngModelMinErr')(Js(u'$asyncValidators'), Js(u"Expected asynchronous validator to return a promise but got '{0}' instead."), var.get(u'promise')))
                        raise PyJsTempException
                    var.get(u'setValidity')(var.get(u'name'), var.get(u'undefined'))
                    @Js
                    def PyJs_anonymous_1113_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        var.get(u'setValidity')(var.get(u'name'), var.get(u'true'))
                    PyJs_anonymous_1113_._set_name(u'anonymous')
                    @Js
                    def PyJs_anonymous_1114_(error, this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments, u'error':error}, var)
                        var.registers([u'error'])
                        var.put(u'allValid', Js(False))
                        var.get(u'setValidity')(var.get(u'name'), Js(False))
                    PyJs_anonymous_1114_._set_name(u'anonymous')
                    var.get(u'validatorPromises').callprop(u'push', var.get(u'promise').callprop(u'then', PyJs_anonymous_1113_, PyJs_anonymous_1114_))
                PyJs_anonymous_1112_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'ctrl').get(u'$asyncValidators'), PyJs_anonymous_1112_)
                if var.get(u'validatorPromises').get(u'length').neg():
                    var.get(u'validationDone')(var.get(u'true'))
                else:
                    @Js
                    def PyJs_anonymous_1115_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        var.get(u'validationDone')(var.get(u'allValid'))
                    PyJs_anonymous_1115_._set_name(u'anonymous')
                    var.get(u'$q').callprop(u'all', var.get(u'validatorPromises')).callprop(u'then', PyJs_anonymous_1115_, var.get(u'noop'))
            PyJsHoisted_processAsyncValidators_.func_name = u'processAsyncValidators'
            var.put(u'processAsyncValidators', PyJsHoisted_processAsyncValidators_)
            @Js
            def PyJsHoisted_processSyncValidators_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'syncValidatorsValid'])
                var.put(u'syncValidatorsValid', var.get(u'true'))
                @Js
                def PyJs_anonymous_1110_(validator, name, this, arguments, var=var):
                    var = Scope({u'this':this, u'validator':validator, u'name':name, u'arguments':arguments}, var)
                    var.registers([u'validator', u'result', u'name'])
                    var.put(u'result', var.get(u'validator')(var.get(u'modelValue'), var.get(u'viewValue')))
                    var.put(u'syncValidatorsValid', (var.get(u'syncValidatorsValid') and var.get(u'result')))
                    var.get(u'setValidity')(var.get(u'name'), var.get(u'result'))
                PyJs_anonymous_1110_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'ctrl').get(u'$validators'), PyJs_anonymous_1110_)
                if var.get(u'syncValidatorsValid').neg():
                    @Js
                    def PyJs_anonymous_1111_(v, name, this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments, u'name':name, u'v':v}, var)
                        var.registers([u'name', u'v'])
                        var.get(u'setValidity')(var.get(u'name'), var.get(u"null"))
                    PyJs_anonymous_1111_._set_name(u'anonymous')
                    var.get(u'forEach')(var.get(u'ctrl').get(u'$asyncValidators'), PyJs_anonymous_1111_)
                    return Js(False)
                return var.get(u'true')
            PyJsHoisted_processSyncValidators_.func_name = u'processSyncValidators'
            var.put(u'processSyncValidators', PyJsHoisted_processSyncValidators_)
            @Js
            def PyJsHoisted_setValidity_(name, isValid, this, arguments, var=var):
                var = Scope({u'this':this, u'isValid':isValid, u'name':name, u'arguments':arguments}, var)
                var.registers([u'isValid', u'name'])
                if PyJsStrictEq(var.get(u'localValidationRunId'),var.get(u'currentValidationRunId')):
                    var.get(u'ctrl').callprop(u'$setValidity', var.get(u'name'), var.get(u'isValid'))
            PyJsHoisted_setValidity_.func_name = u'setValidity'
            var.put(u'setValidity', PyJsHoisted_setValidity_)
            (var.put(u'currentValidationRunId',var.get(u'currentValidationRunId')+Js(1))-Js(1))
            var.put(u'localValidationRunId', var.get(u'currentValidationRunId'))
            if var.get(u'processParseErrors')().neg():
                var.get(u'validationDone')(Js(False))
                return var.get('undefined')
            if var.get(u'processSyncValidators')().neg():
                var.get(u'validationDone')(Js(False))
                return var.get('undefined')
            var.get(u'processAsyncValidators')()
            pass
            pass
            pass
            pass
            pass
        PyJs_anonymous_1107_._set_name(u'anonymous')
        var.get(u"this").put(u'$$runValidators', PyJs_anonymous_1107_)
        @Js
        def PyJs_anonymous_1116_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'viewValue'])
            var.put(u'viewValue', var.get(u'ctrl').get(u'$viewValue'))
            var.get(u'$timeout').callprop(u'cancel', var.get(u'pendingDebounce'))
            if (PyJsStrictEq(var.get(u'ctrl').get(u'$$lastCommittedViewValue'),var.get(u'viewValue')) and (PyJsStrictNeq(var.get(u'viewValue'),Js(u'')) or var.get(u'ctrl').get(u'$$hasNativeValidators').neg())):
                return var.get('undefined')
            var.get(u'ctrl').put(u'$$lastCommittedViewValue', var.get(u'viewValue'))
            if var.get(u'ctrl').get(u'$pristine'):
                var.get(u"this").callprop(u'$setDirty')
            var.get(u"this").callprop(u'$$parseAndValidate')
        PyJs_anonymous_1116_._set_name(u'anonymous')
        var.get(u"this").put(u'$commitViewValue', PyJs_anonymous_1116_)
        @Js
        def PyJs_anonymous_1117_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'viewValue', u'writeToModelIfNeeded', u'i', u'allowInvalid', u'prevModelValue', u'modelValue'])
            @Js
            def PyJsHoisted_writeToModelIfNeeded_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                if PyJsStrictNeq(var.get(u'ctrl').get(u'$modelValue'),var.get(u'prevModelValue')):
                    var.get(u'ctrl').callprop(u'$$writeModelToScope')
            PyJsHoisted_writeToModelIfNeeded_.func_name = u'writeToModelIfNeeded'
            var.put(u'writeToModelIfNeeded', PyJsHoisted_writeToModelIfNeeded_)
            var.put(u'viewValue', var.get(u'ctrl').get(u'$$lastCommittedViewValue'))
            var.put(u'modelValue', var.get(u'viewValue'))
            var.put(u'parserValid', (var.get(u'undefined') if var.get(u'isUndefined')(var.get(u'modelValue')) else var.get(u'true')))
            if var.get(u'parserValid'):
                #for JS loop
                var.put(u'i', Js(0.0))
                while (var.get(u'i')<var.get(u'ctrl').get(u'$parsers').get(u'length')):
                    try:
                        var.put(u'modelValue', var.get(u'ctrl').get(u'$parsers').callprop(var.get(u'i'), var.get(u'modelValue')))
                        if var.get(u'isUndefined')(var.get(u'modelValue')):
                            var.put(u'parserValid', Js(False))
                            break
                    finally:
                            (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
            if (var.get(u'isNumber')(var.get(u'ctrl').get(u'$modelValue')) and var.get(u'isNaN')(var.get(u'ctrl').get(u'$modelValue'))):
                var.get(u'ctrl').put(u'$modelValue', var.get(u'ngModelGet')(var.get(u'$scope')))
            var.put(u'prevModelValue', var.get(u'ctrl').get(u'$modelValue'))
            var.put(u'allowInvalid', (var.get(u'ctrl').get(u'$options') and var.get(u'ctrl').get(u'$options').get(u'allowInvalid')))
            var.get(u'ctrl').put(u'$$rawModelValue', var.get(u'modelValue'))
            if var.get(u'allowInvalid'):
                var.get(u'ctrl').put(u'$modelValue', var.get(u'modelValue'))
                var.get(u'writeToModelIfNeeded')()
            @Js
            def PyJs_anonymous_1118_(allValid, this, arguments, var=var):
                var = Scope({u'this':this, u'allValid':allValid, u'arguments':arguments}, var)
                var.registers([u'allValid'])
                if var.get(u'allowInvalid').neg():
                    var.get(u'ctrl').put(u'$modelValue', (var.get(u'modelValue') if var.get(u'allValid') else var.get(u'undefined')))
                    var.get(u'writeToModelIfNeeded')()
            PyJs_anonymous_1118_._set_name(u'anonymous')
            var.get(u'ctrl').callprop(u'$$runValidators', var.get(u'modelValue'), var.get(u'ctrl').get(u'$$lastCommittedViewValue'), PyJs_anonymous_1118_)
            pass
        PyJs_anonymous_1117_._set_name(u'anonymous')
        var.get(u"this").put(u'$$parseAndValidate', PyJs_anonymous_1117_)
        @Js
        def PyJs_anonymous_1119_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u'ngModelSet')(var.get(u'$scope'), var.get(u'ctrl').get(u'$modelValue'))
            @Js
            def PyJs_anonymous_1120_(listener, this, arguments, var=var):
                var = Scope({u'listener':listener, u'this':this, u'arguments':arguments}, var)
                var.registers([u'listener'])
                try:
                    var.get(u'listener')()
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_16216275 = var.own.get(u'e')
                    var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                    try:
                        var.get(u'$exceptionHandler')(var.get(u'e'))
                    finally:
                        if PyJsHolder_65_16216275 is not None:
                            var.own[u'e'] = PyJsHolder_65_16216275
                        else:
                            del var.own[u'e']
                        del PyJsHolder_65_16216275
            PyJs_anonymous_1120_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'ctrl').get(u'$viewChangeListeners'), PyJs_anonymous_1120_)
        PyJs_anonymous_1119_._set_name(u'anonymous')
        var.get(u"this").put(u'$$writeModelToScope', PyJs_anonymous_1119_)
        @Js
        def PyJs_anonymous_1121_(value, trigger, this, arguments, var=var):
            var = Scope({u'this':this, u'trigger':trigger, u'arguments':arguments, u'value':value}, var)
            var.registers([u'trigger', u'value'])
            var.get(u'ctrl').put(u'$viewValue', var.get(u'value'))
            if (var.get(u'ctrl').get(u'$options').neg() or var.get(u'ctrl').get(u'$options').get(u'updateOnDefault')):
                var.get(u'ctrl').callprop(u'$$debounceViewValueCommit', var.get(u'trigger'))
        PyJs_anonymous_1121_._set_name(u'anonymous')
        var.get(u"this").put(u'$setViewValue', PyJs_anonymous_1121_)
        @Js
        def PyJs_anonymous_1122_(trigger, this, arguments, var=var):
            var = Scope({u'this':this, u'trigger':trigger, u'arguments':arguments}, var)
            var.registers([u'debounce', u'debounceDelay', u'options', u'trigger'])
            var.put(u'debounceDelay', Js(0.0))
            var.put(u'options', var.get(u'ctrl').get(u'$options'))
            if (var.get(u'options') and var.get(u'isDefined')(var.get(u'options').get(u'debounce'))):
                var.put(u'debounce', var.get(u'options').get(u'debounce'))
                if var.get(u'isNumber')(var.get(u'debounce')):
                    var.put(u'debounceDelay', var.get(u'debounce'))
                else:
                    if var.get(u'isNumber')(var.get(u'debounce').get(var.get(u'trigger'))):
                        var.put(u'debounceDelay', var.get(u'debounce').get(var.get(u'trigger')))
                    else:
                        if var.get(u'isNumber')(var.get(u'debounce').get(u'default')):
                            var.put(u'debounceDelay', var.get(u'debounce').get(u'default'))
            var.get(u'$timeout').callprop(u'cancel', var.get(u'pendingDebounce'))
            if var.get(u'debounceDelay'):
                @Js
                def PyJs_anonymous_1123_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'ctrl').callprop(u'$commitViewValue')
                PyJs_anonymous_1123_._set_name(u'anonymous')
                var.put(u'pendingDebounce', var.get(u'$timeout')(PyJs_anonymous_1123_, var.get(u'debounceDelay')))
            else:
                if var.get(u'$rootScope').get(u'$$phase'):
                    var.get(u'ctrl').callprop(u'$commitViewValue')
                else:
                    @Js
                    def PyJs_anonymous_1124_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        var.get(u'ctrl').callprop(u'$commitViewValue')
                    PyJs_anonymous_1124_._set_name(u'anonymous')
                    var.get(u'$scope').callprop(u'$apply', PyJs_anonymous_1124_)
        PyJs_anonymous_1122_._set_name(u'anonymous')
        var.get(u"this").put(u'$$debounceViewValueCommit', PyJs_anonymous_1122_)
        @Js
        def PyJs_ngModelWatch_1125_(this, arguments, var=var):
            var = Scope({u'this':this, u'ngModelWatch':PyJs_ngModelWatch_1125_, u'arguments':arguments}, var)
            var.registers([u'viewValue', u'modelValue', u'idx', u'formatters'])
            var.put(u'modelValue', var.get(u'ngModelGet')(var.get(u'$scope')))
            if (PyJsStrictNeq(var.get(u'modelValue'),var.get(u'ctrl').get(u'$modelValue')) and (PyJsStrictEq(var.get(u'ctrl').get(u'$modelValue'),var.get(u'ctrl').get(u'$modelValue')) or PyJsStrictEq(var.get(u'modelValue'),var.get(u'modelValue')))):
                var.get(u'ctrl').put(u'$modelValue', var.get(u'ctrl').put(u'$$rawModelValue', var.get(u'modelValue')))
                var.put(u'parserValid', var.get(u'undefined'))
                var.put(u'formatters', var.get(u'ctrl').get(u'$formatters'))
                var.put(u'idx', var.get(u'formatters').get(u'length'))
                var.put(u'viewValue', var.get(u'modelValue'))
                while (var.put(u'idx',var.get(u'idx')-Js(1))+Js(1)):
                    var.put(u'viewValue', var.get(u'formatters').callprop(var.get(u'idx'), var.get(u'viewValue')))
                if PyJsStrictNeq(var.get(u'ctrl').get(u'$viewValue'),var.get(u'viewValue')):
                    var.get(u'ctrl').put(u'$viewValue', var.get(u'ctrl').put(u'$$lastCommittedViewValue', var.get(u'viewValue')))
                    var.get(u'ctrl').callprop(u'$render')
                    var.get(u'ctrl').callprop(u'$$runValidators', var.get(u'modelValue'), var.get(u'viewValue'), var.get(u'noop'))
            return var.get(u'modelValue')
        PyJs_ngModelWatch_1125_._set_name(u'ngModelWatch')
        var.get(u'$scope').callprop(u'$watch', PyJs_ngModelWatch_1125_)
    PyJs_anonymous_1087_._set_name(u'anonymous')
    var.put(u'NgModelController', Js([Js(u'$scope'), Js(u'$exceptionHandler'), Js(u'$attrs'), Js(u'$element'), Js(u'$parse'), Js(u'$animate'), Js(u'$timeout'), Js(u'$rootScope'), Js(u'$q'), Js(u'$interpolate'), PyJs_anonymous_1087_]))
    @Js
    def PyJs_anonymous_1126_(PyJsArg_24726f6f7453636f7065_, this, arguments, var=var):
        var = Scope({u'this':this, u'$rootScope':PyJsArg_24726f6f7453636f7065_, u'arguments':arguments}, var)
        var.registers([u'$rootScope'])
        @Js
        def PyJs_ngModelCompile_1128_(element, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'ngModelCompile':PyJs_ngModelCompile_1128_, u'element':element}, var)
            var.registers([u'element'])
            var.get(u'element').callprop(u'addClass', var.get(u'PRISTINE_CLASS')).callprop(u'addClass', var.get(u'UNTOUCHED_CLASS')).callprop(u'addClass', var.get(u'VALID_CLASS'))
            @Js
            def PyJs_ngModelPreLink_1130_(scope, element, attr, ctrls, this, arguments, var=var):
                var = Scope({u'arguments':arguments, u'attr':attr, u'this':this, u'scope':scope, u'element':element, u'ngModelPreLink':PyJs_ngModelPreLink_1130_, u'ctrls':ctrls}, var)
                var.registers([u'formCtrl', u'attr', u'modelCtrl', u'element', u'scope', u'ctrls'])
                var.put(u'modelCtrl', var.get(u'ctrls').get(u'0'))
                var.put(u'formCtrl', (var.get(u'ctrls').get(u'1') or var.get(u'modelCtrl').get(u'$$parentForm')))
                var.get(u'modelCtrl').callprop(u'$$setOptions', (var.get(u'ctrls').get(u'2') and var.get(u'ctrls').get(u'2').get(u'$options')))
                var.get(u'formCtrl').callprop(u'$addControl', var.get(u'modelCtrl'))
                @Js
                def PyJs_anonymous_1131_(newValue, this, arguments, var=var):
                    var = Scope({u'this':this, u'newValue':newValue, u'arguments':arguments}, var)
                    var.registers([u'newValue'])
                    if PyJsStrictNeq(var.get(u'modelCtrl').get(u'$name'),var.get(u'newValue')):
                        var.get(u'modelCtrl').get(u'$$parentForm').callprop(u'$$renameControl', var.get(u'modelCtrl'), var.get(u'newValue'))
                PyJs_anonymous_1131_._set_name(u'anonymous')
                var.get(u'attr').callprop(u'$observe', Js(u'name'), PyJs_anonymous_1131_)
                @Js
                def PyJs_anonymous_1132_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'modelCtrl').get(u'$$parentForm').callprop(u'$removeControl', var.get(u'modelCtrl'))
                PyJs_anonymous_1132_._set_name(u'anonymous')
                var.get(u'scope').callprop(u'$on', Js(u'$destroy'), PyJs_anonymous_1132_)
            PyJs_ngModelPreLink_1130_._set_name(u'ngModelPreLink')
            @Js
            def PyJs_ngModelPostLink_1133_(scope, element, attr, ctrls, this, arguments, var=var):
                var = Scope({u'arguments':arguments, u'attr':attr, u'this':this, u'scope':scope, u'element':element, u'ngModelPostLink':PyJs_ngModelPostLink_1133_, u'ctrls':ctrls}, var)
                var.registers([u'scope', u'attr', u'ctrls', u'modelCtrl', u'element'])
                var.put(u'modelCtrl', var.get(u'ctrls').get(u'0'))
                if (var.get(u'modelCtrl').get(u'$options') and var.get(u'modelCtrl').get(u'$options').get(u'updateOn')):
                    @Js
                    def PyJs_anonymous_1134_(ev, this, arguments, var=var):
                        var = Scope({u'this':this, u'ev':ev, u'arguments':arguments}, var)
                        var.registers([u'ev'])
                        var.get(u'modelCtrl').callprop(u'$$debounceViewValueCommit', (var.get(u'ev') and var.get(u'ev').get(u'type')))
                    PyJs_anonymous_1134_._set_name(u'anonymous')
                    var.get(u'element').callprop(u'on', var.get(u'modelCtrl').get(u'$options').get(u'updateOn'), PyJs_anonymous_1134_)
                @Js
                def PyJs_anonymous_1135_(ev, this, arguments, var=var):
                    var = Scope({u'this':this, u'ev':ev, u'arguments':arguments}, var)
                    var.registers([u'ev'])
                    if var.get(u'modelCtrl').get(u'$touched'):
                        return var.get('undefined')
                    if var.get(u'$rootScope').get(u'$$phase'):
                        var.get(u'scope').callprop(u'$evalAsync', var.get(u'modelCtrl').get(u'$setTouched'))
                    else:
                        var.get(u'scope').callprop(u'$apply', var.get(u'modelCtrl').get(u'$setTouched'))
                PyJs_anonymous_1135_._set_name(u'anonymous')
                var.get(u'element').callprop(u'on', Js(u'blur'), PyJs_anonymous_1135_)
            PyJs_ngModelPostLink_1133_._set_name(u'ngModelPostLink')
            PyJs_Object_1129_ = Js({u'pre':PyJs_ngModelPreLink_1130_,u'post':PyJs_ngModelPostLink_1133_})
            return PyJs_Object_1129_
        PyJs_ngModelCompile_1128_._set_name(u'ngModelCompile')
        PyJs_Object_1127_ = Js({u'restrict':Js(u'A'),u'require':Js([Js(u'ngModel'), Js(u'^?form'), Js(u'^?ngModelOptions')]),u'controller':var.get(u'NgModelController'),u'priority':Js(1.0),u'compile':PyJs_ngModelCompile_1128_})
        return PyJs_Object_1127_
    PyJs_anonymous_1126_._set_name(u'anonymous')
    var.put(u'ngModelDirective', Js([Js(u'$rootScope'), PyJs_anonymous_1126_]))
    var.put(u'DEFAULT_REGEXP', JsRegExp(u'/(\\s+|^)default(\\s+|$)/'))
    @Js
    def PyJs_anonymous_1136_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_1138_(PyJsArg_2473636f7065_, PyJsArg_246174747273_, this, arguments, var=var):
            var = Scope({u'this':this, u'$attrs':PyJsArg_246174747273_, u'arguments':arguments, u'$scope':PyJsArg_2473636f7065_}, var)
            var.registers([u'$attrs', u'$scope', u'that'])
            var.put(u'that', var.get(u"this"))
            var.get(u"this").put(u'$options', var.get(u'copy')(var.get(u'$scope').callprop(u'$eval', var.get(u'$attrs').get(u'ngModelOptions'))))
            if var.get(u'isDefined')(var.get(u"this").get(u'$options').get(u'updateOn')):
                var.get(u"this").get(u'$options').put(u'updateOnDefault', Js(False))
                @Js
                def PyJs_anonymous_1139_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'that').get(u'$options').put(u'updateOnDefault', var.get(u'true'))
                    return Js(u' ')
                PyJs_anonymous_1139_._set_name(u'anonymous')
                var.get(u"this").get(u'$options').put(u'updateOn', var.get(u'trim')(var.get(u"this").get(u'$options').get(u'updateOn').callprop(u'replace', var.get(u'DEFAULT_REGEXP'), PyJs_anonymous_1139_)))
            else:
                var.get(u"this").get(u'$options').put(u'updateOnDefault', var.get(u'true'))
        PyJs_anonymous_1138_._set_name(u'anonymous')
        PyJs_Object_1137_ = Js({u'restrict':Js(u'A'),u'controller':Js([Js(u'$scope'), Js(u'$attrs'), PyJs_anonymous_1138_])})
        return PyJs_Object_1137_
    PyJs_anonymous_1136_._set_name(u'anonymous')
    var.put(u'ngModelOptionsDirective', PyJs_anonymous_1136_)
    pass
    pass
    PyJs_Object_1142_ = Js({u'terminal':var.get(u'true'),u'priority':Js(1000.0)})
    var.put(u'ngNonBindableDirective', var.get(u'ngDirective')(PyJs_Object_1142_))
    var.put(u'ngOptionsMinErr', var.get(u'minErr')(Js(u'ngOptions')))
    var.put(u'NG_OPTIONS_REGEXP', JsRegExp(u'/^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?(?:\\s+disable\\s+when\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/'))
    @Js
    def PyJs_anonymous_1143_(PyJsArg_24636f6d70696c65_, PyJsArg_247061727365_, this, arguments, var=var):
        var = Scope({u'this':this, u'$compile':PyJsArg_24636f6d70696c65_, u'arguments':arguments, u'$parse':PyJsArg_247061727365_}, var)
        var.registers([u'$compile', u'ngOptionsPostLink', u'parseOptionsExpression', u'optionTemplate', u'optGroupTemplate', u'$parse'])
        @Js
        def PyJsHoisted_parseOptionsExpression_(optionsExp, selectElement, scope, this, arguments, var=var):
            var = Scope({u'this':this, u'optionsExp':optionsExp, u'selectElement':selectElement, u'arguments':arguments, u'scope':scope}, var)
            var.registers([u'selectElement', u'optionsExp', u'keyName', u'locals', u'displayFn', u'selectAs', u'getOptionValuesKeys', u'Option', u'disableWhenFn', u'valueName', u'scope', u'getLocals', u'match', u'viewValueFn', u'getTrackByValueFn', u'valuesFn', u'getTrackByValue', u'selectAsFn', u'trackBy', u'trackByFn', u'valueFn', u'groupByFn'])
            @Js
            def PyJsHoisted_getOptionValuesKeys_(optionValues, this, arguments, var=var):
                var = Scope({u'this':this, u'optionValues':optionValues, u'arguments':arguments}, var)
                var.registers([u'optionValues', u'optionValuesKeys', u'itemKey'])
                pass
                if (var.get(u'keyName').neg() and var.get(u'isArrayLike')(var.get(u'optionValues'))):
                    var.put(u'optionValuesKeys', var.get(u'optionValues'))
                else:
                    var.put(u'optionValuesKeys', Js([]))
                    for PyJsTemp in var.get(u'optionValues'):
                        var.put(u'itemKey', PyJsTemp)
                        if (var.get(u'optionValues').callprop(u'hasOwnProperty', var.get(u'itemKey')) and PyJsStrictNeq(var.get(u'itemKey').callprop(u'charAt', Js(0.0)),Js(u'$'))):
                            var.get(u'optionValuesKeys').callprop(u'push', var.get(u'itemKey'))
                return var.get(u'optionValuesKeys')
            PyJsHoisted_getOptionValuesKeys_.func_name = u'getOptionValuesKeys'
            var.put(u'getOptionValuesKeys', PyJsHoisted_getOptionValuesKeys_)
            @Js
            def PyJsHoisted_Option_(selectValue, viewValue, label, group, disabled, this, arguments, var=var):
                var = Scope({u'disabled':disabled, u'this':this, u'viewValue':viewValue, u'group':group, u'arguments':arguments, u'selectValue':selectValue, u'label':label}, var)
                var.registers([u'selectValue', u'disabled', u'viewValue', u'group', u'label'])
                var.get(u"this").put(u'selectValue', var.get(u'selectValue'))
                var.get(u"this").put(u'viewValue', var.get(u'viewValue'))
                var.get(u"this").put(u'label', var.get(u'label'))
                var.get(u"this").put(u'group', var.get(u'group'))
                var.get(u"this").put(u'disabled', var.get(u'disabled'))
            PyJsHoisted_Option_.func_name = u'Option'
            var.put(u'Option', PyJsHoisted_Option_)
            var.put(u'match', var.get(u'optionsExp').callprop(u'match', var.get(u'NG_OPTIONS_REGEXP')))
            if var.get(u'match').neg():
                PyJsTempException = JsToPyException(var.get(u'ngOptionsMinErr')(Js(u'iexp'), ((Js(u'Expected expression in form of ')+Js(u"'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'"))+Js(u" but got '{0}'. Element: {1}")), var.get(u'optionsExp'), var.get(u'startingTag')(var.get(u'selectElement'))))
                raise PyJsTempException
            var.put(u'valueName', (var.get(u'match').get(u'5') or var.get(u'match').get(u'7')))
            var.put(u'keyName', var.get(u'match').get(u'6'))
            var.put(u'selectAs', (JsRegExp(u'/ as /').callprop(u'test', var.get(u'match').get(u'0')) and var.get(u'match').get(u'1')))
            var.put(u'trackBy', var.get(u'match').get(u'9'))
            var.put(u'valueFn', var.get(u'$parse')((var.get(u'match').get(u'1') if var.get(u'match').get(u'2') else var.get(u'valueName'))))
            var.put(u'selectAsFn', (var.get(u'selectAs') and var.get(u'$parse')(var.get(u'selectAs'))))
            var.put(u'viewValueFn', (var.get(u'selectAsFn') or var.get(u'valueFn')))
            var.put(u'trackByFn', (var.get(u'trackBy') and var.get(u'$parse')(var.get(u'trackBy'))))
            @Js
            def PyJs_anonymous_1144_(value, locals, this, arguments, var=var):
                var = Scope({u'this':this, u'locals':locals, u'value':value, u'arguments':arguments}, var)
                var.registers([u'locals', u'value'])
                return var.get(u'trackByFn')(var.get(u'scope'), var.get(u'locals'))
            PyJs_anonymous_1144_._set_name(u'anonymous')
            @Js
            def PyJs_getHashOfValue_1145_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'getHashOfValue':PyJs_getHashOfValue_1145_, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                return var.get(u'hashKey')(var.get(u'value'))
            PyJs_getHashOfValue_1145_._set_name(u'getHashOfValue')
            var.put(u'getTrackByValueFn', (PyJs_anonymous_1144_ if var.get(u'trackBy') else PyJs_getHashOfValue_1145_))
            @Js
            def PyJs_anonymous_1146_(value, key, this, arguments, var=var):
                var = Scope({u'this':this, u'key':key, u'value':value, u'arguments':arguments}, var)
                var.registers([u'key', u'value'])
                return var.get(u'getTrackByValueFn')(var.get(u'value'), var.get(u'getLocals')(var.get(u'value'), var.get(u'key')))
            PyJs_anonymous_1146_._set_name(u'anonymous')
            var.put(u'getTrackByValue', PyJs_anonymous_1146_)
            var.put(u'displayFn', var.get(u'$parse')((var.get(u'match').get(u'2') or var.get(u'match').get(u'1'))))
            var.put(u'groupByFn', var.get(u'$parse')((var.get(u'match').get(u'3') or Js(u''))))
            var.put(u'disableWhenFn', var.get(u'$parse')((var.get(u'match').get(u'4') or Js(u''))))
            var.put(u'valuesFn', var.get(u'$parse')(var.get(u'match').get(u'8')))
            PyJs_Object_1147_ = Js({})
            var.put(u'locals', PyJs_Object_1147_)
            @Js
            def PyJs_anonymous_1148_(value, key, this, arguments, var=var):
                var = Scope({u'this':this, u'key':key, u'value':value, u'arguments':arguments}, var)
                var.registers([u'key', u'value'])
                var.get(u'locals').put(var.get(u'keyName'), var.get(u'key'))
                var.get(u'locals').put(var.get(u'valueName'), var.get(u'value'))
                return var.get(u'locals')
            PyJs_anonymous_1148_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_1149_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                var.get(u'locals').put(var.get(u'valueName'), var.get(u'value'))
                return var.get(u'locals')
            PyJs_anonymous_1149_._set_name(u'anonymous')
            var.put(u'getLocals', (PyJs_anonymous_1148_ if var.get(u'keyName') else PyJs_anonymous_1149_))
            pass
            pass
            @Js
            def PyJs_anonymous_1151_(optionValues, this, arguments, var=var):
                var = Scope({u'this':this, u'optionValues':optionValues, u'arguments':arguments}, var)
                var.registers([u'index', u'watchedArray', u'optionValuesLength', u'selectValue', u'optionValues', u'value', u'label', u'key', u'disableWhen', u'locals', u'optionValuesKeys'])
                var.put(u'watchedArray', Js([]))
                var.put(u'optionValues', (var.get(u'optionValues') or Js([])))
                var.put(u'optionValuesKeys', var.get(u'getOptionValuesKeys')(var.get(u'optionValues')))
                var.put(u'optionValuesLength', var.get(u'optionValuesKeys').get(u'length'))
                #for JS loop
                var.put(u'index', Js(0.0))
                while (var.get(u'index')<var.get(u'optionValuesLength')):
                    try:
                        var.put(u'key', (var.get(u'index') if PyJsStrictEq(var.get(u'optionValues'),var.get(u'optionValuesKeys')) else var.get(u'optionValuesKeys').get(var.get(u'index'))))
                        var.put(u'value', var.get(u'optionValues').get(var.get(u'key')))
                        var.put(u'locals', var.get(u'getLocals')(var.get(u'optionValues').get(var.get(u'key')), var.get(u'key')))
                        var.put(u'selectValue', var.get(u'getTrackByValueFn')(var.get(u'optionValues').get(var.get(u'key')), var.get(u'locals')))
                        var.get(u'watchedArray').callprop(u'push', var.get(u'selectValue'))
                        if (var.get(u'match').get(u'2') or var.get(u'match').get(u'1')):
                            var.put(u'label', var.get(u'displayFn')(var.get(u'scope'), var.get(u'locals')))
                            var.get(u'watchedArray').callprop(u'push', var.get(u'label'))
                        if var.get(u'match').get(u'4'):
                            var.put(u'disableWhen', var.get(u'disableWhenFn')(var.get(u'scope'), var.get(u'locals')))
                            var.get(u'watchedArray').callprop(u'push', var.get(u'disableWhen'))
                    finally:
                            (var.put(u'index',var.get(u'index')+Js(1))-Js(1))
                return var.get(u'watchedArray')
            PyJs_anonymous_1151_._set_name(u'anonymous')
            @Js
            def PyJs_anonymous_1152_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'index', u'viewValue', u'group', u'optionValuesKeys', u'optionValuesLength', u'selectValue', u'optionValues', u'optionItems', u'optionItem', u'value', u'label', u'disabled', u'key', u'selectValueMap', u'locals'])
                var.put(u'optionItems', Js([]))
                PyJs_Object_1153_ = Js({})
                var.put(u'selectValueMap', PyJs_Object_1153_)
                var.put(u'optionValues', (var.get(u'valuesFn')(var.get(u'scope')) or Js([])))
                var.put(u'optionValuesKeys', var.get(u'getOptionValuesKeys')(var.get(u'optionValues')))
                var.put(u'optionValuesLength', var.get(u'optionValuesKeys').get(u'length'))
                #for JS loop
                var.put(u'index', Js(0.0))
                while (var.get(u'index')<var.get(u'optionValuesLength')):
                    try:
                        var.put(u'key', (var.get(u'index') if PyJsStrictEq(var.get(u'optionValues'),var.get(u'optionValuesKeys')) else var.get(u'optionValuesKeys').get(var.get(u'index'))))
                        var.put(u'value', var.get(u'optionValues').get(var.get(u'key')))
                        var.put(u'locals', var.get(u'getLocals')(var.get(u'value'), var.get(u'key')))
                        var.put(u'viewValue', var.get(u'viewValueFn')(var.get(u'scope'), var.get(u'locals')))
                        var.put(u'selectValue', var.get(u'getTrackByValueFn')(var.get(u'viewValue'), var.get(u'locals')))
                        var.put(u'label', var.get(u'displayFn')(var.get(u'scope'), var.get(u'locals')))
                        var.put(u'group', var.get(u'groupByFn')(var.get(u'scope'), var.get(u'locals')))
                        var.put(u'disabled', var.get(u'disableWhenFn')(var.get(u'scope'), var.get(u'locals')))
                        var.put(u'optionItem', var.get(u'Option').create(var.get(u'selectValue'), var.get(u'viewValue'), var.get(u'label'), var.get(u'group'), var.get(u'disabled')))
                        var.get(u'optionItems').callprop(u'push', var.get(u'optionItem'))
                        var.get(u'selectValueMap').put(var.get(u'selectValue'), var.get(u'optionItem'))
                    finally:
                            (var.put(u'index',var.get(u'index')+Js(1))-Js(1))
                @Js
                def PyJs_anonymous_1155_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    return var.get(u'selectValueMap').get(var.get(u'getTrackByValue')(var.get(u'value')))
                PyJs_anonymous_1155_._set_name(u'anonymous')
                @Js
                def PyJs_anonymous_1156_(option, this, arguments, var=var):
                    var = Scope({u'this':this, u'option':option, u'arguments':arguments}, var)
                    var.registers([u'option'])
                    return (var.get(u'angular').callprop(u'copy', var.get(u'option').get(u'viewValue')) if var.get(u'trackBy') else var.get(u'option').get(u'viewValue'))
                PyJs_anonymous_1156_._set_name(u'anonymous')
                PyJs_Object_1154_ = Js({u'items':var.get(u'optionItems'),u'selectValueMap':var.get(u'selectValueMap'),u'getOptionFromViewValue':PyJs_anonymous_1155_,u'getViewValueFromOption':PyJs_anonymous_1156_})
                return PyJs_Object_1154_
            PyJs_anonymous_1152_._set_name(u'anonymous')
            PyJs_Object_1150_ = Js({u'trackBy':var.get(u'trackBy'),u'getTrackByValue':var.get(u'getTrackByValue'),u'getWatchables':var.get(u'$parse')(var.get(u'valuesFn'), PyJs_anonymous_1151_),u'getOptions':PyJs_anonymous_1152_})
            return PyJs_Object_1150_
        PyJsHoisted_parseOptionsExpression_.func_name = u'parseOptionsExpression'
        var.put(u'parseOptionsExpression', PyJsHoisted_parseOptionsExpression_)
        @Js
        def PyJsHoisted_ngOptionsPostLink_(scope, selectElement, attr, ctrls, this, arguments, var=var):
            var = Scope({u'arguments':arguments, u'attr':attr, u'this':this, u'scope':scope, u'selectElement':selectElement, u'ctrls':ctrls}, var)
            var.registers([u'selectCtrl', u'unknownOption', u'removeExcessElements', u'selectElement', u'ii', u'ngModelCtrl', u'ngOptions', u'removeEmptyOption', u'children', u'updateOptions', u'skipEmptyAndUnknownOptions', u'providedEmptyOption', u'renderUnknownOption', u'scope', u'updateOptionElement', u'ctrls', u'multiple', u'emptyOption', u'renderEmptyOption', u'addOrReuseElement', u'attr', u'i', u'options', u'removeUnknownOption'])
            @Js
            def PyJsHoisted_skipEmptyAndUnknownOptions_(current, this, arguments, var=var):
                var = Scope({u'current':current, u'this':this, u'arguments':arguments}, var)
                var.registers([u'current', u'emptyOption_', u'unknownOption_'])
                var.put(u'emptyOption_', (var.get(u'emptyOption') and var.get(u'emptyOption').get(u'0')))
                var.put(u'unknownOption_', (var.get(u'unknownOption') and var.get(u'unknownOption').get(u'0')))
                if (var.get(u'emptyOption_') or var.get(u'unknownOption_')):
                    while (var.get(u'current') and (((PyJsStrictEq(var.get(u'current'),var.get(u'emptyOption_')) or PyJsStrictEq(var.get(u'current'),var.get(u'unknownOption_'))) or PyJsStrictEq(var.get(u'current').get(u'nodeType'),var.get(u'NODE_TYPE_COMMENT'))) or PyJsStrictEq(var.get(u'current').get(u'value'),Js(u'')))):
                        var.put(u'current', var.get(u'current').get(u'nextSibling'))
                return var.get(u'current')
            PyJsHoisted_skipEmptyAndUnknownOptions_.func_name = u'skipEmptyAndUnknownOptions'
            var.put(u'skipEmptyAndUnknownOptions', PyJsHoisted_skipEmptyAndUnknownOptions_)
            @Js
            def PyJsHoisted_removeExcessElements_(current, this, arguments, var=var):
                var = Scope({u'current':current, u'this':this, u'arguments':arguments}, var)
                var.registers([u'current', u'next'])
                pass
                while var.get(u'current'):
                    var.put(u'next', var.get(u'current').get(u'nextSibling'))
                    var.get(u'jqLiteRemove')(var.get(u'current'))
                    var.put(u'current', var.get(u'next'))
            PyJsHoisted_removeExcessElements_.func_name = u'removeExcessElements'
            var.put(u'removeExcessElements', PyJsHoisted_removeExcessElements_)
            @Js
            def PyJsHoisted_updateOptionElement_(option, element, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'option':option, u'element':element}, var)
                var.registers([u'option', u'element'])
                var.get(u'option').put(u'element', var.get(u'element'))
                var.get(u'element').put(u'disabled', var.get(u'option').get(u'disabled'))
                if PyJsStrictNeq(var.get(u'option').get(u'label'),var.get(u'element').get(u'label')):
                    var.get(u'element').put(u'label', var.get(u'option').get(u'label'))
                    var.get(u'element').put(u'textContent', var.get(u'option').get(u'label'))
                if PyJsStrictNeq(var.get(u'option').get(u'value'),var.get(u'element').get(u'value')):
                    var.get(u'element').put(u'value', var.get(u'option').get(u'selectValue'))
            PyJsHoisted_updateOptionElement_.func_name = u'updateOptionElement'
            var.put(u'updateOptionElement', PyJsHoisted_updateOptionElement_)
            @Js
            def PyJsHoisted_addOrReuseElement_(parent, current, type, templateElement, this, arguments, var=var):
                var = Scope({u'current':current, u'arguments':arguments, u'parent':parent, u'this':this, u'templateElement':templateElement, u'type':type}, var)
                var.registers([u'current', u'templateElement', u'type', u'parent', u'element'])
                pass
                if (var.get(u'current') and PyJsStrictEq(var.get(u'lowercase')(var.get(u'current').get(u'nodeName')),var.get(u'type'))):
                    var.put(u'element', var.get(u'current'))
                else:
                    var.put(u'element', var.get(u'templateElement').callprop(u'cloneNode', Js(False)))
                    if var.get(u'current').neg():
                        var.get(u'parent').callprop(u'appendChild', var.get(u'element'))
                    else:
                        var.get(u'parent').callprop(u'insertBefore', var.get(u'element'), var.get(u'current'))
                return var.get(u'element')
            PyJsHoisted_addOrReuseElement_.func_name = u'addOrReuseElement'
            var.put(u'addOrReuseElement', PyJsHoisted_addOrReuseElement_)
            @Js
            def PyJsHoisted_updateOptions_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'groupMap', u'currentElement', u'previousValue', u'nextValue'])
                var.put(u'previousValue', (var.get(u'options') and var.get(u'selectCtrl').callprop(u'readValue')))
                var.put(u'options', var.get(u'ngOptions').callprop(u'getOptions'))
                PyJs_Object_1174_ = Js({})
                var.put(u'groupMap', PyJs_Object_1174_)
                var.put(u'currentElement', var.get(u'selectElement').get(u'0').get(u'firstChild'))
                if var.get(u'providedEmptyOption'):
                    var.get(u'selectElement').callprop(u'prepend', var.get(u'emptyOption'))
                var.put(u'currentElement', var.get(u'skipEmptyAndUnknownOptions')(var.get(u'currentElement')))
                @Js
                def PyJs_updateOption_1175_(option, this, arguments, var=var):
                    var = Scope({u'this':this, u'updateOption':PyJs_updateOption_1175_, u'option':option, u'arguments':arguments}, var)
                    var.registers([u'optionElement', u'groupElement', u'group', u'option'])
                    pass
                    pass
                    pass
                    if var.get(u'option').get(u'group'):
                        var.put(u'group', var.get(u'groupMap').get(var.get(u'option').get(u'group')))
                        if var.get(u'group').neg():
                            var.put(u'groupElement', var.get(u'addOrReuseElement')(var.get(u'selectElement').get(u'0'), var.get(u'currentElement'), Js(u'optgroup'), var.get(u'optGroupTemplate')))
                            var.put(u'currentElement', var.get(u'groupElement').get(u'nextSibling'))
                            var.get(u'groupElement').put(u'label', var.get(u'option').get(u'group'))
                            PyJs_Object_1176_ = Js({u'groupElement':var.get(u'groupElement'),u'currentOptionElement':var.get(u'groupElement').get(u'firstChild')})
                            var.put(u'group', var.get(u'groupMap').put(var.get(u'option').get(u'group'), PyJs_Object_1176_))
                        var.put(u'optionElement', var.get(u'addOrReuseElement')(var.get(u'group').get(u'groupElement'), var.get(u'group').get(u'currentOptionElement'), Js(u'option'), var.get(u'optionTemplate')))
                        var.get(u'updateOptionElement')(var.get(u'option'), var.get(u'optionElement'))
                        var.get(u'group').put(u'currentOptionElement', var.get(u'optionElement').get(u'nextSibling'))
                    else:
                        var.put(u'optionElement', var.get(u'addOrReuseElement')(var.get(u'selectElement').get(u'0'), var.get(u'currentElement'), Js(u'option'), var.get(u'optionTemplate')))
                        var.get(u'updateOptionElement')(var.get(u'option'), var.get(u'optionElement'))
                        var.put(u'currentElement', var.get(u'optionElement').get(u'nextSibling'))
                PyJs_updateOption_1175_._set_name(u'updateOption')
                var.get(u'options').get(u'items').callprop(u'forEach', PyJs_updateOption_1175_)
                @Js
                def PyJs_anonymous_1177_(key, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'key':key}, var)
                    var.registers([u'key'])
                    var.get(u'removeExcessElements')(var.get(u'groupMap').get(var.get(u'key')).get(u'currentOptionElement'))
                PyJs_anonymous_1177_._set_name(u'anonymous')
                var.get(u'Object').callprop(u'keys', var.get(u'groupMap')).callprop(u'forEach', PyJs_anonymous_1177_)
                var.get(u'removeExcessElements')(var.get(u'currentElement'))
                var.get(u'ngModelCtrl').callprop(u'$render')
                if var.get(u'ngModelCtrl').callprop(u'$isEmpty', var.get(u'previousValue')).neg():
                    var.put(u'nextValue', var.get(u'selectCtrl').callprop(u'readValue'))
                    if (var.get(u'equals')(var.get(u'previousValue'), var.get(u'nextValue')).neg() if var.get(u'ngOptions').get(u'trackBy') else PyJsStrictNeq(var.get(u'previousValue'),var.get(u'nextValue'))):
                        var.get(u'ngModelCtrl').callprop(u'$setViewValue', var.get(u'nextValue'))
                        var.get(u'ngModelCtrl').callprop(u'$render')
            PyJsHoisted_updateOptions_.func_name = u'updateOptions'
            var.put(u'updateOptions', PyJsHoisted_updateOptions_)
            var.put(u'ngModelCtrl', var.get(u'ctrls').get(u'1'))
            if var.get(u'ngModelCtrl').neg():
                return var.get('undefined')
            var.put(u'selectCtrl', var.get(u'ctrls').get(u'0'))
            var.put(u'multiple', var.get(u'attr').get(u'multiple'))
            pass
            #for JS loop
            var.put(u'i', Js(0.0))
            var.put(u'children', var.get(u'selectElement').callprop(u'children'))
            var.put(u'ii', var.get(u'children').get(u'length'))
            while (var.get(u'i')<var.get(u'ii')):
                try:
                    if PyJsStrictEq(var.get(u'children').get(var.get(u'i')).get(u'value'),Js(u'')):
                        var.put(u'emptyOption', var.get(u'children').callprop(u'eq', var.get(u'i')))
                        break
                finally:
                        (var.put(u'i',var.get(u'i')+Js(1))-Js(1))
            var.put(u'providedEmptyOption', var.get(u'emptyOption').neg().neg())
            var.put(u'unknownOption', var.get(u'jqLite')(var.get(u'optionTemplate').callprop(u'cloneNode', Js(False))))
            var.get(u'unknownOption').callprop(u'val', Js(u'?'))
            pass
            var.put(u'ngOptions', var.get(u'parseOptionsExpression')(var.get(u'attr').get(u'ngOptions'), var.get(u'selectElement'), var.get(u'scope')))
            @Js
            def PyJs_anonymous_1157_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                if var.get(u'providedEmptyOption').neg():
                    var.get(u'selectElement').callprop(u'prepend', var.get(u'emptyOption'))
                var.get(u'selectElement').callprop(u'val', Js(u''))
                var.get(u'emptyOption').callprop(u'prop', Js(u'selected'), var.get(u'true'))
                var.get(u'emptyOption').callprop(u'attr', Js(u'selected'), var.get(u'true'))
            PyJs_anonymous_1157_._set_name(u'anonymous')
            var.put(u'renderEmptyOption', PyJs_anonymous_1157_)
            @Js
            def PyJs_anonymous_1158_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                if var.get(u'providedEmptyOption').neg():
                    var.get(u'emptyOption').callprop(u'remove')
            PyJs_anonymous_1158_._set_name(u'anonymous')
            var.put(u'removeEmptyOption', PyJs_anonymous_1158_)
            @Js
            def PyJs_anonymous_1159_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                var.get(u'selectElement').callprop(u'prepend', var.get(u'unknownOption'))
                var.get(u'selectElement').callprop(u'val', Js(u'?'))
                var.get(u'unknownOption').callprop(u'prop', Js(u'selected'), var.get(u'true'))
                var.get(u'unknownOption').callprop(u'attr', Js(u'selected'), var.get(u'true'))
            PyJs_anonymous_1159_._set_name(u'anonymous')
            var.put(u'renderUnknownOption', PyJs_anonymous_1159_)
            @Js
            def PyJs_anonymous_1160_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                var.get(u'unknownOption').callprop(u'remove')
            PyJs_anonymous_1160_._set_name(u'anonymous')
            var.put(u'removeUnknownOption', PyJs_anonymous_1160_)
            if var.get(u'multiple').neg():
                @Js
                def PyJs_writeNgOptionsValue_1161_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'writeNgOptionsValue':PyJs_writeNgOptionsValue_1161_, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'option', u'value'])
                    var.put(u'option', var.get(u'options').callprop(u'getOptionFromViewValue', var.get(u'value')))
                    if (var.get(u'option') and var.get(u'option').get(u'disabled').neg()):
                        if PyJsStrictNeq(var.get(u'selectElement').get(u'0').get(u'value'),var.get(u'option').get(u'selectValue')):
                            var.get(u'removeUnknownOption')()
                            var.get(u'removeEmptyOption')()
                            var.get(u'selectElement').get(u'0').put(u'value', var.get(u'option').get(u'selectValue'))
                            var.get(u'option').get(u'element').put(u'selected', var.get(u'true'))
                            var.get(u'option').get(u'element').callprop(u'setAttribute', Js(u'selected'), Js(u'selected'))
                    else:
                        if (PyJsStrictEq(var.get(u'value'),var.get(u"null")) or var.get(u'providedEmptyOption')):
                            var.get(u'removeUnknownOption')()
                            var.get(u'renderEmptyOption')()
                        else:
                            var.get(u'removeEmptyOption')()
                            var.get(u'renderUnknownOption')()
                PyJs_writeNgOptionsValue_1161_._set_name(u'writeNgOptionsValue')
                var.get(u'selectCtrl').put(u'writeValue', PyJs_writeNgOptionsValue_1161_)
                @Js
                def PyJs_readNgOptionsValue_1162_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'readNgOptionsValue':PyJs_readNgOptionsValue_1162_}, var)
                    var.registers([u'selectedOption'])
                    var.put(u'selectedOption', var.get(u'options').get(u'selectValueMap').get(var.get(u'selectElement').callprop(u'val')))
                    if (var.get(u'selectedOption') and var.get(u'selectedOption').get(u'disabled').neg()):
                        var.get(u'removeEmptyOption')()
                        var.get(u'removeUnknownOption')()
                        return var.get(u'options').callprop(u'getViewValueFromOption', var.get(u'selectedOption'))
                    return var.get(u"null")
                PyJs_readNgOptionsValue_1162_._set_name(u'readNgOptionsValue')
                var.get(u'selectCtrl').put(u'readValue', PyJs_readNgOptionsValue_1162_)
                if var.get(u'ngOptions').get(u'trackBy'):
                    @Js
                    def PyJs_anonymous_1163_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u'ngOptions').callprop(u'getTrackByValue', var.get(u'ngModelCtrl').get(u'$viewValue'))
                    PyJs_anonymous_1163_._set_name(u'anonymous')
                    @Js
                    def PyJs_anonymous_1164_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        var.get(u'ngModelCtrl').callprop(u'$render')
                    PyJs_anonymous_1164_._set_name(u'anonymous')
                    var.get(u'scope').callprop(u'$watch', PyJs_anonymous_1163_, PyJs_anonymous_1164_)
            else:
                @Js
                def PyJs_anonymous_1165_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    return (var.get(u'value').neg() or PyJsStrictEq(var.get(u'value').get(u'length'),Js(0.0)))
                PyJs_anonymous_1165_._set_name(u'anonymous')
                var.get(u'ngModelCtrl').put(u'$isEmpty', PyJs_anonymous_1165_)
                @Js
                def PyJs_writeNgOptionsMultiple_1166_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'writeNgOptionsMultiple':PyJs_writeNgOptionsMultiple_1166_, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    @Js
                    def PyJs_anonymous_1167_(option, this, arguments, var=var):
                        var = Scope({u'this':this, u'option':option, u'arguments':arguments}, var)
                        var.registers([u'option'])
                        var.get(u'option').get(u'element').put(u'selected', Js(False))
                    PyJs_anonymous_1167_._set_name(u'anonymous')
                    var.get(u'options').get(u'items').callprop(u'forEach', PyJs_anonymous_1167_)
                    if var.get(u'value'):
                        @Js
                        def PyJs_anonymous_1168_(item, this, arguments, var=var):
                            var = Scope({u'this':this, u'item':item, u'arguments':arguments}, var)
                            var.registers([u'item', u'option'])
                            var.put(u'option', var.get(u'options').callprop(u'getOptionFromViewValue', var.get(u'item')))
                            if (var.get(u'option') and var.get(u'option').get(u'disabled').neg()):
                                var.get(u'option').get(u'element').put(u'selected', var.get(u'true'))
                        PyJs_anonymous_1168_._set_name(u'anonymous')
                        var.get(u'value').callprop(u'forEach', PyJs_anonymous_1168_)
                PyJs_writeNgOptionsMultiple_1166_._set_name(u'writeNgOptionsMultiple')
                var.get(u'selectCtrl').put(u'writeValue', PyJs_writeNgOptionsMultiple_1166_)
                @Js
                def PyJs_readNgOptionsMultiple_1169_(this, arguments, var=var):
                    var = Scope({u'this':this, u'readNgOptionsMultiple':PyJs_readNgOptionsMultiple_1169_, u'arguments':arguments}, var)
                    var.registers([u'selectedValues', u'selections'])
                    var.put(u'selectedValues', (var.get(u'selectElement').callprop(u'val') or Js([])))
                    var.put(u'selections', Js([]))
                    @Js
                    def PyJs_anonymous_1170_(value, this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                        var.registers([u'option', u'value'])
                        var.put(u'option', var.get(u'options').get(u'selectValueMap').get(var.get(u'value')))
                        if (var.get(u'option') and var.get(u'option').get(u'disabled').neg()):
                            var.get(u'selections').callprop(u'push', var.get(u'options').callprop(u'getViewValueFromOption', var.get(u'option')))
                    PyJs_anonymous_1170_._set_name(u'anonymous')
                    var.get(u'forEach')(var.get(u'selectedValues'), PyJs_anonymous_1170_)
                    return var.get(u'selections')
                PyJs_readNgOptionsMultiple_1169_._set_name(u'readNgOptionsMultiple')
                var.get(u'selectCtrl').put(u'readValue', PyJs_readNgOptionsMultiple_1169_)
                if var.get(u'ngOptions').get(u'trackBy'):
                    @Js
                    def PyJs_anonymous_1171_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        if var.get(u'isArray')(var.get(u'ngModelCtrl').get(u'$viewValue')):
                            @Js
                            def PyJs_anonymous_1172_(value, this, arguments, var=var):
                                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                                var.registers([u'value'])
                                return var.get(u'ngOptions').callprop(u'getTrackByValue', var.get(u'value'))
                            PyJs_anonymous_1172_._set_name(u'anonymous')
                            return var.get(u'ngModelCtrl').get(u'$viewValue').callprop(u'map', PyJs_anonymous_1172_)
                    PyJs_anonymous_1171_._set_name(u'anonymous')
                    @Js
                    def PyJs_anonymous_1173_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        var.get(u'ngModelCtrl').callprop(u'$render')
                    PyJs_anonymous_1173_._set_name(u'anonymous')
                    var.get(u'scope').callprop(u'$watchCollection', PyJs_anonymous_1171_, PyJs_anonymous_1173_)
            if var.get(u'providedEmptyOption'):
                var.get(u'emptyOption').callprop(u'remove')
                var.get(u'$compile')(var.get(u'emptyOption'))(var.get(u'scope'))
                var.get(u'emptyOption').callprop(u'removeClass', Js(u'ng-scope'))
            else:
                var.put(u'emptyOption', var.get(u'jqLite')(var.get(u'optionTemplate').callprop(u'cloneNode', Js(False))))
            var.get(u'updateOptions')()
            var.get(u'scope').callprop(u'$watchCollection', var.get(u'ngOptions').get(u'getWatchables'), var.get(u'updateOptions'))
            pass
            pass
            pass
            pass
            pass
        PyJsHoisted_ngOptionsPostLink_.func_name = u'ngOptionsPostLink'
        var.put(u'ngOptionsPostLink', PyJsHoisted_ngOptionsPostLink_)
        pass
        var.put(u'optionTemplate', var.get(u'document').callprop(u'createElement', Js(u'option')))
        var.put(u'optGroupTemplate', var.get(u'document').callprop(u'createElement', Js(u'optgroup')))
        pass
        @Js
        def PyJs_ngOptionsPreLink_1180_(scope, selectElement, attr, ctrls, this, arguments, var=var):
            var = Scope({u'arguments':arguments, u'ngOptionsPreLink':PyJs_ngOptionsPreLink_1180_, u'attr':attr, u'this':this, u'scope':scope, u'selectElement':selectElement, u'ctrls':ctrls}, var)
            var.registers([u'scope', u'ctrls', u'selectElement', u'attr'])
            var.get(u'ctrls').get(u'0').put(u'registerOption', var.get(u'noop'))
        PyJs_ngOptionsPreLink_1180_._set_name(u'ngOptionsPreLink')
        PyJs_Object_1179_ = Js({u'pre':PyJs_ngOptionsPreLink_1180_,u'post':var.get(u'ngOptionsPostLink')})
        PyJs_Object_1178_ = Js({u'restrict':Js(u'A'),u'terminal':var.get(u'true'),u'require':Js([Js(u'select'), Js(u'?ngModel')]),u'link':PyJs_Object_1179_})
        return PyJs_Object_1178_
    PyJs_anonymous_1143_._set_name(u'anonymous')
    var.put(u'ngOptionsDirective', Js([Js(u'$compile'), Js(u'$parse'), PyJs_anonymous_1143_]))
    @Js
    def PyJs_anonymous_1181_(PyJsArg_246c6f63616c65_, PyJsArg_24696e746572706f6c617465_, PyJsArg_246c6f67_, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'$locale':PyJsArg_246c6f63616c65_, u'$log':PyJsArg_246c6f67_, u'$interpolate':PyJsArg_24696e746572706f6c617465_}, var)
        var.registers([u'IS_WHEN', u'BRACE', u'$locale', u'$log', u'$interpolate'])
        var.put(u'BRACE', JsRegExp(u'/{}/g'))
        var.put(u'IS_WHEN', JsRegExp(u'/^when(Minus)?(.+)$/'))
        @Js
        def PyJs_anonymous_1183_(scope, element, attr, this, arguments, var=var):
            var = Scope({u'this':this, u'scope':scope, u'attr':attr, u'arguments':arguments, u'element':element}, var)
            var.registers([u'whensExpFns', u'numberExp', u'attr', u'watchRemover', u'lastCount', u'updateElementText', u'whens', u'element', u'endSymbol', u'startSymbol', u'offset', u'scope', u'whenExp', u'braceReplacement'])
            @Js
            def PyJsHoisted_updateElementText_(newText, this, arguments, var=var):
                var = Scope({u'newText':newText, u'this':this, u'arguments':arguments}, var)
                var.registers([u'newText'])
                var.get(u'element').callprop(u'text', (var.get(u'newText') or Js(u'')))
            PyJsHoisted_updateElementText_.func_name = u'updateElementText'
            var.put(u'updateElementText', PyJsHoisted_updateElementText_)
            var.put(u'numberExp', var.get(u'attr').get(u'count'))
            var.put(u'whenExp', (var.get(u'attr').get(u'$attr').get(u'when') and var.get(u'element').callprop(u'attr', var.get(u'attr').get(u'$attr').get(u'when'))))
            var.put(u'offset', (var.get(u'attr').get(u'offset') or Js(0.0)))
            PyJs_Object_1184_ = Js({})
            var.put(u'whens', (var.get(u'scope').callprop(u'$eval', var.get(u'whenExp')) or PyJs_Object_1184_))
            PyJs_Object_1185_ = Js({})
            var.put(u'whensExpFns', PyJs_Object_1185_)
            var.put(u'startSymbol', var.get(u'$interpolate').callprop(u'startSymbol'))
            var.put(u'endSymbol', var.get(u'$interpolate').callprop(u'endSymbol'))
            var.put(u'braceReplacement', ((((var.get(u'startSymbol')+var.get(u'numberExp'))+Js(u'-'))+var.get(u'offset'))+var.get(u'endSymbol')))
            var.put(u'watchRemover', var.get(u'angular').get(u'noop'))
            @Js
            def PyJs_anonymous_1186_(expression, attributeName, this, arguments, var=var):
                var = Scope({u'this':this, u'attributeName':attributeName, u'expression':expression, u'arguments':arguments}, var)
                var.registers([u'attributeName', u'whenKey', u'expression', u'tmpMatch'])
                var.put(u'tmpMatch', var.get(u'IS_WHEN').callprop(u'exec', var.get(u'attributeName')))
                if var.get(u'tmpMatch'):
                    var.put(u'whenKey', ((Js(u'-') if var.get(u'tmpMatch').get(u'1') else Js(u''))+var.get(u'lowercase')(var.get(u'tmpMatch').get(u'2'))))
                    var.get(u'whens').put(var.get(u'whenKey'), var.get(u'element').callprop(u'attr', var.get(u'attr').get(u'$attr').get(var.get(u'attributeName'))))
            PyJs_anonymous_1186_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'attr'), PyJs_anonymous_1186_)
            @Js
            def PyJs_anonymous_1187_(expression, key, this, arguments, var=var):
                var = Scope({u'this':this, u'expression':expression, u'arguments':arguments, u'key':key}, var)
                var.registers([u'expression', u'key'])
                var.get(u'whensExpFns').put(var.get(u'key'), var.get(u'$interpolate')(var.get(u'expression').callprop(u'replace', var.get(u'BRACE'), var.get(u'braceReplacement'))))
            PyJs_anonymous_1187_._set_name(u'anonymous')
            var.get(u'forEach')(var.get(u'whens'), PyJs_anonymous_1187_)
            @Js
            def PyJs_ngPluralizeWatchAction_1188_(newVal, this, arguments, var=var):
                var = Scope({u'this':this, u'newVal':newVal, u'arguments':arguments, u'ngPluralizeWatchAction':PyJs_ngPluralizeWatchAction_1188_}, var)
                var.registers([u'count', u'newVal', u'whenExpFn', u'countIsNaN'])
                var.put(u'count', var.get(u'parseFloat')(var.get(u'newVal')))
                var.put(u'countIsNaN', var.get(u'isNaN')(var.get(u'count')))
                if (var.get(u'countIsNaN').neg() and var.get(u'whens').contains(var.get(u'count')).neg()):
                    var.put(u'count', var.get(u'$locale').callprop(u'pluralCat', (var.get(u'count')-var.get(u'offset'))))
                if (PyJsStrictNeq(var.get(u'count'),var.get(u'lastCount')) and ((var.get(u'countIsNaN') and var.get(u'isNumber')(var.get(u'lastCount'))) and var.get(u'isNaN')(var.get(u'lastCount'))).neg()):
                    var.get(u'watchRemover')()
                    var.put(u'whenExpFn', var.get(u'whensExpFns').get(var.get(u'count')))
                    if var.get(u'isUndefined')(var.get(u'whenExpFn')):
                        if (var.get(u'newVal')!=var.get(u"null")):
                            var.get(u'$log').callprop(u'debug', (((Js(u"ngPluralize: no rule defined for '")+var.get(u'count'))+Js(u"' in "))+var.get(u'whenExp')))
                        var.put(u'watchRemover', var.get(u'noop'))
                        var.get(u'updateElementText')()
                    else:
                        var.put(u'watchRemover', var.get(u'scope').callprop(u'$watch', var.get(u'whenExpFn'), var.get(u'updateElementText')))
                    var.put(u'lastCount', var.get(u'count'))
            PyJs_ngPluralizeWatchAction_1188_._set_name(u'ngPluralizeWatchAction')
            var.get(u'scope').callprop(u'$watch', var.get(u'numberExp'), PyJs_ngPluralizeWatchAction_1188_)
            pass
        PyJs_anonymous_1183_._set_name(u'anonymous')
        PyJs_Object_1182_ = Js({u'link':PyJs_anonymous_1183_})
        return PyJs_Object_1182_
    PyJs_anonymous_1181_._set_name(u'anonymous')
    var.put(u'ngPluralizeDirective', Js([Js(u'$locale'), Js(u'$interpolate'), Js(u'$log'), PyJs_anonymous_1181_]))
    @Js
    def PyJs_anonymous_1189_(PyJsArg_247061727365_, PyJsArg_24616e696d617465_, this, arguments, var=var):
        var = Scope({u'this':this, u'$animate':PyJsArg_24616e696d617465_, u'arguments':arguments, u'$parse':PyJsArg_247061727365_}, var)
        var.registers([u'$animate', u'getBlockEnd', u'ngRepeatMinErr', u'getBlockStart', u'updateScope', u'NG_REMOVED', u'$parse'])
        var.put(u'NG_REMOVED', Js(u'$$NG_REMOVED'))
        var.put(u'ngRepeatMinErr', var.get(u'minErr')(Js(u'ngRepeat')))
        @Js
        def PyJs_anonymous_1190_(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength, this, arguments, var=var):
            var = Scope({u'keyIdentifier':keyIdentifier, u'valueIdentifier':valueIdentifier, u'this':this, u'index':index, u'value':value, u'arrayLength':arrayLength, u'arguments':arguments, u'key':key, u'scope':scope}, var)
            var.registers([u'keyIdentifier', u'valueIdentifier', u'index', u'value', u'arrayLength', u'key', u'scope'])
            var.get(u'scope').put(var.get(u'valueIdentifier'), var.get(u'value'))
            if var.get(u'keyIdentifier'):
                var.get(u'scope').put(var.get(u'keyIdentifier'), var.get(u'key'))
            var.get(u'scope').put(u'$index', var.get(u'index'))
            var.get(u'scope').put(u'$first', PyJsStrictEq(var.get(u'index'),Js(0.0)))
            var.get(u'scope').put(u'$last', PyJsStrictEq(var.get(u'index'),(var.get(u'arrayLength')-Js(1.0))))
            var.get(u'scope').put(u'$middle', (var.get(u'scope').get(u'$first') or var.get(u'scope').get(u'$last')).neg())
            var.get(u'scope').put(u'$odd', var.get(u'scope').put(u'$even', PyJsStrictEq((var.get(u'index')&Js(1.0)),Js(0.0))).neg())
        PyJs_anonymous_1190_._set_name(u'anonymous')
        var.put(u'updateScope', PyJs_anonymous_1190_)
        @Js
        def PyJs_anonymous_1191_(block, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'block':block}, var)
            var.registers([u'block'])
            return var.get(u'block').get(u'clone').get(u'0')
        PyJs_anonymous_1191_._set_name(u'anonymous')
        var.put(u'getBlockStart', PyJs_anonymous_1191_)
        @Js
        def PyJs_anonymous_1192_(block, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'block':block}, var)
            var.registers([u'block'])
            return var.get(u'block').get(u'clone').get((var.get(u'block').get(u'clone').get(u'length')-Js(1.0)))
        PyJs_anonymous_1192_._set_name(u'anonymous')
        var.put(u'getBlockEnd', PyJs_anonymous_1192_)
        @Js
        def PyJs_ngRepeatCompile_1194_(PyJsArg_24656c656d656e74_, PyJsArg_2461747472_, this, arguments, var=var):
            var = Scope({u'$attr':PyJsArg_2461747472_, u'this':this, u'ngRepeatCompile':PyJs_ngRepeatCompile_1194_, u'$element':PyJsArg_24656c656d656e74_, u'arguments':arguments}, var)
            var.registers([u'trackByIdExpFn', u'valueIdentifier', u'aliasAs', u'$element', u'trackByIdObjFn', u'trackByExpGetter', u'keyIdentifier', u'ngRepeatEndComment', u'rhs', u'hashFnLocals', u'trackByIdArrayFn', u'lhs', u'$attr', u'expression', u'trackByExp', u'match'])
            var.put(u'expression', var.get(u'$attr').get(u'ngRepeat'))
            var.put(u'ngRepeatEndComment', var.get(u'document').callprop(u'createComment', ((Js(u' end ngRepeat: ')+var.get(u'expression'))+Js(u' '))))
            var.put(u'match', var.get(u'expression').callprop(u'match', JsRegExp(u'/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+track\\s+by\\s+([\\s\\S]+?))?\\s*$/')))
            if var.get(u'match').neg():
                PyJsTempException = JsToPyException(var.get(u'ngRepeatMinErr')(Js(u'iexp'), Js(u"Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'."), var.get(u'expression')))
                raise PyJsTempException
            var.put(u'lhs', var.get(u'match').get(u'1'))
            var.put(u'rhs', var.get(u'match').get(u'2'))
            var.put(u'aliasAs', var.get(u'match').get(u'3'))
            var.put(u'trackByExp', var.get(u'match').get(u'4'))
            var.put(u'match', var.get(u'lhs').callprop(u'match', JsRegExp(u'/^(?:(\\s*[\\$\\w]+)|\\(\\s*([\\$\\w]+)\\s*,\\s*([\\$\\w]+)\\s*\\))$/')))
            if var.get(u'match').neg():
                PyJsTempException = JsToPyException(var.get(u'ngRepeatMinErr')(Js(u'iidexp'), Js(u"'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'."), var.get(u'lhs')))
                raise PyJsTempException
            var.put(u'valueIdentifier', (var.get(u'match').get(u'3') or var.get(u'match').get(u'1')))
            var.put(u'keyIdentifier', var.get(u'match').get(u'2'))
            if (var.get(u'aliasAs') and (JsRegExp(u'/^[$a-zA-Z_][$a-zA-Z0-9_]*$/').callprop(u'test', var.get(u'aliasAs')).neg() or JsRegExp(u'/^(null|undefined|this|\\$index|\\$first|\\$middle|\\$last|\\$even|\\$odd|\\$parent|\\$root|\\$id)$/').callprop(u'test', var.get(u'aliasAs')))):
                PyJsTempException = JsToPyException(var.get(u'ngRepeatMinErr')(Js(u'badident'), Js(u"alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name."), var.get(u'aliasAs')))
                raise PyJsTempException
            pass
            PyJs_Object_1195_ = Js({u'$id':var.get(u'hashKey')})
            var.put(u'hashFnLocals', PyJs_Object_1195_)
            if var.get(u'trackByExp'):
                var.put(u'trackByExpGetter', var.get(u'$parse')(var.get(u'trackByExp')))
            else:
                @Js
                def PyJs_anonymous_1196_(key, value, this, arguments, var=var):
                    var = Scope({u'this':this, u'value':value, u'key':key, u'arguments':arguments}, var)
                    var.registers([u'value', u'key'])
                    return var.get(u'hashKey')(var.get(u'value'))
                PyJs_anonymous_1196_._set_name(u'anonymous')
                var.put(u'trackByIdArrayFn', PyJs_anonymous_1196_)
                @Js
                def PyJs_anonymous_1197_(key, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'key':key}, var)
                    var.registers([u'key'])
                    return var.get(u'key')
                PyJs_anonymous_1197_._set_name(u'anonymous')
                var.put(u'trackByIdObjFn', PyJs_anonymous_1197_)
            @Js
            def PyJs_ngRepeatLink_1198_(PyJsArg_2473636f7065_, PyJsArg_24656c656d656e74_, PyJsArg_2461747472_, ctrl, PyJsArg_247472616e73636c756465_, this, arguments, var=var):
                var = Scope({u'$attr':PyJsArg_2461747472_, u'$element':PyJsArg_24656c656d656e74_, u'arguments':arguments, u'$transclude':PyJsArg_247472616e73636c756465_, u'ctrl':ctrl, u'this':this, u'ngRepeatLink':PyJs_ngRepeatLink_1198_, u'$scope':PyJsArg_2473636f7065_}, var)
                var.registers([u'lastBlockMap', u'$element', u'$transclude', u'ctrl', u'$scope', u'$attr'])
                if var.get(u'trackByExpGetter'):
                    @Js
                    def PyJs_anonymous_1199_(key, value, index, this, arguments, var=var):
                        var = Scope({u'this':this, u'index':index, u'value':value, u'key':key, u'arguments':arguments}, var)
                        var.registers([u'index', u'value', u'key'])
                        if var.get(u'keyIdentifier'):
                            var.get(u'hashFnLocals').put(var.get(u'keyIdentifier'), var.get(u'key'))
                        var.get(u'hashFnLocals').put(var.get(u'valueIdentifier'), var.get(u'value'))
                        var.get(u'hashFnLocals').put(u'$index', var.get(u'index'))
                        return var.get(u'trackByExpGetter')(var.get(u'$scope'), var.get(u'hashFnLocals'))
                    PyJs_anonymous_1199_._set_name(u'anonymous')
                    var.put(u'trackByIdExpFn', PyJs_anonymous_1199_)
                var.put(u'lastBlockMap', var.get(u'createMap')())
                @Js
                def PyJs_ngRepeatAction_1200_(collection, this, arguments, var=var):
                    var = Scope({u'this':this, u'ngRepeatAction':PyJs_ngRepeatAction_1200_, u'arguments':arguments, u'collection':collection}, var)
                    var.registers([u'index', u'previousNode', u'collectionKeys', u'elementsToRemove', u'blockKey', u'nextNode', u'trackById', u'value', u'collectionLength', u'length', u'nextBlockOrder', u'block', u'key', u'collection', u'nextBlockMap', u'trackByIdFn', u'itemKey'])
                    var.put(u'previousNode', var.get(u'$element').get(u'0'))
                    var.put(u'nextBlockMap', var.get(u'createMap')())
                    if var.get(u'aliasAs'):
                        var.get(u'$scope').put(var.get(u'aliasAs'), var.get(u'collection'))
                    if var.get(u'isArrayLike')(var.get(u'collection')):
                        var.put(u'collectionKeys', var.get(u'collection'))
                        var.put(u'trackByIdFn', (var.get(u'trackByIdExpFn') or var.get(u'trackByIdArrayFn')))
                    else:
                        var.put(u'trackByIdFn', (var.get(u'trackByIdExpFn') or var.get(u'trackByIdObjFn')))
                        var.put(u'collectionKeys', Js([]))
                        for PyJsTemp in var.get(u'collection'):
                            var.put(u'itemKey', PyJsTemp)
                            if (var.get(u'hasOwnProperty').callprop(u'call', var.get(u'collection'), var.get(u'itemKey')) and PyJsStrictNeq(var.get(u'itemKey').callprop(u'charAt', Js(0.0)),Js(u'$'))):
                                var.get(u'collectionKeys').callprop(u'push', var.get(u'itemKey'))
                    var.put(u'collectionLength', var.get(u'collectionKeys').get(u'length'))
                    var.put(u'nextBlockOrder', var.get(u'Array').create(var.get(u'collectionLength')))
                    #for JS loop
                    var.put(u'index', Js(0.0))
                    while (var.get(u'index')<var.get(u'collectionLength')):
                        try:
                            var.put(u'key', (var.get(u'index') if PyJsStrictEq(var.get(u'collection'),var.get(u'collectionKeys')) else var.get(u'collectionKeys').get(var.get(u'index'))))
                            var.put(u'value', var.get(u'collection').get(var.get(u'key')))
                            var.put(u'trackById', var.get(u'trackByIdFn')(var.get(u'key'), var.get(u'value'), var.get(u'index')))
                            if var.get(u'lastBlockMap').get(var.get(u'trackById')):
                                var.put(u'block', var.get(u'lastBlockMap').get(var.get(u'trackById')))
                                var.get(u'lastBlockMap').delete(var.get(u'trackById'))
                                var.get(u'nextBlockMap').put(var.get(u'trackById'), var.get(u'block'))
                                var.get(u'nextBlockOrder').put(var.get(u'index'), var.get(u'block'))
                            else:
                                if var.get(u'nextBlockMap').get(var.get(u'trackById')):
                                    @Js
                                    def PyJs_anonymous_1201_(block, this, arguments, var=var):
                                        var = Scope({u'this':this, u'arguments':arguments, u'block':block}, var)
                                        var.registers([u'block'])
                                        if (var.get(u'block') and var.get(u'block').get(u'scope')):
                                            var.get(u'lastBlockMap').put(var.get(u'block').get(u'id'), var.get(u'block'))
                                    PyJs_anonymous_1201_._set_name(u'anonymous')
                                    var.get(u'forEach')(var.get(u'nextBlockOrder'), PyJs_anonymous_1201_)
                                    PyJsTempException = JsToPyException(var.get(u'ngRepeatMinErr')(Js(u'dupes'), Js(u"Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}"), var.get(u'expression'), var.get(u'trackById'), var.get(u'value')))
                                    raise PyJsTempException
                                else:
                                    PyJs_Object_1202_ = Js({u'id':var.get(u'trackById'),u'scope':var.get(u'undefined'),u'clone':var.get(u'undefined')})
                                    var.get(u'nextBlockOrder').put(var.get(u'index'), PyJs_Object_1202_)
                                    var.get(u'nextBlockMap').put(var.get(u'trackById'), var.get(u'true'))
                        finally:
                                (var.put(u'index',var.get(u'index')+Js(1))-Js(1))
                    for PyJsTemp in var.get(u'lastBlockMap'):
                        var.put(u'blockKey', PyJsTemp)
                        var.put(u'block', var.get(u'lastBlockMap').get(var.get(u'blockKey')))
                        var.put(u'elementsToRemove', var.get(u'getBlockNodes')(var.get(u'block').get(u'clone')))
                        var.get(u'$animate').callprop(u'leave', var.get(u'elementsToRemove'))
                        if var.get(u'elementsToRemove').get(u'0').get(u'parentNode'):
                            #for JS loop
                            PyJsComma(var.put(u'index', Js(0.0)),var.put(u'length', var.get(u'elementsToRemove').get(u'length')))
                            while (var.get(u'index')<var.get(u'length')):
                                try:
                                    var.get(u'elementsToRemove').get(var.get(u'index')).put(var.get(u'NG_REMOVED'), var.get(u'true'))
                                finally:
                                        (var.put(u'index',var.get(u'index')+Js(1))-Js(1))
                        var.get(u'block').get(u'scope').callprop(u'$destroy')
                    #for JS loop
                    var.put(u'index', Js(0.0))
                    while (var.get(u'index')<var.get(u'collectionLength')):
                        try:
                            var.put(u'key', (var.get(u'index') if PyJsStrictEq(var.get(u'collection'),var.get(u'collectionKeys')) else var.get(u'collectionKeys').get(var.get(u'index'))))
                            var.put(u'value', var.get(u'collection').get(var.get(u'key')))
                            var.put(u'block', var.get(u'nextBlockOrder').get(var.get(u'index')))
                            if var.get(u'block').get(u'scope'):
                                var.put(u'nextNode', var.get(u'previousNode'))
                                while 1:
                                    var.put(u'nextNode', var.get(u'nextNode').get(u'nextSibling'))
                                    if not (var.get(u'nextNode') and var.get(u'nextNode').get(var.get(u'NG_REMOVED'))):
                                        break
                                if (var.get(u'getBlockStart')(var.get(u'block'))!=var.get(u'nextNode')):
                                    var.get(u'$animate').callprop(u'move', var.get(u'getBlockNodes')(var.get(u'block').get(u'clone')), var.get(u"null"), var.get(u'jqLite')(var.get(u'previousNode')))
                                var.put(u'previousNode', var.get(u'getBlockEnd')(var.get(u'block')))
                                var.get(u'updateScope')(var.get(u'block').get(u'scope'), var.get(u'index'), var.get(u'valueIdentifier'), var.get(u'value'), var.get(u'keyIdentifier'), var.get(u'key'), var.get(u'collectionLength'))
                            else:
                                @Js
                                def PyJs_ngRepeatTransclude_1203_(clone, scope, this, arguments, var=var):
                                    var = Scope({u'this':this, u'scope':scope, u'clone':clone, u'ngRepeatTransclude':PyJs_ngRepeatTransclude_1203_, u'arguments':arguments}, var)
                                    var.registers([u'endNode', u'scope', u'clone'])
                                    var.get(u'block').put(u'scope', var.get(u'scope'))
                                    var.put(u'endNode', var.get(u'ngRepeatEndComment').callprop(u'cloneNode', Js(False)))
                                    var.get(u'clone').put((var.get(u'clone').put(u'length',var.get(u'clone').get(u'length')+Js(1))-Js(1)), var.get(u'endNode'))
                                    var.get(u'$animate').callprop(u'enter', var.get(u'clone'), var.get(u"null"), var.get(u'jqLite')(var.get(u'previousNode')))
                                    var.put(u'previousNode', var.get(u'endNode'))
                                    var.get(u'block').put(u'clone', var.get(u'clone'))
                                    var.get(u'nextBlockMap').put(var.get(u'block').get(u'id'), var.get(u'block'))
                                    var.get(u'updateScope')(var.get(u'block').get(u'scope'), var.get(u'index'), var.get(u'valueIdentifier'), var.get(u'value'), var.get(u'keyIdentifier'), var.get(u'key'), var.get(u'collectionLength'))
                                PyJs_ngRepeatTransclude_1203_._set_name(u'ngRepeatTransclude')
                                var.get(u'$transclude')(PyJs_ngRepeatTransclude_1203_)
                        finally:
                                (var.put(u'index',var.get(u'index')+Js(1))-Js(1))
                    var.put(u'lastBlockMap', var.get(u'nextBlockMap'))
                PyJs_ngRepeatAction_1200_._set_name(u'ngRepeatAction')
                var.get(u'$scope').callprop(u'$watchCollection', var.get(u'rhs'), PyJs_ngRepeatAction_1200_)
            PyJs_ngRepeatLink_1198_._set_name(u'ngRepeatLink')
            return PyJs_ngRepeatLink_1198_
        PyJs_ngRepeatCompile_1194_._set_name(u'ngRepeatCompile')
        PyJs_Object_1193_ = Js({u'restrict':Js(u'A'),u'multiElement':var.get(u'true'),u'transclude':Js(u'element'),u'priority':Js(1000.0),u'terminal':var.get(u'true'),u'$$tlb':var.get(u'true'),u'compile':PyJs_ngRepeatCompile_1194_})
        return PyJs_Object_1193_
    PyJs_anonymous_1189_._set_name(u'anonymous')
    var.put(u'ngRepeatDirective', Js([Js(u'$parse'), Js(u'$animate'), PyJs_anonymous_1189_]))
    var.put(u'NG_HIDE_CLASS', Js(u'ng-hide'))
    var.put(u'NG_HIDE_IN_PROGRESS_CLASS', Js(u'ng-hide-animate'))
    @Js
    def PyJs_anonymous_1204_(PyJsArg_24616e696d617465_, this, arguments, var=var):
        var = Scope({u'this':this, u'$animate':PyJsArg_24616e696d617465_, u'arguments':arguments}, var)
        var.registers([u'$animate'])
        @Js
        def PyJs_anonymous_1206_(scope, element, attr, this, arguments, var=var):
            var = Scope({u'this':this, u'scope':scope, u'attr':attr, u'arguments':arguments, u'element':element}, var)
            var.registers([u'scope', u'attr', u'element'])
            @Js
            def PyJs_ngShowWatchAction_1207_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'ngShowWatchAction':PyJs_ngShowWatchAction_1207_, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                PyJs_Object_1208_ = Js({u'tempClasses':var.get(u'NG_HIDE_IN_PROGRESS_CLASS')})
                var.get(u'$animate').callprop((Js(u'removeClass') if var.get(u'value') else Js(u'addClass')), var.get(u'element'), var.get(u'NG_HIDE_CLASS'), PyJs_Object_1208_)
            PyJs_ngShowWatchAction_1207_._set_name(u'ngShowWatchAction')
            var.get(u'scope').callprop(u'$watch', var.get(u'attr').get(u'ngShow'), PyJs_ngShowWatchAction_1207_)
        PyJs_anonymous_1206_._set_name(u'anonymous')
        PyJs_Object_1205_ = Js({u'restrict':Js(u'A'),u'multiElement':var.get(u'true'),u'link':PyJs_anonymous_1206_})
        return PyJs_Object_1205_
    PyJs_anonymous_1204_._set_name(u'anonymous')
    var.put(u'ngShowDirective', Js([Js(u'$animate'), PyJs_anonymous_1204_]))
    @Js
    def PyJs_anonymous_1209_(PyJsArg_24616e696d617465_, this, arguments, var=var):
        var = Scope({u'this':this, u'$animate':PyJsArg_24616e696d617465_, u'arguments':arguments}, var)
        var.registers([u'$animate'])
        @Js
        def PyJs_anonymous_1211_(scope, element, attr, this, arguments, var=var):
            var = Scope({u'this':this, u'scope':scope, u'attr':attr, u'arguments':arguments, u'element':element}, var)
            var.registers([u'scope', u'attr', u'element'])
            @Js
            def PyJs_ngHideWatchAction_1212_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value, u'ngHideWatchAction':PyJs_ngHideWatchAction_1212_}, var)
                var.registers([u'value'])
                PyJs_Object_1213_ = Js({u'tempClasses':var.get(u'NG_HIDE_IN_PROGRESS_CLASS')})
                var.get(u'$animate').callprop((Js(u'addClass') if var.get(u'value') else Js(u'removeClass')), var.get(u'element'), var.get(u'NG_HIDE_CLASS'), PyJs_Object_1213_)
            PyJs_ngHideWatchAction_1212_._set_name(u'ngHideWatchAction')
            var.get(u'scope').callprop(u'$watch', var.get(u'attr').get(u'ngHide'), PyJs_ngHideWatchAction_1212_)
        PyJs_anonymous_1211_._set_name(u'anonymous')
        PyJs_Object_1210_ = Js({u'restrict':Js(u'A'),u'multiElement':var.get(u'true'),u'link':PyJs_anonymous_1211_})
        return PyJs_Object_1210_
    PyJs_anonymous_1209_._set_name(u'anonymous')
    var.put(u'ngHideDirective', Js([Js(u'$animate'), PyJs_anonymous_1209_]))
    @Js
    def PyJs_anonymous_1214_(scope, element, attr, this, arguments, var=var):
        var = Scope({u'this':this, u'scope':scope, u'attr':attr, u'arguments':arguments, u'element':element}, var)
        var.registers([u'scope', u'attr', u'element'])
        @Js
        def PyJs_ngStyleWatchAction_1215_(newStyles, oldStyles, this, arguments, var=var):
            var = Scope({u'this':this, u'newStyles':newStyles, u'oldStyles':oldStyles, u'arguments':arguments, u'ngStyleWatchAction':PyJs_ngStyleWatchAction_1215_}, var)
            var.registers([u'newStyles', u'oldStyles'])
            if (var.get(u'oldStyles') and PyJsStrictNeq(var.get(u'newStyles'),var.get(u'oldStyles'))):
                @Js
                def PyJs_anonymous_1216_(val, style, this, arguments, var=var):
                    var = Scope({u'this':this, u'style':style, u'arguments':arguments, u'val':val}, var)
                    var.registers([u'style', u'val'])
                    var.get(u'element').callprop(u'css', var.get(u'style'), Js(u''))
                PyJs_anonymous_1216_._set_name(u'anonymous')
                var.get(u'forEach')(var.get(u'oldStyles'), PyJs_anonymous_1216_)
            if var.get(u'newStyles'):
                var.get(u'element').callprop(u'css', var.get(u'newStyles'))
        PyJs_ngStyleWatchAction_1215_._set_name(u'ngStyleWatchAction')
        var.get(u'scope').callprop(u'$watch', var.get(u'attr').get(u'ngStyle'), PyJs_ngStyleWatchAction_1215_, var.get(u'true'))
    PyJs_anonymous_1214_._set_name(u'anonymous')
    var.put(u'ngStyleDirective', var.get(u'ngDirective')(PyJs_anonymous_1214_))
    @Js
    def PyJs_anonymous_1217_(PyJsArg_24616e696d617465_, this, arguments, var=var):
        var = Scope({u'this':this, u'$animate':PyJsArg_24616e696d617465_, u'arguments':arguments}, var)
        var.registers([u'$animate'])
        @Js
        def PyJs_ngSwitchController_1219_(this, arguments, var=var):
            var = Scope({u'this':this, u'ngSwitchController':PyJs_ngSwitchController_1219_, u'arguments':arguments}, var)
            var.registers([])
            PyJs_Object_1220_ = Js({})
            var.get(u"this").put(u'cases', PyJs_Object_1220_)
        PyJs_ngSwitchController_1219_._set_name(u'ngSwitchController')
        @Js
        def PyJs_anonymous_1221_(scope, element, attr, ngSwitchController, this, arguments, var=var):
            var = Scope({u'arguments':arguments, u'attr':attr, u'this':this, u'scope':scope, u'ngSwitchController':ngSwitchController, u'element':element}, var)
            var.registers([u'attr', u'selectedElements', u'selectedScopes', u'ngSwitchController', u'element', u'selectedTranscludes', u'spliceFactory', u'watchExpr', u'previousLeaveAnimations', u'scope'])
            var.put(u'watchExpr', (var.get(u'attr').get(u'ngSwitch') or var.get(u'attr').get(u'on')))
            var.put(u'selectedTranscludes', Js([]))
            var.put(u'selectedElements', Js([]))
            var.put(u'previousLeaveAnimations', Js([]))
            var.put(u'selectedScopes', Js([]))
            @Js
            def PyJs_anonymous_1222_(array, index, this, arguments, var=var):
                var = Scope({u'this':this, u'index':index, u'array':array, u'arguments':arguments}, var)
                var.registers([u'index', u'array'])
                @Js
                def PyJs_anonymous_1223_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'array').callprop(u'splice', var.get(u'index'), Js(1.0))
                PyJs_anonymous_1223_._set_name(u'anonymous')
                return PyJs_anonymous_1223_
            PyJs_anonymous_1222_._set_name(u'anonymous')
            var.put(u'spliceFactory', PyJs_anonymous_1222_)
            @Js
            def PyJs_ngSwitchWatchAction_1224_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value, u'ngSwitchWatchAction':PyJs_ngSwitchWatchAction_1224_}, var)
                var.registers([u'i', u'ii', u'selected', u'promise', u'value'])
                pass
                #for JS loop
                PyJsComma(var.put(u'i', Js(0.0)),var.put(u'ii', var.get(u'previousLeaveAnimations').get(u'length')))
                while (var.get(u'i')<var.get(u'ii')):
                    try:
                        var.get(u'$animate').callprop(u'cancel', var.get(u'previousLeaveAnimations').get(var.get(u'i')))
                    finally:
                            var.put(u'i',var.get(u'i')+Js(1))
                var.get(u'previousLeaveAnimations').put(u'length', Js(0.0))
                #for JS loop
                PyJsComma(var.put(u'i', Js(0.0)),var.put(u'ii', var.get(u'selectedScopes').get(u'length')))
                while (var.get(u'i')<var.get(u'ii')):
                    try:
                        var.put(u'selected', var.get(u'getBlockNodes')(var.get(u'selectedElements').get(var.get(u'i')).get(u'clone')))
                        var.get(u'selectedScopes').get(var.get(u'i')).callprop(u'$destroy')
                        var.put(u'promise', var.get(u'previousLeaveAnimations').put(var.get(u'i'), var.get(u'$animate').callprop(u'leave', var.get(u'selected'))))
                        var.get(u'promise').callprop(u'then', var.get(u'spliceFactory')(var.get(u'previousLeaveAnimations'), var.get(u'i')))
                    finally:
                            var.put(u'i',var.get(u'i')+Js(1))
                var.get(u'selectedElements').put(u'length', Js(0.0))
                var.get(u'selectedScopes').put(u'length', Js(0.0))
                if var.put(u'selectedTranscludes', (var.get(u'ngSwitchController').get(u'cases').get((Js(u'!')+var.get(u'value'))) or var.get(u'ngSwitchController').get(u'cases').get(u'?'))):
                    @Js
                    def PyJs_anonymous_1225_(selectedTransclude, this, arguments, var=var):
                        var = Scope({u'this':this, u'selectedTransclude':selectedTransclude, u'arguments':arguments}, var)
                        var.registers([u'selectedTransclude'])
                        @Js
                        def PyJs_anonymous_1226_(caseElement, selectedScope, this, arguments, var=var):
                            var = Scope({u'selectedScope':selectedScope, u'this':this, u'arguments':arguments, u'caseElement':caseElement}, var)
                            var.registers([u'selectedScope', u'anchor', u'block', u'caseElement'])
                            var.get(u'selectedScopes').callprop(u'push', var.get(u'selectedScope'))
                            var.put(u'anchor', var.get(u'selectedTransclude').get(u'element'))
                            var.get(u'caseElement').put((var.get(u'caseElement').put(u'length',var.get(u'caseElement').get(u'length')+Js(1))-Js(1)), var.get(u'document').callprop(u'createComment', Js(u' end ngSwitchWhen: ')))
                            PyJs_Object_1227_ = Js({u'clone':var.get(u'caseElement')})
                            var.put(u'block', PyJs_Object_1227_)
                            var.get(u'selectedElements').callprop(u'push', var.get(u'block'))
                            var.get(u'$animate').callprop(u'enter', var.get(u'caseElement'), var.get(u'anchor').callprop(u'parent'), var.get(u'anchor'))
                        PyJs_anonymous_1226_._set_name(u'anonymous')
                        var.get(u'selectedTransclude').callprop(u'transclude', PyJs_anonymous_1226_)
                    PyJs_anonymous_1225_._set_name(u'anonymous')
                    var.get(u'forEach')(var.get(u'selectedTranscludes'), PyJs_anonymous_1225_)
            PyJs_ngSwitchWatchAction_1224_._set_name(u'ngSwitchWatchAction')
            var.get(u'scope').callprop(u'$watch', var.get(u'watchExpr'), PyJs_ngSwitchWatchAction_1224_)
        PyJs_anonymous_1221_._set_name(u'anonymous')
        PyJs_Object_1218_ = Js({u'require':Js(u'ngSwitch'),u'controller':Js([Js(u'$scope'), PyJs_ngSwitchController_1219_]),u'link':PyJs_anonymous_1221_})
        return PyJs_Object_1218_
    PyJs_anonymous_1217_._set_name(u'anonymous')
    var.put(u'ngSwitchDirective', Js([Js(u'$animate'), PyJs_anonymous_1217_]))
    @Js
    def PyJs_anonymous_1229_(scope, element, attrs, ctrl, PyJsArg_247472616e73636c756465_, this, arguments, var=var):
        var = Scope({u'arguments':arguments, u'attrs':attrs, u'$transclude':PyJsArg_247472616e73636c756465_, u'ctrl':ctrl, u'this':this, u'scope':scope, u'element':element}, var)
        var.registers([u'scope', u'ctrl', u'attrs', u'$transclude', u'element'])
        var.get(u'ctrl').get(u'cases').put((Js(u'!')+var.get(u'attrs').get(u'ngSwitchWhen')), (var.get(u'ctrl').get(u'cases').get((Js(u'!')+var.get(u'attrs').get(u'ngSwitchWhen'))) or Js([])))
        PyJs_Object_1230_ = Js({u'transclude':var.get(u'$transclude'),u'element':var.get(u'element')})
        var.get(u'ctrl').get(u'cases').get((Js(u'!')+var.get(u'attrs').get(u'ngSwitchWhen'))).callprop(u'push', PyJs_Object_1230_)
    PyJs_anonymous_1229_._set_name(u'anonymous')
    PyJs_Object_1228_ = Js({u'transclude':Js(u'element'),u'priority':Js(1200.0),u'require':Js(u'^ngSwitch'),u'multiElement':var.get(u'true'),u'link':PyJs_anonymous_1229_})
    var.put(u'ngSwitchWhenDirective', var.get(u'ngDirective')(PyJs_Object_1228_))
    @Js
    def PyJs_anonymous_1232_(scope, element, attr, ctrl, PyJsArg_247472616e73636c756465_, this, arguments, var=var):
        var = Scope({u'arguments':arguments, u'attr':attr, u'$transclude':PyJsArg_247472616e73636c756465_, u'ctrl':ctrl, u'this':this, u'scope':scope, u'element':element}, var)
        var.registers([u'scope', u'ctrl', u'attr', u'$transclude', u'element'])
        var.get(u'ctrl').get(u'cases').put(u'?', (var.get(u'ctrl').get(u'cases').get(u'?') or Js([])))
        PyJs_Object_1233_ = Js({u'transclude':var.get(u'$transclude'),u'element':var.get(u'element')})
        var.get(u'ctrl').get(u'cases').get(u'?').callprop(u'push', PyJs_Object_1233_)
    PyJs_anonymous_1232_._set_name(u'anonymous')
    PyJs_Object_1231_ = Js({u'transclude':Js(u'element'),u'priority':Js(1200.0),u'require':Js(u'^ngSwitch'),u'multiElement':var.get(u'true'),u'link':PyJs_anonymous_1232_})
    var.put(u'ngSwitchDefaultDirective', var.get(u'ngDirective')(PyJs_Object_1231_))
    @Js
    def PyJs_anonymous_1235_(PyJsArg_2473636f7065_, PyJsArg_24656c656d656e74_, PyJsArg_246174747273_, controller, PyJsArg_247472616e73636c756465_, this, arguments, var=var):
        var = Scope({u'controller':controller, u'$element':PyJsArg_24656c656d656e74_, u'arguments':arguments, u'$transclude':PyJsArg_247472616e73636c756465_, u'this':this, u'$attrs':PyJsArg_246174747273_, u'$scope':PyJsArg_2473636f7065_}, var)
        var.registers([u'$attrs', u'$element', u'controller', u'$scope', u'$transclude'])
        if var.get(u'$transclude').neg():
            PyJsTempException = JsToPyException(var.get(u'minErr')(Js(u'ngTransclude'))(Js(u'orphan'), ((Js(u'Illegal use of ngTransclude directive in the template! ')+Js(u'No parent directive that requires a transclusion found. '))+Js(u'Element: {0}')), var.get(u'startingTag')(var.get(u'$element'))))
            raise PyJsTempException
        @Js
        def PyJs_anonymous_1236_(clone, this, arguments, var=var):
            var = Scope({u'this':this, u'clone':clone, u'arguments':arguments}, var)
            var.registers([u'clone'])
            var.get(u'$element').callprop(u'empty')
            var.get(u'$element').callprop(u'append', var.get(u'clone'))
        PyJs_anonymous_1236_._set_name(u'anonymous')
        var.get(u'$transclude')(PyJs_anonymous_1236_)
    PyJs_anonymous_1235_._set_name(u'anonymous')
    PyJs_Object_1234_ = Js({u'restrict':Js(u'EAC'),u'link':PyJs_anonymous_1235_})
    var.put(u'ngTranscludeDirective', var.get(u'ngDirective')(PyJs_Object_1234_))
    @Js
    def PyJs_anonymous_1237_(PyJsArg_2474656d706c6174654361636865_, this, arguments, var=var):
        var = Scope({u'this':this, u'$templateCache':PyJsArg_2474656d706c6174654361636865_, u'arguments':arguments}, var)
        var.registers([u'$templateCache'])
        @Js
        def PyJs_anonymous_1239_(element, attr, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'attr':attr, u'element':element}, var)
            var.registers([u'text', u'templateUrl', u'attr', u'element'])
            if (var.get(u'attr').get(u'type')==Js(u'text/ng-template')):
                var.put(u'templateUrl', var.get(u'attr').get(u'id'))
                var.put(u'text', var.get(u'element').get(u'0').get(u'text'))
                var.get(u'$templateCache').callprop(u'put', var.get(u'templateUrl'), var.get(u'text'))
        PyJs_anonymous_1239_._set_name(u'anonymous')
        PyJs_Object_1238_ = Js({u'restrict':Js(u'E'),u'terminal':var.get(u'true'),u'compile':PyJs_anonymous_1239_})
        return PyJs_Object_1238_
    PyJs_anonymous_1237_._set_name(u'anonymous')
    var.put(u'scriptDirective', Js([Js(u'$templateCache'), PyJs_anonymous_1237_]))
    PyJs_Object_1240_ = Js({u'$setViewValue':var.get(u'noop'),u'$render':var.get(u'noop')})
    var.put(u'noopNgModelController', PyJs_Object_1240_)
    pass
    @Js
    def PyJs_anonymous_1241_(PyJsArg_24656c656d656e74_, PyJsArg_2473636f7065_, PyJsArg_246174747273_, this, arguments, var=var):
        var = Scope({u'this':this, u'$attrs':PyJsArg_246174747273_, u'$element':PyJsArg_24656c656d656e74_, u'arguments':arguments, u'$scope':PyJsArg_2473636f7065_}, var)
        var.registers([u'self', u'$attrs', u'$element', u'optionsMap', u'$scope'])
        var.put(u'self', var.get(u"this"))
        var.put(u'optionsMap', var.get(u'HashMap').create())
        var.get(u'self').put(u'ngModelCtrl', var.get(u'noopNgModelController'))
        var.get(u'self').put(u'unknownOption', var.get(u'jqLite')(var.get(u'document').callprop(u'createElement', Js(u'option'))))
        @Js
        def PyJs_anonymous_1242_(val, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'val':val}, var)
            var.registers([u'unknownVal', u'val'])
            var.put(u'unknownVal', ((Js(u'? ')+var.get(u'hashKey')(var.get(u'val')))+Js(u' ?')))
            var.get(u'self').get(u'unknownOption').callprop(u'val', var.get(u'unknownVal'))
            var.get(u'$element').callprop(u'prepend', var.get(u'self').get(u'unknownOption'))
            var.get(u'$element').callprop(u'val', var.get(u'unknownVal'))
        PyJs_anonymous_1242_._set_name(u'anonymous')
        var.get(u'self').put(u'renderUnknownOption', PyJs_anonymous_1242_)
        @Js
        def PyJs_anonymous_1243_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u'self').put(u'renderUnknownOption', var.get(u'noop'))
        PyJs_anonymous_1243_._set_name(u'anonymous')
        var.get(u'$scope').callprop(u'$on', Js(u'$destroy'), PyJs_anonymous_1243_)
        @Js
        def PyJs_anonymous_1244_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            if var.get(u'self').get(u'unknownOption').callprop(u'parent'):
                var.get(u'self').get(u'unknownOption').callprop(u'remove')
        PyJs_anonymous_1244_._set_name(u'anonymous')
        var.get(u'self').put(u'removeUnknownOption', PyJs_anonymous_1244_)
        @Js
        def PyJs_readSingleValue_1245_(this, arguments, var=var):
            var = Scope({u'this':this, u'readSingleValue':PyJs_readSingleValue_1245_, u'arguments':arguments}, var)
            var.registers([])
            var.get(u'self').callprop(u'removeUnknownOption')
            return var.get(u'$element').callprop(u'val')
        PyJs_readSingleValue_1245_._set_name(u'readSingleValue')
        var.get(u'self').put(u'readValue', PyJs_readSingleValue_1245_)
        @Js
        def PyJs_writeSingleValue_1246_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'writeSingleValue':PyJs_writeSingleValue_1246_, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            if var.get(u'self').callprop(u'hasOption', var.get(u'value')):
                var.get(u'self').callprop(u'removeUnknownOption')
                var.get(u'$element').callprop(u'val', var.get(u'value'))
                if PyJsStrictEq(var.get(u'value'),Js(u'')):
                    var.get(u'self').get(u'emptyOption').callprop(u'prop', Js(u'selected'), var.get(u'true'))
            else:
                if ((var.get(u'value')==var.get(u"null")) and var.get(u'self').get(u'emptyOption')):
                    var.get(u'self').callprop(u'removeUnknownOption')
                    var.get(u'$element').callprop(u'val', Js(u''))
                else:
                    var.get(u'self').callprop(u'renderUnknownOption', var.get(u'value'))
        PyJs_writeSingleValue_1246_._set_name(u'writeSingleValue')
        var.get(u'self').put(u'writeValue', PyJs_writeSingleValue_1246_)
        @Js
        def PyJs_anonymous_1247_(value, element, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value, u'element':element}, var)
            var.registers([u'count', u'value', u'element'])
            var.get(u'assertNotHasOwnProperty')(var.get(u'value'), Js(u'"option value"'))
            if PyJsStrictEq(var.get(u'value'),Js(u'')):
                var.get(u'self').put(u'emptyOption', var.get(u'element'))
            var.put(u'count', (var.get(u'optionsMap').callprop(u'get', var.get(u'value')) or Js(0.0)))
            var.get(u'optionsMap').callprop(u'put', var.get(u'value'), (var.get(u'count')+Js(1.0)))
            var.get(u'self').get(u'ngModelCtrl').callprop(u'$render')
            var.get(u'chromeHack')(var.get(u'element'))
        PyJs_anonymous_1247_._set_name(u'anonymous')
        var.get(u'self').put(u'addOption', PyJs_anonymous_1247_)
        @Js
        def PyJs_anonymous_1248_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'count', u'value'])
            var.put(u'count', var.get(u'optionsMap').callprop(u'get', var.get(u'value')))
            if var.get(u'count'):
                if PyJsStrictEq(var.get(u'count'),Js(1.0)):
                    var.get(u'optionsMap').callprop(u'remove', var.get(u'value'))
                    if PyJsStrictEq(var.get(u'value'),Js(u'')):
                        var.get(u'self').put(u'emptyOption', var.get(u'undefined'))
                else:
                    var.get(u'optionsMap').callprop(u'put', var.get(u'value'), (var.get(u'count')-Js(1.0)))
        PyJs_anonymous_1248_._set_name(u'anonymous')
        var.get(u'self').put(u'removeOption', PyJs_anonymous_1248_)
        @Js
        def PyJs_anonymous_1249_(value, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
            var.registers([u'value'])
            return var.get(u'optionsMap').callprop(u'get', var.get(u'value')).neg().neg()
        PyJs_anonymous_1249_._set_name(u'anonymous')
        var.get(u'self').put(u'hasOption', PyJs_anonymous_1249_)
        @Js
        def PyJs_anonymous_1250_(optionScope, optionElement, optionAttrs, interpolateValueFn, interpolateTextFn, this, arguments, var=var):
            var = Scope({u'optionElement':optionElement, u'interpolateTextFn':interpolateTextFn, u'optionScope':optionScope, u'this':this, u'interpolateValueFn':interpolateValueFn, u'optionAttrs':optionAttrs, u'arguments':arguments}, var)
            var.registers([u'oldVal', u'optionElement', u'interpolateTextFn', u'optionScope', u'interpolateValueFn', u'optionAttrs'])
            if var.get(u'interpolateValueFn'):
                pass
                @Js
                def PyJs_valueAttributeObserveAction_1251_(newVal, this, arguments, var=var):
                    var = Scope({u'this':this, u'newVal':newVal, u'arguments':arguments, u'valueAttributeObserveAction':PyJs_valueAttributeObserveAction_1251_}, var)
                    var.registers([u'newVal'])
                    if var.get(u'isDefined')(var.get(u'oldVal')):
                        var.get(u'self').callprop(u'removeOption', var.get(u'oldVal'))
                    var.put(u'oldVal', var.get(u'newVal'))
                    var.get(u'self').callprop(u'addOption', var.get(u'newVal'), var.get(u'optionElement'))
                PyJs_valueAttributeObserveAction_1251_._set_name(u'valueAttributeObserveAction')
                var.get(u'optionAttrs').callprop(u'$observe', Js(u'value'), PyJs_valueAttributeObserveAction_1251_)
            else:
                if var.get(u'interpolateTextFn'):
                    @Js
                    def PyJs_interpolateWatchAction_1252_(newVal, oldVal, this, arguments, var=var):
                        var = Scope({u'this':this, u'newVal':newVal, u'oldVal':oldVal, u'interpolateWatchAction':PyJs_interpolateWatchAction_1252_, u'arguments':arguments}, var)
                        var.registers([u'newVal', u'oldVal'])
                        var.get(u'optionAttrs').callprop(u'$set', Js(u'value'), var.get(u'newVal'))
                        if PyJsStrictNeq(var.get(u'oldVal'),var.get(u'newVal')):
                            var.get(u'self').callprop(u'removeOption', var.get(u'oldVal'))
                        var.get(u'self').callprop(u'addOption', var.get(u'newVal'), var.get(u'optionElement'))
                    PyJs_interpolateWatchAction_1252_._set_name(u'interpolateWatchAction')
                    var.get(u'optionScope').callprop(u'$watch', var.get(u'interpolateTextFn'), PyJs_interpolateWatchAction_1252_)
                else:
                    var.get(u'self').callprop(u'addOption', var.get(u'optionAttrs').get(u'value'), var.get(u'optionElement'))
            @Js
            def PyJs_anonymous_1253_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                var.get(u'self').callprop(u'removeOption', var.get(u'optionAttrs').get(u'value'))
                var.get(u'self').get(u'ngModelCtrl').callprop(u'$render')
            PyJs_anonymous_1253_._set_name(u'anonymous')
            var.get(u'optionElement').callprop(u'on', Js(u'$destroy'), PyJs_anonymous_1253_)
        PyJs_anonymous_1250_._set_name(u'anonymous')
        var.get(u'self').put(u'registerOption', PyJs_anonymous_1250_)
    PyJs_anonymous_1241_._set_name(u'anonymous')
    var.put(u'SelectController', Js([Js(u'$element'), Js(u'$scope'), Js(u'$attrs'), PyJs_anonymous_1241_]))
    @Js
    def PyJs_anonymous_1254_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'selectPreLink'])
        @Js
        def PyJsHoisted_selectPreLink_(scope, element, attr, ctrls, this, arguments, var=var):
            var = Scope({u'arguments':arguments, u'attr':attr, u'this':this, u'scope':scope, u'element':element, u'ctrls':ctrls}, var)
            var.registers([u'selectCtrl', u'attr', u'lastViewRef', u'element', u'lastView', u'ngModelCtrl', u'scope', u'ctrls'])
            var.put(u'ngModelCtrl', var.get(u'ctrls').get(u'1'))
            if var.get(u'ngModelCtrl').neg():
                return var.get('undefined')
            var.put(u'selectCtrl', var.get(u'ctrls').get(u'0'))
            var.get(u'selectCtrl').put(u'ngModelCtrl', var.get(u'ngModelCtrl'))
            @Js
            def PyJs_anonymous_1257_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                var.get(u'selectCtrl').callprop(u'writeValue', var.get(u'ngModelCtrl').get(u'$viewValue'))
            PyJs_anonymous_1257_._set_name(u'anonymous')
            var.get(u'ngModelCtrl').put(u'$render', PyJs_anonymous_1257_)
            @Js
            def PyJs_anonymous_1258_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                @Js
                def PyJs_anonymous_1259_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u'ngModelCtrl').callprop(u'$setViewValue', var.get(u'selectCtrl').callprop(u'readValue'))
                PyJs_anonymous_1259_._set_name(u'anonymous')
                var.get(u'scope').callprop(u'$apply', PyJs_anonymous_1259_)
            PyJs_anonymous_1258_._set_name(u'anonymous')
            var.get(u'element').callprop(u'on', Js(u'change'), PyJs_anonymous_1258_)
            if var.get(u'attr').get(u'multiple'):
                @Js
                def PyJs_readMultipleValue_1260_(this, arguments, var=var):
                    var = Scope({u'this':this, u'readMultipleValue':PyJs_readMultipleValue_1260_, u'arguments':arguments}, var)
                    var.registers([u'array'])
                    var.put(u'array', Js([]))
                    @Js
                    def PyJs_anonymous_1261_(option, this, arguments, var=var):
                        var = Scope({u'this':this, u'option':option, u'arguments':arguments}, var)
                        var.registers([u'option'])
                        if var.get(u'option').get(u'selected'):
                            var.get(u'array').callprop(u'push', var.get(u'option').get(u'value'))
                    PyJs_anonymous_1261_._set_name(u'anonymous')
                    var.get(u'forEach')(var.get(u'element').callprop(u'find', Js(u'option')), PyJs_anonymous_1261_)
                    return var.get(u'array')
                PyJs_readMultipleValue_1260_._set_name(u'readMultipleValue')
                var.get(u'selectCtrl').put(u'readValue', PyJs_readMultipleValue_1260_)
                @Js
                def PyJs_writeMultipleValue_1262_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'writeMultipleValue':PyJs_writeMultipleValue_1262_, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'items', u'value'])
                    var.put(u'items', var.get(u'HashMap').create(var.get(u'value')))
                    @Js
                    def PyJs_anonymous_1263_(option, this, arguments, var=var):
                        var = Scope({u'this':this, u'option':option, u'arguments':arguments}, var)
                        var.registers([u'option'])
                        var.get(u'option').put(u'selected', var.get(u'isDefined')(var.get(u'items').callprop(u'get', var.get(u'option').get(u'value'))))
                    PyJs_anonymous_1263_._set_name(u'anonymous')
                    var.get(u'forEach')(var.get(u'element').callprop(u'find', Js(u'option')), PyJs_anonymous_1263_)
                PyJs_writeMultipleValue_1262_._set_name(u'writeMultipleValue')
                var.get(u'selectCtrl').put(u'writeValue', PyJs_writeMultipleValue_1262_)
                var.put(u'lastViewRef', var.get(u'NaN'))
                @Js
                def PyJs_selectMultipleWatch_1264_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'selectMultipleWatch':PyJs_selectMultipleWatch_1264_}, var)
                    var.registers([])
                    if (PyJsStrictEq(var.get(u'lastViewRef'),var.get(u'ngModelCtrl').get(u'$viewValue')) and var.get(u'equals')(var.get(u'lastView'), var.get(u'ngModelCtrl').get(u'$viewValue')).neg()):
                        var.put(u'lastView', var.get(u'shallowCopy')(var.get(u'ngModelCtrl').get(u'$viewValue')))
                        var.get(u'ngModelCtrl').callprop(u'$render')
                    var.put(u'lastViewRef', var.get(u'ngModelCtrl').get(u'$viewValue'))
                PyJs_selectMultipleWatch_1264_._set_name(u'selectMultipleWatch')
                var.get(u'scope').callprop(u'$watch', PyJs_selectMultipleWatch_1264_)
                @Js
                def PyJs_anonymous_1265_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    return (var.get(u'value').neg() or PyJsStrictEq(var.get(u'value').get(u'length'),Js(0.0)))
                PyJs_anonymous_1265_._set_name(u'anonymous')
                var.get(u'ngModelCtrl').put(u'$isEmpty', PyJs_anonymous_1265_)
        PyJsHoisted_selectPreLink_.func_name = u'selectPreLink'
        var.put(u'selectPreLink', PyJsHoisted_selectPreLink_)
        PyJs_Object_1256_ = Js({u'pre':var.get(u'selectPreLink')})
        PyJs_Object_1255_ = Js({u'restrict':Js(u'E'),u'require':Js([Js(u'select'), Js(u'?ngModel')]),u'controller':var.get(u'SelectController'),u'priority':Js(1.0),u'link':PyJs_Object_1256_})
        return PyJs_Object_1255_
        pass
    PyJs_anonymous_1254_._set_name(u'anonymous')
    var.put(u'selectDirective', PyJs_anonymous_1254_)
    @Js
    def PyJs_anonymous_1266_(PyJsArg_24696e746572706f6c617465_, this, arguments, var=var):
        var = Scope({u'this':this, u'$interpolate':PyJsArg_24696e746572706f6c617465_, u'arguments':arguments}, var)
        var.registers([u'$interpolate'])
        @Js
        def PyJs_anonymous_1268_(element, attr, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'attr':attr, u'element':element}, var)
            var.registers([u'attr', u'interpolateValueFn', u'interpolateTextFn', u'element'])
            if var.get(u'isDefined')(var.get(u'attr').get(u'value')):
                var.put(u'interpolateValueFn', var.get(u'$interpolate')(var.get(u'attr').get(u'value'), var.get(u'true')))
            else:
                var.put(u'interpolateTextFn', var.get(u'$interpolate')(var.get(u'element').callprop(u'text'), var.get(u'true')))
                if var.get(u'interpolateTextFn').neg():
                    var.get(u'attr').callprop(u'$set', Js(u'value'), var.get(u'element').callprop(u'text'))
            @Js
            def PyJs_anonymous_1269_(scope, element, attr, this, arguments, var=var):
                var = Scope({u'this':this, u'scope':scope, u'attr':attr, u'arguments':arguments, u'element':element}, var)
                var.registers([u'selectCtrl', u'attr', u'parent', u'element', u'selectCtrlName', u'scope'])
                var.put(u'selectCtrlName', Js(u'$selectController'))
                var.put(u'parent', var.get(u'element').callprop(u'parent'))
                var.put(u'selectCtrl', (var.get(u'parent').callprop(u'data', var.get(u'selectCtrlName')) or var.get(u'parent').callprop(u'parent').callprop(u'data', var.get(u'selectCtrlName'))))
                if var.get(u'selectCtrl'):
                    var.get(u'selectCtrl').callprop(u'registerOption', var.get(u'scope'), var.get(u'element'), var.get(u'attr'), var.get(u'interpolateValueFn'), var.get(u'interpolateTextFn'))
            PyJs_anonymous_1269_._set_name(u'anonymous')
            return PyJs_anonymous_1269_
        PyJs_anonymous_1268_._set_name(u'anonymous')
        PyJs_Object_1267_ = Js({u'restrict':Js(u'E'),u'priority':Js(100.0),u'compile':PyJs_anonymous_1268_})
        return PyJs_Object_1267_
    PyJs_anonymous_1266_._set_name(u'anonymous')
    var.put(u'optionDirective', Js([Js(u'$interpolate'), PyJs_anonymous_1266_]))
    PyJs_Object_1270_ = Js({u'restrict':Js(u'E'),u'terminal':Js(False)})
    var.put(u'styleDirective', var.get(u'valueFn')(PyJs_Object_1270_))
    @Js
    def PyJs_anonymous_1271_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_1273_(scope, elm, attr, ctrl, this, arguments, var=var):
            var = Scope({u'attr':attr, u'ctrl':ctrl, u'this':this, u'scope':scope, u'elm':elm, u'arguments':arguments}, var)
            var.registers([u'scope', u'ctrl', u'attr', u'elm'])
            if var.get(u'ctrl').neg():
                return var.get('undefined')
            var.get(u'attr').put(u'required', var.get(u'true'))
            @Js
            def PyJs_anonymous_1274_(modelValue, viewValue, this, arguments, var=var):
                var = Scope({u'this':this, u'viewValue':viewValue, u'modelValue':modelValue, u'arguments':arguments}, var)
                var.registers([u'viewValue', u'modelValue'])
                return (var.get(u'attr').get(u'required').neg() or var.get(u'ctrl').callprop(u'$isEmpty', var.get(u'viewValue')).neg())
            PyJs_anonymous_1274_._set_name(u'anonymous')
            var.get(u'ctrl').get(u'$validators').put(u'required', PyJs_anonymous_1274_)
            @Js
            def PyJs_anonymous_1275_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                var.get(u'ctrl').callprop(u'$validate')
            PyJs_anonymous_1275_._set_name(u'anonymous')
            var.get(u'attr').callprop(u'$observe', Js(u'required'), PyJs_anonymous_1275_)
        PyJs_anonymous_1273_._set_name(u'anonymous')
        PyJs_Object_1272_ = Js({u'restrict':Js(u'A'),u'require':Js(u'?ngModel'),u'link':PyJs_anonymous_1273_})
        return PyJs_Object_1272_
    PyJs_anonymous_1271_._set_name(u'anonymous')
    var.put(u'requiredDirective', PyJs_anonymous_1271_)
    @Js
    def PyJs_anonymous_1276_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_1278_(scope, elm, attr, ctrl, this, arguments, var=var):
            var = Scope({u'attr':attr, u'ctrl':ctrl, u'this':this, u'scope':scope, u'elm':elm, u'arguments':arguments}, var)
            var.registers([u'attr', u'elm', u'ctrl', u'scope', u'regexp', u'patternExp'])
            if var.get(u'ctrl').neg():
                return var.get('undefined')
            var.put(u'patternExp', (var.get(u'attr').get(u'ngPattern') or var.get(u'attr').get(u'pattern')))
            @Js
            def PyJs_anonymous_1279_(regex, this, arguments, var=var):
                var = Scope({u'regex':regex, u'this':this, u'arguments':arguments}, var)
                var.registers([u'regex'])
                if (var.get(u'isString')(var.get(u'regex')) and (var.get(u'regex').get(u'length')>Js(0.0))):
                    var.put(u'regex', var.get(u'RegExp').create(((Js(u'^')+var.get(u'regex'))+Js(u'$'))))
                if (var.get(u'regex') and var.get(u'regex').get(u'test').neg()):
                    PyJsTempException = JsToPyException(var.get(u'minErr')(Js(u'ngPattern'))(Js(u'noregexp'), Js(u'Expected {0} to be a RegExp but was {1}. Element: {2}'), var.get(u'patternExp'), var.get(u'regex'), var.get(u'startingTag')(var.get(u'elm'))))
                    raise PyJsTempException
                var.put(u'regexp', (var.get(u'regex') or var.get(u'undefined')))
                var.get(u'ctrl').callprop(u'$validate')
            PyJs_anonymous_1279_._set_name(u'anonymous')
            var.get(u'attr').callprop(u'$observe', Js(u'pattern'), PyJs_anonymous_1279_)
            @Js
            def PyJs_anonymous_1280_(modelValue, viewValue, this, arguments, var=var):
                var = Scope({u'this':this, u'viewValue':viewValue, u'modelValue':modelValue, u'arguments':arguments}, var)
                var.registers([u'viewValue', u'modelValue'])
                return ((var.get(u'ctrl').callprop(u'$isEmpty', var.get(u'viewValue')) or var.get(u'isUndefined')(var.get(u'regexp'))) or var.get(u'regexp').callprop(u'test', var.get(u'viewValue')))
            PyJs_anonymous_1280_._set_name(u'anonymous')
            var.get(u'ctrl').get(u'$validators').put(u'pattern', PyJs_anonymous_1280_)
        PyJs_anonymous_1278_._set_name(u'anonymous')
        PyJs_Object_1277_ = Js({u'restrict':Js(u'A'),u'require':Js(u'?ngModel'),u'link':PyJs_anonymous_1278_})
        return PyJs_Object_1277_
    PyJs_anonymous_1276_._set_name(u'anonymous')
    var.put(u'patternDirective', PyJs_anonymous_1276_)
    @Js
    def PyJs_anonymous_1281_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_1283_(scope, elm, attr, ctrl, this, arguments, var=var):
            var = Scope({u'attr':attr, u'ctrl':ctrl, u'this':this, u'scope':scope, u'elm':elm, u'arguments':arguments}, var)
            var.registers([u'scope', u'elm', u'ctrl', u'attr', u'maxlength'])
            if var.get(u'ctrl').neg():
                return var.get('undefined')
            var.put(u'maxlength', (-Js(1.0)))
            @Js
            def PyJs_anonymous_1284_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value', u'intVal'])
                var.put(u'intVal', var.get(u'toInt')(var.get(u'value')))
                var.put(u'maxlength', ((-Js(1.0)) if var.get(u'isNaN')(var.get(u'intVal')) else var.get(u'intVal')))
                var.get(u'ctrl').callprop(u'$validate')
            PyJs_anonymous_1284_._set_name(u'anonymous')
            var.get(u'attr').callprop(u'$observe', Js(u'maxlength'), PyJs_anonymous_1284_)
            @Js
            def PyJs_anonymous_1285_(modelValue, viewValue, this, arguments, var=var):
                var = Scope({u'this':this, u'viewValue':viewValue, u'modelValue':modelValue, u'arguments':arguments}, var)
                var.registers([u'viewValue', u'modelValue'])
                return (((var.get(u'maxlength')<Js(0.0)) or var.get(u'ctrl').callprop(u'$isEmpty', var.get(u'viewValue'))) or (var.get(u'viewValue').get(u'length')<=var.get(u'maxlength')))
            PyJs_anonymous_1285_._set_name(u'anonymous')
            var.get(u'ctrl').get(u'$validators').put(u'maxlength', PyJs_anonymous_1285_)
        PyJs_anonymous_1283_._set_name(u'anonymous')
        PyJs_Object_1282_ = Js({u'restrict':Js(u'A'),u'require':Js(u'?ngModel'),u'link':PyJs_anonymous_1283_})
        return PyJs_Object_1282_
    PyJs_anonymous_1281_._set_name(u'anonymous')
    var.put(u'maxlengthDirective', PyJs_anonymous_1281_)
    @Js
    def PyJs_anonymous_1286_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_1288_(scope, elm, attr, ctrl, this, arguments, var=var):
            var = Scope({u'attr':attr, u'ctrl':ctrl, u'this':this, u'scope':scope, u'elm':elm, u'arguments':arguments}, var)
            var.registers([u'minlength', u'elm', u'ctrl', u'attr', u'scope'])
            if var.get(u'ctrl').neg():
                return var.get('undefined')
            var.put(u'minlength', Js(0.0))
            @Js
            def PyJs_anonymous_1289_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value'])
                var.put(u'minlength', (var.get(u'toInt')(var.get(u'value')) or Js(0.0)))
                var.get(u'ctrl').callprop(u'$validate')
            PyJs_anonymous_1289_._set_name(u'anonymous')
            var.get(u'attr').callprop(u'$observe', Js(u'minlength'), PyJs_anonymous_1289_)
            @Js
            def PyJs_anonymous_1290_(modelValue, viewValue, this, arguments, var=var):
                var = Scope({u'this':this, u'viewValue':viewValue, u'modelValue':modelValue, u'arguments':arguments}, var)
                var.registers([u'viewValue', u'modelValue'])
                return (var.get(u'ctrl').callprop(u'$isEmpty', var.get(u'viewValue')) or (var.get(u'viewValue').get(u'length')>=var.get(u'minlength')))
            PyJs_anonymous_1290_._set_name(u'anonymous')
            var.get(u'ctrl').get(u'$validators').put(u'minlength', PyJs_anonymous_1290_)
        PyJs_anonymous_1288_._set_name(u'anonymous')
        PyJs_Object_1287_ = Js({u'restrict':Js(u'A'),u'require':Js(u'?ngModel'),u'link':PyJs_anonymous_1288_})
        return PyJs_Object_1287_
    PyJs_anonymous_1286_._set_name(u'anonymous')
    var.put(u'minlengthDirective', PyJs_anonymous_1286_)
    if var.get(u'window').get(u'angular').get(u'bootstrap'):
        var.get(u'console').callprop(u'log', Js(u'WARNING: Tried to load angular more than once.'))
        return var.get('undefined')
    var.get(u'bindJQuery')()
    var.get(u'publishExternalAPI')(var.get(u'angular'))
    @Js
    def PyJs_anonymous_1291_(PyJsArg_2470726f76696465_, this, arguments, var=var):
        var = Scope({u'this':this, u'$provide':PyJsArg_2470726f76696465_, u'arguments':arguments}, var)
        var.registers([u'$provide', u'PLURAL_CATEGORY', u'getDecimals', u'getVF'])
        @Js
        def PyJsHoisted_getDecimals_(n, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'n':n}, var)
            var.registers([u'i', u'n'])
            var.put(u'n', (var.get(u'n')+Js(u'')))
            var.put(u'i', var.get(u'n').callprop(u'indexOf', Js(u'.')))
            return (Js(0.0) if (var.get(u'i')==(-Js(1.0))) else ((var.get(u'n').get(u'length')-var.get(u'i'))-Js(1.0)))
        PyJsHoisted_getDecimals_.func_name = u'getDecimals'
        var.put(u'getDecimals', PyJsHoisted_getDecimals_)
        @Js
        def PyJsHoisted_getVF_(n, opt_precision, this, arguments, var=var):
            var = Scope({u'this':this, u'opt_precision':opt_precision, u'arguments':arguments, u'n':n}, var)
            var.registers([u'n', u'base', u'opt_precision', u'f', u'v'])
            var.put(u'v', var.get(u'opt_precision'))
            if PyJsStrictEq(var.get(u'undefined'),var.get(u'v')):
                var.put(u'v', var.get(u'Math').callprop(u'min', var.get(u'getDecimals')(var.get(u'n')), Js(3.0)))
            var.put(u'base', var.get(u'Math').callprop(u'pow', Js(10.0), var.get(u'v')))
            var.put(u'f', (((var.get(u'n')*var.get(u'base'))|Js(0.0))%var.get(u'base')))
            PyJs_Object_1293_ = Js({u'v':var.get(u'v'),u'f':var.get(u'f')})
            return PyJs_Object_1293_
        PyJsHoisted_getVF_.func_name = u'getVF'
        var.put(u'getVF', PyJsHoisted_getVF_)
        PyJs_Object_1292_ = Js({u'ZERO':Js(u'zero'),u'ONE':Js(u'one'),u'TWO':Js(u'two'),u'FEW':Js(u'few'),u'MANY':Js(u'many'),u'OTHER':Js(u'other')})
        var.put(u'PLURAL_CATEGORY', PyJs_Object_1292_)
        pass
        pass
        PyJs_Object_1295_ = Js({u'AMPMS':Js([Js(u'AM'), Js(u'PM')]),u'DAY':Js([Js(u'Sunday'), Js(u'Monday'), Js(u'Tuesday'), Js(u'Wednesday'), Js(u'Thursday'), Js(u'Friday'), Js(u'Saturday')]),u'ERANAMES':Js([Js(u'Before Christ'), Js(u'Anno Domini')]),u'ERAS':Js([Js(u'BC'), Js(u'AD')]),u'FIRSTDAYOFWEEK':Js(6.0),u'MONTH':Js([Js(u'January'), Js(u'February'), Js(u'March'), Js(u'April'), Js(u'May'), Js(u'June'), Js(u'July'), Js(u'August'), Js(u'September'), Js(u'October'), Js(u'November'), Js(u'December')]),u'SHORTDAY':Js([Js(u'Sun'), Js(u'Mon'), Js(u'Tue'), Js(u'Wed'), Js(u'Thu'), Js(u'Fri'), Js(u'Sat')]),u'SHORTMONTH':Js([Js(u'Jan'), Js(u'Feb'), Js(u'Mar'), Js(u'Apr'), Js(u'May'), Js(u'Jun'), Js(u'Jul'), Js(u'Aug'), Js(u'Sep'), Js(u'Oct'), Js(u'Nov'), Js(u'Dec')]),u'WEEKENDRANGE':Js([Js(5.0), Js(6.0)]),u'fullDate':Js(u'EEEE, MMMM d, y'),u'longDate':Js(u'MMMM d, y'),u'medium':Js(u'MMM d, y h:mm:ss a'),u'mediumDate':Js(u'MMM d, y'),u'mediumTime':Js(u'h:mm:ss a'),u'short':Js(u'M/d/yy h:mm a'),u'shortDate':Js(u'M/d/yy'),u'shortTime':Js(u'h:mm a')})
        PyJs_Object_1297_ = Js({u'gSize':Js(3.0),u'lgSize':Js(3.0),u'maxFrac':Js(3.0),u'minFrac':Js(0.0),u'minInt':Js(1.0),u'negPre':Js(u'-'),u'negSuf':Js(u''),u'posPre':Js(u''),u'posSuf':Js(u'')})
        PyJs_Object_1298_ = Js({u'gSize':Js(3.0),u'lgSize':Js(3.0),u'maxFrac':Js(2.0),u'minFrac':Js(2.0),u'minInt':Js(1.0),u'negPre':Js(u'-\xa4'),u'negSuf':Js(u''),u'posPre':Js(u'\xa4'),u'posSuf':Js(u'')})
        PyJs_Object_1296_ = Js({u'CURRENCY_SYM':Js(u'$'),u'DECIMAL_SEP':Js(u'.'),u'GROUP_SEP':Js(u','),u'PATTERNS':Js([PyJs_Object_1297_, PyJs_Object_1298_])})
        @Js
        def PyJs_anonymous_1299_(n, opt_precision, this, arguments, var=var):
            var = Scope({u'this':this, u'opt_precision':opt_precision, u'arguments':arguments, u'n':n}, var)
            var.registers([u'i', u'opt_precision', u'vf', u'n'])
            var.put(u'i', (var.get(u'n')|Js(0.0)))
            var.put(u'vf', var.get(u'getVF')(var.get(u'n'), var.get(u'opt_precision')))
            if ((var.get(u'i')==Js(1.0)) and (var.get(u'vf').get(u'v')==Js(0.0))):
                return var.get(u'PLURAL_CATEGORY').get(u'ONE')
            return var.get(u'PLURAL_CATEGORY').get(u'OTHER')
        PyJs_anonymous_1299_._set_name(u'anonymous')
        PyJs_Object_1294_ = Js({u'DATETIME_FORMATS':PyJs_Object_1295_,u'NUMBER_FORMATS':PyJs_Object_1296_,u'id':Js(u'en-us'),u'pluralCat':PyJs_anonymous_1299_})
        var.get(u'$provide').callprop(u'value', Js(u'$locale'), PyJs_Object_1294_)
    PyJs_anonymous_1291_._set_name(u'anonymous')
    var.get(u'angular').callprop(u'module', Js(u'ngLocale'), Js([]), Js([Js(u'$provide'), PyJs_anonymous_1291_]))
    @Js
    def PyJs_anonymous_1300_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        var.get(u'angularInit')(var.get(u'document'), var.get(u'bootstrap'))
    PyJs_anonymous_1300_._set_name(u'anonymous')
    var.get(u'jqLite')(var.get(u'document')).callprop(u'ready', PyJs_anonymous_1300_)
PyJs_anonymous_0_._set_name(u'anonymous')
PyJs_anonymous_0_(var.get(u'window'), var.get(u'document'))
def PyJs_LONG_1301_(var=var):
    return (var.get(u'window').get(u'angular').callprop(u'$$csp').get(u'noInlineStyle').neg() and var.get(u'window').get(u'angular').callprop(u'element', var.get(u'document').get(u'head')).callprop(u'prepend', Js(u'<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>')))
PyJs_LONG_1301_()
pass
