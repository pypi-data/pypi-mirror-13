# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CreateReceiptRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CreateReceiptRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'payer_bank_code': 'str',
            'payer_banknote_id': 'str'
        }

        self.attribute_map = {
            'description': 'description',
            'payer_bank_code': 'payerBankCode',
            'payer_banknote_id': 'payerBanknoteId'
        }

        self._description = None
        self._payer_bank_code = None
        self._payer_banknote_id = None

    @property
    def description(self):
        """
        Gets the description of this CreateReceiptRequest.


        :return: The description of this CreateReceiptRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CreateReceiptRequest.


        :param description: The description of this CreateReceiptRequest.
        :type: str
        """
        self._description = description

    @property
    def payer_bank_code(self):
        """
        Gets the payer_bank_code of this CreateReceiptRequest.


        :return: The payer_bank_code of this CreateReceiptRequest.
        :rtype: str
        """
        return self._payer_bank_code

    @payer_bank_code.setter
    def payer_bank_code(self, payer_bank_code):
        """
        Sets the payer_bank_code of this CreateReceiptRequest.


        :param payer_bank_code: The payer_bank_code of this CreateReceiptRequest.
        :type: str
        """
        self._payer_bank_code = payer_bank_code

    @property
    def payer_banknote_id(self):
        """
        Gets the payer_banknote_id of this CreateReceiptRequest.


        :return: The payer_banknote_id of this CreateReceiptRequest.
        :rtype: str
        """
        return self._payer_banknote_id

    @payer_banknote_id.setter
    def payer_banknote_id(self, payer_banknote_id):
        """
        Sets the payer_banknote_id of this CreateReceiptRequest.


        :param payer_banknote_id: The payer_banknote_id of this CreateReceiptRequest.
        :type: str
        """
        self._payer_banknote_id = payer_banknote_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
