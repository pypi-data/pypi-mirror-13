
# coding: utf-8

"""
AccountsApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class BankNoteService(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, bank_code='bofa', env='prod', api_client=None):
        self.bank_code = bank_code
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if env == 'prod':
                env_str = ''
            else:
                env_str = env + '.'
            config.api_client = ApiClient( host='http://' + bank_code + '.banknote.api.' + env_str + 'token.io')
            self.api_client = config.api_client

    def get_account(self, account_id, **kwargs):
        """
        Get account
        Returns an account.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Unique id for an account. (required)
        :return: GetAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'account_id' is set
        if account_id is None:
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_route`")

        all_params = ['account_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/accounts/{accountId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GetAccountResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_account(self, account_id, **kwargs):
        """
        Delete account
        Deletes an account.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_account(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Unique id for an account. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'account_id' is set
        if account_id is None:
            raise ValueError("Missing the required parameter `account_id` when calling `delete_account_route`")

        all_params = ['account_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_account_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/accounts/{accountId}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def patch_account(self, account_id, request, **kwargs):
        """
        Patch account
        Partially updates an account.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_account(account_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Unique id for an account. (required)
        :param PatchAccountRequest request:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'account_id' is set
        if account_id is None:
            raise ValueError("Missing the required parameter `account_id` when calling `patch_account_route`")
        # verify the required parameter 'request' is set
        if request is None:
            raise ValueError("Missing the required parameter `request` when calling `patch_account_route`")

        all_params = ['account_id', 'request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_account_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/accounts/{accountId}'.replace('{format}', 'json')
        method = 'PATCH'

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_balance(self, account_id, **kwargs):
        """
        Get balance
        Returns balance.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_balance(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Unique id for an account. (required)
        :return: GetBalanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'account_id' is set
        if account_id is None:
            raise ValueError("Missing the required parameter `account_id` when calling `get_balance_route`")

        all_params = ['account_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_balance_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/accounts/{accountId}/balance'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GetBalanceResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_account_payments(self, account_id, **kwargs):
        """
        Get payments
        Returns payments.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_payments(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Unique id for an account. (required)
        :return: GetPaymentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'account_id' is set
        if account_id is None:
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_payments_route`")

        all_params = ['account_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_payments_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/accounts/{accountId}/payments'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GetPaymentsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_payment(self, account_id, request, **kwargs):
        """
        Create Payment
        Creates a payment.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_payment(account_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Unique id for an account. (required)
        :param CreatePaymentRequest request:  (required)
        :return: CreatePaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'account_id' is set
        if account_id is None:
            raise ValueError("Missing the required parameter `account_id` when calling `create_payment_route`")
        # verify the required parameter 'request' is set
        if request is None:
            raise ValueError("Missing the required parameter `request` when calling `create_payment_route`")

        all_params = ['account_id', 'request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_payment_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/accounts/{accountId}/payments'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='CreatePaymentResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_receipts(self, account_id, **kwargs):
        """
        Get receipts
        Returns receipts.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_receipts(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Unique id for an account. (required)
        :return: GetReceiptsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'account_id' is set
        if account_id is None:
            raise ValueError("Missing the required parameter `account_id` when calling `get_receipts_route`")

        all_params = ['account_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_receipts_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/accounts/{accountId}/receipts'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GetReceiptsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_receipt(self, account_id, request, **kwargs):
        """
        Deposit Banknote
        Creates a receipt.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_receipt(account_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Unique id for an account. (required)
        :param CreateReceiptRequest request:  (required)
        :return: CreateReceiptResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'account_id' is set
        if account_id is None:
            raise ValueError("Missing the required parameter `account_id` when calling `create_receipt_route`")
        # verify the required parameter 'request' is set
        if request is None:
            raise ValueError("Missing the required parameter `request` when calling `create_receipt_route`")

        all_params = ['account_id', 'request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_receipt_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/accounts/{accountId}/receipts'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='CreateReceiptResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_tokens(self, account_id, **kwargs):
        """
        Get tokens
        Returns tokens.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tokens(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Unique id for an account. (required)
        :return: GetTokensResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'account_id' is set
        if account_id is None:
            raise ValueError("Missing the required parameter `account_id` when calling `get_tokens_route`")

        all_params = ['account_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tokens_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/accounts/{accountId}/tokens'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GetTokensResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_token(self, account_id, request, **kwargs):
        """
        Create token
        Creates a token.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_token(account_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Unique id for an account. (required)
        :param CreateTokenRequest request:  (required)
        :return: CreateTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'account_id' is set
        if account_id is None:
            raise ValueError("Missing the required parameter `account_id` when calling `create_token_route`")
        # verify the required parameter 'request' is set
        if request is None:
            raise ValueError("Missing the required parameter `request` when calling `create_token_route`")

        all_params = ['account_id', 'request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_token_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/accounts/{accountId}/tokens'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='CreateTokenResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response


    def get_banknotes(self, **kwargs):
        """
        Get banknotes
        Returns a list of banknotes.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_banknotes(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: GetBanknotesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_banknotes_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/banknotes'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GetBanknotesResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_banknote(self, banknote_id, **kwargs):
        """
        Get banknote
        Returns a banknote.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_banknote(banknote_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str banknote_id: Unique id for a banknote. (required)
        :return: GetBanknoteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'banknote_id' is set
        if banknote_id is None:
            raise ValueError("Missing the required parameter `banknote_id` when calling `get_banknote_route`")

        all_params = ['banknote_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_banknote_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/banknotes/{banknoteId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'banknote_id' in params:
            path_params['banknoteId'] = params['banknote_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GetBanknoteResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def redeem_banknote(self, banknote_id, request, **kwargs):
        """
        Redeem banknote
        Redeems a banknote.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.redeem_banknote(banknote_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str banknote_id: Unique id for a banknote. (required)
        :param RedeemBanknoteRequest request:  (required)
        :return: RedeemBanknoteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'banknote_id' is set
        if banknote_id is None:
            raise ValueError("Missing the required parameter `banknote_id` when calling `redeem_banknote_route`")
        # verify the required parameter 'request' is set
        if request is None:
            raise ValueError("Missing the required parameter `request` when calling `redeem_banknote_route`")

        all_params = ['banknote_id', 'request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method redeem_banknote_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/banknotes/{banknoteId}/redeem'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'banknote_id' in params:
            path_params['banknoteId'] = params['banknote_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='RedeemBanknoteResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response


    def get_charge(self, charge_id, **kwargs):
        """
        Get charge
        Get a charge.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_charge(charge_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str charge_id: Unique id for a charge. (required)
        :return: GetChargeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'charge_id' is set
        if charge_id is None:
            raise ValueError("Missing the required parameter `charge_id` when calling `get_charge_route`")

        all_params = ['charge_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_charge_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/charges/{chargeId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'charge_id' in params:
            path_params['chargeId'] = params['charge_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GetChargeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response



    def get_accounts(self, client_id, **kwargs):
        """
        Get accounts
        Returns the list of accounts sorted by name.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_accounts(client_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Unique id for a client. (required)
        :return: GetAccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'client_id' is set
        if client_id is None:
            raise ValueError("Missing the required parameter `client_id` when calling `get_accounts_route`")

        all_params = ['client_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_accounts_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/clients/{clientId}/accounts'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GetAccountsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_account(self, client_id, request, **kwargs):
        """
        Create account
        Creates an account.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_account(client_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Unique id for a client. (required)
        :param CreateAccountRequest request:  (required)
        :return: CreateAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'client_id' is set
        if client_id is None:
            raise ValueError("Missing the required parameter `client_id` when calling `create_account_route`")
        # verify the required parameter 'request' is set
        if request is None:
            raise ValueError("Missing the required parameter `request` when calling `create_account_route`")

        all_params = ['client_id', 'request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/clients/{clientId}/accounts'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='CreateAccountResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response



    def get_accounts(self, member_id, **kwargs):
        """
        Get accounts
        Returns the list of accounts sorted by name.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_accounts(member_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str member_id: Unique id for a member. (required)
        :return: GetAccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'member_id' is set
        if member_id is None:
            raise ValueError("Missing the required parameter `member_id` when calling `get_accounts_route`")

        all_params = ['member_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_accounts_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/members/{memberId}/accounts'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'member_id' in params:
            path_params['memberId'] = params['member_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GetAccountsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response


    def get_payment(self, payment_id, **kwargs):
        """
        Get payment
        Get a payment.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_payment(payment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str payment_id: Unique id for a payment. (required)
        :return: GetPaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'payment_id' is set
        if payment_id is None:
            raise ValueError("Missing the required parameter `payment_id` when calling `get_payment_route`")

        all_params = ['payment_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/payments/{paymentId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GetPaymentResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response


    def get_receipt(self, receipt_id, **kwargs):
        """
        Get receipt
        Returns a receipt.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_receipt(receipt_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str receipt_id: Unique id for a receipt. (required)
        :return: GetReceiptResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'receipt_id' is set
        if receipt_id is None:
            raise ValueError("Missing the required parameter `receipt_id` when calling `get_receipt_route`")

        all_params = ['receipt_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_receipt_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/receipts/{receiptId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'receipt_id' in params:
            path_params['receiptId'] = params['receipt_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GetReceiptResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_token(self, token_id, **kwargs):
        """
        Get token
        Get a token.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_token(token_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token_id: Unique id for a token. (required)
        :return: GetTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'token_id' is set
        if token_id is None:
            raise ValueError("Missing the required parameter `token_id` when calling `get_token_route`")

        all_params = ['token_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_token_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/tokens/{tokenId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'token_id' in params:
            path_params['tokenId'] = params['token_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GetTokenResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_token(self, token_id, **kwargs):
        """
        Revoke token
        Deletes an token.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_token(token_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token_id: Unique id for a token. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'token_id' is set
        if token_id is None:
            raise ValueError("Missing the required parameter `token_id` when calling `delete_token_route`")

        all_params = ['token_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_token_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/tokens/{tokenId}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'token_id' in params:
            path_params['tokenId'] = params['token_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def patch_token(self, token_id, request, **kwargs):
        """
        Patch token
        Updates a token.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_token(token_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token_id: Unique id for a token. (required)
        :param PatchTokenRequest request:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'token_id' is set
        if token_id is None:
            raise ValueError("Missing the required parameter `token_id` when calling `patch_token_route`")
        # verify the required parameter 'request' is set
        if request is None:
            raise ValueError("Missing the required parameter `request` when calling `patch_token_route`")

        all_params = ['token_id', 'request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_token_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/tokens/{tokenId}'.replace('{format}', 'json')
        method = 'PATCH'

        path_params = {}
        if 'token_id' in params:
            path_params['tokenId'] = params['token_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_charges(self, token_id, **kwargs):
        """
        Get charges
        Get charges.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_charges(token_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token_id: Unique id for a token. (required)
        :return: GetChargesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'token_id' is set
        if token_id is None:
            raise ValueError("Missing the required parameter `token_id` when calling `get_charges_route`")

        all_params = ['token_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_charges_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/tokens/{tokenId}/charges'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'token_id' in params:
            path_params['tokenId'] = params['token_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='GetChargesResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_charge(self, token_id, request, **kwargs):
        """
        Create charge
        Create a charge.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_charge(token_id, request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token_id: Unique id for a token. (required)
        :param CreateChargeRequest request:  (required)
        :return: CreateChargeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'token_id' is set
        if token_id is None:
            raise ValueError("Missing the required parameter `token_id` when calling `create_charge_route`")
        # verify the required parameter 'request' is set
        if request is None:
            raise ValueError("Missing the required parameter `request` when calling `create_charge_route`")

        all_params = ['token_id', 'request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_charge_route" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/tokens/{tokenId}/charges'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'token_id' in params:
            path_params['tokenId'] = params['token_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='CreateChargeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
